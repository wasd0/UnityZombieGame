From b3682490a13ee27b9897da5dfcfb55790c65ccb9 Mon Sep 17 00:00:00 2001
From: wasd0 <kirshvedov@bk.ru>
Date: Fri, 11 Nov 2022 12:20:40 +0300
Subject: [PATCH] Add new scripts to my project

---
 .idea/.idea.First/.idea/contentModel.xml      |  496 +++
 .idea/.idea.First/.idea/indexLayout.xml       |   36 +
 .idea/.idea.First/.idea/modules.xml           |    8 +
 .../.idea/projectSettingsUpdater.xml          |    6 +
 .idea/.idea.First/.idea/workspace.xml         |  197 +
 .idea/.idea.First/riderModule.iml             |    7 +
 Assets/Adaptive Performance.meta              |    8 +
 .../AdaptivePerformanceGeneralSettings.asset  |   76 +
 ...ptivePerformanceGeneralSettings.asset.meta |    8 +
 Assets/Adaptive Performance/Provider.meta     |    8 +
 .../Samsung Android Provider Loader.asset     |   14 +
 ...Samsung Android Provider Loader.asset.meta |    8 +
 .../Provider/Simulator Provider Loader.asset  |   14 +
 .../Simulator Provider Loader.asset.meta      |    8 +
 Assets/Adaptive Performance/Settings.meta     |    8 +
 .../Samsung Android Provider Settings.asset   |  318 ++
 ...msung Android Provider Settings.asset.meta |    8 +
 .../Simulator Provider Settings.asset         |  315 ++
 .../Simulator Provider Settings.asset.meta    |    8 +
 Assets/Input System.meta                      |    8 +
 .../InputSystem.inputsettings.asset           |   38 +
 .../InputSystem.inputsettings.asset.meta      |    8 +
 Assets/Input System/PlayerInput.cs            |  225 ++
 Assets/Input System/PlayerInput.cs.meta       |   11 +
 Assets/Input System/PlayerInput.inputactions  |   89 +
 .../PlayerInput.inputactions.meta             |   14 +
 Assets/Materials.meta                         |    8 +
 Assets/Materials/TerrainMat.mat               |   80 +
 Assets/Materials/TerrainMat.mat.meta          |    8 +
 Assets/Prefabs.meta                           |    8 +
 Assets/Prefabs/Main Camera.prefab             |  101 +
 Assets/Prefabs/Main Camera.prefab.meta        |    7 +
 Assets/Resources.meta                         |    8 +
 Assets/Resources/Player.prefab                |  130 +
 Assets/Resources/Player.prefab.meta           |    7 +
 Assets/Resources/ProjectContext.prefab        |   64 +
 Assets/Resources/ProjectContext.prefab.meta   |    7 +
 Assets/Scenes.meta                            |    8 +
 Assets/Scenes/Level1.unity                    |  508 +++
 Assets/Scenes/Level1.unity.meta               |    7 +
 Assets/Scripts.meta                           |    8 +
 Assets/Scripts/CameraFollower.cs              |   31 +
 Assets/Scripts/CameraFollower.cs.meta         |   11 +
 Assets/Scripts/Entity.cs                      |    5 +
 Assets/Scripts/Entity.cs.meta                 |    3 +
 Assets/Scripts/Infrastructure.meta            |    3 +
 .../Infrastructure/LocationInstaller.cs       |   40 +
 .../Infrastructure/LocationInstaller.cs.meta  |    3 +
 Assets/Scripts/PlayerEntity.cs                |    6 +
 Assets/Scripts/PlayerEntity.cs.meta           |    3 +
 Assets/Scripts/PlayerFactory.cs               |   27 +
 Assets/Scripts/PlayerFactory.cs.meta          |    3 +
 Assets/Scripts/SpawnPosition.cs               |   17 +
 Assets/Scripts/SpawnPosition.cs.meta          |    3 +
 Assets/Source.meta                            |    8 +
 Assets/Source/.gitignore                      |    2 +
 Assets/Source/Editor.meta                     |    5 +
 Assets/Source/Editor/EditorStaticInstaller.cs |   30 +
 .../Editor/EditorStaticInstaller.cs.meta      |   12 +
 Assets/Source/Editor/EditorWindow.meta        |    9 +
 .../EditorWindow/ZenjectEditorWindow.cs       |  138 +
 .../EditorWindow/ZenjectEditorWindow.cs.meta  |   13 +
 Assets/Source/Editor/Editors.meta             |    9 +
 .../Editors/BaseCompositeInstallerEditor.cs   |   84 +
 .../BaseCompositeInstallerEditor.cs.meta      |   12 +
 .../CompositeInstallerEditorDescriptions.cs   |    8 +
 ...mpositeInstallerEditorDescriptions.cs.meta |   12 +
 .../Editors/CompositeMonoInstallerEditor.cs   |   11 +
 .../CompositeMonoInstallerEditor.cs.meta      |   12 +
 ...ompositeScriptableObjectInstallerEditor.cs |   12 +
 ...iteScriptableObjectInstallerEditor.cs.meta |   12 +
 Assets/Source/Editor/Editors/ContextEditor.cs |   67 +
 .../Editor/Editors/ContextEditor.cs.meta      |   12 +
 .../Editor/Editors/GameObjectContextEditor.cs |   29 +
 .../Editors/GameObjectContextEditor.cs.meta   |   12 +
 .../Editor/Editors/InstallerPropertyInfo.cs   |   14 +
 .../Editors/InstallerPropertyInfo.cs.meta     |   11 +
 .../Editor/Editors/ProjectContextEditor.cs    |   40 +
 .../Editors/ProjectContextEditor.cs.meta      |   12 +
 .../Editor/Editors/RunnableContextEditor.cs   |   29 +
 .../Editors/RunnableContextEditor.cs.meta     |    3 +
 .../Editor/Editors/SceneContextEditor.cs      |   38 +
 .../Editor/Editors/SceneContextEditor.cs.meta |   12 +
 .../Editors/SceneDecoratorContextEditor.cs    |   72 +
 .../SceneDecoratorContextEditor.cs.meta       |   12 +
 Assets/Source/Editor/MemoryPoolMonitor.meta   |   10 +
 .../Editor/MemoryPoolMonitor/Editor.meta      |   10 +
 .../MemoryPoolMonitor/Editor/DebugWindow.meta |   10 +
 .../Editor/DebugWindow/InPlaceStableSort.cs   |  192 +
 .../DebugWindow/InPlaceStableSort.cs.meta     |   13 +
 .../Editor/DebugWindow/MpmView.cs             |  556 +++
 .../Editor/DebugWindow/MpmView.cs.meta        |   13 +
 .../Editor/DebugWindow/MpmWindow.cs           |   27 +
 .../Editor/DebugWindow/MpmWindow.cs.meta      |   13 +
 .../Editor/MpmSettingsInstaller.cs            |   18 +
 .../Editor/MpmSettingsInstaller.cs.meta       |   13 +
 .../MemoryPoolMonitor/Editor/Resources.meta   |   10 +
 .../Editor/Resources/Installers.meta          |   10 +
 .../Installers/MpmSettingsInstaller.asset     |  723 ++++
 .../MpmSettingsInstaller.asset.meta           |   10 +
 .../MemoryPoolMonitor/Editor/TriangleDown.png |  Bin 0 -> 307 bytes
 .../Editor/TriangleDown.png.meta              |   98 +
 .../MemoryPoolMonitor/Editor/TriangleUp.png   |  Bin 0 -> 298 bytes
 .../Editor/TriangleUp.png.meta                |   98 +
 .../Editor/Zenject-PoolMonitor-Editor.asmdef  |   11 +
 .../Zenject-PoolMonitor-Editor.asmdef.meta    |    9 +
 Assets/Source/Editor/ObjectGraphVisualizer.cs |  125 +
 .../Editor/ObjectGraphVisualizer.cs.meta      |   12 +
 Assets/Source/Editor/ReflectionBaking.meta    |   10 +
 .../Editor/ReflectionBaking/Common.meta       |   10 +
 .../Common/CecilExtensions.cs                 |  382 ++
 .../Common/CecilExtensions.cs.meta            |   13 +
 .../Common/ReflectionBakingModuleEditor.cs    |  758 ++++
 .../ReflectionBakingModuleEditor.cs.meta      |   13 +
 .../Source/Editor/ReflectionBaking/Lib.meta   |   10 +
 ...enject.ReflectionBaking.Mono.Cecil.Mdb.dll |  Bin 0 -> 44032 bytes
 ...t.ReflectionBaking.Mono.Cecil.Mdb.dll.meta |   32 +
 ...enject.ReflectionBaking.Mono.Cecil.Pdb.dll |  Bin 0 -> 79872 bytes
 ...t.ReflectionBaking.Mono.Cecil.Pdb.dll.meta |   32 +
 ...ject.ReflectionBaking.Mono.Cecil.Rocks.dll |  Bin 0 -> 23552 bytes
 ...ReflectionBaking.Mono.Cecil.Rocks.dll.meta |   32 +
 .../Zenject.ReflectionBaking.Mono.Cecil.dll   |  Bin 0 -> 269312 bytes
 ...nject.ReflectionBaking.Mono.Cecil.dll.meta |   32 +
 .../Source/Editor/ReflectionBaking/Unity.meta |   10 +
 .../Unity/AssemblyPathRegistry.cs             |   66 +
 .../Unity/AssemblyPathRegistry.cs.meta        |   13 +
 .../Unity/ReflectionBakingBuildObserver.cs    |   94 +
 .../ReflectionBakingBuildObserver.cs.meta     |   13 +
 .../Unity/ReflectionBakingInternalUtil.cs     |   76 +
 .../ReflectionBakingInternalUtil.cs.meta      |   13 +
 .../Unity/ReflectionBakingMenuItems.cs        |   24 +
 .../Unity/ReflectionBakingMenuItems.cs.meta   |   13 +
 .../Unity/UnityAssemblyResolver.cs            |   93 +
 .../Unity/UnityAssemblyResolver.cs.meta       |   13 +
 .../Unity/ZenjectReflectionBakingSettings.cs  |   56 +
 .../ZenjectReflectionBakingSettings.cs.meta   |   13 +
 .../ZenjectReflectionBakingSettingsEditor.cs  |  236 ++
 ...jectReflectionBakingSettingsEditor.cs.meta |   13 +
 .../Zenject-ReflectionBaking-Editor.asmdef    |   11 +
 ...enject-ReflectionBaking-Editor.asmdef.meta |    9 +
 .../Zenject-ReflectionBaking.csproj.meta      |    9 +
 Assets/Source/Editor/SceneParentLoading.meta  |   10 +
 .../DefaultSceneContractConfig.cs             |   22 +
 .../DefaultSceneContractConfig.cs.meta        |   13 +
 .../SceneParentAutomaticLoader.cs             |  326 ++
 .../SceneParentAutomaticLoader.cs.meta        |   13 +
 .../Source/Editor/TestBuildAssemblyFilter.cs  |   41 +
 .../Editor/TestBuildAssemblyFilter.cs.meta    |   11 +
 Assets/Source/Editor/TestFramework.meta       |   10 +
 .../Editor/TestFramework/SceneTestFixture.cs  |   97 +
 .../TestFramework/SceneTestFixture.cs.meta    |   13 +
 .../SceneTestFixtureSceneReference.cs         |   14 +
 .../SceneTestFixtureSceneReference.cs.meta    |   13 +
 .../TestFramework/ValidateOnlyAttribute.cs    |    9 +
 .../ValidateOnlyAttribute.cs.meta             |   12 +
 .../Zenject-TestFramework.asmdef              |   19 +
 .../Zenject-TestFramework.asmdef.meta         |    9 +
 .../ZenjectIntegrationTestFixture.cs          |  152 +
 .../ZenjectIntegrationTestFixture.cs.meta     |   12 +
 .../Editor/TestFramework/ZenjectTestUtil.cs   |   39 +
 .../TestFramework/ZenjectTestUtil.cs.meta     |   13 +
 .../TestFramework/ZenjectUnitTestFixture.cs   |   26 +
 .../ZenjectUnitTestFixture.cs.meta            |   13 +
 .../Source/Editor/UnityInspectorListEditor.cs |  103 +
 .../Editor/UnityInspectorListEditor.cs.meta   |   12 +
 Assets/Source/Editor/ZenMenuItems.cs          |  350 ++
 Assets/Source/Editor/ZenMenuItems.cs.meta     |   12 +
 Assets/Source/Editor/ZenUnityEditorUtil.cs    |  352 ++
 .../Source/Editor/ZenUnityEditorUtil.cs.meta  |   12 +
 Assets/Source/Editor/Zenject-Editor.asmdef    |   10 +
 .../Source/Editor/Zenject-Editor.asmdef.meta  |    9 +
 Assets/Source/Runtime.meta                    |    9 +
 Assets/Source/Runtime/AnimatorInterfaces.meta |    9 +
 .../AnimatorIkHandlerManager.cs               |   28 +
 .../AnimatorIkHandlerManager.cs.meta          |   12 +
 .../AnimatorInterfaces/AnimatorInstaller.cs   |   21 +
 .../AnimatorInstaller.cs.meta                 |   12 +
 .../AnimatorMoveHandlerManager.cs             |   28 +
 .../AnimatorMoveHandlerManager.cs.meta        |   12 +
 .../AnimatorInterfaces/IAnimatorIkHandler.cs  |    8 +
 .../IAnimatorIkHandler.cs.meta                |   12 +
 .../IAnimatorMoveHandler.cs                   |    8 +
 .../IAnimatorMoveHandler.cs.meta              |   12 +
 Assets/Source/Runtime/Async.meta              |    8 +
 .../Source/Runtime/Async/AddressableInject.cs |   25 +
 .../Runtime/Async/AddressableInject.cs.meta   |    3 +
 .../Async/AsyncDiContainerExtensions.cs       |   42 +
 .../Async/AsyncDiContainerExtensions.cs.meta  |    3 +
 Assets/Source/Runtime/Async/AsyncInject.cs    |  138 +
 .../Source/Runtime/Async/AsyncInject.cs.meta  |    3 +
 Assets/Source/Runtime/Async/Binders.meta      |    3 +
 .../Binders/AddressableFromBinderGeneric.cs   |   43 +
 .../AddressableFromBinderGeneric.cs.meta      |    3 +
 .../Async/Binders/AsyncFromBinderBase.cs      |   27 +
 .../Async/Binders/AsyncFromBinderBase.cs.meta |    3 +
 .../Async/Binders/AsyncFromBinderGeneric.cs   |   53 +
 .../Binders/AsyncFromBinderGeneric.cs.meta    |    3 +
 .../ConcreteAddressableBinderGeneric.cs       |   23 +
 .../ConcreteAddressableBinderGeneric.cs.meta  |    3 +
 .../ConcreteAddressableIdBinderGeneric.cs     |   22 +
 ...ConcreteAddressableIdBinderGeneric.cs.meta |    3 +
 .../Binders/ConcreteAsyncBinderGeneric.cs     |   26 +
 .../ConcreteAsyncBinderGeneric.cs.meta        |    3 +
 .../Binders/ConcreteAsyncIdBinderGeneric.cs   |   19 +
 .../ConcreteAsyncIdBinderGeneric.cs.meta      |    3 +
 .../Runtime/Async/Extenject-Async.asmdef      |   23 +
 .../Runtime/Async/Extenject-Async.asmdef.meta |    7 +
 Assets/Source/Runtime/Async/Providers.meta    |    3 +
 .../Providers/AddressableProviderSimple.cs    |   52 +
 .../AddressableProviderSimple.cs.meta         |    3 +
 .../Providers/AsyncMethodProviderSimple.cs    |   62 +
 .../AsyncMethodProviderSimple.cs.meta         |    3 +
 Assets/Source/Runtime/Binding.meta            |    9 +
 Assets/Source/Runtime/Binding/BindInfo.meta   |    9 +
 .../Runtime/Binding/BindInfo/BindInfo.cs      |  100 +
 .../Runtime/Binding/BindInfo/BindInfo.cs.meta |   12 +
 .../Runtime/Binding/BindInfo/BindStatement.cs |   83 +
 .../Binding/BindInfo/BindStatement.cs.meta    |   13 +
 .../Binding/BindInfo/FactoryBindInfo.cs       |   31 +
 .../Binding/BindInfo/FactoryBindInfo.cs.meta  |   12 +
 .../BindInfo/GameObjectCreationParameters.cs  |   93 +
 .../GameObjectCreationParameters.cs.meta      |   12 +
 .../Binding/BindInfo/MemoryPoolBindInfo.cs    |   35 +
 .../BindInfo/MemoryPoolBindInfo.cs.meta       |   12 +
 Assets/Source/Runtime/Binding/Binders.meta    |    9 +
 .../Binders/ArgConditionCopyNonLazyBinder.cs  |  106 +
 .../ArgConditionCopyNonLazyBinder.cs.meta     |   12 +
 .../Binding/Binders/ConcreteBinders.meta      |    9 +
 .../ConcreteBinders/ConcreteBinderGeneric.cs  |   78 +
 .../ConcreteBinderGeneric.cs.meta             |   12 +
 .../ConcreteBinderNonGeneric.cs               |   81 +
 .../ConcreteBinderNonGeneric.cs.meta          |   12 +
 .../ConcreteIdBinderGeneric.cs                |   20 +
 .../ConcreteIdBinderGeneric.cs.meta           |   12 +
 .../ConcreteIdBinderNonGeneric.cs             |   20 +
 .../ConcreteIdBinderNonGeneric.cs.meta        |   12 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   17 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Binders/ConditionCopyNonLazyBinder.cs     |   41 +
 .../ConditionCopyNonLazyBinder.cs.meta        |   12 +
 .../Runtime/Binding/Binders/Conventions.meta  |    9 +
 .../ConventionAssemblySelectionBinder.cs      |   72 +
 .../ConventionAssemblySelectionBinder.cs.meta |   12 +
 .../Binders/Conventions/ConventionBindInfo.cs |   77 +
 .../Conventions/ConventionBindInfo.cs.meta    |   12 +
 .../ConventionFilterTypesBinder.cs            |  139 +
 .../ConventionFilterTypesBinder.cs.meta       |   12 +
 .../ConventionSelectTypesBinder.cs            |   52 +
 .../ConventionSelectTypesBinder.cs.meta       |   12 +
 .../Binding/Binders/CopyNonLazyBinder.cs      |   66 +
 .../Binding/Binders/CopyNonLazyBinder.cs.meta |   12 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   24 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Runtime/Binding/Binders/Factory.meta      |    9 +
 .../FactoryArgumentsToChoiceBinder.meta       |   10 +
 .../FactoryArgumentsToChoiceBinder0.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder0.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder1.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder1.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder10.cs       |   71 +
 .../FactoryArgumentsToChoiceBinder10.cs.meta  |   13 +
 .../FactoryArgumentsToChoiceBinder2.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder2.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder3.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder3.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder4.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder4.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder5.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder5.cs.meta   |   13 +
 .../FactoryArgumentsToChoiceBinder6.cs        |   71 +
 .../FactoryArgumentsToChoiceBinder6.cs.meta   |   13 +
 .../Binders/Factory/FactoryFromBinder.meta    |    9 +
 .../FactoryFromBinder/FactoryFromBinder0.cs   |  182 +
 .../FactoryFromBinder0.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder1.cs   |  140 +
 .../FactoryFromBinder1.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder10.cs  |   62 +
 .../FactoryFromBinder10.cs.meta               |   13 +
 .../FactoryFromBinder/FactoryFromBinder2.cs   |  141 +
 .../FactoryFromBinder2.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder3.cs   |  141 +
 .../FactoryFromBinder3.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder4.cs   |  145 +
 .../FactoryFromBinder4.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder5.cs   |  146 +
 .../FactoryFromBinder5.cs.meta                |   12 +
 .../FactoryFromBinder/FactoryFromBinder6.cs   |  148 +
 .../FactoryFromBinder6.cs.meta                |   13 +
 .../FactoryFromBinder/SubContainerBinder.meta |    9 +
 .../FactorySubContainerBinder0.cs             |  143 +
 .../FactorySubContainerBinder0.cs.meta        |   12 +
 .../FactorySubContainerBinder1.cs             |   97 +
 .../FactorySubContainerBinder1.cs.meta        |   12 +
 .../FactorySubContainerBinder10.cs            |  113 +
 .../FactorySubContainerBinder10.cs.meta       |   13 +
 .../FactorySubContainerBinder2.cs             |   97 +
 .../FactorySubContainerBinder2.cs.meta        |   12 +
 .../FactorySubContainerBinder3.cs             |   98 +
 .../FactorySubContainerBinder3.cs.meta        |   12 +
 .../FactorySubContainerBinder4.cs             |  116 +
 .../FactorySubContainerBinder4.cs.meta        |   12 +
 .../FactorySubContainerBinder5.cs             |  115 +
 .../FactorySubContainerBinder5.cs.meta        |   12 +
 .../FactorySubContainerBinder6.cs             |  115 +
 .../FactorySubContainerBinder6.cs.meta        |   13 +
 .../FactorySubContainerBinderBase.cs          |  179 +
 .../FactorySubContainerBinderBase.cs.meta     |   12 +
 .../FactorySubContainerBinderWithParams.cs    |   96 +
 ...actorySubContainerBinderWithParams.cs.meta |   12 +
 .../Factory/FactoryFromBinder/Untyped.meta    |   10 +
 .../Untyped/FactoryFromBinderUntyped.cs       |   16 +
 .../Untyped/FactoryFromBinderUntyped.cs.meta  |   13 +
 .../Binders/Factory/FactoryFromBinderBase.cs  |  297 ++
 .../Factory/FactoryFromBinderBase.cs.meta     |   12 +
 .../Factory/FactoryToChoiceBinder.meta        |    9 +
 .../DecoratorToChoiceFromBinder.cs            |   29 +
 .../DecoratorToChoiceFromBinder.cs.meta       |   13 +
 .../FactoryToChoiceBinder0.cs                 |   42 +
 .../FactoryToChoiceBinder0.cs.meta            |   12 +
 .../FactoryToChoiceBinder1.cs                 |   31 +
 .../FactoryToChoiceBinder1.cs.meta            |   12 +
 .../FactoryToChoiceBinder10.cs                |   32 +
 .../FactoryToChoiceBinder10.cs.meta           |   13 +
 .../FactoryToChoiceBinder2.cs                 |   32 +
 .../FactoryToChoiceBinder2.cs.meta            |   12 +
 .../FactoryToChoiceBinder3.cs                 |   33 +
 .../FactoryToChoiceBinder3.cs.meta            |   12 +
 .../FactoryToChoiceBinder4.cs                 |   31 +
 .../FactoryToChoiceBinder4.cs.meta            |   12 +
 .../FactoryToChoiceBinder5.cs                 |   32 +
 .../FactoryToChoiceBinder5.cs.meta            |   12 +
 .../FactoryToChoiceBinder6.cs                 |   32 +
 .../FactoryToChoiceBinder6.cs.meta            |   13 +
 .../Factory/FactoryToChoiceIdBinder.meta      |    9 +
 .../FactoryToChoiceIdBinder0.cs               |   20 +
 .../FactoryToChoiceIdBinder0.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder1.cs               |   18 +
 .../FactoryToChoiceIdBinder1.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder10.cs              |   19 +
 .../FactoryToChoiceIdBinder10.cs.meta         |   13 +
 .../FactoryToChoiceIdBinder2.cs               |   19 +
 .../FactoryToChoiceIdBinder2.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder3.cs               |   20 +
 .../FactoryToChoiceIdBinder3.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder4.cs               |   18 +
 .../FactoryToChoiceIdBinder4.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder5.cs               |   19 +
 .../FactoryToChoiceIdBinder5.cs.meta          |   12 +
 .../FactoryToChoiceIdBinder6.cs               |   19 +
 .../FactoryToChoiceIdBinder6.cs.meta          |   13 +
 .../PlaceholderFactoryBindingFinalizer.cs     |   50 +
 ...PlaceholderFactoryBindingFinalizer.cs.meta |   12 +
 .../Binding/Binders/Factory/Pooling.meta      |    9 +
 .../Pooling/MemoryPoolBindingFinalizer.cs     |   55 +
 .../MemoryPoolBindingFinalizer.cs.meta        |   12 +
 .../Factory/Pooling/MemoryPoolExpandBinder.cs |   33 +
 .../Pooling/MemoryPoolExpandBinder.cs.meta    |   12 +
 .../Pooling/MemoryPoolInitialSizeBinder.cs    |   59 +
 .../MemoryPoolInitialSizeBinder.cs.meta       |   12 +
 .../Runtime/Binding/Binders/FromBinders.meta  |    9 +
 .../Binding/Binders/FromBinders/FromBinder.cs |  880 ++++
 .../Binders/FromBinders/FromBinder.cs.meta    |   12 +
 .../Binders/FromBinders/FromBinderGeneric.cs  |  132 +
 .../FromBinders/FromBinderGeneric.cs.meta     |   12 +
 .../FromBinders/FromBinderNonGeneric.cs       |  100 +
 .../FromBinders/FromBinderNonGeneric.cs.meta  |   12 +
 .../Runtime/Binding/Binders/GameObject.meta   |    9 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   23 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   45 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Runtime/Binding/Binders/IdBinder.cs       |   20 +
 .../Runtime/Binding/Binders/IdBinder.cs.meta  |   12 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   17 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Binding/Binders/IfNotBoundBinder.cs       |   24 +
 .../Binding/Binders/IfNotBoundBinder.cs.meta  |   13 +
 ...tiateCallbackConditionCopyNonLazyBinder.cs |   49 +
 ...CallbackConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Runtime/Binding/Binders/NonLazyBinder.cs  |   23 +
 .../Binding/Binders/NonLazyBinder.cs.meta     |   12 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   31 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 .../Binding/Binders/SubContainerBinder.cs     |  316 ++
 .../Binders/SubContainerBinder.cs.meta        |   12 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   28 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 ...ConcreteIdArgConditionCopyNonLazyBinder.cs |   31 +
 ...eteIdArgConditionCopyNonLazyBinder.cs.meta |   13 +
 Assets/Source/Runtime/Binding/BindingUtil.cs  |  380 ++
 .../Runtime/Binding/BindingUtil.cs.meta       |   12 +
 Assets/Source/Runtime/Binding/Finalizers.meta |    9 +
 .../Binding/Finalizers/IBindingFinalizer.cs   |   12 +
 .../Finalizers/IBindingFinalizer.cs.meta      |   12 +
 .../Finalizers/NullBindingFinalizer.cs        |   17 +
 .../Finalizers/NullBindingFinalizer.cs.meta   |   12 +
 .../Finalizers/PrefabBindingFinalizer.cs      |  158 +
 .../Finalizers/PrefabBindingFinalizer.cs.meta |   12 +
 .../PrefabResourceBindingFinalizer.cs         |  157 +
 .../PrefabResourceBindingFinalizer.cs.meta    |   12 +
 .../Finalizers/ProviderBindingFinalizer.cs    |  248 ++
 .../ProviderBindingFinalizer.cs.meta          |   12 +
 .../Finalizers/ScopableBindingFinalizer.cs    |   93 +
 .../ScopableBindingFinalizer.cs.meta          |   12 +
 .../SingleProviderBindingFinalizer.cs         |   37 +
 .../SingleProviderBindingFinalizer.cs.meta    |   12 +
 .../SubContainerBindingFinalizer.cs           |  106 +
 .../SubContainerBindingFinalizer.cs.meta      |   13 +
 .../SubContainerPrefabBindingFinalizer.cs     |  112 +
 ...SubContainerPrefabBindingFinalizer.cs.meta |   12 +
 Assets/Source/Runtime/Factories.meta          |    5 +
 .../Factories/FactoryProviderWrapper.cs       |   36 +
 .../Factories/FactoryProviderWrapper.cs.meta  |   12 +
 Assets/Source/Runtime/Factories/IFactory.cs   |   62 +
 .../Source/Runtime/Factories/IFactory.cs.meta |   12 +
 .../Source/Runtime/Factories/KeyedFactory.cs  |  193 +
 .../Runtime/Factories/KeyedFactory.cs.meta    |   12 +
 .../Runtime/Factories/PlaceholderFactory.cs   |  302 ++
 .../Factories/PlaceholderFactory.cs.meta      |   12 +
 .../Factories/PlaceholderFactoryBase.cs       |   61 +
 .../Factories/PlaceholderFactoryBase.cs.meta  |   13 +
 Assets/Source/Runtime/Factories/Pooling.meta  |    9 +
 .../Runtime/Factories/Pooling/IMemoryPool.cs  |   90 +
 .../Factories/Pooling/IMemoryPool.cs.meta     |   12 +
 .../Runtime/Factories/Pooling/MemoryPool.cs   |  316 ++
 .../Factories/Pooling/MemoryPool.cs.meta      |   12 +
 .../Factories/Pooling/MemoryPoolBase.cs       |  303 ++
 .../Factories/Pooling/MemoryPoolBase.cs.meta  |   12 +
 .../Factories/Pooling/MonoMemoryPool.cs       |  254 ++
 .../Factories/Pooling/MonoMemoryPool.cs.meta  |   12 +
 .../Pooling/MonoPoolableMemoryPool.cs         |  372 ++
 .../Pooling/MonoPoolableMemoryPool.cs.meta    |   13 +
 .../Runtime/Factories/Pooling/PoolFactory.cs  |   38 +
 .../Factories/Pooling/PoolFactory.cs.meta     |   13 +
 .../Factories/Pooling/PoolableMemoryPool.cs   |  147 +
 .../Pooling/PoolableMemoryPool.cs.meta        |   13 +
 .../Runtime/Factories/Pooling/Static.meta     |   10 +
 .../Static/PoolableStaticMemoryPool.cs        |  154 +
 .../Static/PoolableStaticMemoryPool.cs.meta   |   13 +
 .../Pooling/Static/StaticMemoryPool.cs        |  557 +++
 .../Pooling/Static/StaticMemoryPool.cs.meta   |   13 +
 .../Runtime/Factories/Pooling/Util.meta       |   10 +
 .../Factories/Pooling/Util/ArrayPool.cs       |   54 +
 .../Factories/Pooling/Util/ArrayPool.cs.meta  |   13 +
 .../Factories/Pooling/Util/DictionaryPool.cs  |   32 +
 .../Pooling/Util/DictionaryPool.cs.meta       |   13 +
 .../Factories/Pooling/Util/HashSetPool.cs     |   31 +
 .../Pooling/Util/HashSetPool.cs.meta          |   13 +
 .../Factories/Pooling/Util/ListPool.cs        |   24 +
 .../Factories/Pooling/Util/ListPool.cs.meta   |   13 +
 .../Pooling/Util/PoolCleanupChecker.cs        |   40 +
 .../Pooling/Util/PoolCleanupChecker.cs.meta   |   13 +
 .../Pooling/Util/StaticMemoryPoolRegistry.cs  |   33 +
 .../Util/StaticMemoryPoolRegistry.cs.meta     |   13 +
 .../Source/Runtime/Factories/PrefabFactory.cs |  127 +
 .../Runtime/Factories/PrefabFactory.cs.meta   |   12 +
 .../Factories/PrefabResourceFactory.cs        |  136 +
 .../Factories/PrefabResourceFactory.cs.meta   |   13 +
 Assets/Source/Runtime/Injection.meta          |    5 +
 .../Source/Runtime/Injection/InjectContext.cs |  274 ++
 .../Runtime/Injection/InjectContext.cs.meta   |   12 +
 Assets/Source/Runtime/Injection/InjectUtil.cs |  127 +
 .../Runtime/Injection/InjectUtil.cs.meta      |   12 +
 Assets/Source/Runtime/Injection/LazyInject.cs |   42 +
 .../Runtime/Injection/LazyInject.cs.meta      |   13 +
 Assets/Source/Runtime/Install.meta            |    9 +
 .../Install/CompositeInstallerExtensions.cs   |  226 ++
 .../CompositeInstallerExtensions.cs.meta      |   11 +
 .../Runtime/Install/CompositeMonoInstaller.cs |   30 +
 .../Install/CompositeMonoInstaller.cs.meta    |   11 +
 .../CompositeScriptableObjectInstaller.cs     |   31 +
 ...CompositeScriptableObjectInstaller.cs.meta |   11 +
 Assets/Source/Runtime/Install/Contexts.meta   |    9 +
 .../Runtime/Install/Contexts/Context.cs       |  386 ++
 .../Runtime/Install/Contexts/Context.cs.meta  |   12 +
 .../Install/Contexts/GameObjectContext.cs     |  219 +
 .../Contexts/GameObjectContext.cs.meta        |   12 +
 .../Install/Contexts/ProjectContext.cs        |  338 ++
 .../Install/Contexts/ProjectContext.cs.meta   |   12 +
 .../Install/Contexts/RunnableContext.cs       |   80 +
 .../Install/Contexts/RunnableContext.cs.meta  |    3 +
 .../Runtime/Install/Contexts/SceneContext.cs  |  435 ++
 .../Install/Contexts/SceneContext.cs.meta     |   12 +
 .../Install/Contexts/SceneDecoratorContext.cs |  132 +
 .../Contexts/SceneDecoratorContext.cs.meta    |   12 +
 .../Runtime/Install/Contexts/StaticContext.cs |   43 +
 .../Install/Contexts/StaticContext.cs.meta    |   12 +
 .../Runtime/Install/ICompositeInstaller.cs    |   10 +
 .../Install/ICompositeInstaller.cs.meta       |   11 +
 Assets/Source/Runtime/Install/IInstaller.cs   |   14 +
 .../Source/Runtime/Install/IInstaller.cs.meta |   12 +
 Assets/Source/Runtime/Install/Installer.cs    |   77 +
 .../Source/Runtime/Install/Installer.cs.meta  |   12 +
 .../Source/Runtime/Install/InstallerBase.cs   |   21 +
 .../Runtime/Install/InstallerBase.cs.meta     |   12 +
 .../Source/Runtime/Install/MonoInstaller.cs   |  171 +
 .../Runtime/Install/MonoInstaller.cs.meta     |   12 +
 .../Runtime/Install/MonoInstallerBase.cs      |   38 +
 .../Runtime/Install/MonoInstallerBase.cs.meta |   12 +
 .../Install/ScriptableObjectInstaller.cs      |  141 +
 .../Install/ScriptableObjectInstaller.cs.meta |   12 +
 .../Install/ScriptableObjectInstallerBase.cs  |   33 +
 .../ScriptableObjectInstallerBase.cs.meta     |   12 +
 .../Source/Runtime/Install/ZenjectBinding.cs  |   72 +
 .../Runtime/Install/ZenjectBinding.cs.meta    |   12 +
 .../Install/ZenjectManagersInstaller.cs       |   26 +
 .../Install/ZenjectManagersInstaller.cs.meta  |   13 +
 Assets/Source/Runtime/Internal.meta           |    9 +
 Assets/Source/Runtime/Internal/Assert.cs      |  433 ++
 Assets/Source/Runtime/Internal/Assert.cs.meta |   12 +
 Assets/Source/Runtime/Internal/Func.cs        |   24 +
 Assets/Source/Runtime/Internal/Func.cs.meta   |   12 +
 .../Source/Runtime/Internal/LinqExtensions.cs |   83 +
 .../Runtime/Internal/LinqExtensions.cs.meta   |   12 +
 Assets/Source/Runtime/Internal/Log.cs         |   84 +
 Assets/Source/Runtime/Internal/Log.cs.meta    |   12 +
 .../Source/Runtime/Internal/MiscExtensions.cs |   96 +
 .../Runtime/Internal/MiscExtensions.cs.meta   |   12 +
 .../Runtime/Internal/PreserveAttribute.cs     |    9 +
 .../Internal/PreserveAttribute.cs.meta        |   12 +
 .../Source/Runtime/Internal/TypeExtensions.cs |  391 ++
 .../Runtime/Internal/TypeExtensions.cs.meta   |   12 +
 .../Runtime/Internal/TypeStringFormatter.cs   |  112 +
 .../Internal/TypeStringFormatter.cs.meta      |   13 +
 Assets/Source/Runtime/Internal/ValuePair.cs   |  190 +
 .../Source/Runtime/Internal/ValuePair.cs.meta |   12 +
 Assets/Source/Runtime/Kernels.meta            |    9 +
 .../Runtime/Kernels/DecoratableMonoKernel.cs  |   73 +
 .../Kernels/DecoratableMonoKernel.cs.meta     |    3 +
 .../Kernels/DefaultGameObjectKernel.cs        |   10 +
 .../Kernels/DefaultGameObjectKernel.cs.meta   |   12 +
 Assets/Source/Runtime/Kernels/Kernel.cs       |   48 +
 Assets/Source/Runtime/Kernels/Kernel.cs.meta  |   12 +
 Assets/Source/Runtime/Kernels/MonoKernel.cs   |  129 +
 .../Source/Runtime/Kernels/MonoKernel.cs.meta |   12 +
 .../Source/Runtime/Kernels/ProjectKernel.cs   |   87 +
 .../Runtime/Kernels/ProjectKernel.cs.meta     |   12 +
 Assets/Source/Runtime/Kernels/SceneKernel.cs  |   21 +
 .../Runtime/Kernels/SceneKernel.cs.meta       |   12 +
 Assets/Source/Runtime/Main.meta               |    5 +
 Assets/Source/Runtime/Main/BindingId.cs       |   78 +
 Assets/Source/Runtime/Main/BindingId.cs.meta  |   12 +
 Assets/Source/Runtime/Main/DiContainer.cs     | 3579 +++++++++++++++++
 .../Source/Runtime/Main/DiContainer.cs.meta   |   12 +
 Assets/Source/Runtime/Main/IInstantiator.cs   |  107 +
 .../Source/Runtime/Main/IInstantiator.cs.meta |   13 +
 .../Runtime/Main/LazyInstanceInjector.cs      |   76 +
 .../Runtime/Main/LazyInstanceInjector.cs.meta |   12 +
 Assets/Source/Runtime/Main/LookupId.cs        |   39 +
 Assets/Source/Runtime/Main/LookupId.cs.meta   |   13 +
 .../Runtime/Main/SingletonMarkRegistry.cs     |   30 +
 .../Main/SingletonMarkRegistry.cs.meta        |   13 +
 Assets/Source/Runtime/Main/ZenjectSettings.cs |  202 +
 .../Runtime/Main/ZenjectSettings.cs.meta      |   13 +
 Assets/Source/Runtime/Managers.meta           |    8 +
 .../Runtime/Managers/DisposableManager.cs     |  156 +
 .../Managers/DisposableManager.cs.meta        |   12 +
 .../Runtime/Managers/GuiRenderableManager.cs  |   82 +
 .../Managers/GuiRenderableManager.cs.meta     |   12 +
 Assets/Source/Runtime/Managers/GuiRenderer.cs |   20 +
 .../Runtime/Managers/GuiRenderer.cs.meta      |   12 +
 .../Runtime/Managers/InitializableManager.cs  |   99 +
 .../Managers/InitializableManager.cs.meta     |   12 +
 .../Runtime/Managers/PoolableManager.cs       |  485 +++
 .../Runtime/Managers/PoolableManager.cs.meta  |   13 +
 .../Runtime/Managers/SceneContextRegistry.cs  |   99 +
 .../Managers/SceneContextRegistry.cs.meta     |   13 +
 .../SceneContextRegistryAdderAndRemover.cs    |   30 +
 ...ceneContextRegistryAdderAndRemover.cs.meta |   13 +
 Assets/Source/Runtime/Managers/TaskUpdater.cs |  194 +
 .../Runtime/Managers/TaskUpdater.cs.meta      |   12 +
 .../Runtime/Managers/TickableManager.cs       |  232 ++
 .../Runtime/Managers/TickableManager.cs.meta  |   12 +
 Assets/Source/Runtime/Providers.meta          |    5 +
 .../Providers/CachedOpenTypeProvider.cs       |  158 +
 .../Providers/CachedOpenTypeProvider.cs.meta  |   13 +
 .../Runtime/Providers/CachedProvider.cs       |  111 +
 .../Runtime/Providers/CachedProvider.cs.meta  |   12 +
 .../Runtime/Providers/ComponentProviders.meta |    9 +
 .../AddToGameObjectComponentProviders.meta    |    9 +
 ...AddToCurrentGameObjectComponentProvider.cs |  121 +
 ...CurrentGameObjectComponentProvider.cs.meta |   12 +
 ...ddToExistingGameObjectComponentProvider.cs |   69 +
 ...xistingGameObjectComponentProvider.cs.meta |   12 +
 .../AddToGameObjectComponentProviderBase.cs   |  142 +
 ...dToGameObjectComponentProviderBase.cs.meta |   12 +
 .../AddToNewGameObjectComponentProvider.cs    |   41 +
 ...ddToNewGameObjectComponentProvider.cs.meta |   12 +
 .../GetFromGameObjectComponentProvider.cs     |   71 +
 ...GetFromGameObjectComponentProvider.cs.meta |   13 +
 ...etFromGameObjectGetterComponentProvider.cs |   81 +
 ...mGameObjectGetterComponentProvider.cs.meta |   13 +
 .../GetFromPrefabComponentProvider.cs         |   74 +
 .../GetFromPrefabComponentProvider.cs.meta    |   12 +
 .../InstantiateOnPrefabComponentProvider.cs   |   54 +
 ...stantiateOnPrefabComponentProvider.cs.meta |   12 +
 .../Source/Runtime/Providers/Decorator.meta   |   10 +
 .../Providers/Decorator/DecoratorProvider.cs  |  103 +
 .../Decorator/DecoratorProvider.cs.meta       |   13 +
 .../Providers/GameObjectProviders.meta        |    9 +
 .../EmptyGameObjectProvider.cs                |   52 +
 .../EmptyGameObjectProvider.cs.meta           |   12 +
 .../PrefabGameObjectProvider.cs               |   45 +
 .../PrefabGameObjectProvider.cs.meta          |   12 +
 .../Runtime/Providers/GetterProvider.cs       |   96 +
 .../Runtime/Providers/GetterProvider.cs.meta  |   12 +
 .../Runtime/Providers/IFactoryProvider.cs     |  396 ++
 .../Providers/IFactoryProvider.cs.meta        |   13 +
 Assets/Source/Runtime/Providers/IProvider.cs  |   29 +
 .../Runtime/Providers/IProvider.cs.meta       |   12 +
 .../Runtime/Providers/IProviderExtensions.cs  |   99 +
 .../Providers/IProviderExtensions.cs.meta     |   12 +
 .../Runtime/Providers/InstanceProvider.cs     |   60 +
 .../Providers/InstanceProvider.cs.meta        |   12 +
 .../MethodMultipleProviderUntyped.cs          |   66 +
 .../MethodMultipleProviderUntyped.cs.meta     |   13 +
 .../Runtime/Providers/MethodProvider.cs       |   57 +
 .../Runtime/Providers/MethodProvider.cs.meta  |   12 +
 .../Providers/MethodProviderMultiple.cs       |   67 +
 .../Providers/MethodProviderMultiple.cs.meta  |   12 +
 .../Runtime/Providers/MethodProviderSimple.cs |   44 +
 .../Providers/MethodProviderSimple.cs.meta    |   12 +
 .../Providers/MethodProviderUntyped.cs        |   66 +
 .../Providers/MethodProviderUntyped.cs.meta   |   12 +
 .../Providers/MethodProviderWithContainer.cs  |  499 +++
 .../MethodProviderWithContainer.cs.meta       |   12 +
 .../Providers/PoolableMemoryPoolProvider.cs   |  367 ++
 .../PoolableMemoryPoolProvider.cs.meta        |   13 +
 .../Runtime/Providers/PrefabCreators.meta     |    9 +
 .../PrefabCreators/IPrefabInstantiator.cs     |   32 +
 .../IPrefabInstantiator.cs.meta               |   12 +
 .../PrefabCreators/PrefabInstantiator.cs      |  136 +
 .../PrefabCreators/PrefabInstantiator.cs.meta |   12 +
 .../PrefabInstantiatorCached.cs               |   60 +
 .../PrefabInstantiatorCached.cs.meta          |   12 +
 .../Runtime/Providers/PrefabProviders.meta    |    9 +
 .../PrefabProviders/IPrefabProvider.cs        |   12 +
 .../PrefabProviders/IPrefabProvider.cs.meta   |   12 +
 .../PrefabProviders/PrefabProvider.cs         |   27 +
 .../PrefabProviders/PrefabProvider.cs.meta    |   12 +
 .../PrefabProviders/PrefabProviderCustom.cs   |   29 +
 .../PrefabProviderCustom.cs.meta              |   11 +
 .../PrefabProviders/PrefabProviderResource.cs |   31 +
 .../PrefabProviderResource.cs.meta            |   12 +
 .../Source/Runtime/Providers/ProviderUtil.cs  |   24 +
 .../Runtime/Providers/ProviderUtil.cs.meta    |   12 +
 .../Runtime/Providers/ResolveProvider.cs      |   73 +
 .../Runtime/Providers/ResolveProvider.cs.meta |   12 +
 .../Runtime/Providers/ResourceProvider.cs     |   75 +
 .../Providers/ResourceProvider.cs.meta        |   12 +
 .../ScriptableObjectInstanceProvider.cs       |   96 +
 .../ScriptableObjectInstanceProvider.cs.meta  |   11 +
 .../ScriptableObjectResourceProvider.cs       |  104 +
 .../ScriptableObjectResourceProvider.cs.meta  |   12 +
 .../Providers/SubContainerCreators.meta       |    9 +
 .../ISubContainerCreator.cs                   |   10 +
 .../ISubContainerCreator.cs.meta              |   12 +
 .../SubContainerCreatorBindInfo.cs            |   24 +
 .../SubContainerCreatorBindInfo.cs.meta       |   13 +
 .../SubContainerCreatorByInstaller.cs         |   66 +
 .../SubContainerCreatorByInstaller.cs.meta    |   12 +
 .../SubContainerCreatorByInstance.cs          |   30 +
 .../SubContainerCreatorByInstance.cs.meta     |   13 +
 .../SubContainerCreatorByInstanceGetter.cs    |   31 +
 ...ubContainerCreatorByInstanceGetter.cs.meta |   11 +
 .../SubContainerCreatorByMethod.cs            |  390 ++
 .../SubContainerCreatorByMethod.cs.meta       |   12 +
 ...nerCreatorByNewGameObjectDynamicContext.cs |  366 ++
 ...eatorByNewGameObjectDynamicContext.cs.meta |   13 +
 .../SubContainerCreatorByNewPrefab.cs         |   64 +
 .../SubContainerCreatorByNewPrefab.cs.meta    |   12 +
 ...ntainerCreatorByNewPrefabDynamicContext.cs |  377 ++
 ...erCreatorByNewPrefabDynamicContext.cs.meta |   12 +
 ...ubContainerCreatorByNewPrefabWithParams.cs |  114 +
 ...tainerCreatorByNewPrefabWithParams.cs.meta |   12 +
 .../SubContainerCreatorCached.cs              |   60 +
 .../SubContainerCreatorCached.cs.meta         |   12 +
 .../SubContainerCreatorDynamicContext.cs      |   62 +
 .../SubContainerCreatorDynamicContext.cs.meta |   13 +
 .../SubContainerCreatorUtil.cs                |   43 +
 .../SubContainerCreatorUtil.cs.meta           |   13 +
 .../SubContainerDependencyProvider.cs         |   73 +
 .../SubContainerDependencyProvider.cs.meta    |   12 +
 .../Runtime/Providers/TransientProvider.cs    |   91 +
 .../Providers/TransientProvider.cs.meta       |   12 +
 Assets/Source/Runtime/Signals.meta            |   10 +
 Assets/Source/Runtime/Signals/Internal.meta   |   10 +
 .../Runtime/Signals/Internal/Binders.meta     |   10 +
 .../Signals/Internal/Binders/BindSignal.meta  |   10 +
 .../BindSignal/BindSignalFromBinder.cs        |   67 +
 .../BindSignal/BindSignalFromBinder.cs.meta   |   13 +
 .../BindSignal/BindSignalIdToBinder.cs        |   20 +
 .../BindSignal/BindSignalIdToBinder.cs.meta   |   13 +
 .../Binders/BindSignal/BindSignalToBinder.cs  |   64 +
 .../BindSignal/BindSignalToBinder.cs.meta     |   13 +
 .../SignalCallbackWithLookupWrapper.cs        |   54 +
 .../SignalCallbackWithLookupWrapper.cs.meta   |   13 +
 .../BindSignal/SignalCallbackWrapper.cs       |   39 +
 .../BindSignal/SignalCallbackWrapper.cs.meta  |   13 +
 .../Internal/Binders/DeclareSignal.meta       |   10 +
 ...eclareSignalAsyncTickPriorityCopyBinder.cs |   24 +
 ...eSignalAsyncTickPriorityCopyBinder.cs.meta |   13 +
 ...quireHandlerAsyncTickPriorityCopyBinder.cs |   20 +
 ...HandlerAsyncTickPriorityCopyBinder.cs.meta |   13 +
 ...quireHandlerAsyncTickPriorityCopyBinder.cs |   31 +
 ...HandlerAsyncTickPriorityCopyBinder.cs.meta |   13 +
 .../DeclareSignal/SignalBindingBindInfo.cs    |   24 +
 .../SignalBindingBindInfo.cs.meta             |   13 +
 .../SignalDeclarationBindInfo.cs              |   38 +
 .../SignalDeclarationBindInfo.cs.meta         |   13 +
 .../Internal/Binders/SignalCopyBinder.cs      |   61 +
 .../Internal/Binders/SignalCopyBinder.cs.meta |   13 +
 .../Internal/Binders/SignalExtensions.cs      |   57 +
 .../Internal/Binders/SignalExtensions.cs.meta |   13 +
 .../Binders/SignalTickPriorityCopyBinder.cs   |   25 +
 .../SignalTickPriorityCopyBinder.cs.meta      |   13 +
 .../Signals/Internal/SignalDeclaration.cs     |  187 +
 .../Internal/SignalDeclaration.cs.meta        |   13 +
 .../Signals/Internal/SignalSubscription.cs    |   87 +
 .../Internal/SignalSubscription.cs.meta       |   13 +
 .../Signals/Internal/SignalSubscriptionId.cs  |   65 +
 .../Internal/SignalSubscriptionId.cs.meta     |   13 +
 Assets/Source/Runtime/Signals/Main.meta       |   10 +
 .../Source/Runtime/Signals/Main/SignalBus.cs  |  451 +++
 .../Runtime/Signals/Main/SignalBus.cs.meta    |   13 +
 .../Signals/Main/SignalBusInstaller.cs        |   29 +
 .../Signals/Main/SignalBusInstaller.cs.meta   |   13 +
 .../Main/SignalDeclarationAsyncInitializer.cs |   41 +
 .../SignalDeclarationAsyncInitializer.cs.meta |   13 +
 .../Signals/Zenject-Signals.csproj.meta       |    9 +
 Assets/Source/Runtime/Util.meta               |    5 +
 Assets/Source/Runtime/Util/ActionInstaller.cs |   19 +
 .../Runtime/Util/ActionInstaller.cs.meta      |   12 +
 Assets/Source/Runtime/Util/CheatSheet.cs      |  438 ++
 Assets/Source/Runtime/Util/CheatSheet.cs.meta |   13 +
 .../Runtime/Util/ConstructorChoiceStrategy.cs |    9 +
 .../Util/ConstructorChoiceStrategy.cs.meta    |   11 +
 .../Util/DefaultGameObjectParentInstaller.cs  |   53 +
 .../DefaultGameObjectParentInstaller.cs.meta  |   13 +
 Assets/Source/Runtime/Util/DisposeBlock.cs    |  200 +
 .../Source/Runtime/Util/DisposeBlock.cs.meta  |   13 +
 .../Runtime/Util/ExecutionOrderInstaller.cs   |   29 +
 .../Util/ExecutionOrderInstaller.cs.meta      |   12 +
 Assets/Source/Runtime/Util/ProfileBlock.cs    |  224 ++
 .../Source/Runtime/Util/ProfileBlock.cs.meta  |   12 +
 Assets/Source/Runtime/Util/ProfileTimers.cs   |  172 +
 .../Source/Runtime/Util/ProfileTimers.cs.meta |   13 +
 .../Util/ReflectionInfoTypeInfoConverter.cs   |  277 ++
 .../ReflectionInfoTypeInfoConverter.cs.meta   |   13 +
 .../Source/Runtime/Util/ReflectionTypeInfo.cs |  109 +
 .../Runtime/Util/ReflectionTypeInfo.cs.meta   |   13 +
 Assets/Source/Runtime/Util/ReflectionUtil.cs  |  166 +
 .../Runtime/Util/ReflectionUtil.cs.meta       |   13 +
 Assets/Source/Runtime/Util/TypeAnalyzer.cs    |  268 ++
 .../Source/Runtime/Util/TypeAnalyzer.cs.meta  |   12 +
 Assets/Source/Runtime/Util/UnityUtil.cs       |  139 +
 Assets/Source/Runtime/Util/UnityUtil.cs.meta  |   12 +
 Assets/Source/Runtime/Util/ValidationUtil.cs  |   17 +
 .../Runtime/Util/ValidationUtil.cs.meta       |   12 +
 Assets/Source/Runtime/Util/ZenAutoInjecter.cs |   73 +
 .../Runtime/Util/ZenAutoInjecter.cs.meta      |   13 +
 Assets/Source/Runtime/Util/ZenPools.cs        |  200 +
 Assets/Source/Runtime/Util/ZenPools.cs.meta   |   13 +
 .../Runtime/Util/ZenReflectionTypeAnalyzer.cs |  292 ++
 .../Util/ZenReflectionTypeAnalyzer.cs.meta    |   13 +
 Assets/Source/Runtime/Util/ZenUtilInternal.cs |  298 ++
 .../Runtime/Util/ZenUtilInternal.cs.meta      |   12 +
 .../Source/Runtime/Util/ZenjectException.cs   |   21 +
 .../Runtime/Util/ZenjectException.cs.meta     |   12 +
 .../Source/Runtime/Util/ZenjectSceneLoader.cs |  152 +
 .../Runtime/Util/ZenjectSceneLoader.cs.meta   |   12 +
 ...enjectStateMachineBehaviourAutoInjecter.cs |   40 +
 ...tStateMachineBehaviourAutoInjecter.cs.meta |   13 +
 Assets/Source/Runtime/Validation.meta         |    9 +
 .../Source/Runtime/Validation/IValidatable.cs |    7 +
 .../Runtime/Validation/IValidatable.cs.meta   |   12 +
 .../Runtime/Validation/ValidationMarker.cs    |   33 +
 .../Validation/ValidationMarker.cs.meta       |   12 +
 Assets/Source/Runtime/Zenject.asmdef          |   24 +
 Assets/Source/Runtime/Zenject.asmdef.meta     |    9 +
 Assets/Source/Runtime/link.xml                |   15 +
 Assets/Source/Runtime/link.xml.meta           |    7 +
 Assets/Source/Usage.meta                      |    9 +
 Assets/Source/Usage/.gitignore                |    4 +
 Assets/Source/Usage/Zenject-usage.dll         |  Bin 0 -> 23040 bytes
 Assets/Source/Usage/Zenject-usage.dll.meta    |   32 +
 Assets/Source/Usage/link.xml                  |    3 +
 Assets/Source/Usage/link.xml.meta             |    7 +
 Assets/Source/Zenject.csproj.meta             |    8 +
 Assets/Source/package.json                    |   12 +
 Assets/Source/package.json.meta               |    7 +
 Assets/Terrain.meta                           |    8 +
 Assets/Terrain/New Terrain.asset              |  Bin 0 -> 557084 bytes
 Assets/Terrain/New Terrain.asset.meta         |    8 +
 ...e973d155-262a-452c-8456-c35cc13e35e6.asset |  Bin 0 -> 557120 bytes
 ...155-262a-452c-8456-c35cc13e35e6.asset.meta |    8 +
 ...fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset |  Bin 0 -> 557120 bytes
 ...fba-a870-483e-abd2-3e6d8bdcc5ad.asset.meta |    8 +
 Packages/manifest.json                        |   48 +
 Packages/packages-lock.json                   |  438 ++
 ProjectSettings/AudioManager.asset            |   19 +
 ProjectSettings/ClusterInputManager.asset     |    6 +
 ProjectSettings/DynamicsManager.asset         |   34 +
 ProjectSettings/EditorBuildSettings.asset     |   16 +
 ProjectSettings/EditorSettings.asset          |   35 +
 ProjectSettings/GraphicsSettings.asset        |  165 +
 ProjectSettings/InputManager.asset            |  296 ++
 ProjectSettings/MemorySettings.asset          |   35 +
 ProjectSettings/NavMeshAreas.asset            |   91 +
 ProjectSettings/NotificationsSettings.asset   |   42 +
 ProjectSettings/PackageManagerSettings.asset  |   35 +
 ProjectSettings/Physics2DSettings.asset       |   56 +
 ProjectSettings/PresetManager.asset           |    7 +
 ProjectSettings/ProjectSettings.asset         |  802 ++++
 ProjectSettings/ProjectVersion.txt            |    2 +
 ProjectSettings/QualitySettings.asset         |  239 ++
 ProjectSettings/SceneTemplateSettings.json    |  167 +
 ProjectSettings/TagManager.asset              |   43 +
 ProjectSettings/TimeManager.asset             |    9 +
 ProjectSettings/TimelineSettings.asset        |   16 +
 ProjectSettings/UnityConnectSettings.asset    |   36 +
 ProjectSettings/VFXManager.asset              |   12 +
 ProjectSettings/VersionControlSettings.asset  |    8 +
 ProjectSettings/XRSettings.asset              |   10 +
 ProjectSettings/boot.config                   |    0
 ignore.conf                                   |   58 +
 826 files changed, 48587 insertions(+)
 create mode 100644 .idea/.idea.First/.idea/contentModel.xml
 create mode 100644 .idea/.idea.First/.idea/indexLayout.xml
 create mode 100644 .idea/.idea.First/.idea/modules.xml
 create mode 100644 .idea/.idea.First/.idea/projectSettingsUpdater.xml
 create mode 100644 .idea/.idea.First/.idea/workspace.xml
 create mode 100644 .idea/.idea.First/riderModule.iml
 create mode 100644 Assets/Adaptive Performance.meta
 create mode 100644 Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset
 create mode 100644 Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset.meta
 create mode 100644 Assets/Adaptive Performance/Provider.meta
 create mode 100644 Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset
 create mode 100644 Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset.meta
 create mode 100644 Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset
 create mode 100644 Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset.meta
 create mode 100644 Assets/Adaptive Performance/Settings.meta
 create mode 100644 Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset
 create mode 100644 Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset.meta
 create mode 100644 Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset
 create mode 100644 Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset.meta
 create mode 100644 Assets/Input System.meta
 create mode 100644 Assets/Input System/InputSystem.inputsettings.asset
 create mode 100644 Assets/Input System/InputSystem.inputsettings.asset.meta
 create mode 100644 Assets/Input System/PlayerInput.cs
 create mode 100644 Assets/Input System/PlayerInput.cs.meta
 create mode 100644 Assets/Input System/PlayerInput.inputactions
 create mode 100644 Assets/Input System/PlayerInput.inputactions.meta
 create mode 100644 Assets/Materials.meta
 create mode 100644 Assets/Materials/TerrainMat.mat
 create mode 100644 Assets/Materials/TerrainMat.mat.meta
 create mode 100644 Assets/Prefabs.meta
 create mode 100644 Assets/Prefabs/Main Camera.prefab
 create mode 100644 Assets/Prefabs/Main Camera.prefab.meta
 create mode 100644 Assets/Resources.meta
 create mode 100644 Assets/Resources/Player.prefab
 create mode 100644 Assets/Resources/Player.prefab.meta
 create mode 100644 Assets/Resources/ProjectContext.prefab
 create mode 100644 Assets/Resources/ProjectContext.prefab.meta
 create mode 100644 Assets/Scenes.meta
 create mode 100644 Assets/Scenes/Level1.unity
 create mode 100644 Assets/Scenes/Level1.unity.meta
 create mode 100644 Assets/Scripts.meta
 create mode 100644 Assets/Scripts/CameraFollower.cs
 create mode 100644 Assets/Scripts/CameraFollower.cs.meta
 create mode 100644 Assets/Scripts/Entity.cs
 create mode 100644 Assets/Scripts/Entity.cs.meta
 create mode 100644 Assets/Scripts/Infrastructure.meta
 create mode 100644 Assets/Scripts/Infrastructure/LocationInstaller.cs
 create mode 100644 Assets/Scripts/Infrastructure/LocationInstaller.cs.meta
 create mode 100644 Assets/Scripts/PlayerEntity.cs
 create mode 100644 Assets/Scripts/PlayerEntity.cs.meta
 create mode 100644 Assets/Scripts/PlayerFactory.cs
 create mode 100644 Assets/Scripts/PlayerFactory.cs.meta
 create mode 100644 Assets/Scripts/SpawnPosition.cs
 create mode 100644 Assets/Scripts/SpawnPosition.cs.meta
 create mode 100644 Assets/Source.meta
 create mode 100644 Assets/Source/.gitignore
 create mode 100644 Assets/Source/Editor.meta
 create mode 100644 Assets/Source/Editor/EditorStaticInstaller.cs
 create mode 100644 Assets/Source/Editor/EditorStaticInstaller.cs.meta
 create mode 100644 Assets/Source/Editor/EditorWindow.meta
 create mode 100644 Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs
 create mode 100644 Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs.meta
 create mode 100644 Assets/Source/Editor/Editors.meta
 create mode 100644 Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs
 create mode 100644 Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/ContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/ContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/GameObjectContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/GameObjectContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/InstallerPropertyInfo.cs
 create mode 100644 Assets/Source/Editor/Editors/InstallerPropertyInfo.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/ProjectContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/ProjectContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/RunnableContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/RunnableContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/SceneContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/SceneContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs
 create mode 100644 Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png.meta
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef
 create mode 100644 Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef.meta
 create mode 100644 Assets/Source/Editor/ObjectGraphVisualizer.cs
 create mode 100644 Assets/Source/Editor/ObjectGraphVisualizer.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Common.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef.meta
 create mode 100644 Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking.csproj.meta
 create mode 100644 Assets/Source/Editor/SceneParentLoading.meta
 create mode 100644 Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs
 create mode 100644 Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs.meta
 create mode 100644 Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs
 create mode 100644 Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs.meta
 create mode 100644 Assets/Source/Editor/TestBuildAssemblyFilter.cs
 create mode 100644 Assets/Source/Editor/TestBuildAssemblyFilter.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework.meta
 create mode 100644 Assets/Source/Editor/TestFramework/SceneTestFixture.cs
 create mode 100644 Assets/Source/Editor/TestFramework/SceneTestFixture.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs
 create mode 100644 Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs
 create mode 100644 Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef
 create mode 100644 Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef.meta
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs.meta
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs
 create mode 100644 Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs.meta
 create mode 100644 Assets/Source/Editor/UnityInspectorListEditor.cs
 create mode 100644 Assets/Source/Editor/UnityInspectorListEditor.cs.meta
 create mode 100644 Assets/Source/Editor/ZenMenuItems.cs
 create mode 100644 Assets/Source/Editor/ZenMenuItems.cs.meta
 create mode 100644 Assets/Source/Editor/ZenUnityEditorUtil.cs
 create mode 100644 Assets/Source/Editor/ZenUnityEditorUtil.cs.meta
 create mode 100644 Assets/Source/Editor/Zenject-Editor.asmdef
 create mode 100644 Assets/Source/Editor/Zenject-Editor.asmdef.meta
 create mode 100644 Assets/Source/Runtime.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs.meta
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs
 create mode 100644 Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs.meta
 create mode 100644 Assets/Source/Runtime/Async.meta
 create mode 100644 Assets/Source/Runtime/Async/AddressableInject.cs
 create mode 100644 Assets/Source/Runtime/Async/AddressableInject.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs
 create mode 100644 Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/AsyncInject.cs
 create mode 100644 Assets/Source/Runtime/Async/AsyncInject.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Extenject-Async.asmdef
 create mode 100644 Assets/Source/Runtime/Async/Extenject-Async.asmdef.meta
 create mode 100644 Assets/Source/Runtime/Async/Providers.meta
 create mode 100644 Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs
 create mode 100644 Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs.meta
 create mode 100644 Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs
 create mode 100644 Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/GameObject.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IdBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IdBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs
 create mode 100644 Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/BindingUtil.cs
 create mode 100644 Assets/Source/Runtime/Binding/BindingUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs
 create mode 100644 Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories.meta
 create mode 100644 Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs
 create mode 100644 Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/IFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/IFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/KeyedFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/KeyedFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/PlaceholderFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/PlaceholderFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs
 create mode 100644 Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Static.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs
 create mode 100644 Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/PrefabFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/PrefabFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Factories/PrefabResourceFactory.cs
 create mode 100644 Assets/Source/Runtime/Factories/PrefabResourceFactory.cs.meta
 create mode 100644 Assets/Source/Runtime/Injection.meta
 create mode 100644 Assets/Source/Runtime/Injection/InjectContext.cs
 create mode 100644 Assets/Source/Runtime/Injection/InjectContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Injection/InjectUtil.cs
 create mode 100644 Assets/Source/Runtime/Injection/InjectUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Injection/LazyInject.cs
 create mode 100644 Assets/Source/Runtime/Injection/LazyInject.cs.meta
 create mode 100644 Assets/Source/Runtime/Install.meta
 create mode 100644 Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs
 create mode 100644 Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/CompositeMonoInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/CompositeMonoInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/Context.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/Context.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/ProjectContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/ProjectContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/RunnableContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/RunnableContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/SceneContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/SceneContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Contexts/StaticContext.cs
 create mode 100644 Assets/Source/Runtime/Install/Contexts/StaticContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/ICompositeInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/ICompositeInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/IInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/IInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/Installer.cs
 create mode 100644 Assets/Source/Runtime/Install/Installer.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/InstallerBase.cs
 create mode 100644 Assets/Source/Runtime/Install/InstallerBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/MonoInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/MonoInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/MonoInstallerBase.cs
 create mode 100644 Assets/Source/Runtime/Install/MonoInstallerBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs
 create mode 100644 Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/ZenjectBinding.cs
 create mode 100644 Assets/Source/Runtime/Install/ZenjectBinding.cs.meta
 create mode 100644 Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs
 create mode 100644 Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal.meta
 create mode 100644 Assets/Source/Runtime/Internal/Assert.cs
 create mode 100644 Assets/Source/Runtime/Internal/Assert.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/Func.cs
 create mode 100644 Assets/Source/Runtime/Internal/Func.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/LinqExtensions.cs
 create mode 100644 Assets/Source/Runtime/Internal/LinqExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/Log.cs
 create mode 100644 Assets/Source/Runtime/Internal/Log.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/MiscExtensions.cs
 create mode 100644 Assets/Source/Runtime/Internal/MiscExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/PreserveAttribute.cs
 create mode 100644 Assets/Source/Runtime/Internal/PreserveAttribute.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/TypeExtensions.cs
 create mode 100644 Assets/Source/Runtime/Internal/TypeExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/TypeStringFormatter.cs
 create mode 100644 Assets/Source/Runtime/Internal/TypeStringFormatter.cs.meta
 create mode 100644 Assets/Source/Runtime/Internal/ValuePair.cs
 create mode 100644 Assets/Source/Runtime/Internal/ValuePair.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels.meta
 create mode 100644 Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels/Kernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/Kernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels/MonoKernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/MonoKernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels/ProjectKernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/ProjectKernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Kernels/SceneKernel.cs
 create mode 100644 Assets/Source/Runtime/Kernels/SceneKernel.cs.meta
 create mode 100644 Assets/Source/Runtime/Main.meta
 create mode 100644 Assets/Source/Runtime/Main/BindingId.cs
 create mode 100644 Assets/Source/Runtime/Main/BindingId.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/DiContainer.cs
 create mode 100644 Assets/Source/Runtime/Main/DiContainer.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/IInstantiator.cs
 create mode 100644 Assets/Source/Runtime/Main/IInstantiator.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/LazyInstanceInjector.cs
 create mode 100644 Assets/Source/Runtime/Main/LazyInstanceInjector.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/LookupId.cs
 create mode 100644 Assets/Source/Runtime/Main/LookupId.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/SingletonMarkRegistry.cs
 create mode 100644 Assets/Source/Runtime/Main/SingletonMarkRegistry.cs.meta
 create mode 100644 Assets/Source/Runtime/Main/ZenjectSettings.cs
 create mode 100644 Assets/Source/Runtime/Main/ZenjectSettings.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers.meta
 create mode 100644 Assets/Source/Runtime/Managers/DisposableManager.cs
 create mode 100644 Assets/Source/Runtime/Managers/DisposableManager.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/GuiRenderableManager.cs
 create mode 100644 Assets/Source/Runtime/Managers/GuiRenderableManager.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/GuiRenderer.cs
 create mode 100644 Assets/Source/Runtime/Managers/GuiRenderer.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/InitializableManager.cs
 create mode 100644 Assets/Source/Runtime/Managers/InitializableManager.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/PoolableManager.cs
 create mode 100644 Assets/Source/Runtime/Managers/PoolableManager.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/SceneContextRegistry.cs
 create mode 100644 Assets/Source/Runtime/Managers/SceneContextRegistry.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs
 create mode 100644 Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/TaskUpdater.cs
 create mode 100644 Assets/Source/Runtime/Managers/TaskUpdater.cs.meta
 create mode 100644 Assets/Source/Runtime/Managers/TickableManager.cs
 create mode 100644 Assets/Source/Runtime/Managers/TickableManager.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers.meta
 create mode 100644 Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/CachedProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/CachedProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/Decorator.meta
 create mode 100644 Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/GameObjectProviders.meta
 create mode 100644 Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/GetterProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/GetterProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/IFactoryProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/IFactoryProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/IProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/IProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/IProviderExtensions.cs
 create mode 100644 Assets/Source/Runtime/Providers/IProviderExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/InstanceProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/InstanceProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderMultiple.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderMultiple.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderSimple.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderSimple.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderUntyped.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderUntyped.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs
 create mode 100644 Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs
 create mode 100644 Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ProviderUtil.cs
 create mode 100644 Assets/Source/Runtime/Providers/ProviderUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ResolveProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ResolveProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ResourceProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ResourceProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Providers/TransientProvider.cs
 create mode 100644 Assets/Source/Runtime/Providers/TransientProvider.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs
 create mode 100644 Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Main.meta
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalBus.cs
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalBus.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs
 create mode 100644 Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs.meta
 create mode 100644 Assets/Source/Runtime/Signals/Zenject-Signals.csproj.meta
 create mode 100644 Assets/Source/Runtime/Util.meta
 create mode 100644 Assets/Source/Runtime/Util/ActionInstaller.cs
 create mode 100644 Assets/Source/Runtime/Util/ActionInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/CheatSheet.cs
 create mode 100644 Assets/Source/Runtime/Util/CheatSheet.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs
 create mode 100644 Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs
 create mode 100644 Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/DisposeBlock.cs
 create mode 100644 Assets/Source/Runtime/Util/DisposeBlock.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs
 create mode 100644 Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ProfileBlock.cs
 create mode 100644 Assets/Source/Runtime/Util/ProfileBlock.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ProfileTimers.cs
 create mode 100644 Assets/Source/Runtime/Util/ProfileTimers.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs
 create mode 100644 Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ReflectionTypeInfo.cs
 create mode 100644 Assets/Source/Runtime/Util/ReflectionTypeInfo.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ReflectionUtil.cs
 create mode 100644 Assets/Source/Runtime/Util/ReflectionUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/TypeAnalyzer.cs
 create mode 100644 Assets/Source/Runtime/Util/TypeAnalyzer.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/UnityUtil.cs
 create mode 100644 Assets/Source/Runtime/Util/UnityUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ValidationUtil.cs
 create mode 100644 Assets/Source/Runtime/Util/ValidationUtil.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenAutoInjecter.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenAutoInjecter.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenPools.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenPools.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenUtilInternal.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenUtilInternal.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenjectException.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenjectException.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenjectSceneLoader.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenjectSceneLoader.cs.meta
 create mode 100644 Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs
 create mode 100644 Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs.meta
 create mode 100644 Assets/Source/Runtime/Validation.meta
 create mode 100644 Assets/Source/Runtime/Validation/IValidatable.cs
 create mode 100644 Assets/Source/Runtime/Validation/IValidatable.cs.meta
 create mode 100644 Assets/Source/Runtime/Validation/ValidationMarker.cs
 create mode 100644 Assets/Source/Runtime/Validation/ValidationMarker.cs.meta
 create mode 100644 Assets/Source/Runtime/Zenject.asmdef
 create mode 100644 Assets/Source/Runtime/Zenject.asmdef.meta
 create mode 100644 Assets/Source/Runtime/link.xml
 create mode 100644 Assets/Source/Runtime/link.xml.meta
 create mode 100644 Assets/Source/Usage.meta
 create mode 100644 Assets/Source/Usage/.gitignore
 create mode 100644 Assets/Source/Usage/Zenject-usage.dll
 create mode 100644 Assets/Source/Usage/Zenject-usage.dll.meta
 create mode 100644 Assets/Source/Usage/link.xml
 create mode 100644 Assets/Source/Usage/link.xml.meta
 create mode 100644 Assets/Source/Zenject.csproj.meta
 create mode 100644 Assets/Source/package.json
 create mode 100644 Assets/Source/package.json.meta
 create mode 100644 Assets/Terrain.meta
 create mode 100644 Assets/Terrain/New Terrain.asset
 create mode 100644 Assets/Terrain/New Terrain.asset.meta
 create mode 100644 Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset
 create mode 100644 Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset.meta
 create mode 100644 Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset
 create mode 100644 Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset.meta
 create mode 100644 Packages/manifest.json
 create mode 100644 Packages/packages-lock.json
 create mode 100644 ProjectSettings/AudioManager.asset
 create mode 100644 ProjectSettings/ClusterInputManager.asset
 create mode 100644 ProjectSettings/DynamicsManager.asset
 create mode 100644 ProjectSettings/EditorBuildSettings.asset
 create mode 100644 ProjectSettings/EditorSettings.asset
 create mode 100644 ProjectSettings/GraphicsSettings.asset
 create mode 100644 ProjectSettings/InputManager.asset
 create mode 100644 ProjectSettings/MemorySettings.asset
 create mode 100644 ProjectSettings/NavMeshAreas.asset
 create mode 100644 ProjectSettings/NotificationsSettings.asset
 create mode 100644 ProjectSettings/PackageManagerSettings.asset
 create mode 100644 ProjectSettings/Physics2DSettings.asset
 create mode 100644 ProjectSettings/PresetManager.asset
 create mode 100644 ProjectSettings/ProjectSettings.asset
 create mode 100644 ProjectSettings/ProjectVersion.txt
 create mode 100644 ProjectSettings/QualitySettings.asset
 create mode 100644 ProjectSettings/SceneTemplateSettings.json
 create mode 100644 ProjectSettings/TagManager.asset
 create mode 100644 ProjectSettings/TimeManager.asset
 create mode 100644 ProjectSettings/TimelineSettings.asset
 create mode 100644 ProjectSettings/UnityConnectSettings.asset
 create mode 100644 ProjectSettings/VFXManager.asset
 create mode 100644 ProjectSettings/VersionControlSettings.asset
 create mode 100644 ProjectSettings/XRSettings.asset
 create mode 100644 ProjectSettings/boot.config
 create mode 100644 ignore.conf

diff --git a/.idea/.idea.First/.idea/contentModel.xml b/.idea/.idea.First/.idea/contentModel.xml
new file mode 100644
index 0000000..e8d1be5
--- /dev/null
+++ b/.idea/.idea.First/.idea/contentModel.xml
@@ -0,0 +1,496 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ContentModelStore">
+    <e p="C:\Users\kirsh\AppData\Local\JetBrains\Rider2020.2\extResources" t="IncludeRecursive" />
+    <e p="C:\Users\kirsh\AppData\Local\JetBrains\Rider2020.2\resharper-host\Local\Transient\Rider\v202\SolutionCaches\_First.781951218.00" t="ExcludeRecursive" />
+    <e p="C:\Users\kirsh\First" t="IncludeRecursive">
+      <e p="Assembly-CSharp.csproj" t="IncludeRecursive" />
+      <e p="Assets" t="Include">
+        <e p="Adaptive Performance" t="Include">
+          <e p="Provider" t="Include" />
+          <e p="Settings" t="Include" />
+        </e>
+        <e p="Input System" t="Include">
+          <e p="PlayerInput.cs" t="Include" />
+        </e>
+        <e p="Materials" t="Include" />
+        <e p="Prefabs" t="Include" />
+        <e p="Resources" t="Include" />
+        <e p="Scenes" t="Include" />
+        <e p="Scripts" t="Include">
+          <e p="CameraFollower.cs" t="Include" />
+          <e p="Entity.cs" t="Include" />
+          <e p="Infrastructure" t="Include">
+            <e p="LocationInstaller.cs" t="Include" />
+          </e>
+          <e p="PlayerEntity.cs" t="Include" />
+          <e p="PlayerFactory.cs" t="Include" />
+          <e p="SpawnPosition.cs" t="Include" />
+        </e>
+        <e p="Source" t="Include">
+          <e p="Editor" t="Include">
+            <e p="Editors" t="Include">
+              <e p="BaseCompositeInstallerEditor.cs" t="Include" />
+              <e p="CompositeInstallerEditorDescriptions.cs" t="Include" />
+              <e p="CompositeMonoInstallerEditor.cs" t="Include" />
+              <e p="CompositeScriptableObjectInstallerEditor.cs" t="Include" />
+              <e p="ContextEditor.cs" t="Include" />
+              <e p="GameObjectContextEditor.cs" t="Include" />
+              <e p="InstallerPropertyInfo.cs" t="Include" />
+              <e p="ProjectContextEditor.cs" t="Include" />
+              <e p="RunnableContextEditor.cs" t="Include" />
+              <e p="SceneContextEditor.cs" t="Include" />
+              <e p="SceneDecoratorContextEditor.cs" t="Include" />
+            </e>
+            <e p="EditorStaticInstaller.cs" t="Include" />
+            <e p="EditorWindow" t="Include">
+              <e p="ZenjectEditorWindow.cs" t="Include" />
+            </e>
+            <e p="MemoryPoolMonitor" t="Include">
+              <e p="Editor" t="Include">
+                <e p="DebugWindow" t="Include">
+                  <e p="InPlaceStableSort.cs" t="Include" />
+                  <e p="MpmView.cs" t="Include" />
+                  <e p="MpmWindow.cs" t="Include" />
+                </e>
+                <e p="MpmSettingsInstaller.cs" t="Include" />
+                <e p="Resources" t="Include">
+                  <e p="Installers" t="Include" />
+                </e>
+                <e p="Zenject-PoolMonitor-Editor.asmdef" t="Include" />
+              </e>
+            </e>
+            <e p="ObjectGraphVisualizer.cs" t="Include" />
+            <e p="ReflectionBaking" t="Include">
+              <e p="Common" t="Include">
+                <e p="CecilExtensions.cs" t="Include" />
+                <e p="ReflectionBakingModuleEditor.cs" t="Include" />
+              </e>
+              <e p="Lib" t="Include" />
+              <e p="Unity" t="Include">
+                <e p="AssemblyPathRegistry.cs" t="Include" />
+                <e p="ReflectionBakingBuildObserver.cs" t="Include" />
+                <e p="ReflectionBakingInternalUtil.cs" t="Include" />
+                <e p="ReflectionBakingMenuItems.cs" t="Include" />
+                <e p="UnityAssemblyResolver.cs" t="Include" />
+                <e p="ZenjectReflectionBakingSettings.cs" t="Include" />
+                <e p="ZenjectReflectionBakingSettingsEditor.cs" t="Include" />
+              </e>
+              <e p="Zenject-ReflectionBaking-Editor.asmdef" t="Include" />
+            </e>
+            <e p="SceneParentLoading" t="Include">
+              <e p="DefaultSceneContractConfig.cs" t="Include" />
+              <e p="SceneParentAutomaticLoader.cs" t="Include" />
+            </e>
+            <e p="TestBuildAssemblyFilter.cs" t="Include" />
+            <e p="TestFramework" t="Include">
+              <e p="SceneTestFixture.cs" t="Include" />
+              <e p="SceneTestFixtureSceneReference.cs" t="Include" />
+              <e p="ValidateOnlyAttribute.cs" t="Include" />
+              <e p="Zenject-TestFramework.asmdef" t="Include" />
+              <e p="ZenjectIntegrationTestFixture.cs" t="Include" />
+              <e p="ZenjectTestUtil.cs" t="Include" />
+              <e p="ZenjectUnitTestFixture.cs" t="Include" />
+            </e>
+            <e p="UnityInspectorListEditor.cs" t="Include" />
+            <e p="Zenject-Editor.asmdef" t="Include" />
+            <e p="ZenMenuItems.cs" t="Include" />
+            <e p="ZenUnityEditorUtil.cs" t="Include" />
+          </e>
+          <e p="package.json" t="Include" />
+          <e p="Runtime" t="Include">
+            <e p="AnimatorInterfaces" t="Include">
+              <e p="AnimatorIkHandlerManager.cs" t="Include" />
+              <e p="AnimatorInstaller.cs" t="Include" />
+              <e p="AnimatorMoveHandlerManager.cs" t="Include" />
+              <e p="IAnimatorIkHandler.cs" t="Include" />
+              <e p="IAnimatorMoveHandler.cs" t="Include" />
+            </e>
+            <e p="Async" t="Include">
+              <e p="AddressableInject.cs" t="Include" />
+              <e p="AsyncDiContainerExtensions.cs" t="Include" />
+              <e p="AsyncInject.cs" t="Include" />
+              <e p="Binders" t="Include">
+                <e p="AddressableFromBinderGeneric.cs" t="Include" />
+                <e p="AsyncFromBinderBase.cs" t="Include" />
+                <e p="AsyncFromBinderGeneric.cs" t="Include" />
+                <e p="ConcreteAddressableBinderGeneric.cs" t="Include" />
+                <e p="ConcreteAddressableIdBinderGeneric.cs" t="Include" />
+                <e p="ConcreteAsyncBinderGeneric.cs" t="Include" />
+                <e p="ConcreteAsyncIdBinderGeneric.cs" t="Include" />
+              </e>
+              <e p="Extenject-Async.asmdef" t="Include" />
+              <e p="Providers" t="Include">
+                <e p="AddressableProviderSimple.cs" t="Include" />
+                <e p="AsyncMethodProviderSimple.cs" t="Include" />
+              </e>
+            </e>
+            <e p="Binding" t="Include">
+              <e p="Binders" t="Include">
+                <e p="ArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="ConcreteBinders" t="Include">
+                  <e p="ConcreteBinderGeneric.cs" t="Include" />
+                  <e p="ConcreteBinderNonGeneric.cs" t="Include" />
+                  <e p="ConcreteIdBinderGeneric.cs" t="Include" />
+                  <e p="ConcreteIdBinderNonGeneric.cs" t="Include" />
+                </e>
+                <e p="ConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="ConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="Conventions" t="Include">
+                  <e p="ConventionAssemblySelectionBinder.cs" t="Include" />
+                  <e p="ConventionBindInfo.cs" t="Include" />
+                  <e p="ConventionFilterTypesBinder.cs" t="Include" />
+                  <e p="ConventionSelectTypesBinder.cs" t="Include" />
+                </e>
+                <e p="CopyNonLazyBinder.cs" t="Include" />
+                <e p="DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="Factory" t="Include">
+                  <e p="FactoryArgumentsToChoiceBinder" t="Include">
+                    <e p="FactoryArgumentsToChoiceBinder0.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder1.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder10.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder2.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder3.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder4.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder5.cs" t="Include" />
+                    <e p="FactoryArgumentsToChoiceBinder6.cs" t="Include" />
+                  </e>
+                  <e p="FactoryFromBinder" t="Include">
+                    <e p="FactoryFromBinder0.cs" t="Include" />
+                    <e p="FactoryFromBinder1.cs" t="Include" />
+                    <e p="FactoryFromBinder10.cs" t="Include" />
+                    <e p="FactoryFromBinder2.cs" t="Include" />
+                    <e p="FactoryFromBinder3.cs" t="Include" />
+                    <e p="FactoryFromBinder4.cs" t="Include" />
+                    <e p="FactoryFromBinder5.cs" t="Include" />
+                    <e p="FactoryFromBinder6.cs" t="Include" />
+                    <e p="SubContainerBinder" t="Include">
+                      <e p="FactorySubContainerBinder0.cs" t="Include" />
+                      <e p="FactorySubContainerBinder1.cs" t="Include" />
+                      <e p="FactorySubContainerBinder10.cs" t="Include" />
+                      <e p="FactorySubContainerBinder2.cs" t="Include" />
+                      <e p="FactorySubContainerBinder3.cs" t="Include" />
+                      <e p="FactorySubContainerBinder4.cs" t="Include" />
+                      <e p="FactorySubContainerBinder5.cs" t="Include" />
+                      <e p="FactorySubContainerBinder6.cs" t="Include" />
+                      <e p="FactorySubContainerBinderBase.cs" t="Include" />
+                      <e p="FactorySubContainerBinderWithParams.cs" t="Include" />
+                    </e>
+                    <e p="Untyped" t="Include">
+                      <e p="FactoryFromBinderUntyped.cs" t="Include" />
+                    </e>
+                  </e>
+                  <e p="FactoryFromBinderBase.cs" t="Include" />
+                  <e p="FactoryToChoiceBinder" t="Include">
+                    <e p="DecoratorToChoiceFromBinder.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder0.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder1.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder10.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder2.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder3.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder4.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder5.cs" t="Include" />
+                    <e p="FactoryToChoiceBinder6.cs" t="Include" />
+                  </e>
+                  <e p="FactoryToChoiceIdBinder" t="Include">
+                    <e p="FactoryToChoiceIdBinder0.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder1.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder10.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder2.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder3.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder4.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder5.cs" t="Include" />
+                    <e p="FactoryToChoiceIdBinder6.cs" t="Include" />
+                  </e>
+                  <e p="PlaceholderFactoryBindingFinalizer.cs" t="Include" />
+                  <e p="Pooling" t="Include">
+                    <e p="MemoryPoolBindingFinalizer.cs" t="Include" />
+                    <e p="MemoryPoolExpandBinder.cs" t="Include" />
+                    <e p="MemoryPoolInitialSizeBinder.cs" t="Include" />
+                  </e>
+                </e>
+                <e p="FromBinders" t="Include">
+                  <e p="FromBinder.cs" t="Include" />
+                  <e p="FromBinderGeneric.cs" t="Include" />
+                  <e p="FromBinderNonGeneric.cs" t="Include" />
+                </e>
+                <e p="GameObject" t="Include">
+                  <e p="NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                  <e p="TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                </e>
+                <e p="IdBinder.cs" t="Include" />
+                <e p="IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="IfNotBoundBinder.cs" t="Include" />
+                <e p="InstantiateCallbackConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="NonLazyBinder.cs" t="Include" />
+                <e p="ScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="SubContainerBinder.cs" t="Include" />
+                <e p="WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+                <e p="WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs" t="Include" />
+              </e>
+              <e p="BindInfo" t="Include">
+                <e p="BindInfo.cs" t="Include" />
+                <e p="BindStatement.cs" t="Include" />
+                <e p="FactoryBindInfo.cs" t="Include" />
+                <e p="GameObjectCreationParameters.cs" t="Include" />
+                <e p="MemoryPoolBindInfo.cs" t="Include" />
+              </e>
+              <e p="BindingUtil.cs" t="Include" />
+              <e p="Finalizers" t="Include">
+                <e p="IBindingFinalizer.cs" t="Include" />
+                <e p="NullBindingFinalizer.cs" t="Include" />
+                <e p="PrefabBindingFinalizer.cs" t="Include" />
+                <e p="PrefabResourceBindingFinalizer.cs" t="Include" />
+                <e p="ProviderBindingFinalizer.cs" t="Include" />
+                <e p="ScopableBindingFinalizer.cs" t="Include" />
+                <e p="SingleProviderBindingFinalizer.cs" t="Include" />
+                <e p="SubContainerBindingFinalizer.cs" t="Include" />
+                <e p="SubContainerPrefabBindingFinalizer.cs" t="Include" />
+              </e>
+            </e>
+            <e p="Factories" t="Include">
+              <e p="FactoryProviderWrapper.cs" t="Include" />
+              <e p="IFactory.cs" t="Include" />
+              <e p="KeyedFactory.cs" t="Include" />
+              <e p="PlaceholderFactory.cs" t="Include" />
+              <e p="PlaceholderFactoryBase.cs" t="Include" />
+              <e p="Pooling" t="Include">
+                <e p="IMemoryPool.cs" t="Include" />
+                <e p="MemoryPool.cs" t="Include" />
+                <e p="MemoryPoolBase.cs" t="Include" />
+                <e p="MonoMemoryPool.cs" t="Include" />
+                <e p="MonoPoolableMemoryPool.cs" t="Include" />
+                <e p="PoolableMemoryPool.cs" t="Include" />
+                <e p="PoolFactory.cs" t="Include" />
+                <e p="Static" t="Include">
+                  <e p="PoolableStaticMemoryPool.cs" t="Include" />
+                  <e p="StaticMemoryPool.cs" t="Include" />
+                </e>
+                <e p="Util" t="Include">
+                  <e p="ArrayPool.cs" t="Include" />
+                  <e p="DictionaryPool.cs" t="Include" />
+                  <e p="HashSetPool.cs" t="Include" />
+                  <e p="ListPool.cs" t="Include" />
+                  <e p="PoolCleanupChecker.cs" t="Include" />
+                  <e p="StaticMemoryPoolRegistry.cs" t="Include" />
+                </e>
+              </e>
+              <e p="PrefabFactory.cs" t="Include" />
+              <e p="PrefabResourceFactory.cs" t="Include" />
+            </e>
+            <e p="Injection" t="Include">
+              <e p="InjectContext.cs" t="Include" />
+              <e p="InjectUtil.cs" t="Include" />
+              <e p="LazyInject.cs" t="Include" />
+            </e>
+            <e p="Install" t="Include">
+              <e p="CompositeInstallerExtensions.cs" t="Include" />
+              <e p="CompositeMonoInstaller.cs" t="Include" />
+              <e p="CompositeScriptableObjectInstaller.cs" t="Include" />
+              <e p="Contexts" t="Include">
+                <e p="Context.cs" t="Include" />
+                <e p="GameObjectContext.cs" t="Include" />
+                <e p="ProjectContext.cs" t="Include" />
+                <e p="RunnableContext.cs" t="Include" />
+                <e p="SceneContext.cs" t="Include" />
+                <e p="SceneDecoratorContext.cs" t="Include" />
+                <e p="StaticContext.cs" t="Include" />
+              </e>
+              <e p="ICompositeInstaller.cs" t="Include" />
+              <e p="IInstaller.cs" t="Include" />
+              <e p="Installer.cs" t="Include" />
+              <e p="InstallerBase.cs" t="Include" />
+              <e p="MonoInstaller.cs" t="Include" />
+              <e p="MonoInstallerBase.cs" t="Include" />
+              <e p="ScriptableObjectInstaller.cs" t="Include" />
+              <e p="ScriptableObjectInstallerBase.cs" t="Include" />
+              <e p="ZenjectBinding.cs" t="Include" />
+              <e p="ZenjectManagersInstaller.cs" t="Include" />
+            </e>
+            <e p="Internal" t="Include">
+              <e p="Assert.cs" t="Include" />
+              <e p="Func.cs" t="Include" />
+              <e p="LinqExtensions.cs" t="Include" />
+              <e p="Log.cs" t="Include" />
+              <e p="MiscExtensions.cs" t="Include" />
+              <e p="PreserveAttribute.cs" t="Include" />
+              <e p="TypeExtensions.cs" t="Include" />
+              <e p="TypeStringFormatter.cs" t="Include" />
+              <e p="ValuePair.cs" t="Include" />
+            </e>
+            <e p="Kernels" t="Include">
+              <e p="DecoratableMonoKernel.cs" t="Include" />
+              <e p="DefaultGameObjectKernel.cs" t="Include" />
+              <e p="Kernel.cs" t="Include" />
+              <e p="MonoKernel.cs" t="Include" />
+              <e p="ProjectKernel.cs" t="Include" />
+              <e p="SceneKernel.cs" t="Include" />
+            </e>
+            <e p="link.xml" t="Include" />
+            <e p="Main" t="Include">
+              <e p="BindingId.cs" t="Include" />
+              <e p="DiContainer.cs" t="Include" />
+              <e p="IInstantiator.cs" t="Include" />
+              <e p="LazyInstanceInjector.cs" t="Include" />
+              <e p="LookupId.cs" t="Include" />
+              <e p="SingletonMarkRegistry.cs" t="Include" />
+              <e p="ZenjectSettings.cs" t="Include" />
+            </e>
+            <e p="Managers" t="Include">
+              <e p="DisposableManager.cs" t="Include" />
+              <e p="GuiRenderableManager.cs" t="Include" />
+              <e p="GuiRenderer.cs" t="Include" />
+              <e p="InitializableManager.cs" t="Include" />
+              <e p="PoolableManager.cs" t="Include" />
+              <e p="SceneContextRegistry.cs" t="Include" />
+              <e p="SceneContextRegistryAdderAndRemover.cs" t="Include" />
+              <e p="TaskUpdater.cs" t="Include" />
+              <e p="TickableManager.cs" t="Include" />
+            </e>
+            <e p="Providers" t="Include">
+              <e p="CachedOpenTypeProvider.cs" t="Include" />
+              <e p="CachedProvider.cs" t="Include" />
+              <e p="ComponentProviders" t="Include">
+                <e p="AddToGameObjectComponentProviders" t="Include">
+                  <e p="AddToCurrentGameObjectComponentProvider.cs" t="Include" />
+                  <e p="AddToExistingGameObjectComponentProvider.cs" t="Include" />
+                  <e p="AddToGameObjectComponentProviderBase.cs" t="Include" />
+                  <e p="AddToNewGameObjectComponentProvider.cs" t="Include" />
+                </e>
+                <e p="GetFromGameObjectComponentProvider.cs" t="Include" />
+                <e p="GetFromGameObjectGetterComponentProvider.cs" t="Include" />
+                <e p="GetFromPrefabComponentProvider.cs" t="Include" />
+                <e p="InstantiateOnPrefabComponentProvider.cs" t="Include" />
+              </e>
+              <e p="Decorator" t="Include">
+                <e p="DecoratorProvider.cs" t="Include" />
+              </e>
+              <e p="GameObjectProviders" t="Include">
+                <e p="EmptyGameObjectProvider.cs" t="Include" />
+                <e p="PrefabGameObjectProvider.cs" t="Include" />
+              </e>
+              <e p="GetterProvider.cs" t="Include" />
+              <e p="IFactoryProvider.cs" t="Include" />
+              <e p="InstanceProvider.cs" t="Include" />
+              <e p="IProvider.cs" t="Include" />
+              <e p="IProviderExtensions.cs" t="Include" />
+              <e p="MethodMultipleProviderUntyped.cs" t="Include" />
+              <e p="MethodProvider.cs" t="Include" />
+              <e p="MethodProviderMultiple.cs" t="Include" />
+              <e p="MethodProviderSimple.cs" t="Include" />
+              <e p="MethodProviderUntyped.cs" t="Include" />
+              <e p="MethodProviderWithContainer.cs" t="Include" />
+              <e p="PoolableMemoryPoolProvider.cs" t="Include" />
+              <e p="PrefabCreators" t="Include">
+                <e p="IPrefabInstantiator.cs" t="Include" />
+                <e p="PrefabInstantiator.cs" t="Include" />
+                <e p="PrefabInstantiatorCached.cs" t="Include" />
+              </e>
+              <e p="PrefabProviders" t="Include">
+                <e p="IPrefabProvider.cs" t="Include" />
+                <e p="PrefabProvider.cs" t="Include" />
+                <e p="PrefabProviderCustom.cs" t="Include" />
+                <e p="PrefabProviderResource.cs" t="Include" />
+              </e>
+              <e p="ProviderUtil.cs" t="Include" />
+              <e p="ResolveProvider.cs" t="Include" />
+              <e p="ResourceProvider.cs" t="Include" />
+              <e p="ScriptableObjectInstanceProvider.cs" t="Include" />
+              <e p="ScriptableObjectResourceProvider.cs" t="Include" />
+              <e p="SubContainerCreators" t="Include">
+                <e p="ISubContainerCreator.cs" t="Include" />
+                <e p="SubContainerCreatorBindInfo.cs" t="Include" />
+                <e p="SubContainerCreatorByInstaller.cs" t="Include" />
+                <e p="SubContainerCreatorByInstance.cs" t="Include" />
+                <e p="SubContainerCreatorByInstanceGetter.cs" t="Include" />
+                <e p="SubContainerCreatorByMethod.cs" t="Include" />
+                <e p="SubContainerCreatorByNewGameObjectDynamicContext.cs" t="Include" />
+                <e p="SubContainerCreatorByNewPrefab.cs" t="Include" />
+                <e p="SubContainerCreatorByNewPrefabDynamicContext.cs" t="Include" />
+                <e p="SubContainerCreatorByNewPrefabWithParams.cs" t="Include" />
+                <e p="SubContainerCreatorCached.cs" t="Include" />
+                <e p="SubContainerCreatorDynamicContext.cs" t="Include" />
+                <e p="SubContainerCreatorUtil.cs" t="Include" />
+              </e>
+              <e p="SubContainerDependencyProvider.cs" t="Include" />
+              <e p="TransientProvider.cs" t="Include" />
+            </e>
+            <e p="Signals" t="Include">
+              <e p="Internal" t="Include">
+                <e p="Binders" t="Include">
+                  <e p="BindSignal" t="Include">
+                    <e p="BindSignalFromBinder.cs" t="Include" />
+                    <e p="BindSignalIdToBinder.cs" t="Include" />
+                    <e p="BindSignalToBinder.cs" t="Include" />
+                    <e p="SignalCallbackWithLookupWrapper.cs" t="Include" />
+                    <e p="SignalCallbackWrapper.cs" t="Include" />
+                  </e>
+                  <e p="DeclareSignal" t="Include">
+                    <e p="DeclareSignalAsyncTickPriorityCopyBinder.cs" t="Include" />
+                    <e p="DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs" t="Include" />
+                    <e p="DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs" t="Include" />
+                    <e p="SignalBindingBindInfo.cs" t="Include" />
+                    <e p="SignalDeclarationBindInfo.cs" t="Include" />
+                  </e>
+                  <e p="SignalCopyBinder.cs" t="Include" />
+                  <e p="SignalExtensions.cs" t="Include" />
+                  <e p="SignalTickPriorityCopyBinder.cs" t="Include" />
+                </e>
+                <e p="SignalDeclaration.cs" t="Include" />
+                <e p="SignalSubscription.cs" t="Include" />
+                <e p="SignalSubscriptionId.cs" t="Include" />
+              </e>
+              <e p="Main" t="Include">
+                <e p="SignalBus.cs" t="Include" />
+                <e p="SignalBusInstaller.cs" t="Include" />
+                <e p="SignalDeclarationAsyncInitializer.cs" t="Include" />
+              </e>
+            </e>
+            <e p="Util" t="Include">
+              <e p="ActionInstaller.cs" t="Include" />
+              <e p="CheatSheet.cs" t="Include" />
+              <e p="ConstructorChoiceStrategy.cs" t="Include" />
+              <e p="DefaultGameObjectParentInstaller.cs" t="Include" />
+              <e p="DisposeBlock.cs" t="Include" />
+              <e p="ExecutionOrderInstaller.cs" t="Include" />
+              <e p="ProfileBlock.cs" t="Include" />
+              <e p="ProfileTimers.cs" t="Include" />
+              <e p="ReflectionInfoTypeInfoConverter.cs" t="Include" />
+              <e p="ReflectionTypeInfo.cs" t="Include" />
+              <e p="ReflectionUtil.cs" t="Include" />
+              <e p="TypeAnalyzer.cs" t="Include" />
+              <e p="UnityUtil.cs" t="Include" />
+              <e p="ValidationUtil.cs" t="Include" />
+              <e p="ZenAutoInjecter.cs" t="Include" />
+              <e p="ZenjectException.cs" t="Include" />
+              <e p="ZenjectSceneLoader.cs" t="Include" />
+              <e p="ZenjectStateMachineBehaviourAutoInjecter.cs" t="Include" />
+              <e p="ZenPools.cs" t="Include" />
+              <e p="ZenReflectionTypeAnalyzer.cs" t="Include" />
+              <e p="ZenUtilInternal.cs" t="Include" />
+            </e>
+            <e p="Validation" t="Include">
+              <e p="IValidatable.cs" t="Include" />
+              <e p="ValidationMarker.cs" t="Include" />
+            </e>
+            <e p="Zenject.asmdef" t="Include" />
+          </e>
+          <e p="Usage" t="Include">
+            <e p="link.xml" t="Include" />
+          </e>
+        </e>
+        <e p="Terrain" t="Include" />
+      </e>
+      <e p="Extenject-Async.csproj" t="IncludeRecursive" />
+      <e p="First.sln" t="IncludeFlat" />
+      <e p="obj" t="ExcludeRecursive" />
+      <e p="Packages" t="ExcludeRecursive" />
+      <e p="Temp\Bin" t="ExcludeRecursive" />
+      <e p="Zenject-Editor.csproj" t="IncludeRecursive" />
+      <e p="Zenject-PoolMonitor-Editor.csproj" t="IncludeRecursive" />
+      <e p="Zenject-ReflectionBaking-Editor.csproj" t="IncludeRecursive" />
+      <e p="Zenject-TestFramework.csproj" t="IncludeRecursive" />
+      <e p="Zenject.csproj" t="IncludeRecursive" />
+    </e>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.First/.idea/indexLayout.xml b/.idea/.idea.First/.idea/indexLayout.xml
new file mode 100644
index 0000000..0423ca9
--- /dev/null
+++ b/.idea/.idea.First/.idea/indexLayout.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ContentModelUserStore">
+    <attachedFolders />
+    <explicitIncludes>
+      <Path>Library/PackageCache/com.unity.adaptiveperformance.samsung.android@4.0.1</Path>
+      <Path>Library/PackageCache/com.unity.adaptiveperformance@4.0.1</Path>
+      <Path>Library/PackageCache/com.unity.collab-proxy@1.17.2</Path>
+      <Path>Library/PackageCache/com.unity.ext.nunit@1.0.6</Path>
+      <Path>Library/PackageCache/com.unity.ide.rider@3.0.16</Path>
+      <Path>Library/PackageCache/com.unity.ide.visualstudio@2.0.16</Path>
+      <Path>Library/PackageCache/com.unity.ide.vscode@1.2.5</Path>
+      <Path>Library/PackageCache/com.unity.inputsystem@1.4.4</Path>
+      <Path>Library/PackageCache/com.unity.mobile.android-logcat@1.3.2</Path>
+      <Path>Library/PackageCache/com.unity.mobile.notifications@2.0.2</Path>
+      <Path>Library/PackageCache/com.unity.nuget.newtonsoft-json@3.0.2</Path>
+      <Path>Library/PackageCache/com.unity.profiling.core@1.0.2</Path>
+      <Path>Library/PackageCache/com.unity.services.core@1.4.3</Path>
+      <Path>Library/PackageCache/com.unity.subsystemregistration@1.1.0</Path>
+      <Path>Library/PackageCache/com.unity.test-framework@1.1.33</Path>
+      <Path>Library/PackageCache/com.unity.textmeshpro@3.0.6</Path>
+      <Path>Library/PackageCache/com.unity.timeline@1.6.4</Path>
+      <Path>Library/PackageCache/com.unity.visualscripting@1.7.8</Path>
+      <Path>Packages</Path>
+      <Path>ProjectSettings</Path>
+    </explicitIncludes>
+    <explicitExcludes>
+      <Path>.idea</Path>
+      <Path>Library</Path>
+      <Path>Logs</Path>
+      <Path>Temp</Path>
+      <Path>UserSettings</Path>
+      <Path>obj</Path>
+    </explicitExcludes>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.First/.idea/modules.xml b/.idea/.idea.First/.idea/modules.xml
new file mode 100644
index 0000000..f51c2bf
--- /dev/null
+++ b/.idea/.idea.First/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/.idea.First/riderModule.iml" filepath="$PROJECT_DIR$/.idea/.idea.First/riderModule.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.First/.idea/projectSettingsUpdater.xml b/.idea/.idea.First/.idea/projectSettingsUpdater.xml
new file mode 100644
index 0000000..4bb9f4d
--- /dev/null
+++ b/.idea/.idea.First/.idea/projectSettingsUpdater.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RiderProjectSettingsUpdater">
+    <option name="vcsConfiguration" value="2" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.First/.idea/workspace.xml b/.idea/.idea.First/.idea/workspace.xml
new file mode 100644
index 0000000..fd0a62a
--- /dev/null
+++ b/.idea/.idea.First/.idea/workspace.xml
@@ -0,0 +1,197 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="29bfe3ff-127f-44ba-8493-a4f6863fdf32" name="Default Changelist" comment="" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="HighlightingSettingsPerFile">
+    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/F5B293C7-4049-457C-ABC2-8437C5A76392/a8/abba1cda/IInitializable.cs" root0="SKIP_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Library/PackageCache/com.unity.mobile.notifications@2.0.2/Editor/NotificationSettingsProvider.cs" root0="SKIP_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Library/PackageCache/com.unity.visualscripting@1.7.8/Editor/VisualScripting.Core/Interface/Fonts/FontWeight.cs" root0="SKIP_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/Assets/Scripts/SpawnPosition.cs" root0="FORCE_HIGHLIGHTING" />
+  </component>
+  <component name="IdeDocumentHistory">
+    <option name="CHANGED_PATHS">
+      <list>
+        <option value="$PROJECT_DIR$/Assets/Scripts/TestInslaller.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/CustomPlayerFactory.PlayerFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/CustomPlayerFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/IEntity.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/Installers/CameraInstaller.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/Installers/PlayerInstaller.cs" />
+        <option value="$PROJECT_DIR$/Assets/Source/Runtime/Main/DiContainer.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/PlayerEntityFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/CameraFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/Entity.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/IFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/CameraFollower.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/PlayerEntity.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/Installers/LocationInstaller.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/IEntityFactory.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/SpawnPoint.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/Infrastructure/LocationInstaller.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/SpawnPosition.cs" />
+        <option value="$PROJECT_DIR$/Assets/Scripts/PlayerFactory.cs" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectId" id="2H4fOZD4BSlAN0QKCCjLQD4BYsJ" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">
+    <property name="DebuggerViewTab_PTCS_FirstProportionKey" value="0.3502052" />
+    <property name="DebuggerViewTab_PTCS_LastProportionKey" value="0.3002736" />
+    <property name="Discover.Launch.Via.Unity" value="true" />
+    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
+    <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
+  </component>
+  <component name="RunManager" selected="Attach to Unity Editor.Attach to Unity Editor">
+    <configuration name="Attach to Unity Editor &amp; Play" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="UNITY_ATTACH_AND_PLAY" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
+      <option name="allowRunningInParallel" value="false" />
+      <option name="listenPortForConnections" value="false" />
+      <option name="pid" />
+      <option name="selectedOptions">
+        <set />
+      </option>
+      <method v="2" />
+    </configuration>
+    <configuration name="Attach to Unity Editor" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="Unity Debug" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
+      <option name="allowRunningInParallel" value="false" />
+      <option name="listenPortForConnections" value="false" />
+      <option name="pid" />
+      <option name="selectedOptions">
+        <set />
+      </option>
+      <method v="2" />
+    </configuration>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="29bfe3ff-127f-44ba-8493-a4f6863fdf32" name="Default Changelist" comment="" />
+      <created>1667549247899</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1667549247899</updated>
+      <workItem from="1667549252239" duration="3820000" />
+      <workItem from="1667556408768" duration="4759000" />
+      <workItem from="1667599971634" duration="9613000" />
+      <workItem from="1667632559958" duration="127000" />
+      <workItem from="1667641708029" duration="667000" />
+      <workItem from="1667646303905" duration="6000" />
+      <workItem from="1667715226287" duration="16000" />
+      <workItem from="1667807480235" duration="9065000" />
+      <workItem from="1667853226269" duration="6655000" />
+      <workItem from="1667863996441" duration="2948000" />
+      <workItem from="1667869161606" duration="3675000" />
+      <workItem from="1667895627894" duration="11904000" />
+      <workItem from="1667911756712" duration="49000" />
+      <workItem from="1667983330057" duration="8765000" />
+      <workItem from="1668008698512" duration="2874000" />
+      <workItem from="1668025792235" duration="338000" />
+    </task>
+    <servers />
+  </component>
+  <component name="UnityProjectConfiguration" hasMinimizedUI="true" />
+  <component name="UnityUnitTestConfiguration" currentTestLauncher="EditMode" />
+  <component name="VcsManagerConfiguration">
+    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
+  </component>
+  <component name="WindowStateProjectService">
+    <state x="445" y="168" width="646" height="524" key="#Context_Actions" timestamp="1667558072286">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="445" y="168" width="646" height="524" key="#Context_Actions/0.0.1536.864@0.0.1536.864" timestamp="1667558072286" />
+    <state x="517" y="257" key="#Notifications" timestamp="1667600659452">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="517" y="257" key="#Notifications/0.0.1536.864@0.0.1536.864" timestamp="1667600659452" />
+    <state x="528" y="292" key="ANALYSIS_DLG_com.jetbrains.rider.actions.impl.cleanup.RiderCodeCleanupAction$actionPerformed$dlg$1" timestamp="1667551643231">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="528" y="292" key="ANALYSIS_DLG_com.jetbrains.rider.actions.impl.cleanup.RiderCodeCleanupAction$actionPerformed$dlg$1/0.0.1536.864@0.0.1536.864" timestamp="1667551643231" />
+    <state width="1493" height="304" key="GridCell.Tab.0.bottom" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.0.bottom/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.0.center" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.0.center/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.0.left" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.0.left/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.0.right" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.0.right/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.1.bottom" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.1.bottom/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.1.center" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.1.center/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.1.left" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.1.left/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.1.right" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.1.right/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.2.bottom" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.2.bottom/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.2.center" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.2.center/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.2.left" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.2.left/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.2.right" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.2.right/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.3.bottom" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.3.bottom/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.3.center" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.3.center/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.3.left" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.3.left/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state width="1493" height="304" key="GridCell.Tab.3.right" timestamp="1667561207404">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state width="1493" height="304" key="GridCell.Tab.3.right/0.0.1536.864@0.0.1536.864" timestamp="1667561207404" />
+    <state x="361" y="164" key="Rider.ProjectTemplateDialog.Size" timestamp="1667641755553">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="361" y="164" key="Rider.ProjectTemplateDialog.Size/0.0.1536.864@0.0.1536.864" timestamp="1667641755553" />
+    <state x="151" y="42" key="SettingsEditor" timestamp="1667556987117">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="151" y="42" key="SettingsEditor/0.0.1536.864@0.0.1536.864" timestamp="1667556987117" />
+    <state x="431" y="181" width="672" height="678" key="search.everywhere.popup" timestamp="1667905019975">
+      <screen x="0" y="0" width="1536" height="864" />
+    </state>
+    <state x="431" y="181" width="672" height="678" key="search.everywhere.popup/0.0.1536.864@0.0.1536.864" timestamp="1667905019975" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.idea.First/riderModule.iml b/.idea/.idea.First/riderModule.iml
new file mode 100644
index 0000000..1a4e0d9
--- /dev/null
+++ b/.idea/.idea.First/riderModule.iml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="RIDER_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$/../.." />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/Assets/Adaptive Performance.meta b/Assets/Adaptive Performance.meta
new file mode 100644
index 0000000..47c0265
--- /dev/null
+++ b/Assets/Adaptive Performance.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 5edecf9f45b96ea49b85abc7dffa78aa
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset b/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset
new file mode 100644
index 0000000..9d36c2f
--- /dev/null
+++ b/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset	
@@ -0,0 +1,76 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &-3560969033701351926
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 179fc3111e144bc4688dca4038b3265d, type: 3}
+  m_Name: Android Settings
+  m_EditorClassIdentifier: 
+  m_LoaderManagerInstance: {fileID: 9054384679705395002}
+  m_InitManagerOnStart: 0
+--- !u!114 &-131577563894742329
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 179fc3111e144bc4688dca4038b3265d, type: 3}
+  m_Name: Standalone Settings
+  m_EditorClassIdentifier: 
+  m_LoaderManagerInstance: {fileID: 2200582689260791794}
+  m_InitManagerOnStart: 0
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: cb0ece14d1f711a4fb9325ca819dee95, type: 3}
+  m_Name: AdaptivePerformanceGeneralSettings
+  m_EditorClassIdentifier: 
+  Keys: 0100000007000000
+  Values:
+  - {fileID: -131577563894742329}
+  - {fileID: -3560969033701351926}
+--- !u!114 &2200582689260791794
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 536372c49e1ca914d822849d36de938c, type: 3}
+  m_Name: Standalone Providers
+  m_EditorClassIdentifier: 
+  m_AutomaticLoading: 0
+  m_AutomaticRunning: 0
+  m_Loaders: []
+--- !u!114 &9054384679705395002
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 536372c49e1ca914d822849d36de938c, type: 3}
+  m_Name: Android Providers
+  m_EditorClassIdentifier: 
+  m_AutomaticLoading: 0
+  m_AutomaticRunning: 0
+  m_Loaders: []
diff --git a/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset.meta b/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset.meta
new file mode 100644
index 0000000..ce765c9
--- /dev/null
+++ b/Assets/Adaptive Performance/AdaptivePerformanceGeneralSettings.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 7ac6cc7195ebc0f4590396245b365d85
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Provider.meta b/Assets/Adaptive Performance/Provider.meta
new file mode 100644
index 0000000..fe43d29
--- /dev/null
+++ b/Assets/Adaptive Performance/Provider.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: a26e8e5b6e275b7459c2cdf62f934382
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset b/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset
new file mode 100644
index 0000000..8d8e1bd
--- /dev/null
+++ b/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset	
@@ -0,0 +1,14 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 12368ffd90e3c4ac4889486ab7b2aa78, type: 3}
+  m_Name: Samsung Android Provider Loader
+  m_EditorClassIdentifier: 
diff --git a/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset.meta b/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset.meta
new file mode 100644
index 0000000..3cf0744
--- /dev/null
+++ b/Assets/Adaptive Performance/Provider/Samsung Android Provider Loader.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 8827496465d4f1a4d875b699e5576f3e
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset b/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset
new file mode 100644
index 0000000..224dbc0
--- /dev/null
+++ b/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset	
@@ -0,0 +1,14 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 921854900f2214d7ab9b1e95d17dbb2b, type: 3}
+  m_Name: Simulator Provider Loader
+  m_EditorClassIdentifier: 
diff --git a/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset.meta b/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset.meta
new file mode 100644
index 0000000..5f3a9a5
--- /dev/null
+++ b/Assets/Adaptive Performance/Provider/Simulator Provider Loader.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: b01b0a1410daa4149b97a0608fed4b27
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Settings.meta b/Assets/Adaptive Performance/Settings.meta
new file mode 100644
index 0000000..119522a
--- /dev/null
+++ b/Assets/Adaptive Performance/Settings.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 8a1e63c0257e75449a5113155afc3a0e
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset b/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset
new file mode 100644
index 0000000..929979c
--- /dev/null
+++ b/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset	
@@ -0,0 +1,318 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 02a364304553d4fe797810bd5c88f9d8, type: 3}
+  m_Name: Samsung Android Provider Settings
+  m_EditorClassIdentifier: 
+  m_Logging: 0
+  m_AutomaticPerformanceModeEnabled: 1
+  m_EnableBoostOnStartup: 1
+  m_StatsLoggingFrequencyInFrames: 50
+  m_IndexerSettings:
+    m_Active: 1
+    m_ThermalActionDelay: 10
+    m_PerformanceActionDelay: 4
+  m_ScalerSettings:
+    m_AdaptiveFramerate:
+      m_Name: Adaptive Framerate
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 7
+      m_MaxLevel: 45
+      m_MinBound: 15
+      m_MaxBound: 60
+    m_AdaptiveResolution:
+      m_Name: Adaptive Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 6
+      m_MaxLevel: 9
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveBatching:
+      m_Name: Adaptive Batching
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveLOD:
+      m_Name: Adaptive LOD
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.4
+      m_MaxBound: 1
+    m_AdaptiveLut:
+      m_Name: Adaptive Lut
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveMSAA:
+      m_Name: Adaptive MSAA
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 6
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowCascade:
+      m_Name: Adaptive Shadow Cascade
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowDistance:
+      m_Name: Adaptive Shadow Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowmapResolution:
+      m_Name: Adaptive Shadowmap Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowQuality:
+      m_Name: Adaptive Shadow Quality
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 3
+      m_MaxLevel: 3
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveSorting:
+      m_Name: Adaptive Sorting
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveTransparency:
+      m_Name: Adaptive Transparency
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveViewDistance:
+      m_Name: Adaptive View Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 40
+      m_MinBound: 50
+      m_MaxBound: 1000
+    m_AdaptivePhysics:
+      m_Name: Adaptive Physics
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 1
+      m_MaxLevel: 5
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveDecals:
+      m_Name: Adaptive Decals
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 2
+      m_MaxLevel: 20
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_AdaptiveLayerCulling:
+      m_Name: Adaptive Layer Culling
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 40
+      m_MinBound: 0.01
+      m_MaxBound: 1
+  m_scalerProfileList:
+  - m_AdaptiveFramerate:
+      m_Name: Adaptive Framerate
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 7
+      m_MaxLevel: 45
+      m_MinBound: 15
+      m_MaxBound: 60
+    m_AdaptiveResolution:
+      m_Name: Adaptive Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 6
+      m_MaxLevel: 9
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveBatching:
+      m_Name: Adaptive Batching
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveLOD:
+      m_Name: Adaptive LOD
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.4
+      m_MaxBound: 1
+    m_AdaptiveLut:
+      m_Name: Adaptive Lut
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveMSAA:
+      m_Name: Adaptive MSAA
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 6
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowCascade:
+      m_Name: Adaptive Shadow Cascade
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowDistance:
+      m_Name: Adaptive Shadow Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowmapResolution:
+      m_Name: Adaptive Shadowmap Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowQuality:
+      m_Name: Adaptive Shadow Quality
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 3
+      m_MaxLevel: 3
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveSorting:
+      m_Name: Adaptive Sorting
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveTransparency:
+      m_Name: Adaptive Transparency
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveViewDistance:
+      m_Name: Adaptive View Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 40
+      m_MinBound: 50
+      m_MaxBound: 1000
+    m_AdaptivePhysics:
+      m_Name: Adaptive Physics
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 1
+      m_MaxLevel: 5
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveDecals:
+      m_Name: Adaptive Decals
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 2
+      m_MaxLevel: 20
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_AdaptiveLayerCulling:
+      m_Name: Adaptive Layer Culling
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 40
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_Name: Default Scaler Profile
+  m_DefaultScalerProfilerIndex: 0
+  k_AssetVersion: 2
+  m_SamsungProviderLogging: 0
+  m_HighSpeedVRR: 0
+  m_AutomaticVRR: 1
diff --git a/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset.meta b/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset.meta
new file mode 100644
index 0000000..3de6879
--- /dev/null
+++ b/Assets/Adaptive Performance/Settings/Samsung Android Provider Settings.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 5a8561c7c459516459dc073c8eb7c35a
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset b/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset
new file mode 100644
index 0000000..0f7e9f8
--- /dev/null
+++ b/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset	
@@ -0,0 +1,315 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 2
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: b592865877cb54284a5d1d88aec9cfbb, type: 3}
+  m_Name: Simulator Provider Settings
+  m_EditorClassIdentifier: 
+  m_Logging: 1
+  m_AutomaticPerformanceModeEnabled: 1
+  m_EnableBoostOnStartup: 1
+  m_StatsLoggingFrequencyInFrames: 50
+  m_IndexerSettings:
+    m_Active: 1
+    m_ThermalActionDelay: 10
+    m_PerformanceActionDelay: 4
+  m_ScalerSettings:
+    m_AdaptiveFramerate:
+      m_Name: Adaptive Framerate
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 7
+      m_MaxLevel: 45
+      m_MinBound: 15
+      m_MaxBound: 60
+    m_AdaptiveResolution:
+      m_Name: Adaptive Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 6
+      m_MaxLevel: 9
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveBatching:
+      m_Name: Adaptive Batching
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveLOD:
+      m_Name: Adaptive LOD
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.4
+      m_MaxBound: 1
+    m_AdaptiveLut:
+      m_Name: Adaptive Lut
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveMSAA:
+      m_Name: Adaptive MSAA
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 6
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowCascade:
+      m_Name: Adaptive Shadow Cascade
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowDistance:
+      m_Name: Adaptive Shadow Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowmapResolution:
+      m_Name: Adaptive Shadowmap Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowQuality:
+      m_Name: Adaptive Shadow Quality
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 3
+      m_MaxLevel: 3
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveSorting:
+      m_Name: Adaptive Sorting
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveTransparency:
+      m_Name: Adaptive Transparency
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveViewDistance:
+      m_Name: Adaptive View Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 40
+      m_MinBound: 50
+      m_MaxBound: 1000
+    m_AdaptivePhysics:
+      m_Name: Adaptive Physics
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 1
+      m_MaxLevel: 5
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveDecals:
+      m_Name: Adaptive Decals
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 2
+      m_MaxLevel: 20
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_AdaptiveLayerCulling:
+      m_Name: Adaptive Layer Culling
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 40
+      m_MinBound: 0.01
+      m_MaxBound: 1
+  m_scalerProfileList:
+  - m_AdaptiveFramerate:
+      m_Name: Adaptive Framerate
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 7
+      m_MaxLevel: 45
+      m_MinBound: 15
+      m_MaxBound: 60
+    m_AdaptiveResolution:
+      m_Name: Adaptive Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 6
+      m_MaxLevel: 9
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveBatching:
+      m_Name: Adaptive Batching
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveLOD:
+      m_Name: Adaptive LOD
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.4
+      m_MaxBound: 1
+    m_AdaptiveLut:
+      m_Name: Adaptive Lut
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveMSAA:
+      m_Name: Adaptive MSAA
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 6
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowCascade:
+      m_Name: Adaptive Shadow Cascade
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 3
+      m_MaxLevel: 2
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveShadowDistance:
+      m_Name: Adaptive Shadow Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowmapResolution:
+      m_Name: Adaptive Shadowmap Resolution
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 2
+      m_MaxLevel: 3
+      m_MinBound: 0.15
+      m_MaxBound: 1
+    m_AdaptiveShadowQuality:
+      m_Name: Adaptive Shadow Quality
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 3
+      m_MaxLevel: 3
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveSorting:
+      m_Name: Adaptive Sorting
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveTransparency:
+      m_Name: Adaptive Transparency
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 1
+      m_MinBound: 0
+      m_MaxBound: 1
+    m_AdaptiveViewDistance:
+      m_Name: Adaptive View Distance
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 2
+      m_Target: 2
+      m_MaxLevel: 40
+      m_MinBound: 50
+      m_MaxBound: 1000
+    m_AdaptivePhysics:
+      m_Name: Adaptive Physics
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 0
+      m_Target: 1
+      m_MaxLevel: 5
+      m_MinBound: 0.5
+      m_MaxBound: 1
+    m_AdaptiveDecals:
+      m_Name: Adaptive Decals
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 2
+      m_MaxLevel: 20
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_AdaptiveLayerCulling:
+      m_Name: Adaptive Layer Culling
+      m_Enabled: 0
+      m_Scale: 1
+      m_VisualImpact: 1
+      m_Target: 1
+      m_MaxLevel: 40
+      m_MinBound: 0.01
+      m_MaxBound: 1
+    m_Name: Default Scaler Profile
+  m_DefaultScalerProfilerIndex: 0
+  k_AssetVersion: 2
diff --git a/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset.meta b/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset.meta
new file mode 100644
index 0000000..a2d4748
--- /dev/null
+++ b/Assets/Adaptive Performance/Settings/Simulator Provider Settings.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 6b19b9d1a6890394fbe243c39f41bc4e
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Input System.meta b/Assets/Input System.meta
new file mode 100644
index 0000000..487ea71
--- /dev/null
+++ b/Assets/Input System.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 68ac619beff887c4497afe955f1a5e69
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Input System/InputSystem.inputsettings.asset b/Assets/Input System/InputSystem.inputsettings.asset
new file mode 100644
index 0000000..dc29750
--- /dev/null
+++ b/Assets/Input System/InputSystem.inputsettings.asset	
@@ -0,0 +1,38 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: c46f07b5ed07e4e92aa78254188d3d10, type: 3}
+  m_Name: InputSystem.inputsettings
+  m_EditorClassIdentifier: 
+  m_SupportedDevices:
+  - Keyboard
+  - Touchscreen
+  m_UpdateMode: 1
+  m_MaxEventBytesPerUpdate: 5242880
+  m_MaxQueuedEventsPerUpdate: 1000
+  m_CompensateForScreenOrientation: 1
+  m_BackgroundBehavior: 0
+  m_EditorInputBehaviorInPlayMode: 0
+  m_DefaultDeadzoneMin: 0.125
+  m_DefaultDeadzoneMax: 0.925
+  m_DefaultButtonPressPoint: 0.5
+  m_ButtonReleaseThreshold: 0.75
+  m_DefaultTapTime: 0.2
+  m_DefaultSlowTapTime: 0.5
+  m_DefaultHoldTime: 0.4
+  m_TapRadius: 5
+  m_MultiTapDelayTime: 0.75
+  m_DisableRedundantEventsMerging: 0
+  m_ShortcutKeysConsumeInputs: 0
+  m_iOSSettings:
+    m_MotionUsage:
+      m_Enabled: 0
+      m_Description: 
diff --git a/Assets/Input System/InputSystem.inputsettings.asset.meta b/Assets/Input System/InputSystem.inputsettings.asset.meta
new file mode 100644
index 0000000..0b3a0cf
--- /dev/null
+++ b/Assets/Input System/InputSystem.inputsettings.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: fcbe6bde26ad51146a2e3e8be5487c19
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Input System/PlayerInput.cs b/Assets/Input System/PlayerInput.cs
new file mode 100644
index 0000000..c5a7cfa
--- /dev/null
+++ b/Assets/Input System/PlayerInput.cs	
@@ -0,0 +1,225 @@
+//------------------------------------------------------------------------------
+// <auto-generated>
+//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
+//     version 1.4.4
+//     from Assets/Input System/PlayerInput.inputactions
+//
+//     Changes to this file may cause incorrect behavior and will be lost if
+//     the code is regenerated.
+// </auto-generated>
+//------------------------------------------------------------------------------
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using UnityEngine.InputSystem;
+using UnityEngine.InputSystem.Utilities;
+
+public partial class @PlayerInput : IInputActionCollection2, IDisposable
+{
+    public InputActionAsset asset { get; }
+    public @PlayerInput()
+    {
+        asset = InputActionAsset.FromJson(@"{
+    ""name"": ""PlayerInput"",
+    ""maps"": [
+        {
+            ""name"": ""Movement"",
+            ""id"": ""d4d7df2e-a9b1-4eb0-8316-da0bcefa680b"",
+            ""actions"": [
+                {
+                    ""name"": ""WASD"",
+                    ""type"": ""Value"",
+                    ""id"": ""f3c89235-ce34-4d9d-9700-a10e40d306aa"",
+                    ""expectedControlType"": ""Vector2"",
+                    ""processors"": """",
+                    ""interactions"": """",
+                    ""initialStateCheck"": true
+                }
+            ],
+            ""bindings"": [
+                {
+                    ""name"": ""2D Vector"",
+                    ""id"": ""113fcd52-ae71-47d2-a403-68ebbcafcc74"",
+                    ""path"": ""2DVector"",
+                    ""interactions"": """",
+                    ""processors"": """",
+                    ""groups"": """",
+                    ""action"": ""WASD"",
+                    ""isComposite"": true,
+                    ""isPartOfComposite"": false
+                },
+                {
+                    ""name"": ""up"",
+                    ""id"": ""00822dcd-031b-4002-9556-f47b4c8f7d1c"",
+                    ""path"": ""<Keyboard>/w"",
+                    ""interactions"": """",
+                    ""processors"": """",
+                    ""groups"": """",
+                    ""action"": ""WASD"",
+                    ""isComposite"": false,
+                    ""isPartOfComposite"": true
+                },
+                {
+                    ""name"": ""down"",
+                    ""id"": ""b542ed40-6273-4e1a-b3d1-0a065e20785e"",
+                    ""path"": ""<Keyboard>/s"",
+                    ""interactions"": """",
+                    ""processors"": """",
+                    ""groups"": """",
+                    ""action"": ""WASD"",
+                    ""isComposite"": false,
+                    ""isPartOfComposite"": true
+                },
+                {
+                    ""name"": ""left"",
+                    ""id"": ""115ca29e-c4de-46a9-8fe3-e52b35f49b83"",
+                    ""path"": ""<Keyboard>/a"",
+                    ""interactions"": """",
+                    ""processors"": """",
+                    ""groups"": """",
+                    ""action"": ""WASD"",
+                    ""isComposite"": false,
+                    ""isPartOfComposite"": true
+                },
+                {
+                    ""name"": ""right"",
+                    ""id"": ""7721a013-8cc0-45f8-b3b9-bd8dfe4579b0"",
+                    ""path"": ""<Keyboard>/d"",
+                    ""interactions"": """",
+                    ""processors"": """",
+                    ""groups"": """",
+                    ""action"": ""WASD"",
+                    ""isComposite"": false,
+                    ""isPartOfComposite"": true
+                }
+            ]
+        }
+    ],
+    ""controlSchemes"": [
+        {
+            ""name"": ""Keyboard"",
+            ""bindingGroup"": ""Keyboard"",
+            ""devices"": []
+        },
+        {
+            ""name"": ""Touchscreen"",
+            ""bindingGroup"": ""Touchscreen"",
+            ""devices"": []
+        }
+    ]
+}");
+        // Movement
+        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
+        m_Movement_WASD = m_Movement.FindAction("WASD", throwIfNotFound: true);
+    }
+
+    public void Dispose()
+    {
+        UnityEngine.Object.Destroy(asset);
+    }
+
+    public InputBinding? bindingMask
+    {
+        get => asset.bindingMask;
+        set => asset.bindingMask = value;
+    }
+
+    public ReadOnlyArray<InputDevice>? devices
+    {
+        get => asset.devices;
+        set => asset.devices = value;
+    }
+
+    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;
+
+    public bool Contains(InputAction action)
+    {
+        return asset.Contains(action);
+    }
+
+    public IEnumerator<InputAction> GetEnumerator()
+    {
+        return asset.GetEnumerator();
+    }
+
+    IEnumerator IEnumerable.GetEnumerator()
+    {
+        return GetEnumerator();
+    }
+
+    public void Enable()
+    {
+        asset.Enable();
+    }
+
+    public void Disable()
+    {
+        asset.Disable();
+    }
+    public IEnumerable<InputBinding> bindings => asset.bindings;
+
+    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
+    {
+        return asset.FindAction(actionNameOrId, throwIfNotFound);
+    }
+    public int FindBinding(InputBinding bindingMask, out InputAction action)
+    {
+        return asset.FindBinding(bindingMask, out action);
+    }
+
+    // Movement
+    private readonly InputActionMap m_Movement;
+    private IMovementActions m_MovementActionsCallbackInterface;
+    private readonly InputAction m_Movement_WASD;
+    public struct MovementActions
+    {
+        private @PlayerInput m_Wrapper;
+        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
+        public InputAction @WASD => m_Wrapper.m_Movement_WASD;
+        public InputActionMap Get() { return m_Wrapper.m_Movement; }
+        public void Enable() { Get().Enable(); }
+        public void Disable() { Get().Disable(); }
+        public bool enabled => Get().enabled;
+        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
+        public void SetCallbacks(IMovementActions instance)
+        {
+            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
+            {
+                @WASD.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnWASD;
+                @WASD.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnWASD;
+                @WASD.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnWASD;
+            }
+            m_Wrapper.m_MovementActionsCallbackInterface = instance;
+            if (instance != null)
+            {
+                @WASD.started += instance.OnWASD;
+                @WASD.performed += instance.OnWASD;
+                @WASD.canceled += instance.OnWASD;
+            }
+        }
+    }
+    public MovementActions @Movement => new MovementActions(this);
+    private int m_KeyboardSchemeIndex = -1;
+    public InputControlScheme KeyboardScheme
+    {
+        get
+        {
+            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
+            return asset.controlSchemes[m_KeyboardSchemeIndex];
+        }
+    }
+    private int m_TouchscreenSchemeIndex = -1;
+    public InputControlScheme TouchscreenScheme
+    {
+        get
+        {
+            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
+            return asset.controlSchemes[m_TouchscreenSchemeIndex];
+        }
+    }
+    public interface IMovementActions
+    {
+        void OnWASD(InputAction.CallbackContext context);
+    }
+}
diff --git a/Assets/Input System/PlayerInput.cs.meta b/Assets/Input System/PlayerInput.cs.meta
new file mode 100644
index 0000000..caa9c5d
--- /dev/null
+++ b/Assets/Input System/PlayerInput.cs.meta	
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 3f2dadd54c6ea5d41b4288e8dc13fabd
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Input System/PlayerInput.inputactions b/Assets/Input System/PlayerInput.inputactions
new file mode 100644
index 0000000..e0fbbfa
--- /dev/null
+++ b/Assets/Input System/PlayerInput.inputactions	
@@ -0,0 +1,89 @@
+{
+    "name": "PlayerInput",
+    "maps": [
+        {
+            "name": "Movement",
+            "id": "d4d7df2e-a9b1-4eb0-8316-da0bcefa680b",
+            "actions": [
+                {
+                    "name": "WASD",
+                    "type": "Value",
+                    "id": "f3c89235-ce34-4d9d-9700-a10e40d306aa",
+                    "expectedControlType": "Vector2",
+                    "processors": "",
+                    "interactions": "",
+                    "initialStateCheck": true
+                }
+            ],
+            "bindings": [
+                {
+                    "name": "2D Vector",
+                    "id": "113fcd52-ae71-47d2-a403-68ebbcafcc74",
+                    "path": "2DVector",
+                    "interactions": "",
+                    "processors": "",
+                    "groups": "",
+                    "action": "WASD",
+                    "isComposite": true,
+                    "isPartOfComposite": false
+                },
+                {
+                    "name": "up",
+                    "id": "00822dcd-031b-4002-9556-f47b4c8f7d1c",
+                    "path": "<Keyboard>/w",
+                    "interactions": "",
+                    "processors": "",
+                    "groups": "",
+                    "action": "WASD",
+                    "isComposite": false,
+                    "isPartOfComposite": true
+                },
+                {
+                    "name": "down",
+                    "id": "b542ed40-6273-4e1a-b3d1-0a065e20785e",
+                    "path": "<Keyboard>/s",
+                    "interactions": "",
+                    "processors": "",
+                    "groups": "",
+                    "action": "WASD",
+                    "isComposite": false,
+                    "isPartOfComposite": true
+                },
+                {
+                    "name": "left",
+                    "id": "115ca29e-c4de-46a9-8fe3-e52b35f49b83",
+                    "path": "<Keyboard>/a",
+                    "interactions": "",
+                    "processors": "",
+                    "groups": "",
+                    "action": "WASD",
+                    "isComposite": false,
+                    "isPartOfComposite": true
+                },
+                {
+                    "name": "right",
+                    "id": "7721a013-8cc0-45f8-b3b9-bd8dfe4579b0",
+                    "path": "<Keyboard>/d",
+                    "interactions": "",
+                    "processors": "",
+                    "groups": "",
+                    "action": "WASD",
+                    "isComposite": false,
+                    "isPartOfComposite": true
+                }
+            ]
+        }
+    ],
+    "controlSchemes": [
+        {
+            "name": "Keyboard",
+            "bindingGroup": "Keyboard",
+            "devices": []
+        },
+        {
+            "name": "Touchscreen",
+            "bindingGroup": "Touchscreen",
+            "devices": []
+        }
+    ]
+}
\ No newline at end of file
diff --git a/Assets/Input System/PlayerInput.inputactions.meta b/Assets/Input System/PlayerInput.inputactions.meta
new file mode 100644
index 0000000..cc2422a
--- /dev/null
+++ b/Assets/Input System/PlayerInput.inputactions.meta	
@@ -0,0 +1,14 @@
+fileFormatVersion: 2
+guid: 9e07b7ecf9952934983620b1952f90cd
+ScriptedImporter:
+  internalIDToNameTable: []
+  externalObjects: {}
+  serializedVersion: 2
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
+  script: {fileID: 11500000, guid: 8404be70184654265930450def6a9037, type: 3}
+  generateWrapperCode: 1
+  wrapperCodePath: 
+  wrapperClassName: 
+  wrapperCodeNamespace: 
diff --git a/Assets/Materials.meta b/Assets/Materials.meta
new file mode 100644
index 0000000..442b307
--- /dev/null
+++ b/Assets/Materials.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 917c0bca8b7ee2e43b967698de133aaa
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Materials/TerrainMat.mat b/Assets/Materials/TerrainMat.mat
new file mode 100644
index 0000000..c7635a4
--- /dev/null
+++ b/Assets/Materials/TerrainMat.mat
@@ -0,0 +1,80 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!21 &2100000
+Material:
+  serializedVersion: 8
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_Name: TerrainMat
+  m_Shader: {fileID: 46, guid: 0000000000000000f000000000000000, type: 0}
+  m_ValidKeywords: []
+  m_InvalidKeywords: []
+  m_LightmapFlags: 4
+  m_EnableInstancingVariants: 0
+  m_DoubleSidedGI: 0
+  m_CustomRenderQueue: -1
+  stringTagMap: {}
+  disabledShaderPasses: []
+  m_SavedProperties:
+    serializedVersion: 3
+    m_TexEnvs:
+    - _BumpMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _DetailAlbedoMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _DetailMask:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _DetailNormalMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _EmissionMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _MainTex:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _MetallicGlossMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _OcclusionMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    - _ParallaxMap:
+        m_Texture: {fileID: 0}
+        m_Scale: {x: 1, y: 1}
+        m_Offset: {x: 0, y: 0}
+    m_Ints: []
+    m_Floats:
+    - _BumpScale: 1
+    - _Cutoff: 0.5
+    - _DetailNormalMapScale: 1
+    - _DstBlend: 0
+    - _GlossMapScale: 1
+    - _Glossiness: 0.5
+    - _GlossyReflections: 1
+    - _Metallic: 0
+    - _Mode: 0
+    - _OcclusionStrength: 1
+    - _Parallax: 0.02
+    - _SmoothnessTextureChannel: 0
+    - _SpecularHighlights: 1
+    - _SrcBlend: 1
+    - _UVSec: 0
+    - _ZWrite: 1
+    m_Colors:
+    - _Color: {r: 1, g: 1, b: 1, a: 1}
+    - _EmissionColor: {r: 0, g: 0, b: 0, a: 1}
+  m_BuildTextureStacks: []
diff --git a/Assets/Materials/TerrainMat.mat.meta b/Assets/Materials/TerrainMat.mat.meta
new file mode 100644
index 0000000..9823d05
--- /dev/null
+++ b/Assets/Materials/TerrainMat.mat.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 8e9669996a30c424ea1b043d287901f8
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 2100000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Prefabs.meta b/Assets/Prefabs.meta
new file mode 100644
index 0000000..b743e98
--- /dev/null
+++ b/Assets/Prefabs.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 294c5e0f15b7b264ebfa5c2df599087a
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Prefabs/Main Camera.prefab b/Assets/Prefabs/Main Camera.prefab
new file mode 100644
index 0000000..f963844
--- /dev/null
+++ b/Assets/Prefabs/Main Camera.prefab	
@@ -0,0 +1,101 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!1 &6727351300445224907
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 6727351300445224911}
+  - component: {fileID: 6727351300445224910}
+  - component: {fileID: 6727351300445224905}
+  - component: {fileID: 6727351300445224904}
+  m_Layer: 0
+  m_Name: Main Camera
+  m_TagString: MainCamera
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &6727351300445224911
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 6727351300445224907}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: 0, y: 1, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 0
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!20 &6727351300445224910
+Camera:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 6727351300445224907}
+  m_Enabled: 1
+  serializedVersion: 2
+  m_ClearFlags: 1
+  m_BackGroundColor: {r: 0.19215687, g: 0.3019608, b: 0.4745098, a: 0}
+  m_projectionMatrixMode: 1
+  m_GateFitMode: 2
+  m_FOVAxisMode: 0
+  m_SensorSize: {x: 36, y: 24}
+  m_LensShift: {x: 0, y: 0}
+  m_FocalLength: 50
+  m_NormalizedViewPortRect:
+    serializedVersion: 2
+    x: 0
+    y: 0
+    width: 1
+    height: 1
+  near clip plane: 0.3
+  far clip plane: 1000
+  field of view: 60
+  orthographic: 0
+  orthographic size: 5
+  m_Depth: -1
+  m_CullingMask:
+    serializedVersion: 2
+    m_Bits: 4294967295
+  m_RenderingPath: -1
+  m_TargetTexture: {fileID: 0}
+  m_TargetDisplay: 0
+  m_TargetEye: 3
+  m_HDR: 1
+  m_AllowMSAA: 1
+  m_AllowDynamicResolution: 0
+  m_ForceIntoRT: 0
+  m_OcclusionCulling: 1
+  m_StereoConvergence: 10
+  m_StereoSeparation: 0.022
+--- !u!81 &6727351300445224905
+AudioListener:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 6727351300445224907}
+  m_Enabled: 1
+--- !u!114 &6727351300445224904
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 6727351300445224907}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 34371983e672eec4c86002b61dd68296, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  _offsetZ: -10
+  _offsetY: 3
diff --git a/Assets/Prefabs/Main Camera.prefab.meta b/Assets/Prefabs/Main Camera.prefab.meta
new file mode 100644
index 0000000..2b658c1
--- /dev/null
+++ b/Assets/Prefabs/Main Camera.prefab.meta	
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: d4ee56fba568c444eb93d0030d809d31
+PrefabImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Resources.meta b/Assets/Resources.meta
new file mode 100644
index 0000000..b85bc2f
--- /dev/null
+++ b/Assets/Resources.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 6307aa97fb4203b458caf6d4359ecfa8
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Resources/Player.prefab b/Assets/Resources/Player.prefab
new file mode 100644
index 0000000..d483b10
--- /dev/null
+++ b/Assets/Resources/Player.prefab
@@ -0,0 +1,130 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!1 &2811439299329728409
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 2811439299329728413}
+  - component: {fileID: 2811439299329728412}
+  - component: {fileID: 2811439299329728411}
+  - component: {fileID: 2811439299329728410}
+  - component: {fileID: 2811439299329728414}
+  - component: {fileID: 2811439299329728415}
+  m_Layer: 0
+  m_Name: Player
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &2811439299329728413
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: 0, y: 1, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 0
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!33 &2811439299329728412
+MeshFilter:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  m_Mesh: {fileID: 10208, guid: 0000000000000000e000000000000000, type: 0}
+--- !u!23 &2811439299329728411
+MeshRenderer:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  m_Enabled: 1
+  m_CastShadows: 1
+  m_ReceiveShadows: 1
+  m_DynamicOccludee: 1
+  m_StaticShadowCaster: 0
+  m_MotionVectors: 1
+  m_LightProbeUsage: 1
+  m_ReflectionProbeUsage: 1
+  m_RayTracingMode: 2
+  m_RayTraceProcedural: 0
+  m_RenderingLayerMask: 1
+  m_RendererPriority: 0
+  m_Materials:
+  - {fileID: 10303, guid: 0000000000000000f000000000000000, type: 0}
+  m_StaticBatchInfo:
+    firstSubMesh: 0
+    subMeshCount: 0
+  m_StaticBatchRoot: {fileID: 0}
+  m_ProbeAnchor: {fileID: 0}
+  m_LightProbeVolumeOverride: {fileID: 0}
+  m_ScaleInLightmap: 1
+  m_ReceiveGI: 1
+  m_PreserveUVs: 0
+  m_IgnoreNormalsForChartDetection: 0
+  m_ImportantGI: 0
+  m_StitchLightmapSeams: 1
+  m_SelectedEditorRenderState: 3
+  m_MinimumChartSize: 4
+  m_AutoUVMaxDistance: 0.5
+  m_AutoUVMaxAngle: 89
+  m_LightmapParameters: {fileID: 0}
+  m_SortingLayerID: 0
+  m_SortingLayer: 0
+  m_SortingOrder: 0
+  m_AdditionalVertexStreams: {fileID: 0}
+--- !u!136 &2811439299329728410
+CapsuleCollider:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  m_Material: {fileID: 0}
+  m_IsTrigger: 0
+  m_Enabled: 1
+  m_Radius: 0.5
+  m_Height: 2
+  m_Direction: 1
+  m_Center: {x: 0, y: 0, z: 0}
+--- !u!54 &2811439299329728414
+Rigidbody:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  serializedVersion: 2
+  m_Mass: 1
+  m_Drag: 0
+  m_AngularDrag: 0.05
+  m_UseGravity: 1
+  m_IsKinematic: 0
+  m_Interpolate: 0
+  m_Constraints: 0
+  m_CollisionDetection: 0
+--- !u!114 &2811439299329728415
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 2811439299329728409}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 4143eff6caa144ac888985e35ebe2e68, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
diff --git a/Assets/Resources/Player.prefab.meta b/Assets/Resources/Player.prefab.meta
new file mode 100644
index 0000000..5d671d9
--- /dev/null
+++ b/Assets/Resources/Player.prefab.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: c53fddff7040f5b478fb7df5de9b4452
+PrefabImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Resources/ProjectContext.prefab b/Assets/Resources/ProjectContext.prefab
new file mode 100644
index 0000000..4020a1b
--- /dev/null
+++ b/Assets/Resources/ProjectContext.prefab
@@ -0,0 +1,64 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!1 &7646023373887237059
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 8010263820058902829}
+  - component: {fileID: 314276376446555144}
+  m_Layer: 0
+  m_Name: ProjectContext
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &8010263820058902829
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 7646023373887237059}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: 0, y: 0, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 0
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!114 &314276376446555144
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 7646023373887237059}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: a4e6589720da476459dc6dd71624b071, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  _scriptableObjectInstallers: []
+  _monoInstallers: []
+  _installerPrefabs: []
+  _findSiblingMonoInstallers: 0
+  _parentNewObjectsUnderContext: 0
+  _editorReflectionBakingCoverageMode: 0
+  _buildsReflectionBakingCoverageMode: 0
+  _settings:
+    _ensureDeterministicDestructionOrderOnApplicationQuit: 0
+    _displayWarningWhenResolvingDuringInstall: 1
+    _validationRootResolveMethod: 0
+    _validationErrorResponse: 0
+    _constructorChoiceStrategy: 0
+    _signalSettings:
+      _defaultSyncMode: 0
+      _missingHandlerDefaultResponse: 2
+      _requireStrictUnsubscribe: 0
+      _defaultAsyncTickPriority: 1
diff --git a/Assets/Resources/ProjectContext.prefab.meta b/Assets/Resources/ProjectContext.prefab.meta
new file mode 100644
index 0000000..5d9b9b4
--- /dev/null
+++ b/Assets/Resources/ProjectContext.prefab.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 1028e7b7fdb3206438d4ff231b2e7d34
+PrefabImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scenes.meta b/Assets/Scenes.meta
new file mode 100644
index 0000000..c317c08
--- /dev/null
+++ b/Assets/Scenes.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 30340b97d11d06a45ab35a95bc963c9a
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scenes/Level1.unity b/Assets/Scenes/Level1.unity
new file mode 100644
index 0000000..6ea75e3
--- /dev/null
+++ b/Assets/Scenes/Level1.unity
@@ -0,0 +1,508 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!29 &1
+OcclusionCullingSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_OcclusionBakeSettings:
+    smallestOccluder: 5
+    smallestHole: 0.25
+    backfaceThreshold: 100
+  m_SceneGUID: 00000000000000000000000000000000
+  m_OcclusionCullingData: {fileID: 0}
+--- !u!104 &2
+RenderSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 9
+  m_Fog: 0
+  m_FogColor: {r: 0.5, g: 0.5, b: 0.5, a: 1}
+  m_FogMode: 3
+  m_FogDensity: 0.01
+  m_LinearFogStart: 0
+  m_LinearFogEnd: 300
+  m_AmbientSkyColor: {r: 0.212, g: 0.227, b: 0.259, a: 1}
+  m_AmbientEquatorColor: {r: 0.114, g: 0.125, b: 0.133, a: 1}
+  m_AmbientGroundColor: {r: 0.047, g: 0.043, b: 0.035, a: 1}
+  m_AmbientIntensity: 1
+  m_AmbientMode: 0
+  m_SubtractiveShadowColor: {r: 0.42, g: 0.478, b: 0.627, a: 1}
+  m_SkyboxMaterial: {fileID: 10304, guid: 0000000000000000f000000000000000, type: 0}
+  m_HaloStrength: 0.5
+  m_FlareStrength: 1
+  m_FlareFadeSpeed: 3
+  m_HaloTexture: {fileID: 0}
+  m_SpotCookie: {fileID: 10001, guid: 0000000000000000e000000000000000, type: 0}
+  m_DefaultReflectionMode: 0
+  m_DefaultReflectionResolution: 128
+  m_ReflectionBounces: 1
+  m_ReflectionIntensity: 1
+  m_CustomReflection: {fileID: 0}
+  m_Sun: {fileID: 705507994}
+  m_IndirectSpecularColor: {r: 0.18028352, g: 0.22571376, b: 0.30692244, a: 1}
+  m_UseRadianceAmbientProbe: 0
+--- !u!157 &3
+LightmapSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 12
+  m_GIWorkflowMode: 1
+  m_GISettings:
+    serializedVersion: 2
+    m_BounceScale: 1
+    m_IndirectOutputScale: 1
+    m_AlbedoBoost: 1
+    m_EnvironmentLightingMode: 0
+    m_EnableBakedLightmaps: 1
+    m_EnableRealtimeLightmaps: 0
+  m_LightmapEditorSettings:
+    serializedVersion: 12
+    m_Resolution: 2
+    m_BakeResolution: 40
+    m_AtlasSize: 1024
+    m_AO: 0
+    m_AOMaxDistance: 1
+    m_CompAOExponent: 1
+    m_CompAOExponentDirect: 0
+    m_ExtractAmbientOcclusion: 0
+    m_Padding: 2
+    m_LightmapParameters: {fileID: 0}
+    m_LightmapsBakeMode: 1
+    m_TextureCompression: 1
+    m_FinalGather: 0
+    m_FinalGatherFiltering: 1
+    m_FinalGatherRayCount: 256
+    m_ReflectionCompression: 2
+    m_MixedBakeMode: 2
+    m_BakeBackend: 1
+    m_PVRSampling: 1
+    m_PVRDirectSampleCount: 32
+    m_PVRSampleCount: 500
+    m_PVRBounces: 2
+    m_PVREnvironmentSampleCount: 500
+    m_PVREnvironmentReferencePointCount: 2048
+    m_PVRFilteringMode: 2
+    m_PVRDenoiserTypeDirect: 0
+    m_PVRDenoiserTypeIndirect: 0
+    m_PVRDenoiserTypeAO: 0
+    m_PVRFilterTypeDirect: 0
+    m_PVRFilterTypeIndirect: 0
+    m_PVRFilterTypeAO: 0
+    m_PVREnvironmentMIS: 0
+    m_PVRCulling: 1
+    m_PVRFilteringGaussRadiusDirect: 1
+    m_PVRFilteringGaussRadiusIndirect: 5
+    m_PVRFilteringGaussRadiusAO: 2
+    m_PVRFilteringAtrousPositionSigmaDirect: 0.5
+    m_PVRFilteringAtrousPositionSigmaIndirect: 2
+    m_PVRFilteringAtrousPositionSigmaAO: 1
+    m_ExportTrainingData: 0
+    m_TrainingDataDestination: TrainingData
+    m_LightProbeSampleCountMultiplier: 4
+  m_LightingDataAsset: {fileID: 0}
+  m_LightingSettings: {fileID: 0}
+--- !u!196 &4
+NavMeshSettings:
+  serializedVersion: 2
+  m_ObjectHideFlags: 0
+  m_BuildSettings:
+    serializedVersion: 2
+    agentTypeID: 0
+    agentRadius: 0.5
+    agentHeight: 2
+    agentSlope: 45
+    agentClimb: 0.4
+    ledgeDropHeight: 0
+    maxJumpAcrossDistance: 0
+    minRegionArea: 2
+    manualCellSize: 0
+    cellSize: 0.16666667
+    manualTileSize: 0
+    tileSize: 256
+    accuratePlacement: 0
+    maxJobWorkers: 0
+    preserveTilesOutsideBounds: 0
+    debug:
+      m_Flags: 0
+  m_NavMeshData: {fileID: 0}
+--- !u!1 &569207683
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 569207684}
+  - component: {fileID: 569207686}
+  - component: {fileID: 569207688}
+  m_Layer: 0
+  m_Name: Level Context
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &569207684
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 569207683}
+  m_LocalRotation: {x: -0, y: -0, z: -0, w: 1}
+  m_LocalPosition: {x: 0, y: 0, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 1829630025}
+  m_RootOrder: 0
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!114 &569207686
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 569207683}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 89715ad69b973a14899afa2c6730b30b, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  _scriptableObjectInstallers: []
+  _monoInstallers:
+  - {fileID: 569207688}
+  _installerPrefabs: []
+  _findSiblingMonoInstallers: 0
+  _autoRun: 1
+  OnPreInstall:
+    m_PersistentCalls:
+      m_Calls: []
+  OnPostInstall:
+    m_PersistentCalls:
+      m_Calls: []
+  OnPreResolve:
+    m_PersistentCalls:
+      m_Calls: []
+  OnPostResolve:
+    m_PersistentCalls:
+      m_Calls: []
+  _parentNewObjectsUnderSceneContext: 0
+  _contractNames: []
+  _parentContractNames: []
+--- !u!114 &569207688
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 569207683}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: e19cbad170364a3d9d8acc6bd8eaf865, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  _playerSpawnPoint: {fileID: 1385655965}
+--- !u!1 &705507993
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 705507995}
+  - component: {fileID: 705507994}
+  m_Layer: 0
+  m_Name: Directional Light
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!108 &705507994
+Light:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 705507993}
+  m_Enabled: 1
+  serializedVersion: 10
+  m_Type: 1
+  m_Shape: 0
+  m_Color: {r: 1, g: 0.95686275, b: 0.8392157, a: 1}
+  m_Intensity: 1
+  m_Range: 10
+  m_SpotAngle: 30
+  m_InnerSpotAngle: 21.80208
+  m_CookieSize: 10
+  m_Shadows:
+    m_Type: 2
+    m_Resolution: -1
+    m_CustomResolution: -1
+    m_Strength: 1
+    m_Bias: 0.05
+    m_NormalBias: 0.4
+    m_NearPlane: 0.2
+    m_CullingMatrixOverride:
+      e00: 1
+      e01: 0
+      e02: 0
+      e03: 0
+      e10: 0
+      e11: 1
+      e12: 0
+      e13: 0
+      e20: 0
+      e21: 0
+      e22: 1
+      e23: 0
+      e30: 0
+      e31: 0
+      e32: 0
+      e33: 1
+    m_UseCullingMatrixOverride: 0
+  m_Cookie: {fileID: 0}
+  m_DrawHalo: 0
+  m_Flare: {fileID: 0}
+  m_RenderMode: 0
+  m_CullingMask:
+    serializedVersion: 2
+    m_Bits: 4294967295
+  m_RenderingLayerMask: 1
+  m_Lightmapping: 1
+  m_LightShadowCasterMode: 0
+  m_AreaSize: {x: 1, y: 1}
+  m_BounceIntensity: 1
+  m_ColorTemperature: 6570
+  m_UseColorTemperature: 0
+  m_BoundingSphereOverride: {x: 0, y: 0, z: 0, w: 0}
+  m_UseBoundingSphereOverride: 0
+  m_UseViewFrustumForShadowCasterCull: 1
+  m_ShadowRadius: 0
+  m_ShadowAngle: 0
+--- !u!4 &705507995
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 705507993}
+  m_LocalRotation: {x: 0.40821788, y: -0.23456968, z: 0.10938163, w: 0.8754261}
+  m_LocalPosition: {x: 0, y: 3, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 0
+  m_LocalEulerAnglesHint: {x: 50, y: -30, z: 0}
+--- !u!1001 &958399334
+PrefabInstance:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_Modification:
+    m_TransformParent: {fileID: 0}
+    m_Modifications:
+    - target: {fileID: 6727351300445224907, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_Name
+      value: Main Camera
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_RootOrder
+      value: 4
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalPosition.x
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalPosition.y
+      value: 4.7
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalPosition.z
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalRotation.w
+      value: 1
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalRotation.x
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalRotation.y
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalRotation.z
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalEulerAnglesHint.x
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalEulerAnglesHint.y
+      value: 0
+      objectReference: {fileID: 0}
+    - target: {fileID: 6727351300445224911, guid: d4ee56fba568c444eb93d0030d809d31,
+        type: 3}
+      propertyPath: m_LocalEulerAnglesHint.z
+      value: 0
+      objectReference: {fileID: 0}
+    m_RemovedComponents: []
+  m_SourcePrefab: {fileID: 100100000, guid: d4ee56fba568c444eb93d0030d809d31, type: 3}
+--- !u!1 &1385655964
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 1385655965}
+  m_Layer: 0
+  m_Name: Player Spawn Point
+  m_TagString: Untagged
+  m_Icon: {fileID: 419385456094870383, guid: 0000000000000000d000000000000000, type: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &1385655965
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 1385655964}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: 30, y: 1, z: 30}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 3
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!1 &1829630024
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 1829630025}
+  m_Layer: 0
+  m_Name: System
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 0
+  m_IsActive: 1
+--- !u!4 &1829630025
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 1829630024}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: 0, y: 0, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children:
+  - {fileID: 569207684}
+  m_Father: {fileID: 0}
+  m_RootOrder: 2
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
+--- !u!1 &1984434438
+GameObject:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  serializedVersion: 6
+  m_Component:
+  - component: {fileID: 1984434441}
+  - component: {fileID: 1984434440}
+  - component: {fileID: 1984434439}
+  m_Layer: 0
+  m_Name: Ground
+  m_TagString: Untagged
+  m_Icon: {fileID: 0}
+  m_NavMeshLayer: 0
+  m_StaticEditorFlags: 2147483647
+  m_IsActive: 1
+--- !u!154 &1984434439
+TerrainCollider:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 1984434438}
+  m_Material: {fileID: 0}
+  m_Enabled: 1
+  m_TerrainData: {fileID: 15600000, guid: 99387d82817c44d46998ab2f59237d16, type: 2}
+  m_EnableTreeColliders: 1
+--- !u!218 &1984434440
+Terrain:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 1984434438}
+  m_Enabled: 1
+  serializedVersion: 6
+  m_TerrainData: {fileID: 15600000, guid: 99387d82817c44d46998ab2f59237d16, type: 2}
+  m_TreeDistance: 5000
+  m_TreeBillboardDistance: 50
+  m_TreeCrossFadeLength: 5
+  m_TreeMaximumFullLODCount: 50
+  m_DetailObjectDistance: 80
+  m_DetailObjectDensity: 1
+  m_HeightmapPixelError: 5
+  m_SplatMapDistance: 1000
+  m_HeightmapMaximumLOD: 0
+  m_ShadowCastingMode: 2
+  m_DrawHeightmap: 1
+  m_DrawInstanced: 0
+  m_DrawTreesAndFoliage: 1
+  m_StaticShadowCaster: 0
+  m_ReflectionProbeUsage: 1
+  m_MaterialTemplate: {fileID: 10652, guid: 0000000000000000f000000000000000, type: 0}
+  m_BakeLightProbesForTrees: 1
+  m_PreserveTreePrototypeLayers: 0
+  m_DeringLightProbesForTrees: 1
+  m_ScaleInLightmap: 0.0256
+  m_LightmapParameters: {fileID: 15203, guid: 0000000000000000f000000000000000, type: 0}
+  m_GroupingID: 0
+  m_RenderingLayerMask: 1
+  m_AllowAutoConnect: 1
+--- !u!4 &1984434441
+Transform:
+  m_ObjectHideFlags: 0
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 1984434438}
+  m_LocalRotation: {x: 0, y: 0, z: 0, w: 1}
+  m_LocalPosition: {x: -50, y: 0, z: 0}
+  m_LocalScale: {x: 1, y: 1, z: 1}
+  m_ConstrainProportionsScale: 0
+  m_Children: []
+  m_Father: {fileID: 0}
+  m_RootOrder: 1
+  m_LocalEulerAnglesHint: {x: 0, y: 0, z: 0}
diff --git a/Assets/Scenes/Level1.unity.meta b/Assets/Scenes/Level1.unity.meta
new file mode 100644
index 0000000..9e7fa27
--- /dev/null
+++ b/Assets/Scenes/Level1.unity.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: c850ee8c3b14cc8459e7e186857cf567
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scripts.meta b/Assets/Scripts.meta
new file mode 100644
index 0000000..e1b63c5
--- /dev/null
+++ b/Assets/Scripts.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 677ec64d8ca0f8940b1775f81bfa28c8
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scripts/CameraFollower.cs b/Assets/Scripts/CameraFollower.cs
new file mode 100644
index 0000000..2ac2529
--- /dev/null
+++ b/Assets/Scripts/CameraFollower.cs
@@ -0,0 +1,31 @@
+using UnityEngine;
+using Zenject;
+
+public class CameraFollower : MonoBehaviour
+{
+    [SerializeField] private float _offsetZ;
+    [SerializeField] private float _offsetY;
+    private Transform _target;
+
+    [Inject]
+    private void Construct(PlayerEntity targetOfFollow)
+    {
+        _target = targetOfFollow.transform;
+    }
+
+    private void Update()
+    {
+        Follow();
+    }
+
+    private void Follow()
+    {
+        if (_target != null)
+        {
+            var position = _target.transform.position;
+            float newPositionZ = position.z + _offsetZ;
+            float newPositionY = position.y + _offsetY;
+            transform.position = new Vector3(position.x, newPositionY, newPositionZ);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Scripts/CameraFollower.cs.meta b/Assets/Scripts/CameraFollower.cs.meta
new file mode 100644
index 0000000..1bec8cf
--- /dev/null
+++ b/Assets/Scripts/CameraFollower.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 34371983e672eec4c86002b61dd68296
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scripts/Entity.cs b/Assets/Scripts/Entity.cs
new file mode 100644
index 0000000..bf861be
--- /dev/null
+++ b/Assets/Scripts/Entity.cs
@@ -0,0 +1,5 @@
+using UnityEngine;
+
+public class Entity : MonoBehaviour
+{
+}
\ No newline at end of file
diff --git a/Assets/Scripts/Entity.cs.meta b/Assets/Scripts/Entity.cs.meta
new file mode 100644
index 0000000..ca3c170
--- /dev/null
+++ b/Assets/Scripts/Entity.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 0372930c3f3d46c3ab983f7ab7224334
+timeCreated: 1667556122
\ No newline at end of file
diff --git a/Assets/Scripts/Infrastructure.meta b/Assets/Scripts/Infrastructure.meta
new file mode 100644
index 0000000..75e50c8
--- /dev/null
+++ b/Assets/Scripts/Infrastructure.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: cf354cad22994b85be541255ed8bfcfc
+timeCreated: 1667896729
\ No newline at end of file
diff --git a/Assets/Scripts/Infrastructure/LocationInstaller.cs b/Assets/Scripts/Infrastructure/LocationInstaller.cs
new file mode 100644
index 0000000..e5304dd
--- /dev/null
+++ b/Assets/Scripts/Infrastructure/LocationInstaller.cs
@@ -0,0 +1,40 @@
+using UnityEngine;
+using Zenject;
+using IInitializable = Zenject.IInitializable;
+
+namespace Installers
+{
+    public class LocationInstaller : MonoInstaller, IInitializable
+    {
+        [SerializeField] private Transform _playerSpawnPoint;
+
+        public override void InstallBindings()
+        {
+            BindPlayerSpawnPosition();
+            BindPlayer();
+        }
+
+        private void BindPlayerSpawnPosition()
+        {
+            Container.Bind<SpawnPosition>().
+                WithId(SpawnPosition.Markers.Player).
+                AsSingle().
+                WithArguments(_playerSpawnPoint);
+        }
+
+        private void BindPlayer()
+        {
+            Container.
+                Bind<PlayerEntity>().
+                FromFactory<PlayerFactory>().
+                AsSingle().
+                NonLazy();
+        }
+
+        public void Initialize() //TODO: убрать инициалайз и закинуть в SceneBootstrap.cs
+        {
+            var playerFactory = Container.Resolve<PlayerFactory>();
+            playerFactory.Create();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Scripts/Infrastructure/LocationInstaller.cs.meta b/Assets/Scripts/Infrastructure/LocationInstaller.cs.meta
new file mode 100644
index 0000000..ec698f9
--- /dev/null
+++ b/Assets/Scripts/Infrastructure/LocationInstaller.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: e19cbad170364a3d9d8acc6bd8eaf865
+timeCreated: 1667604148
\ No newline at end of file
diff --git a/Assets/Scripts/PlayerEntity.cs b/Assets/Scripts/PlayerEntity.cs
new file mode 100644
index 0000000..50c228e
--- /dev/null
+++ b/Assets/Scripts/PlayerEntity.cs
@@ -0,0 +1,6 @@
+using System;
+using Zenject;
+
+public class PlayerEntity :  Entity
+{
+}
\ No newline at end of file
diff --git a/Assets/Scripts/PlayerEntity.cs.meta b/Assets/Scripts/PlayerEntity.cs.meta
new file mode 100644
index 0000000..c3e8c44
--- /dev/null
+++ b/Assets/Scripts/PlayerEntity.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 4143eff6caa144ac888985e35ebe2e68
+timeCreated: 1667556122
\ No newline at end of file
diff --git a/Assets/Scripts/PlayerFactory.cs b/Assets/Scripts/PlayerFactory.cs
new file mode 100644
index 0000000..d284ec1
--- /dev/null
+++ b/Assets/Scripts/PlayerFactory.cs
@@ -0,0 +1,27 @@
+using UnityEngine;
+using Zenject;
+
+public class PlayerFactory : IFactory<PlayerEntity>
+{
+    private const string PLAYER_PATH = "Player";
+    private DiContainer _diContainer;
+    
+    [Inject(Id = SpawnPosition.Markers.Player)]
+    private SpawnPosition _spawnPosition;
+
+    [Inject]
+    private void Construct(DiContainer diContainer)
+    {
+        _diContainer = diContainer;
+    }
+    
+    public PlayerEntity Create()
+    {
+        Vector3 spawnPosition = _spawnPosition.Point.transform.position;
+        
+        return _diContainer.
+            InstantiatePrefabResourceForComponent<PlayerEntity>(
+                PLAYER_PATH, spawnPosition,
+                Quaternion.identity, null);
+    }
+}
\ No newline at end of file
diff --git a/Assets/Scripts/PlayerFactory.cs.meta b/Assets/Scripts/PlayerFactory.cs.meta
new file mode 100644
index 0000000..7c06255
--- /dev/null
+++ b/Assets/Scripts/PlayerFactory.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 999ae76e066d4aaca0e81e4dbb085d8a
+timeCreated: 1667905138
\ No newline at end of file
diff --git a/Assets/Scripts/SpawnPosition.cs b/Assets/Scripts/SpawnPosition.cs
new file mode 100644
index 0000000..c79b768
--- /dev/null
+++ b/Assets/Scripts/SpawnPosition.cs
@@ -0,0 +1,17 @@
+using UnityEngine;
+
+public readonly struct SpawnPosition
+{
+    public readonly Transform Point;
+
+    public enum Markers
+    {
+        Player,
+        Entity
+    }
+    
+    public SpawnPosition(Transform point)
+    {
+        Point = point;
+    }
+}
\ No newline at end of file
diff --git a/Assets/Scripts/SpawnPosition.cs.meta b/Assets/Scripts/SpawnPosition.cs.meta
new file mode 100644
index 0000000..70ff196
--- /dev/null
+++ b/Assets/Scripts/SpawnPosition.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 57754b373f2849bea8cd30401a1a42bb
+timeCreated: 1667900518
\ No newline at end of file
diff --git a/Assets/Source.meta b/Assets/Source.meta
new file mode 100644
index 0000000..b390d91
--- /dev/null
+++ b/Assets/Source.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: dad522de2d16b2f498624f3ee9a8b582
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/.gitignore b/Assets/Source/.gitignore
new file mode 100644
index 0000000..1388d05
--- /dev/null
+++ b/Assets/Source/.gitignore
@@ -0,0 +1,2 @@
+*.csproj.user
+*.csproj.user.meta
diff --git a/Assets/Source/Editor.meta b/Assets/Source/Editor.meta
new file mode 100644
index 0000000..8817817
--- /dev/null
+++ b/Assets/Source/Editor.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: 70a96473817a0384580ace78f202a622
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Editor/EditorStaticInstaller.cs b/Assets/Source/Editor/EditorStaticInstaller.cs
new file mode 100644
index 0000000..acb6d1f
--- /dev/null
+++ b/Assets/Source/Editor/EditorStaticInstaller.cs
@@ -0,0 +1,30 @@
+
+namespace Zenject
+{
+    // Derive from this class, add [InitializeOnLoad], and then call Install
+    // in a static constructor to add some editor time bindings
+    // For example:
+    //
+    // [InitializeOnLoad]
+    // public class FooInstaller : EditorStaticInstaller<FooInstaller>
+    // {
+    //     static FooInstaller()
+    //     {
+    //         Install();
+    //     }
+    //
+    //     public override void InstallBindings()
+    //     {
+    //         Container.BindInstance("hello world");
+    //     }
+    // }
+    //
+    public abstract class EditorStaticInstaller<T> : InstallerBase
+        where T : EditorStaticInstaller<T>
+    {
+        public static void Install()
+        {
+            StaticContext.Container.Instantiate<T>().InstallBindings();
+        }
+    }
+}
diff --git a/Assets/Source/Editor/EditorStaticInstaller.cs.meta b/Assets/Source/Editor/EditorStaticInstaller.cs.meta
new file mode 100644
index 0000000..e8e1ecb
--- /dev/null
+++ b/Assets/Source/Editor/EditorStaticInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: fcb2e11e0ed56de48b0ba9b5e3ae10c9
+timeCreated: 1486079412
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/EditorWindow.meta b/Assets/Source/Editor/EditorWindow.meta
new file mode 100644
index 0000000..00ade5f
--- /dev/null
+++ b/Assets/Source/Editor/EditorWindow.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: bd8d602c69b71714babee52a2d454aed
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs b/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs
new file mode 100644
index 0000000..7154b47
--- /dev/null
+++ b/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs
@@ -0,0 +1,138 @@
+using System;
+using ModestTree;
+using UnityEditor;
+using UnityEngine;
+
+namespace Zenject
+{
+    public abstract class ZenjectEditorWindow : EditorWindow
+    {
+        [NonSerialized] private GUIStyle _errorTextStyle;
+
+        [NonSerialized] private Exception _fatalError;
+
+        [Inject] [NonSerialized] private GuiRenderableManager _guiRenderableManager;
+
+        [Inject] [NonSerialized] private Kernel _kernel;
+
+        private GUIStyle ErrorTextStyle
+        {
+            get
+            {
+                if (_errorTextStyle == null)
+                {
+                    _errorTextStyle = new GUIStyle(GUI.skin.label);
+                    _errorTextStyle.fontSize = 18;
+                    _errorTextStyle.normal.textColor = Color.red;
+                    _errorTextStyle.wordWrap = true;
+                    _errorTextStyle.alignment = TextAnchor.MiddleCenter;
+                }
+
+                return _errorTextStyle;
+            }
+        }
+
+        [field: NonSerialized] protected DiContainer Container { get; private set; }
+
+        public virtual void Update()
+        {
+            if (_fatalError != null) return;
+
+            try
+            {
+                _kernel.Tick();
+            }
+            catch (Exception e)
+            {
+                Log.ErrorException(e);
+                _fatalError = e;
+            }
+
+            // We might also consider only calling Repaint when changes occur
+            Repaint();
+        }
+
+        public virtual void OnEnable()
+        {
+            if (_fatalError != null) return;
+
+            Initialize();
+        }
+
+        public virtual void OnDisable()
+        {
+            if (_fatalError != null) return;
+
+            _kernel.Dispose();
+        }
+
+        public virtual void OnGUI()
+        {
+            if (_fatalError != null)
+            {
+                var labelWidth = 600;
+                var labelHeight = 200;
+
+                GUI.Label(
+                    new Rect(Screen.width / 2 - labelWidth / 2, Screen.height / 3 - labelHeight / 2, labelWidth,
+                        labelHeight), "Unrecoverable error occurred!  \nSee log for details.", ErrorTextStyle);
+
+                var buttonWidth = 100;
+                var buttonHeight = 50;
+                var offset = new Vector2(0, 100);
+
+                if (GUI.Button(
+                    new Rect(Screen.width / 2 - buttonWidth / 2 + offset.x,
+                        Screen.height / 3 - buttonHeight / 2 + offset.y, buttonWidth, buttonHeight), "Reload"))
+                    ExecuteFullReload();
+            }
+            else
+            {
+                try
+                {
+                    if (_guiRenderableManager != null) _guiRenderableManager.OnGui();
+                }
+                catch (Exception e)
+                {
+                    Log.ErrorException(e);
+                    _fatalError = e;
+                }
+            }
+        }
+
+        protected virtual void Initialize()
+        {
+            Assert.IsNull(Container);
+
+            Container = new DiContainer(new[] {StaticContext.Container});
+
+            // Make sure we don't create any game objects since editor windows don't have a scene
+            Container.AssertOnNewGameObjects = true;
+
+            ZenjectManagersInstaller.Install(Container);
+
+            Container.Bind<Kernel>().AsSingle();
+            Container.Bind<GuiRenderableManager>().AsSingle();
+            Container.BindInstance(this);
+
+            InstallBindings();
+
+            Container.QueueForInject(this);
+            Container.ResolveRoots();
+
+            _kernel.Initialize();
+        }
+
+        protected virtual void ExecuteFullReload()
+        {
+            _kernel = null;
+            _guiRenderableManager = null;
+            Container = null;
+            _fatalError = null;
+
+            Initialize();
+        }
+
+        public abstract void InstallBindings();
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs.meta b/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs.meta
new file mode 100644
index 0000000..e1d9c89
--- /dev/null
+++ b/Assets/Source/Editor/EditorWindow/ZenjectEditorWindow.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: bc25e694ccedbed4893d980ee61d1c8f
+timeCreated: 1527961729
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors.meta b/Assets/Source/Editor/Editors.meta
new file mode 100644
index 0000000..9fc8a71
--- /dev/null
+++ b/Assets/Source/Editor/Editors.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: fbb1477b2e261944dad77cce5626aab0
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs b/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs
new file mode 100644
index 0000000..8898c91
--- /dev/null
+++ b/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs
@@ -0,0 +1,84 @@
+using System.Collections.Generic;
+using UnityEditor;
+using UnityEditorInternal;
+using UnityEngine;
+
+namespace Zenject
+{
+    public abstract class BaseCompositetInstallerEditor<T, TLeaf> : Editor
+        where T : Object, ICompositeInstaller<TLeaf>
+        where TLeaf : Object, IInstaller
+    {
+        private List<ReorderableList> _installersLists;
+
+        protected virtual InstallerPropertyInfo PropertyInfo => new InstallerPropertyInfo
+        {
+            name = "_leafInstallers",
+            displayName = "Leaf Scriptable Object Installers",
+            description = "Drag any assets in your Project that implement ScriptableObjectInstaller here"
+        };
+
+        protected virtual void OnEnable()
+        {
+            _installersLists = new List<ReorderableList>
+            {
+                CreateInstallerList()
+            };
+        }
+
+        private ReorderableList CreateInstallerList()
+        {
+            var installersProperty = serializedObject.FindProperty(PropertyInfo.name);
+
+            var installersList = new ReorderableList(serializedObject, installersProperty, true, true, true, true);
+
+            var closedName = PropertyInfo.displayName;
+            var closedDesc = PropertyInfo.description;
+
+            var parentInstaller = target as T;
+
+            installersList.drawHeaderCallback += rect =>
+            {
+                GUI.Label(rect,
+                    new GUIContent(closedName, closedDesc));
+            };
+            installersList.drawElementCallback += (rect, index, active, focused) =>
+            {
+                var installerProperty = installersProperty.GetArrayElementAtIndex(index);
+                var leafInstaller = installerProperty.objectReferenceValue as TLeaf;
+
+                var isValid = leafInstaller.ValidateAsComposite(parentInstaller);
+
+                if (!isValid) GUI.color = Color.red;
+
+                rect.width -= 40;
+                rect.x += 20;
+                EditorGUI.PropertyField(rect, installerProperty, new GUIContent("", closedDesc), true);
+                if (!isValid)
+                    EditorGUI.LabelField(rect, new GUIContent("", CompositeInstallerEditorDescriptions.ErrorTooltip));
+
+                GUI.color = Color.white;
+            };
+
+            return installersList;
+        }
+
+        public override void OnInspectorGUI()
+        {
+            serializedObject.Update();
+
+            OnGui();
+
+            serializedObject.ApplyModifiedProperties();
+        }
+
+        protected virtual void OnGui()
+        {
+            if (Application.isPlaying) GUI.enabled = false;
+
+            foreach (var list in _installersLists) list.DoLayoutList();
+
+            GUI.enabled = true;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs.meta b/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs.meta
new file mode 100644
index 0000000..55f65ef
--- /dev/null
+++ b/Assets/Source/Editor/Editors/BaseCompositeInstallerEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 44df8dea7225e7049b790bc12122c616
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs b/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs
new file mode 100644
index 0000000..7fe68b0
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs
@@ -0,0 +1,8 @@
+namespace Zenject
+{
+    public static class CompositeInstallerEditorDescriptions
+    {
+        public const string ErrorTooltip =
+            "WARNING: This composite installer has some circular references and will cause an exception";
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs.meta b/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs.meta
new file mode 100644
index 0000000..638f474
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeInstallerEditorDescriptions.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2acd5f3ba59d93249be284548492d669
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs b/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs
new file mode 100644
index 0000000..4252bed
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs
@@ -0,0 +1,11 @@
+using UnityEditor;
+
+namespace Zenject
+{
+    [CanEditMultipleObjects]
+    [CustomEditor(typeof(CompositeMonoInstaller))]
+    [NoReflectionBaking]
+    public class CompositeMonoInstallerEditor : BaseCompositetInstallerEditor<CompositeMonoInstaller, MonoInstallerBase>
+    {
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs.meta b/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs.meta
new file mode 100644
index 0000000..1cbcba7
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeMonoInstallerEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 4afdb15fc65b3c44f9dd18e5ae4e4013
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs b/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs
new file mode 100644
index 0000000..0928e47
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs
@@ -0,0 +1,12 @@
+using UnityEditor;
+
+namespace Zenject
+{
+    [CanEditMultipleObjects]
+    [CustomEditor(typeof(CompositeScriptableObjectInstaller))]
+    [NoReflectionBaking]
+    public class CompositeScriptableObjectInstallerEditor : BaseCompositetInstallerEditor<
+        CompositeScriptableObjectInstaller, ScriptableObjectInstallerBase>
+    {
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs.meta b/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs.meta
new file mode 100644
index 0000000..45d7289
--- /dev/null
+++ b/Assets/Source/Editor/Editors/CompositeScriptableObjectInstallerEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 68c8595c6ea7dde4084ae67c4ed66217
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/ContextEditor.cs b/Assets/Source/Editor/Editors/ContextEditor.cs
new file mode 100644
index 0000000..d5460e7
--- /dev/null
+++ b/Assets/Source/Editor/Editors/ContextEditor.cs
@@ -0,0 +1,67 @@
+using UnityEditor;
+
+#if !ODIN_INSPECTOR
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ContextEditor : UnityInspectorListEditor
+    {
+        private SerializedProperty _findSiblingInstallers;
+
+        protected override string[] PropertyNames
+        {
+            get
+            {
+                return new[]
+                {
+                    "_scriptableObjectInstallers",
+                    "_monoInstallers",
+                    "_installerPrefabs"
+                };
+            }
+        }
+
+        protected override string[] PropertyDisplayNames
+        {
+            get
+            {
+                return new[]
+                {
+                    "Scriptable Object Installers",
+                    "Mono Installers",
+                    "Prefab Installers"
+                };
+            }
+        }
+
+        protected override string[] PropertyDescriptions
+        {
+            get
+            {
+                return new[]
+                {
+                    "Drag any assets in your Project that implement ScriptableObjectInstaller here",
+                    "Drag any MonoInstallers that you have added to your Scene Hierarchy here.",
+                    "Drag any prefabs that contain a MonoInstaller on them here"
+                };
+            }
+        }
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _findSiblingInstallers = serializedObject.FindProperty("_findSiblingMonoInstallers");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_findSiblingInstallers);
+        }
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/ContextEditor.cs.meta b/Assets/Source/Editor/Editors/ContextEditor.cs.meta
new file mode 100644
index 0000000..ca717c9
--- /dev/null
+++ b/Assets/Source/Editor/Editors/ContextEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 23155ecdf203bf24480fd49763b73677
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/GameObjectContextEditor.cs b/Assets/Source/Editor/Editors/GameObjectContextEditor.cs
new file mode 100644
index 0000000..4c044e5
--- /dev/null
+++ b/Assets/Source/Editor/Editors/GameObjectContextEditor.cs
@@ -0,0 +1,29 @@
+#if !ODIN_INSPECTOR
+
+using UnityEditor;
+
+namespace Zenject
+{
+    [CustomEditor(typeof(GameObjectContext))]
+    [NoReflectionBaking]
+    public class GameObjectContextEditor : RunnableContextEditor
+    {
+        private SerializedProperty _kernel;
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _kernel = serializedObject.FindProperty("_kernel");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_kernel);
+        }
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/GameObjectContextEditor.cs.meta b/Assets/Source/Editor/Editors/GameObjectContextEditor.cs.meta
new file mode 100644
index 0000000..7e456af
--- /dev/null
+++ b/Assets/Source/Editor/Editors/GameObjectContextEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b0873c763efd1e94fb3a56ff80843cf1
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs b/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs
new file mode 100644
index 0000000..de74a4a
--- /dev/null
+++ b/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs
@@ -0,0 +1,14 @@
+using System;
+
+namespace Zenject
+{
+    [Serializable]
+    public struct InstallerPropertyInfo
+    {
+        public string name;
+
+        public string displayName;
+
+        public string description;
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs.meta b/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs.meta
new file mode 100644
index 0000000..9188100
--- /dev/null
+++ b/Assets/Source/Editor/Editors/InstallerPropertyInfo.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: dc0479c461750db488003de0f4b55188
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/ProjectContextEditor.cs b/Assets/Source/Editor/Editors/ProjectContextEditor.cs
new file mode 100644
index 0000000..4298563
--- /dev/null
+++ b/Assets/Source/Editor/Editors/ProjectContextEditor.cs
@@ -0,0 +1,40 @@
+#if !ODIN_INSPECTOR
+
+using UnityEditor;
+
+namespace Zenject
+{
+    [CustomEditor(typeof(ProjectContext))]
+    [NoReflectionBaking]
+    public class ProjectContextEditor : ContextEditor
+    {
+        private SerializedProperty _buildsReflectionBakingCoverageModeProperty;
+        private SerializedProperty _editorReflectionBakingCoverageModeProperty;
+        private SerializedProperty _parentNewObjectsUnderContextProperty;
+        private SerializedProperty _settingsProperty;
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _settingsProperty = serializedObject.FindProperty("_settings");
+            _editorReflectionBakingCoverageModeProperty =
+                serializedObject.FindProperty("_editorReflectionBakingCoverageMode");
+            _buildsReflectionBakingCoverageModeProperty =
+                serializedObject.FindProperty("_buildsReflectionBakingCoverageMode");
+            _parentNewObjectsUnderContextProperty = serializedObject.FindProperty("_parentNewObjectsUnderContext");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_settingsProperty, true);
+            EditorGUILayout.PropertyField(_editorReflectionBakingCoverageModeProperty, true);
+            EditorGUILayout.PropertyField(_buildsReflectionBakingCoverageModeProperty, true);
+            EditorGUILayout.PropertyField(_parentNewObjectsUnderContextProperty);
+        }
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/ProjectContextEditor.cs.meta b/Assets/Source/Editor/Editors/ProjectContextEditor.cs.meta
new file mode 100644
index 0000000..d0bda4e
--- /dev/null
+++ b/Assets/Source/Editor/Editors/ProjectContextEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b5ad40b612e67574aad508d053e6965b
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/RunnableContextEditor.cs b/Assets/Source/Editor/Editors/RunnableContextEditor.cs
new file mode 100644
index 0000000..7105ac9
--- /dev/null
+++ b/Assets/Source/Editor/Editors/RunnableContextEditor.cs
@@ -0,0 +1,29 @@
+﻿#if !ODIN_INSPECTOR
+
+using UnityEditor;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class RunnableContextEditor : ContextEditor
+    {
+        private SerializedProperty _autoRun;
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _autoRun = serializedObject.FindProperty("_autoRun");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_autoRun);
+        }
+    }
+}
+
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/RunnableContextEditor.cs.meta b/Assets/Source/Editor/Editors/RunnableContextEditor.cs.meta
new file mode 100644
index 0000000..2e085fd
--- /dev/null
+++ b/Assets/Source/Editor/Editors/RunnableContextEditor.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 02bed9738f9c4323ac05524465473dee
+timeCreated: 1494728675
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/SceneContextEditor.cs b/Assets/Source/Editor/Editors/SceneContextEditor.cs
new file mode 100644
index 0000000..59a996d
--- /dev/null
+++ b/Assets/Source/Editor/Editors/SceneContextEditor.cs
@@ -0,0 +1,38 @@
+#if !ODIN_INSPECTOR
+
+using UnityEditor;
+
+namespace Zenject
+{
+    [CanEditMultipleObjects]
+    [CustomEditor(typeof(SceneContext))]
+    [NoReflectionBaking]
+    public class SceneContextEditor : RunnableContextEditor
+    {
+        private SerializedProperty _contractNameProperty;
+        private SerializedProperty _parentNamesProperty;
+        private SerializedProperty _parentNewObjectsUnderSceneContextProperty;
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _contractNameProperty = serializedObject.FindProperty("_contractNames");
+            _parentNamesProperty = serializedObject.FindProperty("_parentContractNames");
+            _parentNewObjectsUnderSceneContextProperty =
+                serializedObject.FindProperty("_parentNewObjectsUnderSceneContext");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_contractNameProperty, true);
+            EditorGUILayout.PropertyField(_parentNamesProperty, true);
+            EditorGUILayout.PropertyField(_parentNewObjectsUnderSceneContextProperty);
+        }
+    }
+}
+
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/SceneContextEditor.cs.meta b/Assets/Source/Editor/Editors/SceneContextEditor.cs.meta
new file mode 100644
index 0000000..f9dda27
--- /dev/null
+++ b/Assets/Source/Editor/Editors/SceneContextEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: c04ae1d59f53f514f96e284ba43122f7
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs b/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs
new file mode 100644
index 0000000..e6f1406
--- /dev/null
+++ b/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs
@@ -0,0 +1,72 @@
+#if !ODIN_INSPECTOR
+
+using System.Linq;
+using UnityEditor;
+
+namespace Zenject
+{
+    [CustomEditor(typeof(SceneDecoratorContext))]
+    [NoReflectionBaking]
+    public class SceneDecoratorContextEditor : ContextEditor
+    {
+        private SerializedProperty _decoratedContractNameProperty;
+
+        protected override string[] PropertyNames
+        {
+            get
+            {
+                return base.PropertyNames.Concat(new[]
+                    {
+                        "_lateInstallers",
+                        "_lateInstallerPrefabs",
+                        "_lateScriptableObjectInstallers"
+                    })
+                    .ToArray();
+            }
+        }
+
+        protected override string[] PropertyDisplayNames
+        {
+            get
+            {
+                return base.PropertyDisplayNames.Concat(new[]
+                    {
+                        "Late Installers",
+                        "Late Prefab Installers",
+                        "Late Scriptable Object Installers"
+                    })
+                    .ToArray();
+            }
+        }
+
+        protected override string[] PropertyDescriptions
+        {
+            get
+            {
+                return base.PropertyDescriptions.Concat(new[]
+                    {
+                        "Drag any MonoInstallers that you have added to your Scene Hierarchy here. They'll be installed after the target installs its bindings",
+                        "Drag any prefabs that contain a MonoInstaller on them here. They'll be installed after the target installs its bindings",
+                        "Drag any assets in your Project that implement ScriptableObjectInstaller here. They'll be installed after the target installs its bindings"
+                    })
+                    .ToArray();
+            }
+        }
+
+        public override void OnEnable()
+        {
+            base.OnEnable();
+
+            _decoratedContractNameProperty = serializedObject.FindProperty("_decoratedContractName");
+        }
+
+        protected override void OnGui()
+        {
+            base.OnGui();
+
+            EditorGUILayout.PropertyField(_decoratedContractNameProperty);
+        }
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs.meta b/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs.meta
new file mode 100644
index 0000000..aef5f5f
--- /dev/null
+++ b/Assets/Source/Editor/Editors/SceneDecoratorContextEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d2b9289e80031104295e10acf518d75a
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor.meta b/Assets/Source/Editor/MemoryPoolMonitor.meta
new file mode 100644
index 0000000..c466110
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: ca9d67cacb741b446be3472235157580
+folderAsset: yes
+timeCreated: 1528023583
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor.meta
new file mode 100644
index 0000000..a43c815
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 18482dc182598e14399913a5afa12430
+folderAsset: yes
+timeCreated: 1527956868
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow.meta
new file mode 100644
index 0000000..74ebc27
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 67a9d3b730160cd4984a4236cd692441
+folderAsset: yes
+timeCreated: 1521388527
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs
new file mode 100644
index 0000000..38e3fb3
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs
@@ -0,0 +1,192 @@
+using System;
+using System.Collections.Generic;
+
+namespace Zenject.MemoryPoolMonitor
+{
+    // Fastest known in place stable sort. No risk of exploding a stack. Cost: a relatively high number of moves. Stack can still be expensive too.
+    // This is a merge sort with a smart in place merge that 'rotates' the sub arrays.
+    // Taken from: http://thomas.baudel.name/Visualisation/VisuTri/inplacestablesort.html
+    public class InPlaceStableSort<T>
+    {
+        static void Exchange(List<T> list, int a, int b)
+        {
+            var temp = list[a];
+            list[a] = list[b];
+            list[b] = temp;
+        }
+
+        static int Lower(List<T> list, Comparison<T> comparer, int from, int to, int val)
+        {
+            int len = to - from, half;
+            while (len > 0)
+            {
+                half = len / 2;
+                int mid = from + half;
+                if (comparer(list[mid], list[val]) < 0)
+                {
+                    from = mid + 1;
+                    len = len - half - 1;
+                }
+                else
+                {
+                    len = half;
+                }
+            }
+            return from;
+        }
+
+        static int Upper(List<T> list, Comparison<T> comparer, int from, int to, int val)
+        {
+            int len = to - from, half;
+            while (len > 0)
+            {
+                half = len / 2;
+                int mid = from + half;
+                if (comparer(list[val], list[mid]) < 0)
+                {
+                    len = half;
+                }
+                else
+                {
+                    from = mid + 1;
+                    len = len - half - 1;
+                }
+            }
+            return from;
+        }
+
+        static void InsertSort(List<T> list, Comparison<T> comparer, int from, int to)
+        {
+            if (to > from + 1)
+            {
+                for (int i = from + 1; i < to; i++)
+                {
+                    for (int j = i; j > from; j--)
+                    {
+                        if (comparer(list[j], list[j - 1]) < 0)
+                        {
+                            Exchange(list, j, j - 1);
+                        }
+                        else
+                        {
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+
+        static int Gcd(int m, int n)
+        {
+            while (n != 0)
+            {
+                int t = m % n;
+                m = n;
+                n = t;
+            }
+            return m;
+        }
+
+        static void Reverse(List<T> list, int from, int to)
+        {
+            while (from < to)
+            {
+                Exchange(list, from++, to--);
+            }
+        }
+
+        static void Rotate(List<T> list, Comparison<T> comparer, int from, int mid, int to)
+        {
+            /*  a less sophisticated but costlier version:
+                    Reverse(from, mid-1);
+                    Reverse(mid, to-1);
+                    Reverse(from, to-1);
+                    */
+            if (from == mid || mid == to)
+            {
+                return;
+            }
+            int n = Gcd(to - from, mid - from);
+            while (n-- != 0)
+            {
+                T val = list[from + n];
+                int shift = mid - from;
+                int p1 = from + n, p2 = from + n + shift;
+                while (p2 != from + n)
+                {
+                    list[p1] = list[p2];
+                    p1 = p2;
+                    if (to - p2 > shift)
+                    {
+                        p2 += shift;
+                    }
+                    else
+                    {
+                        p2 = from + (shift - (to - p2));
+                    }
+                }
+                list[p1] = val;
+            }
+        }
+
+        static void Merge(List<T> list, Comparison<T> comparer, int from, int pivot, int to, int len1, int len2)
+        {
+            if (len1 == 0 || len2 == 0)
+            {
+                return;
+            }
+
+            if (len1 + len2 == 2)
+            {
+                if (comparer(list[pivot], list[from]) < 0)
+                {
+                    Exchange(list, pivot, from);
+                }
+
+                return;
+            }
+
+            int first_cut, second_cut;
+            int len11, len22;
+
+            if (len1 > len2)
+            {
+                len11 = len1 / 2;
+                first_cut = from + len11;
+                second_cut = Lower(list, comparer, pivot, to, first_cut);
+                len22 = second_cut - pivot;
+            }
+            else
+            {
+                len22 = len2 / 2;
+                second_cut = pivot + len22;
+                first_cut = Upper(list, comparer, from, pivot, second_cut);
+                len11 = first_cut - from;
+            }
+
+            Rotate(list, comparer, first_cut, pivot, second_cut);
+            int new_mid = first_cut + len22;
+            Merge(list, comparer, from, first_cut, new_mid, len11, len22);
+            Merge(list, comparer, new_mid, second_cut, to, len1 - len11, len2 - len22);
+        }
+
+        public static void Sort(List<T> list, Comparison<T> comparer, int from, int to)
+        {
+            if (to - from < 12)
+            {
+                InsertSort(list, comparer, from, to);
+                return;
+            }
+
+            int middle = (from + to) / 2;
+            Sort(list, comparer, from, middle);
+            Sort(list, comparer, middle, to);
+            Merge(list, comparer, from, middle, to, middle - from, to - middle);
+        }
+
+        public static void Sort(List<T> list, Comparison<T> comparer)
+        {
+            Sort(list, comparer, 0, list.Count);
+        }
+    };
+}
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs.meta
new file mode 100644
index 0000000..44966ac
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/InPlaceStableSort.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 48a8b9cc5fc1b7641ad87f55c4da8788
+timeCreated: 1528024394
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs
new file mode 100644
index 0000000..c9b47bd
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs
@@ -0,0 +1,556 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using UnityEditor;
+using UnityEngine.Profiling;
+using Zenject;
+
+namespace Zenject.MemoryPoolMonitor
+{
+    public class MpmView : IGuiRenderable, ITickable, IInitializable
+    {
+        readonly Settings _settings;
+        readonly MpmWindow _window;
+
+        readonly List<IMemoryPool> _pools = new List<IMemoryPool>();
+
+        const int NumColumns = 6;
+
+        static string[] ColumnTitles = new string[]
+        {
+            "Pool Type", "Num Total", "Num Active", "Num Inactive", "", ""
+        };
+
+        int _controlID;
+        int _sortColumn = 0;
+        float _scrollPosition;
+        bool _poolListDirty;
+        bool _sortDescending;
+        Texture2D _rowBackground1;
+        Texture2D _rowBackground2;
+        Texture2D _rowBackgroundHighlighted;
+        Texture2D _rowBackgroundSelected;
+        Texture2D _lineTexture;
+        Type _selectedPoolType;
+        string _searchFilter = "";
+        string _actualFilter = "";
+
+        public MpmView(
+            MpmWindow window,
+            Settings settings)
+        {
+            _settings = settings;
+            _window = window;
+        }
+
+        public float HeaderTop
+        {
+            get { return _settings.HeaderHeight + _settings.FilterHeight; }
+        }
+
+        public float TotalWidth
+        {
+            get { return _window.position.width; }
+        }
+
+        public float TotalHeight
+        {
+            get { return _window.position.height; }
+        }
+
+        string GetName(IMemoryPool pool)
+        {
+            var type = pool.GetType();
+            return "{0}.{1}".Fmt(type.Namespace, type.PrettyName());
+        }
+
+        Texture2D CreateColorTexture(Color color)
+        {
+            var texture = new Texture2D(1, 1);
+            texture.SetPixel(1, 1, color);
+            texture.Apply();
+            return texture;
+        }
+
+        Texture2D RowBackground1
+        {
+            get
+            {
+                if (_rowBackground1 == null)
+                {
+                    _rowBackground1 = CreateColorTexture(_settings.RowBackground1);
+                }
+
+                return _rowBackground1;
+            }
+        }
+
+        Texture2D RowBackground2
+        {
+            get
+            {
+                if (_rowBackground2 == null)
+                {
+                    _rowBackground2 = CreateColorTexture(_settings.RowBackground2);
+                }
+
+                return _rowBackground2;
+            }
+        }
+
+        Texture2D RowBackgroundHighlighted
+        {
+            get
+            {
+                if (_rowBackgroundHighlighted == null)
+                {
+                    _rowBackgroundHighlighted = CreateColorTexture(_settings.RowBackgroundHighlighted);
+                }
+
+                return _rowBackgroundHighlighted;
+            }
+        }
+
+        Texture2D RowBackgroundSelected
+        {
+            get
+            {
+                if (_rowBackgroundSelected == null)
+                {
+                    _rowBackgroundSelected = CreateColorTexture(_settings.RowBackgroundSelected);
+                }
+
+                return _rowBackgroundSelected;
+            }
+        }
+
+        Texture2D LineTexture
+        {
+            get
+            {
+                if (_lineTexture == null)
+                {
+                    _lineTexture = CreateColorTexture(_settings.LineColor);
+                }
+
+                return _lineTexture;
+            }
+        }
+
+        public void Initialize()
+        {
+            StaticMemoryPoolRegistry.PoolAdded += OnPoolListChanged;
+            StaticMemoryPoolRegistry.PoolRemoved += OnPoolListChanged;
+            _poolListDirty = true;
+        }
+
+        void OnPoolListChanged(IMemoryPool pool)
+        {
+            _poolListDirty = true;
+        }
+
+        public void Tick()
+        {
+            if (_poolListDirty)
+            {
+                _poolListDirty = false;
+
+                _pools.Clear();
+                _pools.AddRange(StaticMemoryPoolRegistry.Pools.Where(ShouldIncludePool));
+            }
+
+            InPlaceStableSort<IMemoryPool>.Sort(_pools, ComparePools);
+        }
+
+        bool ShouldIncludePool(IMemoryPool pool)
+        {
+            //var poolType = pool.GetType();
+
+            //if (poolType.Namespace == "Zenject")
+            //{
+                //return false;
+            //}
+
+            if (_actualFilter.IsEmpty())
+            {
+                return true;
+            }
+
+            return GetName(pool).ToLowerInvariant().Contains(_actualFilter);
+        }
+
+        public void GuiRender()
+        {
+            _controlID = GUIUtility.GetControlID(FocusType.Passive);
+
+            Rect windowBounds = new Rect(0, 0, TotalWidth, _window.position.height);
+
+            Vector2 scrollbarSize = new Vector2(
+                GUI.skin.horizontalScrollbar.CalcSize(GUIContent.none).y,
+                GUI.skin.verticalScrollbar.CalcSize(GUIContent.none).x);
+
+            GUI.Label(new Rect(
+                0, 0, _settings.FilterPaddingLeft, _settings.FilterHeight), "Filter:", _settings.FilterTextStyle);
+
+            var searchFilter = GUI.TextField(
+                new Rect(_settings.FilterPaddingLeft, _settings.FilterPaddingTop, _settings.FilterWidth, _settings.FilterInputHeight), _searchFilter, 999);
+
+            if (searchFilter != _searchFilter)
+            {
+                _searchFilter = searchFilter;
+                _actualFilter = _searchFilter.Trim().ToLowerInvariant();
+                _poolListDirty = true;
+            }
+
+            Rect viewArea = new Rect(0, HeaderTop, TotalWidth - scrollbarSize.y, _window.position.height - HeaderTop);
+
+            Rect contentRect = new Rect(
+                0, 0, viewArea.width, _pools.Count() * _settings.RowHeight);
+
+            Rect vScrRect = new Rect(
+                windowBounds.x + viewArea.width, HeaderTop, scrollbarSize.y, viewArea.height);
+
+            _scrollPosition = GUI.VerticalScrollbar(
+                vScrRect, _scrollPosition, viewArea.height, 0, contentRect.height);
+
+            DrawColumnHeaders(viewArea.width);
+
+            GUI.BeginGroup(viewArea);
+            {
+                contentRect.y = -_scrollPosition;
+
+                GUI.BeginGroup(contentRect);
+                {
+                    DrawContent(contentRect.width);
+                }
+                GUI.EndGroup();
+            }
+            GUI.EndGroup();
+
+            HandleEvents();
+        }
+
+        void DrawColumnHeaders(float width)
+        {
+            GUI.DrawTexture(new Rect(
+                0, _settings.FilterHeight - 0.5f * _settings.SplitterWidth, width, _settings.SplitterWidth), LineTexture);
+
+            GUI.DrawTexture(new Rect(
+                0, HeaderTop - 0.5f * _settings.SplitterWidth, width, _settings.SplitterWidth), LineTexture);
+
+            var columnPos = 0.0f;
+
+            for (int i = 0; i < NumColumns; i++)
+            {
+                var columnWidth = GetColumnWidth(i);
+                DrawColumn1(i, columnPos, columnWidth);
+                columnPos += columnWidth;
+            }
+        }
+
+        void DrawColumn1(
+            int index, float position, float width)
+        {
+            var columnHeight = _settings.HeaderHeight + _pools.Count() * _settings.RowHeight;
+
+            if (index < 4)
+            {
+                GUI.DrawTexture(new Rect(
+                    position + width - _settings.SplitterWidth * 0.5f, _settings.FilterHeight,
+                    _settings.SplitterWidth, columnHeight), LineTexture);
+            }
+
+            var headerBounds = new Rect(
+                position + 0.5f * _settings.SplitterWidth,
+                _settings.FilterHeight,
+                width - _settings.SplitterWidth, _settings.HeaderHeight);
+
+            DrawColumnHeader(index, headerBounds, ColumnTitles[index]);
+        }
+
+        void HandleEvents()
+        {
+            switch (Event.current.GetTypeForControl(_controlID))
+            {
+                case EventType.ScrollWheel:
+                {
+                    _scrollPosition = Mathf.Clamp(_scrollPosition + Event.current.delta.y * _settings.ScrollSpeed, 0, TotalHeight);
+                    break;
+                }
+                case EventType.MouseDown:
+                {
+                    _selectedPoolType = TryGetPoolTypeUnderMouse();
+                    break;
+                }
+            }
+        }
+
+        Type TryGetPoolTypeUnderMouse()
+        {
+            var mousePositionInContent = Event.current.mousePosition + Vector2.up * _scrollPosition;
+
+            for (int i = 0; i < _pools.Count; i++)
+            {
+                var pool = _pools[i];
+
+                var rowRect = GetPoolRowRect(i);
+                rowRect.y += HeaderTop;
+
+                if (rowRect.Contains(mousePositionInContent))
+                {
+                    return pool.GetType();
+                }
+            }
+
+            return null;
+        }
+
+        Rect GetPoolRowRect(int index)
+        {
+            return new Rect(
+                0, index * _settings.RowHeight, TotalWidth, _settings.RowHeight);
+        }
+
+        void DrawRowBackgrounds()
+        {
+            var mousePositionInContent = Event.current.mousePosition;
+
+            for (int i = 0; i < _pools.Count; i++)
+            {
+                var pool = _pools[i];
+                var rowRect = GetPoolRowRect(i);
+
+                Texture2D background;
+
+                if (pool.GetType() == _selectedPoolType)
+                {
+                    background = RowBackgroundSelected;
+                }
+                else
+                {
+                    if (rowRect.Contains(mousePositionInContent))
+                    {
+                        background = RowBackgroundHighlighted;
+                    }
+                    else if (i % 2 == 0)
+                    {
+                        background = RowBackground1;
+                    }
+                    else
+                    {
+                        background = RowBackground2;
+                    }
+                }
+
+                GUI.DrawTexture(rowRect, background);
+            }
+        }
+
+        float GetColumnWidth(int index)
+        {
+            if (index == 0)
+            {
+                return TotalWidth - (NumColumns - 1) * _settings.NormalColumnWidth;
+            }
+
+            return _settings.NormalColumnWidth;
+        }
+
+        void DrawContent(float width)
+        {
+            DrawRowBackgrounds();
+
+            var columnPos = 0.0f;
+
+            for (int i = 0; i < NumColumns; i++)
+            {
+                var columnWidth = GetColumnWidth(i);
+                DrawColumn(i, columnPos, columnWidth);
+                columnPos += columnWidth;
+            }
+        }
+
+        void DrawColumn(
+            int index, float position, float width)
+        {
+            var columnHeight = _settings.HeaderHeight + _pools.Count() * _settings.RowHeight;
+
+            if (index < 4)
+            {
+                GUI.DrawTexture(new Rect(
+                    position + width - _settings.SplitterWidth * 0.5f, 0,
+                    _settings.SplitterWidth, columnHeight), LineTexture);
+            }
+
+            var columnBounds = new Rect(
+                position + 0.5f * _settings.SplitterWidth, 0, width - _settings.SplitterWidth, columnHeight);
+
+            GUI.BeginGroup(columnBounds);
+            {
+                for (int i = 0; i < _pools.Count; i++)
+                {
+                    var pool = _pools[i];
+
+                    var cellBounds = new Rect(
+                        0, _settings.RowHeight * i,
+                        columnBounds.width, _settings.RowHeight);
+
+                    DrawColumnContents(index, cellBounds, pool);
+                }
+            }
+            GUI.EndGroup();
+        }
+
+        void DrawColumnContents(
+            int index, Rect bounds, IMemoryPool pool)
+        {
+            switch (index)
+            {
+                case 0:
+                {
+                    GUI.Label(bounds, GetName(pool), _settings.ContentNameTextStyle);
+                    break;
+                }
+                case 1:
+                {
+                    GUI.Label(bounds, pool.NumTotal.ToString(), _settings.ContentNumberTextStyle);
+                    break;
+                }
+                case 2:
+                {
+                    GUI.Label(bounds, pool.NumActive.ToString(), _settings.ContentNumberTextStyle);
+                    break;
+                }
+                case 3:
+                {
+                    GUI.Label(bounds, pool.NumInactive.ToString(), _settings.ContentNumberTextStyle);
+                    break;
+                }
+                case 4:
+                {
+                    var buttonBounds = new Rect(
+                        bounds.x + _settings.ButtonMargin, bounds.y, bounds.width - _settings.ButtonMargin, bounds.height);
+
+                    if (GUI.Button(buttonBounds, "Clear"))
+                    {
+                        pool.Clear();
+                    }
+                    break;
+                }
+                case 5:
+                {
+                    var buttonBounds = new Rect(
+                        bounds.x, bounds.y, bounds.width - 15.0f, bounds.height);
+
+                    if (GUI.Button(buttonBounds, "Expand"))
+                    {
+                        pool.ExpandBy(5);
+                    }
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void DrawColumnHeader(int index, Rect bounds, string text)
+        {
+            if (index > 3)
+            {
+                return;
+            }
+
+            if (_sortColumn == index)
+            {
+                var offset = _settings.TriangleOffset;
+                var image = _sortDescending ? _settings.TriangleDown : _settings.TriangleUp;
+
+                GUI.DrawTexture(new Rect(bounds.x + offset.x, bounds.y + offset.y, image.width, image.height), image);
+            }
+
+            if (GUI.Button(bounds, text, index == 0 ? _settings.HeaderTextStyleName : _settings.HeaderTextStyle))
+            {
+                if (_sortColumn == index)
+                {
+                    _sortDescending = !_sortDescending;
+                }
+                else
+                {
+                    _sortColumn = index;
+                }
+            }
+        }
+
+        int ComparePools(IMemoryPool left, IMemoryPool right)
+        {
+            if (_sortDescending)
+            {
+                var temp = right;
+                right = left;
+                left = temp;
+            }
+
+            switch (_sortColumn)
+            {
+                case 4:
+                case 5:
+                case 0:
+                {
+                    return GetName(left).CompareTo(GetName(right));
+                }
+                case 1:
+                {
+                    return left.NumTotal.CompareTo(right.NumTotal);
+                }
+                case 2:
+                {
+                    return left.NumActive.CompareTo(right.NumActive);
+                }
+                case 3:
+                {
+                    return left.NumInactive.CompareTo(right.NumInactive);
+                }
+            }
+
+            throw Assert.CreateException();
+        }
+
+        [Serializable]
+        public class Settings
+        {
+            public Texture2D TriangleUp;
+            public Texture2D TriangleDown;
+            public Vector2 TriangleOffset;
+
+            public GUIStyle FilterTextStyle;
+            public GUIStyle HeaderTextStyleName;
+            public GUIStyle HeaderTextStyle;
+            public GUIStyle ContentNumberTextStyle;
+            public GUIStyle ContentNameTextStyle;
+
+            public Color RowBackground1;
+            public Color RowBackground2;
+            public Color RowBackgroundHighlighted;
+            public Color RowBackgroundSelected;
+            public Color LineColor;
+
+            public float ScrollSpeed = 1.5f;
+            public float NormalColumnWidth;
+            public float HeaderHeight;
+            public float FilterHeight;
+            public float FilterInputHeight;
+            public float FilterWidth;
+            public float FilterPaddingLeft;
+            public float FilterPaddingTop = 10;
+
+            public float SplitterWidth;
+            public float RowHeight;
+
+            public float ButtonMargin = 3;
+        }
+    }
+}
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs.meta
new file mode 100644
index 0000000..b28981e
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmView.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1bdf0766db282fd4eaba7e7cd7d17ca5
+timeCreated: 1521391096
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs
new file mode 100644
index 0000000..30ec105
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs
@@ -0,0 +1,27 @@
+using System;
+using ModestTree;
+using UnityEngine;
+using UnityEditor;
+using Zenject;
+
+namespace Zenject.MemoryPoolMonitor
+{
+    public class MpmWindow : ZenjectEditorWindow
+    {
+        [MenuItem("Window/Zenject Pool Monitor")]
+        public static MpmWindow GetOrCreateWindow()
+        {
+            var window = EditorWindow.GetWindow<MpmWindow>();
+            window.titleContent = new GUIContent("Pool Monitor");
+            return window;
+        }
+
+        public override void InstallBindings()
+        {
+            MpmSettingsInstaller.InstallFromResource(Container);
+
+            Container.BindInstance(this);
+            Container.BindInterfacesTo<MpmView>().AsSingle();
+        }
+    }
+}
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs.meta
new file mode 100644
index 0000000..eb8c5cb
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: e38c08208cf0cee48a675a3944d37e10
+timeCreated: 1521391096
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs b/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs
new file mode 100644
index 0000000..41ff2e9
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs
@@ -0,0 +1,18 @@
+using UnityEngine;
+using UnityEditor;
+using Zenject;
+
+namespace Zenject.MemoryPoolMonitor
+{
+    [CreateAssetMenu(fileName = "MpmSettingsInstaller", menuName = "Installers/MpmSettingsInstaller")]
+    public class MpmSettingsInstaller : ScriptableObjectInstaller<MpmSettingsInstaller>
+    {
+        public MpmView.Settings MpmView;
+        public MpmView.Settings MpmViewDark;
+
+        public override void InstallBindings()
+        {
+            Container.BindInstance(EditorGUIUtility.isProSkin ? MpmViewDark : MpmView);
+        }
+    }
+}
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs.meta
new file mode 100644
index 0000000..6f593d9
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/MpmSettingsInstaller.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7893183729d13c84b80bb80d3aac6715
+timeCreated: 1521390842
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources.meta
new file mode 100644
index 0000000..29743a5
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: d2ca2f3310cb1f043806c4423a5ba68d
+folderAsset: yes
+timeCreated: 1521391155
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers.meta
new file mode 100644
index 0000000..f2e664d
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: d8bd38610b9ceab43b21018a741225e8
+folderAsset: yes
+timeCreated: 1521391199
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset
new file mode 100644
index 0000000..d38ba1c
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset
@@ -0,0 +1,723 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &11400000
+MonoBehaviour:
+  m_ObjectHideFlags: 0
+  m_PrefabParentObject: {fileID: 0}
+  m_PrefabInternal: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: 7893183729d13c84b80bb80d3aac6715, type: 3}
+  m_Name: MpmSettingsInstaller
+  m_EditorClassIdentifier: 
+  MpmView:
+    TriangleUp: {fileID: 2800000, guid: ac5b05acff67c77418510f95f0ac9bb1, type: 3}
+    TriangleDown: {fileID: 2800000, guid: fd2add38dc259eb49a3e7fc331758b7e, type: 3}
+    TriangleOffset: {x: 1.6, y: 6.07}
+    FilterTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 15
+      m_FontStyle: 0
+      m_Alignment: 0
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 2.63, y: 4.65}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    HeaderTextStyleName:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 0}
+      m_FontSize: 12
+      m_FontStyle: 1
+      m_Alignment: 3
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 23.1, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    HeaderTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 12
+      m_FontStyle: 1
+      m_Alignment: 4
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 7.2, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    ContentNumberTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 14
+      m_FontStyle: 0
+      m_Alignment: 4
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 0, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    ContentNameTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0, g: 0, b: 0, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 12
+      m_FontStyle: 0
+      m_Alignment: 3
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 9.01, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    RowBackground1: {r: 0.854902, g: 0.854902, b: 0.854902, a: 1}
+    RowBackground2: {r: 0.833, g: 0.833, b: 0.833, a: 1}
+    RowBackgroundHighlighted: {r: 0, g: 0, b: 0, a: 0}
+    RowBackgroundSelected: {r: 0, g: 0, b: 0, a: 0}
+    LineColor: {r: 0.6691177, g: 0.6691177, b: 0.6691177, a: 1}
+    ScrollSpeed: 10.64
+    NormalColumnWidth: 103.92
+    HeaderHeight: 27.24
+    FilterHeight: 28.1
+    FilterInputHeight: 17.9
+    FilterWidth: 295.3
+    FilterPaddingLeft: 42.92
+    FilterPaddingTop: 5.6
+    SplitterWidth: 2.56
+    RowHeight: 23.6
+    ButtonMargin: -0.1
+  MpmViewDark:
+    TriangleUp: {fileID: 2800000, guid: ac5b05acff67c77418510f95f0ac9bb1, type: 3}
+    TriangleDown: {fileID: 2800000, guid: fd2add38dc259eb49a3e7fc331758b7e, type: 3}
+    TriangleOffset: {x: 1.6, y: 6.07}
+    FilterTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 15
+      m_FontStyle: 0
+      m_Alignment: 0
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 2.63, y: 4.65}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    HeaderTextStyleName:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 0}
+      m_FontSize: 12
+      m_FontStyle: 1
+      m_Alignment: 3
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 23.1, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    HeaderTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 12
+      m_FontStyle: 1
+      m_Alignment: 4
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 7.2, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    ContentNumberTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 14
+      m_FontStyle: 0
+      m_Alignment: 4
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 0, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    ContentNameTextStyle:
+      m_Name: 
+      m_Normal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Hover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Active:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Focused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnNormal:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnHover:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnActive:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_OnFocused:
+        m_Background: {fileID: 0}
+        m_ScaledBackgrounds: []
+        m_TextColor: {r: 0.7058824, g: 0.7058824, b: 0.7058824, a: 1}
+      m_Border:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Margin:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Padding:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Overflow:
+        m_Left: 0
+        m_Right: 0
+        m_Top: 0
+        m_Bottom: 0
+      m_Font: {fileID: 10102, guid: 0000000000000000e000000000000000, type: 0}
+      m_FontSize: 12
+      m_FontStyle: 0
+      m_Alignment: 3
+      m_WordWrap: 0
+      m_RichText: 1
+      m_TextClipping: 0
+      m_ImagePosition: 0
+      m_ContentOffset: {x: 9.01, y: 0}
+      m_FixedWidth: 0
+      m_FixedHeight: 0
+      m_StretchWidth: 1
+      m_StretchHeight: 0
+    RowBackground1: {r: 0.23137257, g: 0.23137257, b: 0.23137257, a: 1}
+    RowBackground2: {r: 0.21568629, g: 0.21568629, b: 0.21568629, a: 1}
+    RowBackgroundHighlighted: {r: 0, g: 0, b: 0, a: 0}
+    RowBackgroundSelected: {r: 0, g: 0, b: 0, a: 0}
+    LineColor: {r: 0.121568635, g: 0.121568635, b: 0.121568635, a: 1}
+    ScrollSpeed: 10.64
+    NormalColumnWidth: 103.92
+    HeaderHeight: 27.24
+    FilterHeight: 28.1
+    FilterInputHeight: 17.9
+    FilterWidth: 295.3
+    FilterPaddingLeft: 42.92
+    FilterPaddingTop: 5.6
+    SplitterWidth: 2.56
+    RowHeight: 23.6
+    ButtonMargin: -0.1
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset.meta
new file mode 100644
index 0000000..9bb95b2
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Resources/Installers/MpmSettingsInstaller.asset.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: b8f181012b3a35f46ab27f3840f85f55
+timeCreated: 1521391162
+licenseType: Free
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 11400000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png
new file mode 100644
index 0000000000000000000000000000000000000000..f2a3f799ad00ff01f7def817d41a914cb7a5547f
GIT binary patch
literal 307
zcmeAS@N?(olHy`uVBq!ia0vp^d?3uh1|;P@bT0xa#^NA%Cx&(BWL^R}Ea{HEjtmSN
z`?>!lvI6;>1s;*bKn;gMnDKc2iWH!rWQl7;NpOBzNqJ&XDnmhHW?qS2UTTSgiJpO;
zk>N*$%&9;{i#=T&LoEE~_U{&KHV|+LZD8_JSjNP}B<{4rkAowY?Px$7^K^%bd%`kt
z=cH@|Y+l;sr!P@Z+J3@acnNDi_ZBgk#+Za7Q=3IAE<fV=sx{^H?29T<^Cn(#|M}OT
zZS!QC%{zZCNO<nzAI_r{;pb<j_U+rDhJfZ)rmk<M)zt?bq%@ZB+_N-cJHinc?eYG_
vT<60M@3tqz-}=uZ(K2u8&LEk8?uXc|j2>;(-<j76bS{IZtDnm{r-UW|tng}A

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png.meta
new file mode 100644
index 0000000..77a61e0
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleDown.png.meta
@@ -0,0 +1,98 @@
+fileFormatVersion: 2
+guid: fd2add38dc259eb49a3e7fc331758b7e
+timeCreated: 1528020459
+licenseType: Free
+TextureImporter:
+  fileIDToRecycleName: {}
+  externalObjects: {}
+  serializedVersion: 4
+  mipmaps:
+    mipMapMode: 0
+    enableMipMap: 1
+    sRGBTexture: 1
+    linearTexture: 0
+    fadeOut: 0
+    borderMipMap: 0
+    mipMapsPreserveCoverage: 0
+    alphaTestReferenceValue: 0.5
+    mipMapFadeDistanceStart: 1
+    mipMapFadeDistanceEnd: 3
+  bumpmap:
+    convertToNormalMap: 0
+    externalNormalMap: 0
+    heightScale: 0.25
+    normalMapFilter: 0
+  isReadable: 0
+  grayScaleToAlpha: 0
+  generateCubemap: 6
+  cubemapConvolution: 0
+  seamlessCubemap: 0
+  textureFormat: 1
+  maxTextureSize: 2048
+  textureSettings:
+    serializedVersion: 2
+    filterMode: -1
+    aniso: -1
+    mipBias: -1
+    wrapU: -1
+    wrapV: -1
+    wrapW: -1
+  nPOTScale: 1
+  lightmap: 0
+  compressionQuality: 50
+  spriteMode: 0
+  spriteExtrude: 1
+  spriteMeshType: 1
+  alignment: 0
+  spritePivot: {x: 0.5, y: 0.5}
+  spritePixelsToUnits: 100
+  spriteBorder: {x: 0, y: 0, z: 0, w: 0}
+  spriteGenerateFallbackPhysicsShape: 1
+  alphaUsage: 1
+  alphaIsTransparency: 1
+  spriteTessellationDetail: -1
+  textureType: 0
+  textureShape: 1
+  maxTextureSizeSet: 0
+  compressionQualitySet: 0
+  textureFormatSet: 0
+  platformSettings:
+  - buildTarget: DefaultTexturePlatform
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  - buildTarget: Standalone
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  - buildTarget: WebGL
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  spriteSheet:
+    serializedVersion: 2
+    sprites: []
+    outline: []
+    physicsShape: []
+  spritePackingTag: 
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png
new file mode 100644
index 0000000000000000000000000000000000000000..af2d1e715c734b90b2503bf88f27462291089da5
GIT binary patch
literal 298
zcmeAS@N?(olHy`uVBq!ia0vp^d?3uh1|;P@bT0xa#^NA%Cx&(BWL^R}Ea{HEjtmSN
z`?>!lvI6;>1s;*bKn;gMnDKc2iWH!rWQl7;NpOBzNqJ&XDnmhHW?qS2UTTSgiJpO;
zk>N*$%&9;{vpiiKLoEE~p57?v;2^+yLEB*g%SJ91rdEzpB>^pG!&3qpjywMCFEr1V
zZGLd}?z?~QU7k#TVx%#*XQi#`^p+s*L*}LXbvPdKOj~@yeDlo90tz?emoC^o^Rfen
z=!TU-g?c4=bxbU3p%>KVcFP~yXqLEopY}PmjI+~~rp@KN`!Y$;nQyg~U83Ic>*DOC
n70Cx4cZ-_HhwS??cZY2J??+o}9GcbxUCH3->gTe~DWM4fToY%m

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png.meta
new file mode 100644
index 0000000..b84caab
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/TriangleUp.png.meta
@@ -0,0 +1,98 @@
+fileFormatVersion: 2
+guid: ac5b05acff67c77418510f95f0ac9bb1
+timeCreated: 1528020459
+licenseType: Free
+TextureImporter:
+  fileIDToRecycleName: {}
+  externalObjects: {}
+  serializedVersion: 4
+  mipmaps:
+    mipMapMode: 0
+    enableMipMap: 1
+    sRGBTexture: 1
+    linearTexture: 0
+    fadeOut: 0
+    borderMipMap: 0
+    mipMapsPreserveCoverage: 0
+    alphaTestReferenceValue: 0.5
+    mipMapFadeDistanceStart: 1
+    mipMapFadeDistanceEnd: 3
+  bumpmap:
+    convertToNormalMap: 0
+    externalNormalMap: 0
+    heightScale: 0.25
+    normalMapFilter: 0
+  isReadable: 0
+  grayScaleToAlpha: 0
+  generateCubemap: 6
+  cubemapConvolution: 0
+  seamlessCubemap: 0
+  textureFormat: 1
+  maxTextureSize: 2048
+  textureSettings:
+    serializedVersion: 2
+    filterMode: -1
+    aniso: -1
+    mipBias: -1
+    wrapU: -1
+    wrapV: -1
+    wrapW: -1
+  nPOTScale: 1
+  lightmap: 0
+  compressionQuality: 50
+  spriteMode: 0
+  spriteExtrude: 1
+  spriteMeshType: 1
+  alignment: 0
+  spritePivot: {x: 0.5, y: 0.5}
+  spritePixelsToUnits: 100
+  spriteBorder: {x: 0, y: 0, z: 0, w: 0}
+  spriteGenerateFallbackPhysicsShape: 1
+  alphaUsage: 1
+  alphaIsTransparency: 1
+  spriteTessellationDetail: -1
+  textureType: 0
+  textureShape: 1
+  maxTextureSizeSet: 0
+  compressionQualitySet: 0
+  textureFormatSet: 0
+  platformSettings:
+  - buildTarget: DefaultTexturePlatform
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  - buildTarget: Standalone
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  - buildTarget: WebGL
+    maxTextureSize: 2048
+    resizeAlgorithm: 0
+    textureFormat: -1
+    textureCompression: 1
+    compressionQuality: 50
+    crunchedCompression: 0
+    allowsAlphaSplitting: 0
+    overridden: 0
+    androidETC2FallbackOverride: 0
+  spriteSheet:
+    serializedVersion: 2
+    sprites: []
+    outline: []
+    physicsShape: []
+  spritePackingTag: 
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef
new file mode 100644
index 0000000..8e17fb0
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef
@@ -0,0 +1,11 @@
+{
+    "name": "Zenject-PoolMonitor-Editor",
+    "references": [
+        "Zenject",
+        "Zenject-Editor"
+    ],
+    "includePlatforms": [
+        "Editor"
+    ],
+    "excludePlatforms": []
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef.meta b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef.meta
new file mode 100644
index 0000000..4f52280
--- /dev/null
+++ b/Assets/Source/Editor/MemoryPoolMonitor/Editor/Zenject-PoolMonitor-Editor.asmdef.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: e988738e8012f5a4fa42a45fcab11e2c
+timeCreated: 1531030364
+licenseType: Free
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ObjectGraphVisualizer.cs b/Assets/Source/Editor/ObjectGraphVisualizer.cs
new file mode 100644
index 0000000..5eadfbd
--- /dev/null
+++ b/Assets/Source/Editor/ObjectGraphVisualizer.cs
@@ -0,0 +1,125 @@
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    // Responsibilities:
+    // - Output a file specifying the full object graph for a given root dependency
+    // - This file uses the DOT language with can be fed into GraphViz to generate an image
+    // - http://www.graphviz.org/
+    public static class ObjectGraphVisualizer
+    {
+        public static void OutputObjectGraphToFile(
+            DiContainer container, string outputPath,
+            IEnumerable<Type> externalIgnoreTypes, IEnumerable<Type> contractTypes)
+        {
+            // Output the entire object graph to file
+            var graph = CalculateObjectGraph(container, contractTypes);
+
+            var ignoreTypes = new List<Type>
+            {
+                typeof(DiContainer),
+                typeof(InitializableManager)
+            };
+
+            ignoreTypes.AddRange(externalIgnoreTypes);
+
+            var resultStr = "digraph { \n";
+
+            resultStr += "rankdir=LR;\n";
+
+            foreach (var entry in graph)
+            {
+                if (ShouldIgnoreType(entry.Key, ignoreTypes))
+                {
+                    continue;
+                }
+
+                foreach (var dependencyType in entry.Value)
+                {
+                    if (ShouldIgnoreType(dependencyType, ignoreTypes))
+                    {
+                        continue;
+                    }
+
+                    resultStr += GetFormattedTypeName(entry.Key) + " -> " + GetFormattedTypeName(dependencyType) + "; \n";
+                }
+            }
+
+            resultStr += " }";
+
+            File.WriteAllText(outputPath, resultStr);
+        }
+
+        static bool ShouldIgnoreType(Type type, List<Type> ignoreTypes)
+        {
+            return ignoreTypes.Contains(type);
+        }
+
+        static Dictionary<Type, List<Type>> CalculateObjectGraph(
+            DiContainer container, IEnumerable<Type> contracts)
+        {
+            var map = new Dictionary<Type, List<Type>>();
+
+            foreach (var contractType in contracts)
+            {
+                var depends = GetDependencies(container, contractType);
+
+                if (depends.Any())
+                {
+                    map.Add(contractType, depends);
+                }
+            }
+
+            return map;
+        }
+
+        static List<Type> GetDependencies(
+            DiContainer container, Type type)
+        {
+            var dependencies = new List<Type>();
+
+            foreach (var contractType in container.GetDependencyContracts(type))
+            {
+                List<Type> dependTypes;
+
+                if (contractType.FullName.StartsWith("System.Collections.Generic.List"))
+                {
+                    var subTypes = contractType.GenericArguments();
+                    Assert.IsEqual(subTypes.Length, 1);
+
+                    var subType = subTypes[0];
+                    dependTypes = container.ResolveTypeAll(subType);
+                }
+                else
+                {
+                    dependTypes = container.ResolveTypeAll(contractType);
+                    Assert.That(dependTypes.Count <= 1);
+                }
+
+                foreach (var dependType in dependTypes)
+                {
+                    dependencies.Add(dependType);
+                }
+            }
+
+            return dependencies;
+        }
+
+        static string GetFormattedTypeName(Type type)
+        {
+            var str = type.PrettyName();
+
+            // GraphViz does not read names with <, >, or . characters so replace them
+            str = str.Replace(">", "_");
+            str = str.Replace("<", "_");
+            str = str.Replace(".", "_");
+
+            return str;
+        }
+    }
+}
+
diff --git a/Assets/Source/Editor/ObjectGraphVisualizer.cs.meta b/Assets/Source/Editor/ObjectGraphVisualizer.cs.meta
new file mode 100644
index 0000000..9a7da1a
--- /dev/null
+++ b/Assets/Source/Editor/ObjectGraphVisualizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 29f47f2a06418244e8fcbe27db1a0eea
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking.meta b/Assets/Source/Editor/ReflectionBaking.meta
new file mode 100644
index 0000000..26c4359
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: c269d209df5c19940a2cf8c1ae365768
+folderAsset: yes
+timeCreated: 1537245053
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Common.meta b/Assets/Source/Editor/ReflectionBaking/Common.meta
new file mode 100644
index 0000000..ccb2cef
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Common.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 1f7a08e3d1279e542954d80ff88dcd95
+folderAsset: yes
+timeCreated: 1537245053
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs b/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs
new file mode 100644
index 0000000..f8b5f6a
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs
@@ -0,0 +1,382 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using ModestTree;
+using Zenject.ReflectionBaking.Mono.Cecil;
+using Zenject.ReflectionBaking.Mono.Collections.Generic;
+using ICustomAttributeProvider = Zenject.ReflectionBaking.Mono.Cecil.ICustomAttributeProvider;
+
+namespace Zenject.ReflectionBaking
+{
+    public static class CecilExtensions
+    {
+        public static Type TryGetActualType(this TypeReference typeRef, Assembly assembly)
+        {
+            var reflectionName = GetReflectionName(typeRef);
+            return assembly.GetType(reflectionName);
+        }
+
+        static string GetReflectionName(TypeReference type)
+        {
+            if (type.IsGenericInstance)
+            {
+                var genericInstance = (GenericInstanceType)type;
+
+                return string.Format(
+                    "{0}.{1}[{2}]", genericInstance.Namespace, type.Name,
+                    String.Join(",", genericInstance.GenericArguments.Select(p => GetReflectionName(p)).ToArray()));
+            }
+
+            return type.FullName;
+        }
+
+        public static List<TypeDefinition> LookupAllTypes(this ModuleDefinition module)
+        {
+            var allTypes = new List<TypeDefinition>();
+
+            foreach (var type in module.Types)
+            {
+                LookupAllTypesInternal(type, allTypes);
+            }
+
+            return allTypes;
+        }
+
+        static void LookupAllTypesInternal(TypeDefinition type, List<TypeDefinition> buffer)
+        {
+            buffer.Add(type);
+
+            foreach (var nestedType in type.NestedTypes)
+            {
+                LookupAllTypesInternal(nestedType, buffer);
+            }
+        }
+
+        public static TypeReference ImportType<T>(this ModuleDefinition module)
+        {
+            return module.ImportType(typeof(T));
+        }
+
+        public static TypeReference ImportType(this ModuleDefinition module, Type type)
+        {
+            return module.Import(type);
+        }
+
+        public static MethodReference ImportMethod<T>(this ModuleDefinition module, string methodName)
+        {
+            return module.ImportMethod(typeof(T), methodName);
+        }
+
+        public static MethodReference ImportMethod(
+            this ModuleDefinition module, Type type, string methodName)
+        {
+            return module.Import(
+                module.ImportType(type).Resolve().GetMethod(methodName));
+        }
+
+        public static MethodReference ImportMethod<T>(
+            this ModuleDefinition module, string methodName, int numArgs)
+        {
+            return module.ImportMethod(typeof(T), methodName, numArgs);
+        }
+
+        public static MethodReference ImportMethod(
+            this ModuleDefinition module, Type type, string methodName, int numArgs)
+        {
+            return module.Import(
+                module.ImportType(type).Resolve().GetMethod(methodName, numArgs));
+        }
+
+        public static MethodDefinition GetMethod(this TypeDefinition instance, string name)
+        {
+            for (int i = 0; i < instance.Methods.Count; i++)
+            {
+                MethodDefinition methodDef = instance.Methods[i];
+
+                if (string.CompareOrdinal(methodDef.Name, name) == 0)
+                {
+                    return methodDef;
+                }
+            }
+            return null;
+        }
+
+        public static MethodDefinition GetMethod(this TypeDefinition instance, string name, params Type[] parameterTypes)
+        {
+            for (int i = 0; i < instance.Methods.Count; i++)
+            {
+                MethodDefinition methodDefinition = instance.Methods[i];
+
+                if (!string.Equals(methodDefinition.Name, name, StringComparison.Ordinal) ||
+                    parameterTypes.Length != methodDefinition.Parameters.Count)
+                {
+                    continue;
+                }
+
+                MethodDefinition result = methodDefinition;
+                for (int x = methodDefinition.Parameters.Count - 1; x >= 0; x--)
+                {
+                    ParameterDefinition parameter = methodDefinition.Parameters[x];
+                    if (!string.Equals(parameter.ParameterType.Name, parameterTypes[x].Name, StringComparison.Ordinal))
+                    {
+                        break;
+                    }
+
+                    if (x == 0)
+                    {
+                        return result;
+                    }
+                }
+            }
+            return null;
+        }
+
+        public static MethodDefinition GetMethod(this TypeDefinition instance, string name, params TypeReference[] parameterTypes)
+        {
+            if (instance.Methods != null)
+            {
+                for (int i = 0; i < instance.Methods.Count; i++)
+                {
+                    MethodDefinition methodDefinition = instance.Methods[i];
+                    if (string.Equals(methodDefinition.Name, name, StringComparison.Ordinal) // Names Match
+                        && parameterTypes.Length == methodDefinition.Parameters.Count) // The same number of parameters
+                    {
+                        MethodDefinition result = methodDefinition;
+                        for (int x = methodDefinition.Parameters.Count - 1; x >= 0; x--)
+                        {
+                            ParameterDefinition parameter = methodDefinition.Parameters[x];
+                            if (!string.Equals(parameter.ParameterType.Name, parameterTypes[x].Name, StringComparison.Ordinal))
+                            {
+                                break;
+                            }
+
+                            if (x == 0)
+                            {
+                                return result;
+                            }
+                        }
+                    }
+                }
+            }
+            return null;
+        }
+
+        public static MethodDefinition GetMethod(this TypeDefinition instance, string name, int argCount)
+        {
+            for (int i = 0; i < instance.Methods.Count; i++)
+            {
+                MethodDefinition methodDef = instance.Methods[i];
+
+                if (string.CompareOrdinal(methodDef.Name, name) == 0 && methodDef.Parameters.Count == argCount)
+                {
+                    return methodDef;
+                }
+            }
+            return null;
+        }
+
+        public static PropertyDefinition GetPropertyDefinition(this TypeDefinition instance, string name)
+        {
+            for (int i = 0; i < instance.Properties.Count; i++)
+            {
+                PropertyDefinition preopertyDef = instance.Properties[i];
+
+                // Properties can only have one argument or they are an indexer.
+                if (string.CompareOrdinal(preopertyDef.Name, name) == 0 && preopertyDef.Parameters.Count == 0)
+                {
+                    return preopertyDef;
+                }
+            }
+            return null;
+        }
+
+        public static bool HasCustomAttribute<T>(this ICustomAttributeProvider instance)
+        {
+            if (!instance.HasCustomAttributes)
+            {
+                return false;
+            }
+
+            Collection<CustomAttribute> attributes = instance.CustomAttributes;
+
+            for(int i = 0;  i < attributes.Count; i++)
+            {
+                if (attributes[i].AttributeType.FullName.Equals(typeof(T).FullName, StringComparison.Ordinal))
+                {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+
+        public static MethodReference ChangeDeclaringType(
+            this MethodReference methodDef, TypeReference typeRef)
+        {
+            var newMethodRef = new MethodReference(
+                methodDef.Name, methodDef.ReturnType, typeRef);
+
+            newMethodRef.HasThis = methodDef.HasThis;
+
+            foreach (var arg in methodDef.Parameters)
+            {
+                var paramDef = new ParameterDefinition(arg.ParameterType);
+
+                newMethodRef.Parameters.Add(paramDef);
+            }
+
+            return newMethodRef;
+        }
+
+        public static FieldReference ChangeDeclaringType(
+            this FieldReference fieldDef, TypeReference typeRef)
+        {
+            return new FieldReference(
+                fieldDef.Name, fieldDef.FieldType, typeRef);
+        }
+
+        public static CustomAttribute GetCustomAttribute<T>(this ICustomAttributeProvider instance)
+        {
+            if (!instance.HasCustomAttributes)
+            {
+                return null;
+            }
+
+            Collection<CustomAttribute> attributes = instance.CustomAttributes;
+
+            for (int i = 0; i < attributes.Count; i++)
+            {
+                if (attributes[i].AttributeType.FullName.Equals(typeof(T).FullName, StringComparison.Ordinal))
+                {
+                    return attributes[i];
+                }
+            }
+            return null;
+        }
+
+        public static IEnumerable<TypeReference> GetSpecificBaseTypesAndSelf(
+            this TypeReference specificTypeRef)
+        {
+            yield return specificTypeRef;
+
+            foreach (var ancestor in specificTypeRef.GetSpecificBaseTypesAndSelf())
+            {
+                yield return ancestor;
+            }
+        }
+
+        public static IEnumerable<TypeReference> GetSpecificBaseTypes(
+            this TypeReference specificTypeRef)
+        {
+            var specificBaseTypeRef = specificTypeRef.TryGetSpecificBaseType();
+
+            if (specificBaseTypeRef != null)
+            {
+                yield return specificBaseTypeRef;
+
+                foreach (var ancestor in GetSpecificBaseTypes(specificBaseTypeRef))
+                {
+                    yield return ancestor;
+                }
+            }
+        }
+
+        public static IEnumerable<TypeReference> AllNestParentsAndSelf(this TypeReference specificTypeRef)
+        {
+            yield return specificTypeRef;
+
+            foreach (var ancestor in specificTypeRef.AllNestParents())
+            {
+                yield return ancestor;
+            }
+        }
+
+        public static IEnumerable<TypeReference> AllNestParents(this TypeReference specificTypeRef)
+        {
+            if (specificTypeRef.DeclaringType != null)
+            {
+                yield return specificTypeRef.DeclaringType;
+
+                foreach (var ancestor in specificTypeRef.DeclaringType.AllNestParents())
+                {
+                    yield return ancestor;
+                }
+            }
+        }
+
+        public static TypeReference TryResolve(this TypeReference typeRef)
+        {
+            try
+            {
+                return typeRef.Resolve();
+            }
+            catch
+            {
+                return null;
+            }
+        }
+
+        public static TypeReference TryGetSpecificBaseType(this TypeReference specificTypeRef)
+        {
+            var typeDef = specificTypeRef.Resolve();
+
+            if (typeDef.BaseType == null
+                || typeDef.BaseType.FullName == "System.Object")
+            {
+                return null;
+            }
+
+            var specificBaseTypeRef = typeDef.BaseType;
+
+            if (specificBaseTypeRef.ContainsGenericParameter)
+            {
+                var genericArgMap = new Dictionary<string, TypeReference>();
+
+                foreach (var ancestor in specificTypeRef.AllNestParentsAndSelf())
+                {
+                    var specificTypeRefGenericInstance = ancestor as GenericInstanceType;
+
+                    if (specificTypeRefGenericInstance != null)
+                    {
+                        for (int i = 0; i < typeDef.GenericParameters.Count; i++)
+                        {
+                            genericArgMap[typeDef.GenericParameters[i].Name] = specificTypeRefGenericInstance.GenericArguments[i];
+                        }
+                    }
+                }
+
+                specificBaseTypeRef = FillInGenericParameters(specificBaseTypeRef, genericArgMap);
+            }
+
+            return specificBaseTypeRef;
+        }
+
+        public static TypeReference FillInGenericParameters(
+            TypeReference type, Dictionary<string, TypeReference> genericArgMap)
+        {
+            var genericType = type as GenericInstanceType;
+            Assert.IsNotNull(genericType);
+
+            var genericTypeClone = new GenericInstanceType(type.Resolve());
+
+            for (int i = 0; i < genericType.GenericArguments.Count; i++)
+            {
+                var arg = genericType.GenericArguments[i];
+
+                if (arg.IsGenericParameter)
+                {
+                    Assert.That(genericArgMap.ContainsKey(arg.Name), "Could not find key '{0}' for type '{1}'", arg.Name, type.FullName);
+
+                    genericTypeClone.GenericArguments.Add(genericArgMap[arg.Name]);
+                }
+                else
+                {
+                    genericTypeClone.GenericArguments.Add(arg);
+                }
+            }
+
+            return genericTypeClone;
+        }
+    }
+}
diff --git a/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs.meta b/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs.meta
new file mode 100644
index 0000000..5b78954
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Common/CecilExtensions.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 89602ba5a473d064387392d8d2055aa4
+timeCreated: 1537234617
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs b/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs
new file mode 100644
index 0000000..0225a66
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs
@@ -0,0 +1,758 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Text.RegularExpressions;
+using ModestTree;
+using Zenject.Internal;
+using Zenject.ReflectionBaking.Mono.Cecil;
+using Zenject.ReflectionBaking.Mono.Cecil.Cil;
+using Zenject.ReflectionBaking.Mono.Collections.Generic;
+using MethodAttributes = Zenject.ReflectionBaking.Mono.Cecil.MethodAttributes;
+
+namespace Zenject.ReflectionBaking
+{
+    public class ReflectionBakingModuleEditor
+    {
+        readonly Assembly _assembly;
+        readonly ModuleDefinition _module;
+        readonly List<Regex> _namespaceRegexes;
+
+        MethodReference _zenjectTypeInfoConstructor;
+        MethodReference _injectableInfoConstructor;
+        MethodReference _injectMethodInfoConstructor;
+        MethodReference _injectMemberInfoConstructor;
+        MethodReference _constructorInfoConstructor;
+        MethodReference _getTypeFromHandleMethod;
+        MethodReference _funcConstructor;
+        MethodReference _funcPostInject;
+        MethodReference _funcMemberSetter;
+        MethodReference _preserveConstructor;
+
+        TypeReference _injectMethodInfoType;
+        TypeReference _injectMemberInfoType;
+        TypeReference _injectableInfoType;
+        TypeReference _objectArrayType;
+        TypeReference _zenjectTypeInfoType;
+
+        ReflectionBakingModuleEditor(
+            ModuleDefinition module, Assembly assembly, List<string> namespacePatterns)
+        {
+            _module = module;
+            _assembly = assembly;
+            _namespaceRegexes = namespacePatterns.Select(CreateRegex).ToList();
+            _namespaceRegexes.Add(CreateRegex("^Zenject"));
+        }
+
+        public static int WeaveAssembly(
+            ModuleDefinition module, Assembly assembly)
+        {
+            return WeaveAssembly(module, assembly, new List<string>());
+        }
+
+        public static int WeaveAssembly(
+            ModuleDefinition module, Assembly assembly, List<string> namespacePatterns)
+        {
+            return new ReflectionBakingModuleEditor(module, assembly, namespacePatterns).Run();
+        }
+
+        int Run()
+        {
+            SaveImports();
+
+            int numTypesEditted = 0;
+
+            var allTypes = _module.LookupAllTypes();
+
+            foreach (var typeDef in allTypes)
+            {
+                // Zenject namespace gets automatically added to the list of namespaces. 
+                // So to check if user added any other namespaces, we need to compare namespace count with 1
+                if (_namespaceRegexes.Count > 1 && !_namespaceRegexes.Any(x => x.IsMatch(typeDef.FullName)))
+                {
+                    continue;
+                }
+
+                var actualType = typeDef.TryGetActualType(_assembly);
+
+                if (actualType == null)
+                {
+                    Log.Warn("Could not find actual type for type '{0}', skipping", typeDef.FullName);
+                    continue;
+                } 
+                
+                if (actualType.HasAttribute<CompilerGeneratedAttribute>())
+                    continue;
+
+                if (TryEditType(typeDef, actualType))
+                {
+                    numTypesEditted++;
+                }
+            }
+
+            return numTypesEditted;
+        }
+
+        Regex CreateRegex(string regexStr)
+        {
+            return new Regex(regexStr, RegexOptions.Compiled);
+        }
+
+        void SaveImports()
+        {
+            _zenjectTypeInfoType = _module.ImportType<InjectTypeInfo>();
+            _zenjectTypeInfoConstructor = _module.ImportMethod<InjectTypeInfo>(".ctor");
+
+            _injectableInfoConstructor = _module.ImportMethod<InjectableInfo>(".ctor");
+
+            _getTypeFromHandleMethod = _module.ImportMethod<Type>("GetTypeFromHandle", 1);
+
+            _injectMethodInfoType = _module.ImportType<InjectTypeInfo.InjectMethodInfo>();
+            _injectMethodInfoConstructor = _module.ImportMethod<InjectTypeInfo.InjectMethodInfo>(".ctor");
+
+            _injectMemberInfoType = _module.ImportType<InjectTypeInfo.InjectMemberInfo>();
+            _injectMemberInfoConstructor = _module.ImportMethod<InjectTypeInfo.InjectMemberInfo>(".ctor");
+
+            _preserveConstructor = _module.ImportMethod<Zenject.Internal.PreserveAttribute>(".ctor");
+            _constructorInfoConstructor = _module.ImportMethod<InjectTypeInfo.InjectConstructorInfo>(".ctor");
+
+            _injectableInfoType = _module.ImportType<InjectableInfo>();
+
+            _objectArrayType = _module.Import(typeof(object[]));
+
+            _funcConstructor = _module.ImportMethod<ZenFactoryMethod>(".ctor", 2);
+
+            _funcPostInject = _module.ImportMethod<ZenInjectMethod>(".ctor", 2);
+
+            _funcMemberSetter = _module.ImportMethod<ZenMemberSetterMethod>(".ctor", 2);
+        }
+
+        public bool TryEditType(TypeDefinition typeDef, Type actualType)
+        {
+            if (actualType.IsEnum || actualType.IsValueType || actualType.IsInterface
+                || actualType.HasAttribute<NoReflectionBakingAttribute>()
+                || IsStaticClass(actualType) || actualType.DerivesFromOrEqual<Delegate>() || actualType.DerivesFromOrEqual<Attribute>())
+            {
+                return false;
+            }
+
+            // Allow running on the same dll multiple times without causing problems
+            if (IsTypeProcessed(typeDef))
+            {
+                return false;
+            }
+
+            try
+            {
+                var typeInfo = ReflectionTypeAnalyzer.GetReflectionInfo(actualType);
+
+                var factoryMethod = TryAddFactoryMethod(typeDef, typeInfo);
+                var genericTypeDef = CreateGenericInstanceWithParameters(typeDef);
+                var fieldSetMethods = AddFieldSetters(typeDef, genericTypeDef, typeInfo);
+                var propertySetMethods = AddPropertySetters(typeDef, genericTypeDef, typeInfo);
+                var postInjectMethods = AddPostInjectMethods(typeDef, genericTypeDef, typeInfo);
+
+                CreateGetInfoMethod(
+                    typeDef, genericTypeDef, typeInfo,
+                    factoryMethod, fieldSetMethods, propertySetMethods, postInjectMethods);
+            }
+            catch (Exception e)
+            {
+                Log.ErrorException("Error when modifying type '{0}'".Fmt(actualType), e);
+                throw;
+            }
+
+            return true;
+        }
+
+        static bool IsStaticClass(Type type)
+        {
+            // Apparently this is unique to static classes
+            return type.IsAbstract && type.IsSealed;
+        }
+
+        // We are already processed if our static constructor calls TypeAnalyzer
+        bool IsTypeProcessed(TypeDefinition typeDef)
+        {
+            return typeDef.GetMethod(TypeAnalyzer.ReflectionBakingGetInjectInfoMethodName) != null;
+        }
+
+        void EmitCastOperation(ILProcessor processor, Type type, Collection<GenericParameter> genericParams)
+        {
+            if (type.IsGenericParameter)
+            {
+                processor.Emit(OpCodes.Unbox_Any, genericParams[type.GenericParameterPosition]);
+            }
+            else if (type.IsEnum)
+            {
+                processor.Emit(OpCodes.Unbox_Any, _module.TypeSystem.Int32);
+            }
+            else if (type.IsValueType)
+            {
+                processor.Emit(OpCodes.Unbox_Any, _module.ImportType(type));
+            }
+            else
+            {
+                processor.Emit(OpCodes.Castclass, CreateGenericInstanceIfNecessary(type, genericParams));
+            }
+        }
+
+        TypeReference CreateGenericInstanceWithParameters(TypeDefinition typeDef)
+        {
+            if (typeDef.GenericParameters.Any())
+            {
+                var genericInstance = new GenericInstanceType(typeDef);
+
+                foreach (var parameter in typeDef.GenericParameters)
+                {
+                    genericInstance.GenericArguments.Add(parameter);
+                }
+
+                return genericInstance;
+            }
+
+            return typeDef;
+        }
+
+        MethodDefinition TryAddFactoryMethod(
+            TypeDefinition typeDef, ReflectionTypeInfo typeInfo)
+        {
+            if (typeInfo.Type.GetParentTypes().Any(x => x.FullName == "UnityEngine.Component"))
+            {
+                Assert.That(typeInfo.InjectConstructor.Parameters.IsEmpty());
+                return null;
+            }
+
+            if (typeInfo.InjectConstructor.ConstructorInfo == null)
+            {
+                // static classes, abstract types
+                return null;
+            }
+
+            var factoryMethod = new MethodDefinition(
+                TypeAnalyzer.ReflectionBakingFactoryMethodName,
+                MethodAttributes.Private | MethodAttributes.HideBySig |
+                MethodAttributes.Static,
+                _module.TypeSystem.Object);
+
+            var p1 = new ParameterDefinition(_objectArrayType);
+            p1.Name = "P_0";
+            factoryMethod.Parameters.Add(p1);
+
+            var body = factoryMethod.Body;
+            body.InitLocals = true;
+
+            var processor = body.GetILProcessor();
+
+            var returnValueVar = new VariableDefinition(_module.TypeSystem.Object);
+            body.Variables.Add(returnValueVar);
+
+            processor.Emit(OpCodes.Nop);
+
+            Assert.IsNotNull(typeInfo.InjectConstructor);
+
+            var args = typeInfo.InjectConstructor.Parameters;
+
+            for (int i = 0; i < args.Count; i++)
+            {
+                var arg = args[i];
+
+                processor.Emit(OpCodes.Ldarg_0);
+                processor.Emit(OpCodes.Ldc_I4, i);
+                processor.Emit(OpCodes.Ldelem_Ref);
+
+                EmitCastOperation(
+                    processor, arg.ParameterInfo.ParameterType, typeDef.GenericParameters);
+            }
+
+            processor.Emit(OpCodes.Newobj, _module.Import(typeInfo.InjectConstructor.ConstructorInfo));
+
+            processor.Emit(OpCodes.Stloc_0);
+            processor.Emit(OpCodes.Ldloc_S, returnValueVar);
+            processor.Emit(OpCodes.Ret);
+
+            typeDef.Methods.Add(factoryMethod);
+
+            return factoryMethod;
+        }
+
+        void AddPostInjectMethodBody(
+            ILProcessor processor, ReflectionTypeInfo.InjectMethodInfo postInjectInfo, TypeDefinition typeDef, TypeReference genericTypeDef)
+        {
+            processor.Emit(OpCodes.Nop);
+
+            TypeReference declaringTypeDef;
+            MethodReference actualMethodDef;
+
+            if (!TryFindLocalMethod(
+                genericTypeDef, postInjectInfo.MethodInfo.Name, out declaringTypeDef, out actualMethodDef))
+            {
+                throw Assert.CreateException();
+            }
+
+            processor.Emit(OpCodes.Ldarg_0);
+            processor.Emit(OpCodes.Castclass, declaringTypeDef);
+
+            for (int k = 0; k < postInjectInfo.Parameters.Count; k++)
+            {
+                var injectInfo = postInjectInfo.Parameters[k];
+
+                processor.Emit(OpCodes.Ldarg_1);
+                processor.Emit(OpCodes.Ldc_I4, k);
+                processor.Emit(OpCodes.Ldelem_Ref);
+
+                EmitCastOperation(processor, injectInfo.ParameterInfo.ParameterType, typeDef.GenericParameters);
+            }
+
+            processor.Emit(OpCodes.Callvirt, actualMethodDef);
+            processor.Emit(OpCodes.Ret);
+        }
+
+        MethodDefinition AddPostInjectMethod(
+            string name, ReflectionTypeInfo.InjectMethodInfo postInjectInfo, TypeDefinition typeDef, TypeReference genericTypeDef)
+        {
+            var methodDef = new MethodDefinition(
+                name,
+                MethodAttributes.Private | MethodAttributes.HideBySig |
+                MethodAttributes.Static,
+                _module.TypeSystem.Void);
+
+            var p1 = new ParameterDefinition(_module.TypeSystem.Object);
+            p1.Name = "P_0";
+            methodDef.Parameters.Add(p1);
+
+            var p2 = new ParameterDefinition(_objectArrayType);
+            p2.Name = "P_1";
+            methodDef.Parameters.Add(p2);
+
+            var body = methodDef.Body;
+            var processor = body.GetILProcessor();
+
+            AddPostInjectMethodBody(processor, postInjectInfo, typeDef, genericTypeDef);
+
+            typeDef.Methods.Add(methodDef);
+
+            return methodDef;
+        }
+
+        List<MethodDefinition> AddPostInjectMethods(
+            TypeDefinition typeDef, TypeReference genericTypeDef, ReflectionTypeInfo typeInfo)
+        {
+            var postInjectMethods = new List<MethodDefinition>();
+
+            for (int i = 0; i < typeInfo.InjectMethods.Count; i++)
+            {
+                postInjectMethods.Add(
+                    AddPostInjectMethod(
+                        TypeAnalyzer.ReflectionBakingInjectMethodPrefix + i, typeInfo.InjectMethods[i], typeDef, genericTypeDef));
+            }
+
+            return postInjectMethods;
+        }
+
+        void EmitSetterMethod(
+            ILProcessor processor, MemberInfo memberInfo, TypeDefinition typeDef, TypeReference genericTypeDef)
+        {
+            processor.Emit(OpCodes.Nop);
+
+            processor.Emit(OpCodes.Ldarg_0);
+            processor.Emit(OpCodes.Castclass, genericTypeDef);
+
+            processor.Emit(OpCodes.Ldarg_1);
+
+            if (memberInfo is FieldInfo)
+            {
+                var fieldInfo = (FieldInfo)memberInfo;
+
+                EmitCastOperation(processor, fieldInfo.FieldType, typeDef.GenericParameters);
+
+                processor.Emit(OpCodes.Stfld, FindLocalField(genericTypeDef, fieldInfo.Name));
+            }
+            else
+            {
+                var propertyInfo = (PropertyInfo)memberInfo;
+
+                EmitCastOperation(processor, propertyInfo.PropertyType, typeDef.GenericParameters);
+
+                processor.Emit(OpCodes.Callvirt, FindLocalPropertySetMethod(genericTypeDef, propertyInfo.Name));
+            }
+
+            processor.Emit(OpCodes.Ret);
+        }
+
+        MethodDefinition AddSetterMethod(
+            string name, MemberInfo memberInfo, TypeDefinition typeDef, TypeReference genericTypeDef)
+        {
+            var methodDef = new MethodDefinition(
+                name,
+                MethodAttributes.Private | MethodAttributes.HideBySig |
+                MethodAttributes.Static,
+                _module.TypeSystem.Void);
+
+            var p1 = new ParameterDefinition(_module.TypeSystem.Object);
+            p1.Name = "P_0";
+            methodDef.Parameters.Add(p1);
+
+            var p2 = new ParameterDefinition(_module.TypeSystem.Object);
+            p2.Name = "P_1";
+            methodDef.Parameters.Add(p2);
+
+            methodDef.Body.InitLocals = true;
+
+            EmitSetterMethod(
+                methodDef.Body.GetILProcessor(), memberInfo, typeDef, genericTypeDef);
+
+            typeDef.Methods.Add(methodDef);
+
+            return methodDef;
+        }
+
+        List<MethodDefinition> AddPropertySetters(
+            TypeDefinition typeDef, TypeReference genericTypeDef, ReflectionTypeInfo typeInfo)
+        {
+            var methodDefs = new List<MethodDefinition>();
+
+            for (int i = 0; i < typeInfo.InjectProperties.Count; i++)
+            {
+                methodDefs.Add(
+                    AddSetterMethod(
+                        TypeAnalyzer.ReflectionBakingPropertySetterPrefix + i,
+                        typeInfo.InjectProperties[i].PropertyInfo, typeDef, genericTypeDef));
+            }
+
+            return methodDefs;
+        }
+
+        List<MethodDefinition> AddFieldSetters(
+            TypeDefinition typeDef, TypeReference genericTypeDef, ReflectionTypeInfo typeInfo)
+        {
+            var methodDefs = new List<MethodDefinition>();
+
+            for (int i = 0; i < typeInfo.InjectFields.Count; i++)
+            {
+                methodDefs.Add(
+                    AddSetterMethod(
+                        TypeAnalyzer.ReflectionBakingFieldSetterPrefix + i,
+                        typeInfo.InjectFields[i].FieldInfo, typeDef, genericTypeDef));
+            }
+
+            return methodDefs;
+        }
+
+        void CreateGetInfoMethod(
+            TypeDefinition typeDef, TypeReference genericTypeDef, ReflectionTypeInfo typeInfo,
+            MethodDefinition factoryMethod, List<MethodDefinition> fieldSetMethods,
+            List<MethodDefinition> propertySetMethods, List<MethodDefinition> postInjectMethods)
+        {
+            var getInfoMethodDef = new MethodDefinition(
+                TypeAnalyzer.ReflectionBakingGetInjectInfoMethodName,
+                MethodAttributes.Private | MethodAttributes.HideBySig |
+                MethodAttributes.Static,
+                _zenjectTypeInfoType);
+
+            typeDef.Methods.Add(getInfoMethodDef);
+
+            getInfoMethodDef.CustomAttributes.Add(
+                new CustomAttribute(_preserveConstructor));
+
+            var returnValueVar = new VariableDefinition(_module.TypeSystem.Object);
+
+            var body = getInfoMethodDef.Body;
+
+            body.Variables.Add(returnValueVar);
+            body.InitLocals = true;
+
+            var instructions = new List<Instruction>();
+
+            instructions.Add(Instruction.Create(OpCodes.Ldtoken, genericTypeDef));
+            instructions.Add(Instruction.Create(OpCodes.Call, _getTypeFromHandleMethod));
+
+            if (factoryMethod == null)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldnull));
+            }
+            else
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldnull));
+                instructions.Add(Instruction.Create(OpCodes.Ldftn, factoryMethod.ChangeDeclaringType(genericTypeDef)));
+                instructions.Add(Instruction.Create(OpCodes.Newobj, _funcConstructor));
+            }
+
+            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, typeInfo.InjectConstructor.Parameters.Count));
+            instructions.Add(Instruction.Create(OpCodes.Newarr, _injectableInfoType));
+
+            for (int i = 0; i < typeInfo.InjectConstructor.Parameters.Count; i++)
+            {
+                var injectableInfo = typeInfo.InjectConstructor.Parameters[i].InjectableInfo;
+
+                instructions.Add(Instruction.Create(OpCodes.Dup));
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, i));
+
+                EmitNewInjectableInfoInstructions(
+                    instructions, injectableInfo, typeDef);
+
+                instructions.Add(Instruction.Create(OpCodes.Stelem_Ref));
+            }
+
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _constructorInfoConstructor));
+
+            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, typeInfo.InjectMethods.Count));
+            instructions.Add(Instruction.Create(OpCodes.Newarr, _injectMethodInfoType));
+
+            Assert.IsEqual(postInjectMethods.Count, typeInfo.InjectMethods.Count);
+
+            for (int i = 0; i < typeInfo.InjectMethods.Count; i++)
+            {
+                var injectMethodInfo = typeInfo.InjectMethods[i];
+
+                instructions.Add(Instruction.Create(OpCodes.Dup));
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, i));
+
+                AddInjectableMethodInstructions(
+                    instructions, injectMethodInfo, typeDef, genericTypeDef, postInjectMethods[i]);
+
+                instructions.Add(Instruction.Create(OpCodes.Stelem_Ref));
+            }
+
+            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, fieldSetMethods.Count + propertySetMethods.Count));
+            instructions.Add(Instruction.Create(OpCodes.Newarr, _injectMemberInfoType));
+
+            for (int i = 0; i < fieldSetMethods.Count; i++)
+            {
+                var injectField = typeInfo.InjectFields[i];
+
+                instructions.Add(Instruction.Create(OpCodes.Dup));
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, i));
+
+                AddInjectableMemberInstructions(
+                    instructions,
+                    injectField.InjectableInfo, injectField.FieldInfo.Name,
+                    typeDef, genericTypeDef, fieldSetMethods[i]);
+
+                instructions.Add(Instruction.Create(OpCodes.Stelem_Ref));
+            }
+
+            for (int i = 0; i < propertySetMethods.Count; i++)
+            {
+                var injectProperty = typeInfo.InjectProperties[i];
+
+                instructions.Add(Instruction.Create(OpCodes.Dup));
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, fieldSetMethods.Count + i));
+
+                AddInjectableMemberInstructions(
+                    instructions,
+                    injectProperty.InjectableInfo,
+                    injectProperty.PropertyInfo.Name, typeDef, genericTypeDef,
+                    propertySetMethods[i]);
+
+                instructions.Add(Instruction.Create(OpCodes.Stelem_Ref));
+            }
+
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _zenjectTypeInfoConstructor));
+
+            instructions.Add(Instruction.Create(OpCodes.Stloc_0));
+            instructions.Add(Instruction.Create(OpCodes.Ldloc_S, returnValueVar));
+            instructions.Add(Instruction.Create(OpCodes.Ret));
+
+            var processor = body.GetILProcessor();
+
+            foreach (var instruction in instructions)
+            {
+                processor.Append(instruction);
+            }
+        }
+
+        MethodReference FindLocalPropertySetMethod(
+            TypeReference specificTypeRef, string memberName)
+        {
+            foreach (var typeRef in specificTypeRef.GetSpecificBaseTypesAndSelf())
+            {
+                var candidatePropertyDef = typeRef.Resolve().Properties
+                    .Where(x => x.Name == memberName).SingleOrDefault();
+
+                if (candidatePropertyDef != null)
+                {
+                    return candidatePropertyDef.SetMethod.ChangeDeclaringType(typeRef);
+                }
+            }
+
+            throw Assert.CreateException();
+        }
+
+        FieldReference FindLocalField(
+            TypeReference specificTypeRef, string fieldName)
+        {
+            foreach (var typeRef in specificTypeRef.GetSpecificBaseTypesAndSelf())
+            {
+                var candidateFieldDef = typeRef.Resolve().Fields
+                    .Where(x => x.Name == fieldName).SingleOrDefault();
+
+                if (candidateFieldDef != null)
+                {
+                    return candidateFieldDef.ChangeDeclaringType(typeRef);
+                }
+            }
+
+            throw Assert.CreateException();
+        }
+
+        bool TryFindLocalMethod(
+            TypeReference specificTypeRef, string methodName, out TypeReference declaringTypeRef, out MethodReference methodRef)
+        {
+            foreach (var typeRef in specificTypeRef.GetSpecificBaseTypesAndSelf())
+            {
+                var candidateMethodDef = typeRef.Resolve().Methods
+                    .Where(x => x.Name == methodName).SingleOrDefault();
+
+                if (candidateMethodDef != null)
+                {
+                    declaringTypeRef = typeRef;
+                    methodRef = candidateMethodDef.ChangeDeclaringType(typeRef);
+                    return true;
+                }
+            }
+
+            declaringTypeRef = null;
+            methodRef = null;
+            return false;
+        }
+
+        void AddObjectInstructions(
+            List<Instruction> instructions,
+            object identifier)
+        {
+            if (identifier == null)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldnull));
+            }
+            else if (identifier is string)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldstr, (string)identifier));
+            }
+            else if (identifier is int)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, (int)identifier));
+                instructions.Add(Instruction.Create(OpCodes.Box, _module.Import(typeof(int))));
+            }
+            else if (identifier.GetType().IsEnum)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, (int)identifier));
+                instructions.Add(Instruction.Create(OpCodes.Box, _module.Import(identifier.GetType())));
+            }
+            else
+            {
+                throw Assert.CreateException(
+                    "Cannot process values with type '{0}' currently.  Feel free to add support for this and submit a pull request to github.", identifier.GetType());
+            }
+        }
+
+        TypeReference CreateGenericInstanceIfNecessary(
+            Type memberType, Collection<GenericParameter> genericParams)
+        {
+            if (!memberType.ContainsGenericParameters)
+            {
+                return _module.Import(memberType);
+            }
+
+            if (memberType.IsGenericParameter)
+            {
+                return genericParams[memberType.GenericParameterPosition];
+            }
+
+            if (memberType.IsArray)
+            {
+                return new ArrayType(
+                    CreateGenericInstanceIfNecessary(memberType.GetElementType(), genericParams), memberType.GetArrayRank());
+            }
+
+            var genericMemberType = memberType.GetGenericTypeDefinition();
+
+            var genericInstance = new GenericInstanceType(_module.Import(genericMemberType));
+
+            foreach (var arg in memberType.GenericArguments())
+            {
+                genericInstance.GenericArguments.Add(
+                    CreateGenericInstanceIfNecessary(arg, genericParams));
+            }
+
+            return genericInstance;
+        }
+
+        void AddInjectableMemberInstructions(
+            List<Instruction> instructions,
+            InjectableInfo injectableInfo, string name,
+            TypeDefinition typeDef, TypeReference genericTypeDef,
+            MethodDefinition methodDef)
+        {
+            instructions.Add(Instruction.Create(OpCodes.Ldnull));
+            instructions.Add(Instruction.Create(OpCodes.Ldftn, methodDef.ChangeDeclaringType(genericTypeDef)));
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _funcMemberSetter));
+
+            EmitNewInjectableInfoInstructions(
+                instructions, injectableInfo, typeDef);
+
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _injectMemberInfoConstructor));
+        }
+
+        void AddInjectableMethodInstructions(
+            List<Instruction> instructions,
+            ReflectionTypeInfo.InjectMethodInfo injectMethod,
+            TypeDefinition typeDef, TypeReference genericTypeDef,
+            MethodDefinition methodDef)
+        {
+            instructions.Add(Instruction.Create(OpCodes.Ldnull));
+            instructions.Add(Instruction.Create(OpCodes.Ldftn, methodDef.ChangeDeclaringType(genericTypeDef)));
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _funcPostInject));
+
+            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, injectMethod.Parameters.Count));
+            instructions.Add(Instruction.Create(OpCodes.Newarr, _injectableInfoType));
+
+            for (int i = 0; i < injectMethod.Parameters.Count; i++)
+            {
+                var injectableInfo = injectMethod.Parameters[i].InjectableInfo;
+
+                instructions.Add(Instruction.Create(OpCodes.Dup));
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4, i));
+
+                EmitNewInjectableInfoInstructions(
+                    instructions, injectableInfo, typeDef);
+
+                instructions.Add(Instruction.Create(OpCodes.Stelem_Ref));
+            }
+
+            instructions.Add(Instruction.Create(OpCodes.Ldstr, injectMethod.MethodInfo.Name));
+
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _injectMethodInfoConstructor));
+        }
+
+        void EmitNewInjectableInfoInstructions(
+            List<Instruction> instructions,
+            InjectableInfo injectableInfo,
+            TypeDefinition typeDef)
+        {
+            if (injectableInfo.Optional)
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4_1));
+            }
+            else
+            {
+                instructions.Add(Instruction.Create(OpCodes.Ldc_I4_0));
+            }
+
+            AddObjectInstructions(instructions, injectableInfo.Identifier);
+
+            instructions.Add(Instruction.Create(OpCodes.Ldstr, injectableInfo.MemberName));
+
+            instructions.Add(Instruction.Create(OpCodes.Ldtoken, CreateGenericInstanceIfNecessary(injectableInfo.MemberType, typeDef.GenericParameters)));
+
+            instructions.Add(Instruction.Create(OpCodes.Call, _getTypeFromHandleMethod));
+
+            AddObjectInstructions(instructions, injectableInfo.DefaultValue);
+
+            instructions.Add(Instruction.Create(OpCodes.Ldc_I4, (int)injectableInfo.SourceType));
+
+            instructions.Add(Instruction.Create(OpCodes.Newobj, _injectableInfoConstructor));
+        }
+    }
+}
diff --git a/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs.meta b/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs.meta
new file mode 100644
index 0000000..eca793e
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Common/ReflectionBakingModuleEditor.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: a664c0011937115449c81d8ca4a2f6c7
+timeCreated: 1538185954
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Lib.meta b/Assets/Source/Editor/ReflectionBaking/Lib.meta
new file mode 100644
index 0000000..b626acf
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Lib.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 3879d05eafe89b844a5fc0db8cfd9c55
+folderAsset: yes
+timeCreated: 1537245053
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll
new file mode 100644
index 0000000000000000000000000000000000000000..fef252d3c6b41317636c0a3e655dc15552ab91cd
GIT binary patch
literal 44032
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
I3qA0^0CUc#5dZ)H

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll.meta b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll.meta
new file mode 100644
index 0000000..c41d1ab
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Mdb.dll.meta
@@ -0,0 +1,32 @@
+fileFormatVersion: 2
+guid: 6b309800e744d8c46ad868763fc9c429
+timeCreated: 1538196675
+licenseType: Pro
+PluginImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  iconMap: {}
+  executionOrder: {}
+  isPreloaded: 0
+  isOverridable: 0
+  platformData:
+  - first:
+      Any: 
+    second:
+      enabled: 0
+      settings: {}
+  - first:
+      Editor: Editor
+    second:
+      enabled: 1
+      settings:
+        DefaultValueInitialized: true
+  - first:
+      Windows Store Apps: WindowsStoreApps
+    second:
+      enabled: 0
+      settings:
+        CPU: AnyCPU
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll
new file mode 100644
index 0000000000000000000000000000000000000000..06b2d9ee3d2d49a615a967716bafa7c1285caea1
GIT binary patch
literal 79872
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
Qy!!v2D*tm$+b!_F0S4A|zyJUM

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll.meta b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll.meta
new file mode 100644
index 0000000..dc956ce
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Pdb.dll.meta
@@ -0,0 +1,32 @@
+fileFormatVersion: 2
+guid: b6433e8939bdf284693b7fa9b719bfcd
+timeCreated: 1538196675
+licenseType: Pro
+PluginImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  iconMap: {}
+  executionOrder: {}
+  isPreloaded: 0
+  isOverridable: 0
+  platformData:
+  - first:
+      Any: 
+    second:
+      enabled: 0
+      settings: {}
+  - first:
+      Editor: Editor
+    second:
+      enabled: 1
+      settings:
+        DefaultValueInitialized: true
+  - first:
+      Windows Store Apps: WindowsStoreApps
+    second:
+      enabled: 0
+      settings:
+        CPU: AnyCPU
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll
new file mode 100644
index 0000000000000000000000000000000000000000..c7e88a416d638be297154f5e26a0994385a99d52
GIT binary patch
literal 23552
zcmeHv3w%`7wf8z_X3m*RCX>ue65cSpY)oJbAP_1bd4WOR0Spw3Lo$Sc$(%4VK>{*2
zsgL?VD-~_2+JY4;x7w=Ld#f#8@lmZ-Yw1I+PrTJ$wXMBe`=V9+{%f7b48eMPzhA%K
z@B4k<9X)HW*Is+=wfA0o?=uq?uf3jJMC8Wv(MLoNpybayfu9WeAr6fBPJr$&dUoss
z%A#k-uH2N!M0(OjS31@m>4>FLMmDk`9!dA6B8gO_X=!Vu+vto(OG<nbEYr)Hi54j?
z+UNe(XYAIF(YQ#lQcJV~9Iwf}uLorWPd^@_GQm~TZ)ULn@;L$s{*AhVe$Bg_Rr&vX
zX_3sr=OWl$%1A%VJ4TpcefAUifmRtrBW>Q_QbrutMcWJdyn=esY<znb^aINPAd|kr
z@4`<6?nTp?bO)H?TR#vD&q_Q6pLrOrXgZ!Wpvb<`emrbzEuMnUJfemIQqaBVKY!Ra
zl{~b47E$eVq9Wnu!JR1yQJ(QvuyCzPEs!ZhL3MI*8f8zWg2=Z+H7Zd|R@G|N7y@jP
zU_*gbVFGHtnsQC8!U$-^`Xp7a)=aK8`5m<y_SkL&CAu}(ZWY?le40892DLJ(c`sb6
z5bW~2hOSzU28W>;pT@Xm3<q94Lp4UAbX8$ceQ1E~k3}6gFxY;Gst|N-lB!j!RXQ-!
z9~T{gz6biQ^5v>A3U(%!sm5rO#u$JhQMD2+GhJy!0DYQ)7JTVqge2VvP&E$ZWYHQA
zEHeS1STiP~s5H(1^oP`{PoWIEL++|7AlW8FwglWWnd=F9(p%XM975Zm`W&jbCZrb`
zH4xNP0-3~!T`@Bm)DD+!L{TmuQau8F=kZ4`gO!=H!1P)Ds0ChJGc=@BO#$Xty;WYQ
zm1srARM2ODKMm#N*Ix^Sl#`W+#R#JWj90X3rHscaOcU!U0MqoYOFD0y4RICbmv15_
z$E9#LGXum9wF(ngn>bm^%w%$+s|piPGwMK8=UfIRrEik1x~hEOx{OcTBtnVN7*Xq@
zHE0846I6|JAoRJ6*(i)T0L3-c@N+IOzh*_wI2V*^1-B&RlGqyaz=UQ!ipkHKJwimR
z9`TsleVVz@?9+%^w=A(!+U3!++O0XQT`a%T+ATLQ7o3Kl`Iv_7cI(c!+w~A4!l^N+
z4!IVQQzllr44y-~VN1EK3e&`w9R}3*TE!V^rKl7#%{k0=`7>@DRbVkF;aU&v0FBTO
zS_5tj))#rOWF@;Y&9Lt_<^$$uv#|hV2J?s~I!8g~rm1BhC16f11T@YE$Sh*8n8_so
z6J?cX1`;u^MULw?un;lWgZxm9Wn5=DfUnMg3f3kz316{pw4&hkg52mEGOrb~JZ}|v
zB}GHmG-Kk)W`IRSm=Od4CGlK|=XN|t@VtWOPk73aR**=rI}xqJlf-igp51tE!L!Ll
zbQj7;@w|xVJv?rtr{Q?8plCjxb$HTvuEfLof6H?xbRWR;eLOGXc^l8~@u;X@if1IA
zGx5y8(}-soo}$QMczn(Zpml8kdTuqktX5WCfTF4ttE8?z&mL01uFkWE7O=y4_OJr>
z2k=ABwXtmjD-LN2Ta4Afu|cvS1+vEn$%YolxW9!qhZV?niwp;Yk7=)GkgTx1m4jr3
z?bQvE6}C50WE?wV9YCF5==Bc$0mfL*UFgui7MkN>>c1j%yF))CH2ZJL4-0(}=!)H#
z#ELmIcR1Y20`Bz=cSr$uhr=CO!0mLn!wR@d9PaP}Zk@v&QNSJNa7Pw!{SJ3j0rwA>
zYkH1*F}i?z%;D-r46=h*m`Z{Ch{!iMvA9R*4u{?^bf-gKFLd0Y`-R?U(={1A*X0l!
z_1q?hSfl3>4zWnjZFY!r_1qSRn5yTn_RW#0nW*Qw9b%}SOF2Zbp2OMCR71My0siUB
z|MJmCNYr$)5;@q}A?ioU`Gj!5pwA)!-GWCpKhSekmrMcGZD7mxRXcRKN%J1|1Qs23
zw9|548WperoYYrbw+ousTsZaly^{Lmh`@P{PX%Kl=cF)mgPzEfXnIXEwlO}a(DyK$
zoHp(SJ`4)yfUcVYhF3-`J02ruWMHJEsA5{kWU2;^slI9M%90wtX7mD|<SrW0R#McA
z-tln^IT%|Ao~d|h=6Q45pi@=GIp=wZy}64W`U#=8JM_N@-RIDEfG&#g*>U#GBEoLu
zGu<#(%H_;8eI3WX?u7gkJh{ZNyhzOLa_HGY=Nx*H(Es4joCqvWf+FgNsL+$Yz{&rH
zCj*XU-Y&ek&pPydLSO38w+VfjLw^CZ<;mwnbU8$Yo@{0A|Hk;4ah@hNuNY)=RNm$|
zJI<!QOY}cCNdGq&deeu4oYulxP^(zejQv}tT?I-U2xNlb<VD#0<-CTqOqgxdkEiZR
z0B;V^nmb<>`YMOMT4+F1UbD-ayT&1Uyt&;D(c#Tq>kzBGx$7LF#hd%QL(KN(kYX%r
zXL)mb9AaEh8`D2^WKfIrqtUa%-rN@;3u;}vvEa;{jm0O4;NlM?5#aFabrOMEg%!b<
z1Uny$g_Y}h+2OJC!3Z2J_!{Tu^<Gtu3Iz+?S98Yc2b&w<!{mTo6^8C4T$Q+vm5(ML
zJuMlTXT}gsYc`t<Bfqp_>`J&jbGD4(k=+Zcss&qt7o%r4qHG)9w#LU{@MvTHVT#;Q
zY%ymUzjw^cHO(+4$EgU)T0HacEW?8hlQ!eQ$|uZZLTKqLc)o$>0X*KwcLC4&4nW-z
z05x|LY?@o-JwoHKY0>+I{*psqFZ4c#?iU)f#Y*HEHFvW^Y*cf%IK&z?cdJ7zQgiUg
zs&lTI`>I1sRdf3tVxpQm;1EOA+-(j~tmeLE6GQk8qRQnO;~T6zC0Wb$2@?k~(~R3u
zYF^_YiZ(v;_W-f4Px%>yxnquBfF@4Mj~`YY;VdWn11#95ah%Qn$)Qx^4w#(eRgJH+
zX)SXniXFH)oq_3sgZViqigndE1h(;y0J?!ufp5dwaYBx2MZ=>0nlav?9U5PXv}%3g
z&buHVvSt?-8ed1X>df81ci_(KmbF|abLyMmsW}aY;E9umoRRYYIjPNudgfb@OzdZg
zff-oi%QS*JQR6Ebik;Yve8ybHT}A_nYPJg*1;s9V?9+xD_d!iF&{M$s0kJRtGm5Hz
z0hm;xYP#`lV8%SCtETU42h*N6sGv)Fj(g!8$ctS@Jqo`jeN)>?>iAuOCXoocgYL*l
zv_37A!(2sU9G|a6FeEkp+=IY_ZlS`Skf-Vf(46g>u^K6c=W6s2A*b(JIKn`NO7sTG
z-{C2N9R7$N>vHx!7ta##vUq-orw#NOc<MHzqBrO<kU+J%^&rgthxMR-?Q%F2_Ev^{
zHNl`aXhr5LLEn(JurKHf>QmoA&7hZWR$ARy(~xFh$@%zIg;p1^SsYQ5#d})NBgw7`
z{`)3{VZy3Y$#q_Wg0MIw{1Qj2d(vi!nW4<O-)0?VtzpbMV6z@#)^KKBXS4p5StFRW
z(_)$9Ydp+?u`Jkds^AC<MzWyA5r{{Rupq($zPPccn(-*}@`53zz-10AzemydZH-pP
zLyj5{aE$`NTM+1$OOHVmE(#VIk26vnDz5q-BmSTtt&)3s#6*<nc_yMp&$UF+wz^xO
zVp6{8<tCy<Yb{Q+rRE<@bVRh+L~5epnk{fCSd_)8SB!CRvu3Tyz-m^E3Cw6Q855Z?
zo*8w)qF$!LCBc$OewLP)f-w+qy>K8HFa-hAg!R(JTn$C%{tkN@zaKjn)?9KKs~)Xp
zo<K*Dm-s!|Omrm7YYLeM5$VZ13E2))#Ww`+i!|f=;DpqZ6}4#3Ydi%?AJSH=yQaRW
zv9YJw7|I`TInJeKp0SZ<8DaZqCyo;9YS4L@TZNXL{jPIzoPo9DGoAx*U6+X3nJ@Dr
zFnq4!N`Fnc?)`F!W*h~h$oMg!cSxJxt6!Ix`b+WZCt$HxKjl(<aML7|Sbo9G&%pF)
z<-49osj1pY?FAs27Xgf)1DO1sEUjM4FFxOJTtxE4TC1sEJLY8OCCDeLyI$tPwd)nu
z{`271q_2XTLyj=>D3T!Z=xU5b<~6R>&k}w&TEj0(YfL{~v;cncXRxtjs54p1!5d$-
z`N}hgkea43hA_Q`P5+yiW=WMttnzuGQ7rxyoBUd}3Nt~=Av}fl*5>W8gx{UQOSbpl
z@Db^z(B^0IHd$i&c-`Q>z9oINcD$-za+gP|oK)P^<5br!LBPOZm<&O{Krl^)AYdS{
zCPR?XYSq89tth|t()tk}clAQ|&bPta`3`_P^Dc{Ls5^g!(q;UbDZJ6-N@(^sTvWXW
zX#5sn*M9(*=LIA^LU)4dPS(L`>%*v98#>KLujy*laj;&gw$1@TQp5auli!W0bT>*Q
zU#niR-VDD*IuT_YPo?kGYfz{aX5;G4|Kx_>2T+FyYl!c)?!5GO5Ez(NzFog(l`$WR
zPR$wWPNoecAAa>~)*ouupKR+{S^;QHe%AC`Ef-6bKJLgLAixV@_`_!!M3ip7-Rw)s
zc0t;iRBTx)K?NQ-_P2VtdDfU}lDo0NjKKN8d|wU1iouwZ(?+Q~IkNdcPb*d{&Hnpp
z^vcX1A;iMn`6raSxW~XxFwU{z<zMw@Ak`aO#$QmXJK0xRVJ?2>UxU$K#iP&5v3f&h
z1#m22RywJ*^6dP8YezF}ti%hedbG><ka;MvxA>~7O}g@=!m(&*UD%-TO&1?Oo^4a3
zwbALdGpAxn@vSKd_zKqJ_#D2Q!8&>z&-m7CI+5ziu!g^e2>qq;t6J#;;P8aTFId&m
z#4;qU2}PhAlEwzm{J~sTE*NrKaS_Ie{;W*niN~#9hzEUQlCa98UCeNT%QO!UV$5~r
zYbPH{o`l%arLH~gm?x8y9w;_@<fBN@cgi$cCh)fcpYonr7N&oLqZ;)T{l>4+KMH)+
zdowhr34Ywm{O=WgSgcWF_`~7=on5jQFd=Z0XD|2{g%4H)=oUZoC;OOlL(x^C038oA
zXG}T6vy|<w&(J~4T#XF>!3qtUSA{eh<z>r{m9XU}#X_4{?yN|HGqQx??>!9vD6m;L
z+ePOVFI%1o9|AOA;JpFXoFR5@3o!p}jX94Aey7g9ebf7$G9Udy;TDIAg^NU=1TTY5
zfL;>#h`>K-T<c{-AV5C{9-uFR@1yU+f<|MN^)8Jr&={XpdJsLDEu8Z;#=S*nB9ecQ
z-c^-y-L+^-Lr=Nyfnu(8BcvMTyd1G@63;UN%<&66H^A|45qPAOeK=7p79{2qbne|t
zWl8Ao5`Q{<taF7#W3@!=rNAmxqr1h2kNm9plHl(lCO%rE-4F=SLS;2zKwG5-=q*3%
zf8ct7Cl@vGRKwg-XaLEgI`q@v6o(30lt*NnEh<0<P~&9jPcexV?9^QEt$<l?qEIJ;
zCRI)SkhK<@)HIRJv#iVzYPChp#BBiIBVxsI>*tVbY#FV=WS@d{*+ec_xgFDd3g-L*
zp^Aj^;(Je)&452sP=7^1y&&%Tc`ISM0CvxEf87I*-PfuLUFg0Gc(ePTJu_&Y`k<$h
zw$ei$jm8vz9xq(3^Dc$XhvhE<f5FB0E8!P04_*LN=nl_wzz+Z_v_g5>t<leX&xoB@
zU`L^2g1a=vb-?olZUtNxfva>A9didYh3>Sdr$MRoQ=#@yi#}9y(Vr~pJ@**RP2RDn
zhI$u<t2B-3gxW(_6`iH&<Q~VeJ+u(ABHCn8SNZESAAQZDCi?0%KRs?y3(D%X0L>n6
z)(Zyf@g45{7FFVF!8;EB1eV=IU-qxi%4x4fy%<`r4WUhEn)R}Q4s9rHx2XO=w>E;V
z6zV2=3Yw#6`(#t|c-eYwG`($6wZ+@CF?8NprmQ5qUW+h_&l8^SYrj&Yb3(22U80H0
zLS=lHY2t`by~=J4M{D^!;rX4iSHtDmqOR0#k=>8UCp;<bb`9xSK2Lbw_uZvM9cpax
zZmrg#&Mm%Qo9a*#wTHB`9V$@%q{j1%KTmiXy+^e=lK^#={<8LIhtl0|YO@{cyYBb2
zxpb%W_9oiy{gXD2W=oTMsIG$a2HI;;<SEjd=oO24*i))E(@=3>56#dj^#yc>P&ZMz
zcZ}XbwGQ<ueIaEm>I1!2Uqm}C%CFbyi|JB}dS0KWFQMHQ^^m?$Uq)ZDsNZQT^%Yb!
zogKf4ex|kSD=BDEH|SmZDjI1~6I_PAnpRrWo$ed-3uuc_d+46h8}v2wSxa_J@ay_#
z=y8ksF!WFQIvOfLyop{YeOO;ln=I=3vVYPqr0-hPF8wlhJH0N{72dl&Pv{rXzgyJ5
zc%A|E9~L#k^%Fftf3m1X*Uv#IvY%h!T@d`avVn>$YE|%<zJWp(RaEvXy@Q5ZR7Kf;
zfEsU7L!T~HsFP}h+B5V=rGL;n2gzoN>{7ax{ya#wkrrCAyXecVjnwAY^iUUV7wQdV
zy;q@4bdN=is~8UI5}8f|v|eG^mxOww=%(^BK<zgvB^74b*DcwP%WFX0Z^@cVXM*z1
z;_-V!xwNz%RAG-cQJKgtrPs;h-9%>!W%e&|ie`eQTbe!!dK0vyKy&jcnwx2@r8$~v
zy_;!+MXdz2g*IE%4p4lyQs~Fnacnrr%Q!=ohT-^Q^Y6hIfGXXE^PEEW_-%;Or_?<c
z@V~;xiA}REx2V$du;ZfJa4oW1sltg@r4P`qi}t&jpXb;*J1cCyLMG1oiqul+2JweE
ze?R<?^xCvJvH))o&rSYloUm*k4oVD7z8Oyw=WoJn9W%BJ@oSqh<`?4grH>CwluVqV
zN^Qc=kC#eIin(r{W8y0P7RS(!!)J;Ah5A2}h}|Kcydu&<yioIW+>G|=@C=+0R62|k
zwn9sQ^UlrCjE32w8G#cLw_%<De&c{M79O0>=r?$d<JT9w=7WG9oU|Dq3+Tg{;_1>d
z{O*HcJzxdS8;ma(xJEb$h4t?h_;aNPEBg(FSG1pwW9`17T#GgPhH@NhwVZCl8a=Mu
zhP8P@^c9t@CFsK9;eh3+m7p!i&|7IXa$_Ie;bXkF3|UMq^=zT5=$paefL{z=gI~t^
zDsBe+b@5lR_pgC|P<_gG5Yof`yJ;VMyAOOd_#jOXodfh{_$fL>{k|HU-wtU%q_OHX
z6+edNC2ASqeK-T0DgNxkN#aEsfQ4Vf{%xi2<BbgWWq@}2UCJcl-px|K3kyfd@AWD5
zQmX|}p{M97f0?p}y2^&5_37|72Av7u%r0Y3*xK1*?I`uRYnA2d)xMd^*<$l3{d2_}
zWeqq@N=%J-mMd4mhYOW===a5)N<zI)-wZoXmu?0Awr@TB`DO9NN{rOvAEIARm+n#y
z0A8j{AeZ|ZWu(C4^g!q~Wwx~2B<-G{r#ufTiW1Qu2E5zzJ!L?xDE@&GRD-2I0{(5+
z50vA?d&eS)+kpBII49_*o?k(F7VrUe1oQ{gD#2BirB}LZXh8jHfcdMu4EOmMeqJ~(
zjq!WJ495z7zu=?%%qbN(L13l88iD&^p-Cchg7&)q6JFip_N)8UB^dYP^id$FPEo#(
z2oI=_6WdV~hPMcOS>TKC?SSYHsP~J`ae=!<`U8OnpfjKz7XAr=dxifKfrmu;C4rw8
z_>Aa$P2lqaFBQ#41r~`;NZ>?)QGqiBUIC~mZ)y|O6LdrPW>S=I`fi5*VTt5JqVuG{
z65-q{_)x*WE%<1`|5NZ|0{<fL9f59<{s{O9`byY?RsL<*Pmm!qR@a6T&s7DS#p=y8
zOQ{QZ=#aYEcfNW^-CeR&y;r2O)Gumn>PpO|E$Tb;Yu8qFmU1|7Ep*QEu>KZ>>o)ms
zR_m3k0|x-VSaAn*I)eA81L|))uLHggct~C0dkdp-O~pIF-&NiR+@<{yutWO`^!Ir`
z0xT}}x@IZC(o)wUb%a{!YEhQ>hr8A&Q^o%6`gm6#a>Z8V5m{w@%8t-9*E*ToR|$WQ
zz<q$tt^)%5=-)$YT%D314vF-TG9kRhm6Tc!3g;1lS@coCcOZP{$r7JfE|FeeM#Hr)
zyLJQj&~CZs?3SC)JG3?Uifgav998=(!tSj!fR%m=U0BiJzTM(a@h)>8RUZf&kh=ZD
zk(c;97lTxx7NuOf#{Gu+s{eZTEckGv`z~qyerfTr+`Epe$6XJ)kE@TlZl=R>`#LPA
zqQi0rJ1n=d!*T~ZEVnO6k#!G?w}-`B)WSXOF!7maEA52O&xmgc`gJMi*ne~lrwD%c
zu@={=&j3aRkKzq`JMa;-32;1p4zPx<2b@L^0-i(102}F-falZufUV%nle+a{r%~{j
z;2nYw2!5&H`vv|&piAM_#|vx}c&Wmk>=*oNf*%q5F~NT!(513YM3uUN&+{;Tk-&a|
z`vo2mcuXL^eB)XI=Lzf=ctqeafuxI$z<B~M!pVKDw_o6Xfky-$6G&e1MBqFVFZvqv
z=Ly^|@QA=;0`YYo`yjB>*8zM1qSuB!E=R9Yg|bLlqwG=ss0>kS)ah!yx<dVe`k;EI
zYq4vm>tXj}?&sab*wq8_+lD`SW?+wB;F=BC6>I<;R<;OmX8CeJqkOej<u?e>pAD$e
z9Mn?q+d~iVbMXd2p?QERcJw0P4S*^w#;B<HReA~9*ozquz#V85;FoC(;4L^01n_nG
zc)<PmT}6OyqfgOjIt#jw(g$>=@(txa<rm6&b&jjUm33X=I^g<->-(;^T%UF?aDUZ(
zr~5wlPuy?1-TgQQqdgqw&@$dRdiWiR%1rC?zIz!?F?=e;G0FP8@1BW%@yD#m*az;t
zIFAv$#(N|@CFF%yUVK+wg!dptILqL$h0kzm#k&hGFOz0Q(mpZVW%0W#e!}8!K^apn
zS2xpRu8pL-A6BNhpHw!xpTe_=UdOo-pV@O~wYS%{*V60-@oarExw5Y(o|(HL&ucVN
znQXeZBWtAd{J9<N?M;bHPcqimn2cpIVt_48u`IP_W7$MUL0vW}Le`pUX)TUtHyNE`
zR#=Vccq|)7E&g>s*I@3V&W`q$v$@6^@e2(6R3CI})+`rw#?oDR#l=(XDpOAD6pOgh
z6st1RTp60n((#^ns<R~<Psh;Lxt(bJqAAqUoa*fcYeO;)s?kU$;~m+Aktz^D8&q?5
zPqq)`?71`B+b>SXdKm3)Z=at?#gfUsDYPOU>ugD7r%k1$sg_hSk&2s?)xW8hYf~-P
zm}b|e!p!N>zGy1V?@e`}u&Ph9s!y}3GtJefnR?Ug=4YH;*gPn+zHP>)+o#(Vrp&Nq
z4l>i`)baG8*^7<N-ei0(b;YyoD^}Oj+IVU+q7+>b-)KdvA+`l?-lL0+lo4%=cO;Tg
z{NYLl>TQb`;Z2{_hgKjMome{~aNb0CyjrbZwNgV@98^P6V0vRLnK3a;QAQTUW80*Z
z&YSA1QdSKUNyXbuq$_J7NgIi8Wz94L2)P-CYpC6F%yLUQin$x>jAdie4TtE?bQtMm
zVgnBvwf1GQ@$P7T(qy6w;;DE#ft>ltA#$c!z6J-kC1b8D(;YJ=rZcfrtSjERauXI%
zXG<qqPqw!wQi*ILmUNgr0Y$s9H=T~BvZjFQJ3E~zF+UMcqPE?gxm()X8)6+ic9x_O
ze}8m3cXc9@;5Boa`s!FZ!AmD|nh4p(G`Ufl<lZgq!8%KIN<eMguz1$$v?GtK;rMJO
z5rV;`=|mT=wuV?Hp68xQEskY7HlaV3d|51=iO-K^^XeAXEvbpjjMRb@7)y1;5vy%d
zitCu(al{d9vreA2yPfB7TFq07<J}wL={yZDVra0CwX)UdO~dr;xzpO)GbYYK;sKBd
z2_o(bW(LraF6|L?X)4~(myKK0%8L!AG8Sp{bg(h3C<*I%u}n)hW)UR>wxqThTOduw
zok-i=;#fQQHfx9rGbOd~=3r!a=p~Od8NH0!iO(W=LbhTo3M3ZEy)m;2;V<5hT*SjA
z2$J+&5Z0OBn@kE}TV7(MFdVTh@nwlr3JU^Zm#Wr$5}L)<I<yDY;WzX-qf$_pV=1KF
zj3eX8CB%w&#z=09J2ZP&pT!rB8+x;*26LL?9ZAG1)g^Tn#IwA+tV(sp)5$)Y%kH&e
zd18Z*-B|oziLppYrA3CZrME{=)?5+a+M7tnI}xn}mQvagEbZZKDwaG&fMA}gwaiFh
zvo&kM9jA7EIvwj1DrR@0J<GwoU=!wiKC=P0W73-FO2x9h;53+d+14tU3{i7l#7QPD
zEsLkS6PXPB<h;g{eF`SKpm3%U`(|qb><$}gG`f2d$#_~u4;4C{2vbvhLvL3XPq;h}
z>YSNQ;nim{SbWL8m5FSjs#!grJ}=SP8BgU+G;hzwQ|w@#Wm}jJPgcj%rwUCEarQA%
zE8@x6cEK{IS6-IJwC>2}1uN5i;B~|^nS!9;L}o{y>}DH{o<8KcO$DOHMXlU!G7(D^
za3!h8IOdJ4=*7J1#tEyt2cB(6Boo=bywpr~t?`cD^r?I{j`Vc8BxC8e#~eRpQFEHf
zPYj`$e+pX&UKFci$zDt;&MAy+6WEaE9o^i|kwRo~$x3KV?1*y$l9CfxdxkkJ8J?|6
zHzGeIH`+7L+~KgW%$oA`f8H&VTxpm;3lN(oOAa5{U2z0)v>UKBb!;MDRo!UMCasfP
z>%|FdD+HY_a^5nRp0wJMS)E8{dt=G}YR{KrQDfq7()*iituQ*aWTKtPB&{^sx|60i
zIFJa!(K62`mY1A~<aD(v#YrDWBWjSNlAMKv$;Two#(pPfAIVCR;7!cRO`NM}abkNS
zMKb@IFy&+sQA>Vu^SPsdGUr|a1LI;%E;DJ$N}^6lpeD|9r(O=@m^{{;HOZJ+*lt3~
z17gn#WO(aXO7<?+6yGSPB_owTtPyVxeDUF`i2~f*?ekSW#tI?pV%I9r;dmF2&W>Ne
z!-k0i8yZ_;WLtQ}A!^8R&D%TTlFOOj+S}7(q)*{4<_u~dX!6SS=`LJcQrV@w*`*s-
z#8O@H(`8Gredf8?@ngwEr)-t%M_yvv%5xSQ+u|z?l5<c?YNJ6&UOn-2woiypJl#_B
z_8uJb7RNf$hHTX)wl)s3A->ffrA3L<R_r8vwvxHV`6Hgj4XhJ;o}g*7Xt6b94#JOZ
z30CCv($KpRM>J|#B->3IOI%LhPVmi@fIqs=bC6l`M2~$gEAT=x5o}ubLL7T-kMmQ<
zIkiV^HS9sNts~uBTmod@H!qqWSG%CrAmu@~RO0!+jqj@z<r_Mn6r3Li-@vVPUT`O;
zmX<}<(OrZ#&KENq-)0`|Z7-V=v96Sn!QDP1Rb&EWFe-m#hp^<lRB^s6pv*;N8iB+n
z;kb=jw<l}MisG`28Pd}lPj5?Lo3tIW#pcEvPdjq+kejg%2E0Hpb25VxI2i1jHF*;t
z|7uSPbgbSC;@G()BS+Lc#j`a}ab3;@X2VP3xFO0ZHN*Rl{r*Lqa&nrzwK~E2>k|G4
zB>wijf!Gn}yer#<lSvDbt|>5wC7-S=?w~wpa!*Zmh4mYZ&OVdoKsXzNGn{tUqWPV`
zkrk{j2~a_P&X21k6I4m?d1zywMRH?<7r#WjU^SRykJI|njT^B7GGtg~L1jA;W(a2k
zNv~*m1HbIBZi;!gah}1xdn)}gF9htRj>U`jC1_W=X1X8~$wEzMcrV88oJHbIXK>%e
zaKw5++F@%pHx2XF7`F)a-*%iDdox+1+d1>`<*CyV+DCbZF-Y6te@sWL@H!a}9m;1s
z>y3lGXbVQNP(S(!YM*GHd-w@;3u9cUI(zQa_I4Z`_+^NMz0tt=*qmFLCGm?}llbFJ
z-szU`KQ@AGA!EOrv_{){Q%N1>8%t|ecE-2kyueUSKfHI~eFe{aQ9!m6d;>FDF-RTR
z#j#W$89nXITX9ar(VOv>6mE7VWkuT_WX=>;?&*_vxJ4QKY&l6A@!Gr<Z{aie7AQ{L
z#NTP)@<hFq#`h#yNTT@jvN))2&`48&2Br9K2q%9WpKE9FW<87l*un-_V#}nr;T`)T
zyux0BZ-l#<6ONs(RniUXov4#!4Nz=tlkli?n|Q!p8L&-7X;@0p7O|AZuWNe6ZVGaE
zSAw-Dz35;|^k?67^UC*pYvCQ|{bJ$K-Zx($SA-OIL{YpRfM5lq0R}1rs$LQ5|Gg3>
zcLZMvfiaR9?|@MhAxq?mP^ka7rmLY@q3O^I&2sAsFn~Es&hfJ98n8-84NW)EQ2#zw
zsQ2qys3o*GxI7SC6|fasG*N0nd+b!0ygIqm(3}ALqTp7I{TwK<w1dk<JGh)>t579?
zZ#Ps?4b=y9cc{K1xL!dcEuolMa~RhIFHD*#0y`87#qixoD8WsHVq7o5!r*fJw~BcQ
zQATS}9yl}LiKxoRkwW0_A|oykqegO<;`l;kWGG=0EfUkM9HN2gT15K5tk4``%>oNJ
z%%}<iz>+YP>27grS7=wTe<0X@xgC~WW>`>ghjzgN<O~Pc8Wi0c7+wUq|JqQWS4Ie7
z@4pITCZ%-0e}D&fWVx<mEW}V~m)B~D`#GIG>%X={ciB>_mHtCTy35kUAJcekaS>uQ
zDb#<f$BW>5RL$!_6#8#vTfHTiBM-Vl(?k6SS%YIX6hEL>M=PUw`aI|wjkXSsR&@Ns
zBv885t%3AnD)rwQ>^~sAI>5a;fN!Q$6!_oE@m~*QqFxF$wp{M@NCysiM|ng2cf&_0
z-W%$_5wpyrje-oGxlI!YC{sQ>ems~(aCQ%BAUFZDK<~LLnuzWOPyDzSy$|(21mllb
zkp(7^<x<8mG^ZG`=>OR$%=yq9JN^T4GyVf{dm!hS13Aa1D;1%$)zLIs@!E(Fvi`U5
z2Nz)l9))?O34@h}2<DIu;`Sk&s8@%=%k_DIx-_gCYvs)vo39y~B??l!g*9tY#TWq_
zA5*5P!X6F(U`)p9E%<3MHP#KyLbnFGd8KQk&=h1aH(ec8rdX9NbuPHF3O7U3%OSQ6
zIT8&kZw~T?78=;fptp$QInc|Kfdj+QFvB2m;hu)cLs(ROE?x0zx=Z!K1@1a0E9iSU
zw5-LA&I*{$+5Pi=d&j!f!_Gc-l~=F()mOvO7gqQ0rwRD8iGIS@nE2Vg3IKXVYyA}d
zn-Ts=cwfc7i+}v1PhYp?-5t^F+eg3k%nff}J}i4<&HeocCha+U!D6>IVZmd$z@{Vp
zt;Tb+&;8f4PCV83!+n?azNNkW!_U6@nbPScj|6UbIQrgmpF4lT#r|ajFTa~z@Zn2;
z{?yKKuPu1~qj#Hb%HDqBgXb<gx-8+np}%VJLqBPs|LjMh0}pL~^S2cLQRVBrGH&G_
z%1U-=p>jO60q$~sft4~@FsM+OH_qgpDmaybT2ql#bvk|!k6{W;=K_Pw>0~-*cBbn?
z&7jp#b6KdK1+h?bs0H~BSufPWjCd#!!e8FIz^@N(4fP_WDxtn2{4`yX*+}S^7zAo)
z7cU#EN4HgatkP?hKCARwWr<Z{qmX)|kmCeFj&rbU9c+)K#!JysyV1e+iQChWJK**t
zbg^7~ourYfctiNn9CFZAD0OtZ{~;`BW^gHt?}g?_`4nuk;8{#x6FbV7k9j`}%^78>
zy=s+jgyxJdQ+ZMGf{@kq7B7|pirL}Qme6Q?y=|^V3`MVlV_?kDnuQdF`GJhVsaJ@D
zCUMXQo;7PYC6~+gQ_epS^hMz1t(<oc7DpWGvqlSEFpEx|EU1qe;i=;G1RgA^!a|m5
z=?1qP0NJOCM!NaycKja2i-OQCtfG}_<pub17vD2DFGKK_(YQFHK#x}){;fNO#(&})
z5c4Zg`6K1A&g<OBqlY3>YisKwlTl2W9$B~{(!4E(S7?MkZNSHmKR>9A&Wg^6;z#9C
zh0gpNnuwZLE!2MQ?OE4UU-H={@k4uGn|tq*=heS___@iKYoEXI`4@7d+o~RTY+ToQ
zUs&mV<m%$5Trao1`1v=!IOn&IjHz7k`-W%Uzwuu`_nlWB*mz&fJ-t`F@s$VNU!VG^
z8e_)Mvd&HKKKkm_M;<!y*)<;=4J0NtzHoHMk;J|!>!15V?1%5%ee=}=3(hS5)T4I{
z|4UaJ_rU%)3OPz6(WfQ@&vHVNYHD5PA9ZB?u*FT6U4P%V9$$WP0e89S)9Y}|<;zuO
z-465n(slM*@P^(*vU8mkg30og^13v??_6hW*t{-<`@ppJ>Fsz0ACG0?w%#XxAuXYb
z_H=GwSO2g1T-lR%<u=A6dAbm@{~bb;hi?hfP08e9o<8!8bUZHafm!;|MA*P@hyUmE
z_m6-gfgMWJf2wUx97I^Rr}0_uJUnfXJTAW$Vh-c{ryQ$sgKGzD#&0BA@q6W^_;(K4
zQ7)nR=D)g054nGfKQ&bFD<S@9PKiH0mya9J%t{smMH3zcR%5t%&Br~A?`JKzeQm@o
zi$4?i#DKrJGVf#=$oY0>-W5dwzg?Xmzt3(3pKpfvR^a0-iB2v0ZT@#QZjgupT|)S~
zTt~kNt!HpcWjj5mw6hkH6#gL;zQbm5cU=K&qj<}-=}!ZE+hTbT#jTX@vj%h<r55*%
z>lv`Hg>RB*-&@f3YG|dw&-bks`m^xNz+?Ivg+51zZ@y`iG1zqOz4-SF|K2`Eac55A
zKSE!}qU}X!p-WnAL_d0Pi|0sn;U=Ah&gr}eem@<-zZJwWuLCyOqNdPvU<)w@5zMD;
zu*l=apUco!1@p<Y%UtfGJu{e+JO2OCzHY*-Q}A{ojXv@_10Lagl=+`x{d>fj@OyP0
z|5Mu;JPQWTfjX&Ek9orHS-KIyBt{{E6?E$C8C*|-`#<3S?FjVXWQHEz&&lF{KL6iE
G;C}(?2cA9v

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll.meta b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll.meta
new file mode 100644
index 0000000..ce73fff
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.Rocks.dll.meta
@@ -0,0 +1,32 @@
+fileFormatVersion: 2
+guid: 58ca997f0a3dfb84590febf580194214
+timeCreated: 1538196674
+licenseType: Pro
+PluginImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  iconMap: {}
+  executionOrder: {}
+  isPreloaded: 0
+  isOverridable: 0
+  platformData:
+  - first:
+      Any: 
+    second:
+      enabled: 0
+      settings: {}
+  - first:
+      Editor: Editor
+    second:
+      enabled: 1
+      settings:
+        DefaultValueInitialized: true
+  - first:
+      Windows Store Apps: WindowsStoreApps
+    second:
+      enabled: 0
+      settings:
+        CPU: AnyCPU
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll
new file mode 100644
index 0000000000000000000000000000000000000000..67ce7b77c5149f98670767f5cfae91bfe4107138
GIT binary patch
literal 269312
zcmbrn37lL-)&JddZ_n**CP~jsx+gP9dLYbj>7HrGguqCUJ)o#a05Jg}$PP*_P6w29
zCWb{31R{zX;)a3??)$z!u8%&VxNB70muK_w@mY=U_jl^v?mLr#NB{49=5|$`sycP*
zRMn|dr|Q;y(m5~6_?b*5%k!7NWHKMZ)!%XU`{+NriC$9s$db(a3ST|oLp@LY>H%k6
zeno5S>e=YB*{5GMcG1(fZHu;#U3kgZ>^0lQuGltq(v!~|yDGZ)l4gH@@t_#>=^Hbd
zC-(T6S7hILZc^G$G6#;8dJfBEhM+2N(32<ekKsQ~lxCKh-*a>eU{HB>;{*PQH)pBW
zanDmy{de6sC=h>tY-BS}mIu85D@H8*yC9qC1NO0cHnVbJ+@poZGMRiTK2P{@sc>`q
zCC}MT_@TkLUaBi}r~k$>nG2e;t=WqJ8g0;+;XhN+PxtRQsBg|*^2~^YqBR4}hHGTM
zbSHFkIbSHg@+aE7OmF665A|erKgG)w4BGuUn)>hV1|QKkUAg_(OlEX<n8_6DJ3N2I
z<~wV{7kd6M?y?In@cioLJ6FrS^Md-|VZE6qn0hjqa;4Zf&<pOIT;bhuMX=@evw)Vo
zAXmxVaYc9txN`NNy15t-JN@0EIwc$yWQO4v|K)+qzU52F0Mb?KCaj3zb*rt+sj87M
zwaoKZZw_hSVC;-DkDqRqW-0XQ7Kn-vS?k*zf+!fVa{B-*+nleASi$+QL85_7K7>)h
z+#~_NHnh2a#YKbJflN7TS>~nydxfAaw^GhpP8YK5g>rUte>q#dXt0+&y)F+`w>)wy
z<=!}tLUEqn&HdffhsLSpc2g^~SZW53;g;J?t<Ykr*T$*kc2g^~SnBCGwcKuMh32J>
zIkOJ9s_$>6?G76ilLYEANg>O)cj;g-OIu%E4qAr;+%Z%N*W;FQL39M}-l>VoV6Jr}
z-tlTQgVTCUIy#uB4(9e|%DG8z-^kufu73OzT{qP@{50+TB_8^T!~woc<{$YT#m%ej
zar<NV_v3WG!KFbnW#H;>|AwC~RHmP;{Hyxe+DGVTNrxTCtZ-dHy((zyw?gL|*nH<b
zE=2FGl{=wf>zH@mqyAS~aZw+gGS&NXaqr77?0iH0#>W0a%*K@y`|+?7mnjTpX@_3d
z4!y1&%Gr9R$AsUzGfO{}St)+Nip)=cnprAd9_Up<cpNaAGJ}WtnXR}Cma;chnnk={
z-8zbj?eH~rOS4ZFV1od#u^3DigO$yZU{!N<;~=Wnw;9%snkS@5g1YB-++Kxeuj!22
z)n5B(@YH90=a~*#k2SpQV{rU8NDkHC0|Gq7IL*2wP1cW&1MIo9**99^2^YNMiuyLc
zGF^!C9Gc|u!{f<PFIMVDfb|6Yw^_DP>b!<J>n|?O^RxFUE<BM`d;2E#`V)IIt&<4s
zNO+mcEUjex<;F|=D>8ls|7tIUWfbDoPxZo+@p`)?OXpOl`n3+^SGqKrxOK7OJrvqs
zoRAiHZKnl1KRN|0-5gX<Xe-g<`1O*?&ly+2GI&@vb2=`JFFO_|N!I1OYV>$zig^^B
zs(@hwj}R1**M=$Zjk$oI02rX0`cW{7;aOb1ucxxFr+$XZ>sMUnkp9(Re(*EkwZDX~
zhI@Z9XwK8XhU^dNVDp=GLCLO<ZUQSEtek4+#rjXt3;YNkfO&Zev!k*af<=5wR}8$O
z`#4<Vo2zCqSia7y(3=B?E%@uORqG$|qBA-bO1NXiR*bs~N<Z7Nrs8K~MxIG#H!gcK
z2SQV>)0Wl^Vop_p1hvu!^)pgzSsQo%I`s-NPXUMivXw)7{p^-yJ;@+h6}MpQWH&nk
z{4JqSLZ&)J)^!Oo54v<Q_!8q}9SJgcn3qBLr}~_)Y2SJl^G8oT@eZFe5~3v(1N)_&
z+~9mqOwYQWdO}$;d}GQq(>L6Jp`2058&Asf-I%40@I~}iw=5XECgYqe%w($7Wc=bE
z>5SjA$yjeP*oN^e-{;j;#)<`HsP7l|=AB?zu9`FWSMtN((xqLzO9vd@N0Tv61=rsq
zV?+<K#{Rsx&YQt8u{Ut^K+L1jav+0o3+d~tz1BH$r=5En!e_L8_AV6p;`mhGMC)nt
z>{hT|tdcrBPu?q?>rVx(^9eH#_$YZ>6?N-=QBFQvW4I)Dc-fQyquZJU%er2cb+T)u
zb%78c;k6m!*|EQ{u-S^tb|I?$m#uZ`FsH~m`eG$Slm&H0XZ8XIWNNX<9sV`A-sF&f
zpIigFUu0ILevI?`1_yHL{ICR@WGFg~^y%{K1Bhai@4;=1L(dDD5CU||+0POYJ{_9F
z3&n=%O6z1|c9V#y*W~cEF%Hi^_0F-~1h!7~%U|^UQ>&ZLYMiS;?YON|=)I(PE_L3z
z`a(vIqVK#w$%aXGxWyi;Sk&?)TAI1}(b7@Q&5Po0xkfghrOv5wSzuBxN`7oaQ_={{
zY~*<!kF=}bNoF&)ZsB<^&yRR=s7ojDT*`AV&&=oe@rN%i`YX2f<u?*AG$;|Kh|Syw
zWQ>4Unt5^T?J3RN9D7GgGduA<O8!gYl-bhE8L>BCnmHx*R!cKSEB`3v*J>hQXaNBe
zgxB&g_A^YC8ANY}o}RgwC*s+`qx!yx=T$uS^SqnqV?1Br`3BF-PpJ49o}e`I)z}L?
zpNYNH=Yz4ATD~pzLgnjYZ=p2vve;WJ&AbqAr8IL>3|Uf|xi0onn{Baos5Em?>@AmO
zHpkwP(#(@$FPu9e_KuZij*Pu)N;8wOccL_NK<quZG*gMaVQHomd+Vhct+o6rysN^x
z$wI!`TsHGZ8eMgzf<KMDROQ=vAElK(8K+eJV=ugVee8w6mnr`WN?N5xQb*I1^pd2J
zW}e-}b8+m2yIW!})juuvg8jtU3nymqF099791SN|#9sKjWRa9!91YHYhNv+fn(5~_
z3vqroj)pgX7kkO{5v6?O5%7jM<wR*lootMUW>TM%_ux`vuEUt&W{_XeEH+w-2}+HN
z<Q7YfbGzsnuxd41-7LYC)Nh<vDK(B9!#7fD94dEBsd2E}o>HUMtwcZr7aJ8tc%?=l
zH()8&LRSpxyJFE~a^ZH0DIpgs#icza(xyBV_l}S_j+||tekeJb=h-~p;RzUv>v=Bb
zc`eUZcw_~c*}zYX2^ocNqZK^{j-KX<oLsNjZ|-Qbf2NP*LFEDr1U$nR)E^;hwz=H0
z<eO!4t7LtUA{WUzx}enZ2`{Bg%N49Y$=sgxmE2>-=nF2ip$G5G4WP5Ix8dKD4A~72
zC*EMgH}TFqElE{aKWeG-8@`exDQx(hk~}6!Qrz&NBx=cq_b1-6L1zY&RAcK;G(^=H
z;n0ScBuT3qZWO{_!*5G6vf+j#YP9)W1C2Fz&U`V6pIGm>w5It?i=1d)G4ntYd2sXT
z1`M0$n_F+5J97t-X%+@6XoV4;QJ$4Nt9VxP)C&43>ZhciKK=CTXNi86>SvjL%K915
z&tRu9s|#8r8@GSHS(xcdQSb<D@5OB&#BD!D+kcA|OA{VvU9q4fFJ?$jvuSnqng`C@
zowR$<Jive>G5*o!@|n2>coT-i_!rh>D6UDBnw*fz`UuH`IC+uega3E(giis<e@??E
z6@COht%--%L|n?j@agTTY^mY3kWWFgXsjqUgT|cFsosxJOwaoM+~i72-qRdwoEGzN
ziMeZ#I!7mTE<m)9d0t#-K%x00k6UI#wRA5DoxXWG%NQ{mc;3k)x%?BJESy})a~O|i
zit~7$#d9mq%q#dAF0Q!!%ZQ!v%J4no)#^Rt!?n?SN;5akiy9$nwW6v-T~5?!u{IQE
zTS*-8!(?3niV@O{)(ZEGudEgC8DCvna?g0JK)&%BS@<p0%KY}#$WrU4sPWp8+8Dn}
zYisyjR-53rTsxTGfm+D#V69G>f21na;&5D~Bd0X87wCNYA!ZnKrJ2tXwW2t>uxjL7
zL7EY(Bld$7Qc+j63f?>quKH1xQlmAWfR%tQ=$0<RtE$5=#FrW;ujo+QK`=dB9B~9y
zRsCV5UI9lNE4rA~2*Mn=wyyM5`Wr)ju5hPJ;KjTx3Hu7w&HV-J$J4*eS8L0HEvS4K
zPJ1Ku;ri$Oa64mR@?hWF_2=G9c6_QjvFm^F><gY($ONs6K{CEuF%crRfu>Ji>a|{j
z=8Jh(xu;5g>k=g_ZVKvIFzuU<>G{HRsbNw~#4OcdfrCZnOI?dhbQuW%F)_qeF?8)w
z$|7Ti8M~aF%KN*<=%JhH+339i%Y`7koIL*NyAA-_^!A?M$eFCO=HK;~`83=t8m=%J
z6chDA!=}B<VvKupL3kyRKcvhav@0(&oH_Y?nFunOG>bC9JQlq`NS|Ry6%z$9i#j}7
zI*&)sRLX=$J@ZlBB2-ryD#b(;-EcMlNRq-=_M)HrR2r3KD9A<INE)FG29sX3o~v$_
zX&Ak{IQ=u4i1Pi+S#dsp_BXIJx|+y|E{=n9m9>5T>_2v*`~>NLW;20Hoksh0fA(KH
zY3FqtZ+=B?RYjg<6;Vu-PxC~piE@`GeZJTFHkIly#h;Jsg~By!xD*qybZpEkJ3Bx9
zZA#y=^oog!uIw+z-P9Yh-q|}p)9uPcH>RH}CPIH}U|ysvqPZj%TS7~Fk`Ok!=vufm
zS@fdk;A(YSVSVdmc2d6q>gUg*J9l`#Q)$ojqB&f(-zl*A8Vc-N*arFN>$GU}q#WsK
zoK+nhejKx3+priePQS~aJ-Cw;<AT4nvd^ziXD73se*tUxOSc*@3z=v1LNtJ78854-
z>{cR=%1-u@@<B`bpzHu!ugq>E_4&P%Yyn-m^+8Lnc%^^P^-Hzop!#L|-fSjY45DYM
zH!k(3a$Z!0r**%IQ7njBfJ<gY%e9{^a%qN~ZwxS=tp?AK@I*u8Dq6~*{hT-@M#t;$
zVpxd^AaYf^BRjd&8+U*Uq9X8m61?=mtqwqj9q@b9c%im=4CO4ha?~DE-tv04MOMTu
zlH$LYONN#4c<*v-9Q1-lw--!%lT`IuBoVFuGK#}DCDW$)qE{jrqmS}4dpvnU7R*KJ
z+hcpDtUk)#HRA}IVlWl#Vogx22NAue7|ywLUgiksttwqL+6Al_)Yfj<i0HIs41-9_
zx2I9|R#=kSVNHZV1+l)O{u!^6mJuicDkf(d1G8sBO?~z<`)%9ro%%&)c$xJi88#mM
zN&=R?Itpi=OYwdA=*wbTE+73EH{s20qNabC(lb1>7_2ZH4;w><V93v6Y%9Tby<rQf
zY~UMLCcS)u?gpXz!I1R}B%J+u!&^2&lT{lP=C5|es=ww*a5jv0@9?4x48M@ILXj;~
z3(UR=26@q+sCRf1a4IA}Lc-jvt3|&{?CKQD1I=9{;zj#LPh+IEbjwEMgKS6kppV%;
zbrP1Fz|w94Pp6YVs2$(z4Qd<L8SN)~(Yeq*&IoL+fWRHD%ccaE=7n|S8x>6hnSq`V
zj?<_?$b1vj)4O5gxw+>-<oNL1^Koo{QGFz9^U6x{e|>`P8{VwQ7wG2}elR`{^z2)H
z2r;?nRseo5`vA=Q`X<V>w9yNJZdY(qHkkbaanWr+Hf2vALS{9+NjA16Ppi<5sA}I%
zqzl)v1&1)D;nmNUQLwmsj0Sc-DFDd0_Ca!G&@>MKhL{7GXPdWE5#b(kPxW~_1+;(_
z=W==3IZOKqFND-!@&JeRwlg7l_IK(ChSb6#hKXX`4d2fAS!L}FbFzqsw%oecx|4)+
z@;ivOJ(<kBAbK$oajJ8ii^#QH(MyE9YGYxVHtXV@qP0_Ls%s^5EKeo6i%i&2jdt;k
zt+Vs!6JGdIDx;sGKo>6nsb9#Vhb%68s#P!<%>Emdt+!q#gu(28sijPZKq#!&#1*8J
z2eu_txttZ>H{k87sCLoI$(vFoQZ!G0Jed7+2W4O>>*ruizYNO!a5ofqwV^qUnmTkz
zHl2c76McRN-Z)XV%JznrZM}k$jK7?o7<T2TBZ`Wg@z~BxWT$`L!Aj>iSZ$-;VxB7<
zAQ8td6g@~$_31In9;>z<uYmO5D;2hOJ_H<UXSp;&h+|X2<g^QTI~C*Y$|XuifM;Lu
zA}Jlr5XJG`iiuFB8+EVRx?7+a&8y@u&MAMO&Mn-`gRYDhB2i_?7toJxQ|QHB8(wK@
zG&j13{1rA`*l|*-@ElQpt&1F=8l3RFok}0ao~u|;G-4ETqgO9LadwPCkueH+V-!zS
zEPER#lM5ZmZ=DNS<Jss8obb(xR6jcv-sw-XX^)raR6e26PAD6;NS=*0k#ohm((GEr
zYyj;JKO24opiQykUIf2r9xwcaig>#M+K~QKCq&dII{`&~rV~2B&C}y-zMLe?%GtU^
z(eH}!xX`;5Ix6OLHu^j%Qo%1MNS$dcYosG#hxIA*6o;ivWy1%R>V(AS_0C!B$gbCj
zQx|&S_sH#y!IZd@%^fE+S1QBz7mcDj%qYn*^j>+qp}FG~2L6}?E>8-6R05YL1&6JU
zV)M|Y<W|E=RG~BII~MfAO9{`VlT_v>sic#f?6QqzdNLW8?7|q6ffh~5JiIU|pmfp`
zY%7wE7fd+LeT3Q{t=hPV5G|*H&<j5&o>`K)$EGSPInrzUw#*mI$%?Z)lQSs<Qw=Zt
z2M`oj+mVt|5ZrOa>Mgm-YTH<o`&wGf%Q@7Bq)U<7V}6mguL{ex=S-Q$P-ZDN=I_pA
z*5$+3fvMOC!q>|U`Vgb4PINE9{=LQgWRQ=@R{UXsf$G+!wan6{sSeb|&&UM7#_%3b
zKFJ}uiO_a^#0g-pt!5tz-vGMFdN8|z5#?ggPrH7XEG4+-r#v&AQvJ*6NqN`n8ojfZ
zbQ8=g;+hWJ3%?3;OF3iw)MW0C$*|JbKrzhkIg3ipzLb>V8==xsm#=Q_%gc1Jx513_
zsxBHgXN>n-zZZYhw#UE^W^X%hb02Blc^faWEwJ4bi;<Q_T+yrEPPgtEuhb@A9o<Kn
zrApt-ztL8?{N2(0g!}VTeL*4m7>Q@T1H915@K~2&Fk8;vam6sFn|{{8UCvhSj^0G>
z!QOK3EGIgh@;|kjP`ML2fY1S*P_5ApI2Cty3o%)YK1F$rD-95RLjLm=HyD&12Tb3b
zI+dVRZ1`O3sL|I*$+57;co2!j<y@I(_?+SBE#MsU8BF0@@!eBqT|byBV=z!MSo;qN
zlaI}^9cp4s-PFXGd5|i{CIIsQI4%L0=eONcHec$jniJWSoimYB(NTk}iMchcQz+U=
zIfSQ8vUfWaWI92~{MH=^&AAihZ|gTZ_op6+I-A1`3PxBe1B7e%V=&SDrXw))G844F
zANj<xw(56@SIqrId0Vupc5ZCia51^LUUUowj&ROto^-hU%;Uj@Vt~F8od_l2!{i;e
zWJN#P2xPL4#i=}VC`U}frz9|W=KdR4^ds`1sr*z<g7?Ybr5tE{0_mV}i61>lS%dIW
zEr5f`bzU&{ABOVrz^9f5o)@+7MHdp^=w~N8QbcqS!4mq-#|hMT_|<0M4>t>qC0^@i
z6o}UO2RUwbgHzS;hYIg<b&Y@b1^)`L^?<tFQpD#3b97JUwa|Eo>K;88+><3Q+Kn6j
z3rW4`#u#){7j%6Lx}giYIR?EzpkG?XTVl|y-BizuLC^1kcHo68JuHatCEH{WgulfN
zB7_2@1RAK06t`ww4XwS<isrWrh5CAG68=gV?38SD1L5gk!F<*07Sig^3x7=tFZxMb
z{7<{ZYtgC-YsnhZ{R4rPdC^|n+b&07#Ekf*;HcKWGh9E9L%+AsZ{yHES?Jes=${n|
ze`CL@l<N~-hR&D455IqbIgGk{(XV4;-#AO=w^0Wc;O_%8S;|N6$2Ai2#+lem_jXnE
z8;&RIz=vW6J~sayzB6Nd%fa^!l1AqzSmOMzR{n>(`6n&^!%6<1rt-g2`LA7&|DII-
z>nNW!JLUh1n#+!Gao3LUUY4d-4XvlurSj2R1zMJm9>DE#I3K-(aAhr3erGrBhm{u4
zM>?Q17j}z^mn3|B9dt}NzB)Q={}@tG@!+WSf_yY9!&Q(E|IuivDg^#v+?c!#F=%-Q
zWNql!pO4yr`wP*XmZ}iFBuQ0>ULJ#9(E+7tMYAj(8zFLSjrSyI#Wn!XWHA%ZW+3z$
zBQ$!CA)*T;i1N{gV$g>>pfv7l#fMKOeAo!?rs4iw+#ZL4`#lbK9#CA-GG5hvumeit
ze6MhRA;EbVI1e?Pzlm|mR`fp7j7Kj@+9sX-{mTABRMu>`7f$=(FZ3$~d3bTj^he^;
zl4&BzDK+=qS{iEcW*%sfJ|rIM&-2@y$H=xnLZbG={DgOF#p|GRsQb(>b1(&`{qH24
zJ6V3Otr*MXwQk5G#2-gkt1Q9&=u_aRpX!fr<}<ukelL8T99OpZ!Gn%xSUyduh_NBC
zio)T|MyS(Ukpcfp-J(&-u(n^dXx<=B?Yo4e(K@)cNLnwL@`oD%2g-fw`d{F#zb2;R
zQxu-mO#W_?=yVl-{^F7K(_*+EeUdsloM-qR6YhV4-ojFd9sP_kofb;!{yEC=qccFy
zS?-%437baHzEQOOi7XE0`jOj9!oKl{c}uy;Y&Lg<Y#a_p(0(46vehl;Y&LXNC$pqu
zBlpT)Z7k#r0;brZdh5d!$006juIM2GoQ_;ZB%uE$6#cyel?AeP%x0bl9{q8Y+oAF6
z-f(yiOz^$%&&srp{*D%6&HULEd*x5D_c-bwacYh}F1s1>Rp&XWr#f4^M7Ntn(AU;j
zF+~RsZeK>p<9&0A&X?HCyVO)w>6v37Si@GHojWnz$zuafwQ-d}-ONUxg}}*DIa}_v
zx;1#=0IyU-C00Gl*|_fC2ACuMUfUkr7F;=f7ri0u6~Zo!tq(A4lQI7oNLX)m(BN@n
z?4#6LydL0G;C!eI0Rd)4I|&nR1Fys5+o`c5z~c-aG?3+tUPVz}ZNeB*s`fQ5cMa#*
z-tPv@#MEi6C&N^%BvzV~!sw(FK$=tZ#4aG(i9b4-pTTV46~cn?z-$CopeeuGa#yZ>
zaZrD2Oo+5C>;fNzo*gMr_#ps(NT-4$YSX8~50>&toAxDbIx@daU*g(S(blF24t1o~
zj1lEpcBIp?KOx!tcKN#6rPys3A!>cZsBkg?Ih?@^K;L)FL+~(Os-?zqkA)T)+aD!$
zRc2zF?P=__zp%aBYzAFXdn4ox9o0dL^-dA~+orf{0+=s}H%Q+R<%7Lmtq`)h4+evQ
zz}k0eX_@|4@LIPb`&otT0!{-3W1wHNZcLHtO0-)!2oE9WcJ*}47fOA4D)q#=qrDiZ
z(LR{B%zp&$csbwxIK)MNP{1Sf2}0rjfMo8;Fa=C;tFgX`K1rOlZg9*I%(6MPnXmRT
zebLEf^*29c9j*3eMAP0@Q&&&d<yxNtj!y1o8nyem;6UEQGHd52H1OZU52IL8A&5Q)
zvr0j(y%*pXe{)~XW}*H<{!UH{+R@TNK7J9bkaur}T`-s}<VQBcrcYB`{WC}#%`W@@
zwmw6A1Wgi1YLy5;P`@-0Pqbb~RKXr6*SrjhvG(n;?+#Jhc!c-Ev?6Q3I5<F1BBZ#b
z<hp&XbtnbsP(dvy+$|{-eVa}jE*Hb{d4iuKwFwZdB!A%QKN@|UTvJP2XoZEOD056F
z$S1M{S*^XIWb7CvC_PvL?jAR_F=SsVh<>5s<a27OECFiA-pqOAf9(AHlBeM?X}xfr
z{hp!U;rWB{4Q?>1JR6M5bA`L7`f>%2T7;uy=*q)iB(%ysMrEzqS`65a3J80T@VI>>
zrxUCu&9TOFqspYJKah!@O83<W4cP1OL9TxJRMH;zNNIC^>+jSne7M~DJU%QH7`lV}
zOT#sg++Uc?<qFmouEWEohh3Zc(H07e`~HQLaeS9&YHpi@4w=WI))y#XPLU2p(E6eP
zv|d(g3B<}unEDsGR$uJ)dxd<+mUrApYk$JqMy|4{j)gIkA>W8LLyrTaB%DjY$x_-f
zbAo6SgT6$8Q|0RI7qja!Udg^uE^lK{`|4%`GPnqYUnZSAE(Ns|FSD69<DMv7!|~W=
zesW`_=mvJlIUM3_sDJ0j$biWKeJ_|hQ$53V|GDcKzlr|_{EqH?beigrpF4%Yp7+oc
zBnra=`H8+qf6b#Mv3VcNZL;isxLScT2)L0m*`N3FA;+wOs7~>D^aEdZ3p*PhGY%%4
zLm`@3V@UKg6&hHB>xlmFNLT}fc~?5G#>LCPgAlTJK_hC#yxePzHOI_H1&GVGrJ-S%
zM?>lJ^QNNlu30y#*P;y0(UQhvyzt-QOh4!J<>pNR+vd{untpiYmaCjH7ME3GqWu#|
z2Qs{jr*gN<F@Ld-;rjYj(8%O~EINQ1_&ddNn?(>iC=J;*@+F&t1z%A=$S+^sLQzxi
zZ+{i{^5{n}nE+}{G5Rt7bgt+hfKJ3IT^g60GSxRO!KI8u?x-Xi154+Rfv<xFJxtLi
zCYnwVYX-ELus81dgMsX9C|ND6SjFfY{FpeDKK1vu8}SUPxcz=wLjBy!j8Q)QW}Y0z
z0z}(l`q6P=KRigydd9rY>zin*zay?GbGlJ&+;R<3jXptNx?Kg$DcX$%&ra>ruPJXF
zw5j}eTv22wKL!nf(<6+5NT*A(;Ww$lRLwWbuD0g$(MIq_O|jhVbSL}u(jq>sSCBjP
zdi;WN{OHN)dhs%w)(hFpz2rGnX{+7wImA?4vVqj+1}8elpXovcHx!3jn;|37gL_hA
z)m4e9=yb{&aBr1}$vx}F7-bris6%Y3(&4f)$+AweDwP@<g;GV(mvc7M%S_$>4Hi`8
z$D3pQ)yvF+?g`M#DNeAkVeYW$RHwpDevC9%njBfPF5FLxE;dH?)8H`tI}I~F8(Q5`
z%2kfc=e8lwuGA?RW<o1JYiB`Nmvq`tW7xHK(Y3g=<z=~ibqh68Yu@X$S{mrL5{i;9
z%tNwiqUVivna+sTN;Krue-ORaSk)bjQ)ScMMpL{F>IZUWi?<Tgj=s**Xw3~>hXQg9
zA@O}4%%fNvZ_<@cdxSLTTrA2s`@*dDEj%Tb<&vpPZq*#K+ZzIUvy-deCb~1X{VXmj
z+Dbw3+y))GzaSacC^>Fi7v_)a?|^4ck<v9f)0mUs{a(HhVkV5IvFV@4Sc<IROrsM^
z%EvTT)--m0r;fSIO_Y5)W&3SOd=|YDc2i8+-&O69R0?Y$*Quem!pTLadam<E(m~E1
z!GS^6yAqxG&AD(IqFn6_)sa7MRJ;`<LC)J3D5~{+P=^DMm9y~$EtyTmbE%N=oadUl
z6focqSDqhH0oQZ0sTOuM%|~Ytn-4dU5b2oBM?X+a67j>4l7-@D#EGBhNc<?eK8qkz
zw;GRL4Gk-sac8$)mh_FS(0QiO$*U;oc_3a6x2s^{NJ;cVN|(aq+v%h5NK*6Wji0mg
zR<3O<sVwfr3E#`-!Xro%y({S-y>_<gEbAW{Jt(f?j80#@Mm6)}%|6r9vw>6Gb8KoJ
zLTs#8co}4)_7AZ&yAwU79Lit~pvOaB?I?xv>nX<15?nnB%f&b=W1qS5|25CT^dscc
z(>SDBY#cLOY#cRGY#gz=*qD}mjeW(sxBW^;ikdLNScX|y2ZZ3<QW_M2KFM(|S+!BE
zOh&+;%-O~x^?KvJ&5f((k0Ggp%#Gr>&5gBqPRx2ErfCfJ=CovseoQ*IHkkgA$qVUt
z=()&?qZV)P%DndGh@NX(1G~13+rpi1P0^|(M(eUgX;t*!M(csly4h%DS1~2qE{2<?
zyW2=i^!HrmKGJV_r1Xe_pTLZcDEKLXSl98ROTZY53`Tw|0=?Q`S|l9K!IgA)e-ZIm
zsGKh%hQUED2?<5E9;VQ6kPZ{`Fl%ouo?|qp<wRPaMbB=%9{QZ17)l9>v~a+N5Zj1c
zyCCxuIgB3c+GSvVyZoFibBaU<IiMqlbK$X2%C4RIU%n7sMA03K#rHVr!JQDbA*bxZ
zZ_Pp7b~<rhJ3akT+UaRl=S9-fPQOrH907iGAxIMO{YxTBi?mZE-7d6KH67l+olaP+
zohsx~J1MgDD+&sS((QCDbv<vtcCx9P4L}pK=x>s<<EytOhO63`&c62Nqx*qRu*;(P
zy;WnlON%N*z4)B%shVn5RG&oXGlG9DW;i}eHl*5>C5>y><%_hdA{VslNfh2~SMKFm
z*sjZK)p_lDM^7emzSa5hWQ_#@3!ZFhxqzzi8z^)$!zFBl&_2Hf(3fAm{s6QgI|IAj
zF)zd9op~Yt{Oab=4EEJbzP7A6ldp|6SI(dWX{GWzasFhA^XE`#vNMDifYA=JGY{<t
zUMuj&Q{Yn!$u|VPe?Ray1>OUAAhXkoloHur7y~lYESg(w9^SY(O_AEH&0L?I>cd3z
zdkCFVC<gk`KLTkSljKnG(skPpxg5PNhe9zh&e7*o(8SbfVt)aXqkjT53o0?T{`^?w
zb+jfXvq)P&euz5Qn3sYr>DZ_iY2(QcD@vjM<jyxU|7+iN4g0qL4E7Rd_A2PwqY?Kj
zkoq*(GRX*vw{ri5B-0N$gig1-6pme>KH{bc5pHw9Jd;nQ^{-@PzEZT!0f%<hax3Hc
z%3B#*Gi~DH+MPd;CHgmhI*Yll=%$Wn6vDzMsc|j%8v1b@JdId&K^L^c={Dyb4~<WU
zM&C?X+Si-xY(VZCY+tJes%Ry$5v+617LC<?gL8t%JG1Xry}zP${>s(KIzN}01Mh{x
z+m>M=rE~s~<eiD;-wBkw(X>cf=dDZ!_m@zt#uv;a6>k)~9P&v~tv`V?tfu8tGOyE?
zhkAamsjUGwNs(Hcc7LHAOI|kT084svOR~{_fW+Fh*J-q0tZ(z8-@?vG?Hc3G9-Eww
z;V^Zgc(U7JEo|-W*1ap8;`v-Do{FY>*}U+2+>78(>k1kr*#nx}L5kR>8s&*d{DJfT
z8A_x7pmbaL1Sz=~bi`s{V=dOEQF2eCmh5lY!o}k#^-~GE4jDvefhunm)TX}e1opG8
z3C~iR!o0mp)@IKBvnp%+b1Q?j-s*Ia7fp&R3>+xf?1yKA$enGC7Y6i_Z1@zQjt^OT
zS4%n<8K=A$cc*Pu$8EDZZW}MRKgusV``j7OcQJU}*kMf}l_9pH_2nj)Wo_R&SKVTJ
z){Rou_Qj(Yz}WFI^5$b^zMB>p&qrSq!=rcdtAS)wST=fnhwk3YHRQR(%G&}oCG-;;
z(HMwiBl=HzQrAq@HgNP`0Fhb$jT76oJ|**8`+oq~#;04sM>??*v=RT@a1zn_#n%6b
zB+8a8?FL+AOd?-|+T_d1`E%Yr@*!UooiA1U8&B%Um(@<J^m-v_*euZojYh*@ZlJfb
zJrb-NR*+?h3`rc?YLSGuyLuAsdF?w*W;$KxGULg4@FZ4JV8NwyGt)`K>w)Xgual3g
zRWg@9QhIb9y?oWtbuI&m9~g$#cZiUQnKfws4G}}j&xKC|b!P?stBwwN6=htZGHP`{
z)p4z-p5_=ak#v??pYemR23ofD4T^D^Wt=yNcQ<7a%yUeG_}+ZPKCF`!zU$;~;W8j6
z@i8B!<Uy^Dh<Y((wvar<@O*r8N?~&NR_MG^bo#FGf|gIB5`4?Km-zbz{AwjU1uj$v
zvyDx5!c1rQIAdNe_Y%8PtN8IJ=#r7Ca&KO@AO(}v95#cklr-Rz(z27dF)uk0n>ByS
zVD{!Dy%?x_gtXtRHjS-7k`pqaunk+Bs&H!ScClYJaJf+cxUM6qY*q{-f{W(g;$n5F
zQcek^7q14dv&~!xb=|)5%%rb$_8y!~l*yK{y-3>qZ8Xt)X_xINXWrjtt=UG=oqlsF
z^gTmmx|TdJZpqr@{IT^NhQgd8(I;1UbTS)1$r9xvs^(_NwLe>EtWl=KSaTI68^6<h
zxpW?1crDe9p%h;(fW~JUUlvIlwDQ&%*sd_sbSyiJnw4GKl^K7pSIg0Px(2MhaeGA1
zGM1>lXx<ECDdERR!jBb;@I#UC<Cu8eG~umshSQYwlNZ5brOw6mdqhga6vE58O#8$_
zrU`Sxw5!E5PQN@(7O?0>ofd&c(Yh9Qn`o^i-PX-kw#|Yt4T>#x7?>S`oK1(k@AnzP
zaohWvmsQ_I^QSD5yi}+)&8nm-fh}c9Sbcbfu(g`wkJ_1Bo_D6p*3|$a6nm$$U76c9
z{R?&*rEAJ=b2a6~V@%uQ+E&qqE{5S#s9%4q*Cqz$?D|!1ZPe3zvh#S&qn#()+|+os
z^A^_+IZx0$C5AK~*Eq*{N1HY0X*7>%oE&f5sL=v5(U!P^C<q(0MF~qy5I)m<WB9h2
zuYzyZd?**;)#ek`dD9wD9z-@AP4*O?C4Q#%cKv7*?bq2;xC#Ww1yAP;-Ts4(J3pGW
zRANZb-F8j7r%>3q@iJrNLpNVg#+m6dqDLyDl`5mNp_`N;6jnwyb3A3VtY0+JHfq;{
z!_HVj`A{cg=^KR4qD<2-8YyKh>8A&SkL90ae%BOP<6;IkG_ozOSqh36{qF$_M2J6}
zg^=z+J<-JzxfwkrUC$N~Fm@=gH?Xz0pmkFaolT;6jAS#nfroWFeVijB9yzSfjoLu%
z?n0^_TwiIrK+^ZTq*wJc<4))`hZ^;yr!9}W*E;rpbNO&PsQViO=4a7>KdzmvBa11n
z6l`7)PtY~R6C@<{h)!dSv854fu)RTe4RGGuksd6b`1a1kv%7p`vGGpRrZj-Krt)A8
zM$5~UhH_dzBP02>lfq&2*McqjiEy=cqg$17E`~+W>xt>e1htv<uXvE!Fwn6J^>eQ`
zaEq%nY4IL&yBv#3YXzt6)rxLauv2rC;#Ci)&takNv@P;58z)6gWEGx`cA*fK?3KP;
zbTy1=T@THDd4t%GOUE1diqxKz)ibzVMfFQ_7>zfEIa<Yj4E7X_;(OCNz+U&hLRPwE
z<~q^i=0JAPoqk!GFZ275Y3P@VHvKYQzkY+w$ZAKyR8P`oBnk`bSB^InBenrM>({kk
zu`%Y}^V?xOxDL8fCHuDOM)kmaU&Jmx20LQqu&tt9e8d_{nl()2KHA!nW?!y0(Cp3C
zR<0XDItA?kBJ4y?$lJwemo8}x-zkvOO;=L)UeUomWKi8&U6&2GWKd^Bie4p%hHzOK
zWNqO3(Y?x;Xnma0NNat4XnijsKBe_3MO<Im2QRbw&XFb-I@I!VdgT5(v!BsAr~OFj
zgBI!l3YgQ9*&Mcm7z{qACFjE3l+jU=e;t<=T|rsu=*d{3uOJut_S2USXF^BqXVHw*
zFke^bvD8u%_n{ZJ<`7#^h0<;5ccoK{w@rVVBCL!9aOWtaB69<)j@%w8kET3tE}Fgs
z*QbBQZXQyAB~j8Q=<%6dqRnq(ba1>!K)fH4&`X0zOFr3jE`SL;{ODPbQOddV)BS;;
zvlU?U22wA`)0bEFyub4UVD)!?Py_8gk|p$>N4YHElX1Xd88;64=Z^z695fCTZFZc{
zTj9DtoATEEdk5Sxg2`ge&OMSc*?@RRSH|8%nQ@O7lDJ3Hx$QikuX6!z4Ze6vdJX!K
zTWq>L)BTar^NJJEyH&ZQyK>MY-CdW^UGE}3)m@b$;YGK<-rS*93xX>jrN8bL@4`jW
z2Q8M+o&HKO3;XM>l(Bz*eMYChX0>;#vt#tvCHwW)sbpa{5_j9Ui{|1pGp!5MQL*wb
z=%`<e#{&Al*4Wsv-b9x`*xP6?<!pM%*_?7`t=TMa_iT8(SelzR(d0}Y?8~>XHy8UW
z$liehi$)Sg*!qfz$h|VZZTeS!VeV~|p?M&exsh^tGzY5p7psOLKJ#W%!0aZhPqVl1
z6FozM{v0aOm#?;1;}_@d2T{JQ-`Nk6A~kbF&n2<Ru%N;s&7@fCa`LvGAx^LuEwbe%
z;y7`T(BsZv-ef#J*!6gwMr3xT<yvcSbQtp^(Cqfv_CJj24rO9ph!17vh6eLPgN1>d
z(<@5l(ipkdG>4pLq8URDZZ2u8^2)hz4?G(zG|D-$Xpw+1ghMDrj$Q`kURS?zp>-N{
z7%xQJw#G@!Y&2qSKC0jj7RyDIad6(=lAe1B%*mCD5ob=4GnmJA&tS52)a{Xscj*hs
z#dgjTz^zw#VVdAREDqhU4o-$Fs(m(A4ys%3F0lpf4#oQ6i%6t9kPs{!;B+T76M3sS
z_W8!!iA1yLXk&JiC$>f;3V<v^I(WU319dV8v9U5OBT?t<i&=zo(F8S{{((Eh+ef1w
zteSFAcf`($Bi(ICIK$5bFZnvjp2&3ymBgChrFS!=O^{ELKLMZYwNcWtU7e)<HLQNp
zy4<S_**Qhie_yUlUZ_1D-6yTH{^IG}src(V2pJkFI&Hm@(B_`Otnc)+`VnwY8QnpC
z_@w!XbzSCWYa7cc?W>r@Oj3{y=x$1@`;!4Lo0S>^LG(MCzOS(~h<<OLxCMgfw*<K>
zBp1Gl3@}G;GevKQo6}u14(i@+s-LDa7M&WmzDatM5$;an7l<DBN|ZxWYAg%97MB(V
zW*o99&0qU_vRECC!o5X#ta`k!_e;@J@afk^QP%EKl7VX(?{b)e`fZ3aL3m}bZTh!X
zwx9V|@Z4&6l&1A^$qI*)*;t&reGTV~`XqUlaTwOYUX#e3Jag=C;&fQydXP}Pjb#M}
zRQM+HzNXxZS%^)Vg3<-i9bk_*B2}ym290Y5a{HE_$yUff-nr#~WQUdpI2j(?rBh4A
zazFuxPM33o1%~NM2a5xR_-2cNQk<vMC<Cl3adC5XOH0`XSuU$6-Ve>USfm7YKSCKz
zLNAzV)qIn!`qdbIq$L72058-+Jbax(#^Y?}`#rXuR_2<Yjbp%=88fH;KRoNmt2t(X
zXM*SbJgfsU4=Nnvo5npR_8$uz#nyD^&*Hz62OT=&*N)%tdUH26pJZ2?LiH;kID8F1
zd?(=;YQSX(U0B^UeXEDzU2naLE}|JoixSdVuV_swD)yhuq?q{C6Y#%U{79pWlg?Pu
zR8cYfgcOQz8R}#NzS1yNU2h3p$ar2W@9RmIP|CI50i}H&OTT-_G&z`eRm(-^P(kO<
zL)%M<jJQWkbednQnZ&<4<)2IWxy_U`e)u+#<Hpj@;3?gNv7|1*9X4ZIC;R<s^la)9
z)PB768-R{;pz93uNkAAP+XVb;u4mHX4W1Rb=)VZNr6%iTb*`MP?6~T3>*Oj|Z_bTO
z4&<W0ka7wQt~Va7F0#*$b`#+^8QsjPOiHCIK`ZA;KBVF2TQ`tqd@z_pU0@y5-@x>w
zd$$;Sxkj}Rx5Jmo9btMYChtN^MR?e>;RjT6ol!iVddoh^eIAGgOhyzIv@jzS=jft3
zK6ZfLmXD1s+w!o>qrx|e?Ng+3X36Ov)UV}6emFPDE!EqLn#13$B4F}cjLDL@%PC81
zA@*qcyliiHKQX4-`_uoDj5ln#ncKVV;Dv7|5n||lIDJ9w%w{gAoh7O4hi?MZ-&mTB
zJ&8Ra&rt!9*VRQFZr{cpGNJ69KIwa>^X71q3fQe|>I3f1pFLK#&c5mj|GYnBdQF|9
zmHsX^%ZqXFcIfm<e)KdF$~uR@VsBGbeWPM*@|1}EwV!i2RR80soBkH%l<(W^Nwt;e
zfqwW_FmdCRtG?mAO?bPwBp*hg)#buW19O(>NTwK7_h&yT#qO*8=&CJFKzZRi6angY
znj3`H1*o@|`MFW0Yl^pQ?88qR*>_Nea1Y>-t!N|9CLXO}uHd<bhhDF?%FNuwj~h7E
zeLc55lSx2Q1J+!2+g07bZD%>ZmRGl-uPD*$<=>Wqvw{=+4T5Vn!LP=+O*0Vw`{c*Q
zDgPVgf0pyVS$^cH;BS#1`&thNSNByu32AoIL+db_Z-?s34!ixSzWw-A-!jiCo<n%n
z^JrYaaXVLh2`=T>Ui2-vFXfrJho4yFJc|M;*Tm0k%HK-)x2OEqr2N;W{LfDLpOf-m
zm-6pO`P(V~&Xix;`Qml=Gf#(X^_z~IJAFMpXH~Nn)J|_sHI5Hzn>56p(i~~5pD$fC
z5KT9rs;)0tjk`U~mJnD%oLD_SrRca`8Gak%xEqU}oo7PnD*GWTVwvX-g6Pi6NkPb5
z7uYBugT`hPx?f~;t881S6rIGxieO60gTc=GkW<0V`}qyE?oMR;rXHI=sq=e)BFI-A
zHW1XR8@>om)&1Es$UA(iH=se|)|>r7ZPKD=u=8YE|HD*-43dFhvX7x8G;`mSQ0&4?
zHGOCi*tZsep@w19Zsic!90PZF^IrH~;r#(|`Fe|6t~p5*$05-T|Bq6*fEgV>1XifG
zmXcn__6-@|o{DqqC6@2`w6a9IW*F=p=i^g1X1F0Gw`(n9qQM;0n#MEt9TJbbRCC{T
zesO#5dnx$$@v~n011#YMWgF$LO#{<s7)z{oq`^B4{m!w!z|(chVud}nonk_BI;&2m
zVumW#^(qr<lWxYeKR~OybJ7nQQf+Ou8KVng75`FK*p*)URLI-5#Xix(<&N4D&1Tp-
z&%9W4MG@Lab?a1VmYv_LTZc;^xVsH?oz$P0ONZCNrC-nqJbPn0dZO6Y*5w&f{!oLZ
zv%GfcA?9vo%zy&`TS1EHhtnQU$HxU1mut&Ln#+e^UVk>aNZ<p5$r^V($set!VE0n)
zxRJE_g6L}CWGS@x$eG#^gX#y#?X~|Cs<^4aT)QTRC_miGXpvGKdF)rkB`opFz0Mn6
zPjq3DJ6$ld6zh9k9XY8Tt=16q{9T3QqAp&G=c2BcKym8`s2bm`m}muit`pptDPum%
zujne`F;hk#h9o|(k;$<4PUC-^Aa46ea>nCSYZBK7W&rAyJ4K4CkHO`x9{oC?tR-`b
zO}-e^#p7ot!IQJT<nRoilYGBMVff;}_G%PMVTE{^d)R#{M4_0vGhE7wE7A**eU182
zezuwSv+KDXQ#VOclMTv$zh8;o2Ip9#9Zfho5Z<B!8Yqr&j&eL!Ih^jeC9X4i%@fFr
z3SSKN6j{}@kHuRnMH50aFXFfk{(0cz6R@d8Ui$>X({EF8C*q?xTlXR6Vm)f+PP||~
ziP&HdJLRM8jY9DbSBn(*WPz<h^HQI(IQVgZD+$>tERP315*_5KlY+A%Dy}qmO!yN3
z9D9*2eSr2S5=dx&YKQj5<01S>L<M`6ity9$ChSjvpDb`pcnW;Fz-u5RE)W@CoPLK&
zI|HBF&v`?qEIWosac2@2>_M*?ZJ#9sF`rW4rwAN(f)x1d#lcS%I3_NYdb7YHZhnzl
z0IyDS=^OyZUJ`TZTmp{n1w48h5y75{h&~T*LR|`c{^H=R0*ktsM;8!wJbF4lSJnv~
z9yJb!+6##Y_MilgwlBgvoV0Zcelc*@H)6Dx0GR%)Sbr(LcuZ{W;yo3-3&zA~(zjCZ
zM;j8UhPEN`cH84yP{w7H9_%TI_RH}md`f|@09;LqPQkBK@>ChmAUyqc<cZ%_maP41
z>sp^c3a^qYeg2$o9iO;=9fy;G7SxfQxc%jU4g3@ZR?7#B0?Cl9NfPZ98U>MDCku}6
z(y(s-_FIt@wV?gdm9^&koE4=e&sxK4C*F#BmMhBS&H{eV5*6$ziQg@}3BOa|?SMxT
z5>oJMlsr}2YYE5vR+emAzuK5K5}qSh{9aK0b-;r?d6mBdZ&H2=+!i<<<0<e?z^-S<
zJ$Md4T)yJ6ZT*J3_)&X5SFXx`bY3R~Enu}1m+7J6c&%ZSZR^+Zns!tfW8L-~pgngJ
zAG|cptLuSG|3Y-#fY0bUv72Z8{(az)#&B&YEsCrce8$Oy1$@3yH0)uaG}^uiZ^Gvk
z_;~`yVlV}MKHzzh;${Hw8QNcf@Ba_&)kmUzf$Y46a)Lco(S9r5g!UBpg#yR4r@*%f
zoa&;t6Lzxm4t$PJ3+DYjL<D=5t1K+_ow8EkI{~|Cl4eT5Uu<wmg}9%*1OW5C1d!sg
z_8Z=XSIm2<+_=B|Uot43s~5<iRmq@C!6kwmJSO4<0Mie|a%S;<nVMYUe)+fbVWri&
zTKXco(?u}lWt180!ALsVemUNxy;9&;0A8JtpMt+q$>VlRf$s)fn>Plr)fc$~M!XfS
zto_Q!XuN&3+?cmo|C=t$J~3+l+>=>bK<6TI_HP*bhTF^BjjKQ3+xZ%bY`>PD7>fhE
zP5`HfIKb-{0`6T1c*8=#8wGIk&*8XF0QKsmSWIvU*IbG>B>;6aOnAvW^DAg|?KH!}
zS32ighz#}wYAUQ%39V`H1B-*-wmA6hi-TE!CUr>Tey6~$CTZ}y1de+_ioka-4t`I9
zB<}I=C4B4wu|D=b0*mTn?<XSIvrHBLfDptJObYx#fnzFC;13C$k|`f1>}1ME@VT;X
z?eMvA9Zdcx5y74%D(hp)9ha2?e|&N9Cj^d3NTvSd;^0pKt`%%l#jN-=kYn31D?URY
zmIK({lJR;W^nI3?V9%iF`yAecz7+WH76*S`;F!Kt>MsDEPskU6OutmU@k{t@&iH@R
zS?A68Hr;)8@j88(a)Lb=1V`In!JEjS6!`BK2Y(fCtuK*Hsq|k{dQ~=N?mrNAb^1EK
zze2a@$m<J9AM58*9n!tYs`R-;c0IaIP^<sdihZmT{3~{_muNj+ox2Dzh;y-XE^!X_
zTmdh04whRCP$y%2;62aN74X6pm>%ZNls`L%C78o*bDQKW$<CeOT<*r7+aa&ldMeDC
zJ6HbJVe&rByiIwrKm$EOUN+eA9wYBo^ByJd1@iL#{wf8Yt^nu9Mp^gIVYntR9IjO0
zN(+pHSbZCFY=IE7GF+_y25bVngrvY#7U0Oim_nGUiQ?4K0SaNPR;UzWW@*eZG!*I!
z*C@oqrqGh`AcZhZD^w206>7QAKsce$b{8574_4?J7g`>M3SnYWzN%i(Zp=N~g+@bK
zxiR+~7i#EZ>W#VU2(?b5%Ixm79;9!~Jw@@YZ^(PLyfGLJN&asNj;2SFhvY?>!DJ`)
zV{K}EOCWTMZ2jKW3XqOtKv6qJSIL&;R~kL5qa}h@YmZwUEybrJ)MB<DVY+G5&rhz_
z(53xqCqFt;sm}M??~*l57u~hhQhv0-!QCCzg8MDqV;HWKt?E=Stl>J`(ZNb;dh*YZ
zL-3@`5&0>~!=z;7=?p{24eP<&(bOOYy1Q0&HPe`(vXswNMF6eog07E22X#R=#-Q;o
z=$077cZJDb=Qo&K9pB>0@zU_Af<$k`Hps3^5b||SsJ9}Yr<{E;sg^E|c%dSyUQ!7K
z!-#xy7s4Rbw=eSw>buVDVTMXo8h3U`-2{kryb(m-q|89~fd$dGsr`eo|2rxFcT@iF
zIsd0g&zp%~!3kH1Sob{_<0Af#3oeefzEAo&DJ#)yRKySPRoB9T1BgV1_1YfwUGr(Q
zq;}igp^&Jf2v_im?hnbzRic+tiK(a9{qx*&Ct(m>00`@6!49K@2ZDL9m!kx1Pkx>l
z?AFhxXK?<rk|Ysjx@%38w|*qz_VP2~4tp7m(|6Qwh&y9)bfzu&Gw+%^cwEZB0`2W!
zzcwE4rbI|z6CUPBpShQKsQ<B}-WbNr+?e7GZUq|HTfd6S4QJK}c0Yh?2@JK?3b@t+
zxW@fLWZcKtYn(6GmvkKG3ti4r*KdK>)$u2)<4^e+3<_fqw1#7_k0*BSIO-Hv`(dJw
zJwuZ>_3E{KyO(wArK3O8Yb0D7H%XI9{TW&9-pw7!rFk3u3|y`NN=^!x066_6H`nxL
zz5^LA@8Z{u$>0ye>6mZtAf6(APNx2WY^4x=nG_WAMI5VaCHw_(h3M}A$f~{3Cr6dX
z<9RGk<J<u{#dhST7amMY&q>*6JaHgfGagJ3$1Z{wPN)|=PQ0RpgE?svjR~bHY^SBX
z=)FKA$W6z`or0s3(Jx7#be&(}KlbDf4?(Ii$oasDP+i%N{)MdpcfEVw1sd!J|EqxN
zqs1y_a|>AyUD!eO>FD!lFg|KQj_A->uH`bjDd&}4Uf$|>d2q<sx8ZXhj64X^`Z>2X
zz#dE?TEQ>OT!xeMoF!d<cnB<E_L>oAeoe;cH~i2=$0+Dv-m$j6^OA1g`7P1YcbiVa
zSk^j)cY2qDkZ*OF8&wH#Mad8j`*wPVnKzp42%bCIHqu<07xp#l&T`T9glTqoaebjJ
zow%HJDztQE#EdRpGV<3gRo)4mE;8D9A;7&>R%n~P{AqXm?fLN_)dk#~S@6OJ739JV
z`+Y3GbWW`=8z6gCm!B^XKRMJ;=0$?&dis3G7m?$4tK22pzjR}U>D$i8`l3dXSz3?n
zSjgi#ncbo0@7%<E=C!2`+1+FQPQ9t@wWSz2Kx9{F=h%C1QkWmv9oh;WYQcx0iK)U5
zrySWvH=2Rb?RUN^^{6Cw#yQ*4w3ppS?I;VP-Bi==C8ORAs{LHTsuhZbQO$wR&8E%e
zyEntRV;z>2`@KjkIr2Q*R~vr4-BNTF4Wf6a@NZ3C`W`UGac0l>ppz>UB9<WQG(clj
z<Dk53@>ve#Adp#K2a^L{TY5*qMMS@&d*lno>6j)JH~k8Bqb!}DjebuOE|O#?QCR4i
zI$1NB^9^&|4|fTzE~}dse{l~_@fjT=!*s?`3qQO9xM>|I4$_!(CC@*CTrcPI(qXu+
zlP{Y=w%HxAR!uIIdk*QdDPgHvISOKAyg2hu;7a=C8uGtZ<@(`z(2_{%no9iVREdvK
ziSHrJ5qQuuHHwid_Khx+D`-zrm27_g7x6*o8?<-!I%}s>h}4N3JC@|?&1L=)Puh4j
zcEv;V2rs^kKt<^KE0dra3k&Mn<F&7_y0RjOCx&@-RW+#VA5wMwKgZw(%8Xn02DPq@
z!CdB_sE7W%_LU&@?M}`|sy*=U(ka8WpsE<3T=%zkbzM(2Z|mP6Eczoq6MXSN?9s^M
zGu4dCpCkkESPQzVgNQxOf}KHpf(1K+_+$(IHpzRM1%I6c5e{Jfrz9xl(2stf1f?AM
zQAYqAPcS97USMsQT#=6kE*+f#_BMFbJrEk7IQ^;GD#&~ke!X7($`Wf6o6nUw|DW)e
zf=aISQg(C0!<kU@p6PnrK9BcNkHBLB`a0gvzI(8j`)H$gBjX>$eJ3uCUWjFVb0lPX
z1UucZ^&evDfAYiO%HA<Zs3%&9`UXkuQvU*(3gI#22J!)LF)C5%#FIqG=caFP@^>Rh
z?zQ^sI{?TUA+kf;QX&uHTNX@&+h9bh#asU+GX9&NWD;kAR-FE3BEL@U;QT2Kun^}V
zUK@OW3*xUaG;2%4BVn8${ScH7`gYG$irCiwh@}4&NvfBxd%!YpuzLMWG<dZ`!Wr_b
zQtPRarX;Qz4Q)gex|L3&+^?24X5w|a<_*>!$sCYOb&~nvi7+}X*coQlXKp5s{=D`x
zY@EFt`8jW#F$OLnugS*NpH-uMs*&$LSg-{8d9lt9Pa=))zH*@8Mhkw>gfT(a_3g6=
zNTm3Rv$HJChm$l<BFIM_YpcS?fYfVi+3!k;)}kUU&IP_oSz8t!Wv!r3D?CCfrw@of
z_Zfd|4omp+F7f9SN>5KRjz9U#{l*>fN0tFUDs!%KiZw7NJkK@2X3-Yq0Q*rdzYCdn
zDTs}EUi(rqwEiL%qTCiI;LGET1<xj1N)*|*7{tWKTkMh~)-ka!2|D><-*QmmQ%P)X
zn$27e&CpFh(03c!Y#pGzOjd&M38a}^!n<c)Tc(ZhiB^C<4xyu;?mMP*#&M3bU!%@g
za5>5zTEc_eQrXF5YmJ;88|8x>(hr_MnQyW(^$7_(OX}5Dh8t)Zv~EEDY9~9mKbDZq
zTC5}SM(Y_2(jre{u5R_fnaC4+oJ`vc-ZvZGVd3>^E5f6}sWEdDXIgX}O=_g9ip$7H
zJ}7J*y~?S-njj-hTZwqcl3@DdyulQGRrK6QeJ5*P^bP|0DyF_YF}2jQ&r;CAqYn_~
zzzAceSMS@Je#nU%CHK9o!(lUVuPP9z0@*Rrad)n@yQz=r0I~Y`ZW<+PSZVpJ4Unw+
z21dU}#Mi+aYJg<jS1^>u2FSf$tv_U0)bLlhy3+Jlk<N|Ju6S^A&(EN5W!_@^v+rVf
z?Q7L*yDanCm#J5FGbW?rJsK5H26H?rSUzcT);xn2mU$~UJ$>z#G2zjG3%mX09h!1t
zNL~yveF;;C6<GqWnGADX&C`!Kl0@g3EO0X{?`(j>kBSMX+5z<el4|2e{rJMuEnOg>
zMuHnB_Ms0;bD+|QmyRdBnFFA|7y8-H8T3YcG!_#9D$b0wSyOALf1c(c>psTQZ$QPA
zN(Y$FLq^<UJba&c$ciB0;rkOF_GUiN;UOap9^SD~?)uRi0i|cSf*4usFjC*$P`SoP
zdFC<lMPxQcuI_N{#SX+68tcIB>cEzDU@rsaxchQ^F?U}fV8Y${M|x=&x~Nwh4v$f1
z?Ctib>`LpHt&+&?6S<C$Is0zz1IEW6YhLH7=%>IN&bM7H>fNh~Rj23bz4t4LbltjN
zsFoNi&7<pkG8y!svOmRLdG+MWvm4c{MIM$x_W6Yu{SB^`0?NmF!Cd*7o9#h{bzlij
z#p{u}oupG<J^Ezrbu%x<$N2$*yg#Y~u9N*aJK5@6t?N);TY}JCO0~kXsj48}_NS1G
z_px-g+?}pnpH0qj59Xsc!MBR3J~0+=J3`m9<c|nRml2Nv&(1Ty9Ugk&G6*OJE4FN0
zCW?9Tssm4!NBr#LVV>6~+U;x172Fj(D|rq~JvID|vElk?eT2_5udJ`Cudde$^;)rB
zE7fa#^;*Ab>_ue?bmuS0AbEmnn|X)zi{ukbC!y)SlhT=GS&V1-e9n<@$jjUNxF*&y
z!`p(0llRZ)^pmcTkA)UZRGfaV>woSZ8n7~s&s6_I(j7@Tl&o@QDJLJDON2iXOV)h&
z%ns@Sh>iyNnTS!d7%onK%4{X-Jn?$&95Nsvo(i&s>$!7@ir1x|M_TG-5gXm3t|IA`
z9YXA~PRX{k`-I6(Fr(EnJ<MN!x$@#Ar>(x6zA3uir8f4%^BrBxrbgEg6-idM=XL3F
zrJ#FVXQfD+b~Yj@;9gs~lTwz00p-h&UZt5z25UFbYAt<1hjvXXY~Qu62I6SadJyqR
z8|)%ua*?CI{Ve((=Qg*JaGX<8Z>9fpvBI;JkIjV^C1VW{wxd+S#YqV+*wL|E8OKrv
za}<4B=!(HAL&sE7Q6s(w)HHoXZ*x=6Vss5lqUah@TFbgr(?1RPIH@CNrK84at(K5d
zT@*T#D5N~Cz2!1(mi=qM>mhyf>;Xu5j^E+oEg`+2B5Lc-lI8SLX3-4OYeMg8Y>8P-
zW<jntcELALb%y%=Xo(<vNbewA?B`75#Xfqk7{%H_m7;>0>Wsqt6!)y_rM(pamo#)=
z-m%DJ!KGJ%exkFzNoB+YDxtby>B=yDB{cc9C0no^WHMts&D2xHpFDnT<rXvFN{S>;
zql(0OC*(Dj2U*>y)D!KXm_`oOrj5t?g{SWZ%`2}BBePRWsMBtSWb{7Oug<$)Iu!wM
zr*ityO@=`9q7u!||JEe`MM?e!r<G3!8eIXGh7T=}|AmecKf2Wroz~&RKPl540P82u
zJ^=~rg;n~FeV|u;%(Hj*n9iAlf)<tHu7GQHx<+3TMEe-qt}NcC2)BWTs|5BpmKN6^
zo*xsd)(@E5(>%w8o2NHs&6jPSY;Mpz#@u4_jK*g3RpUHE&4XOHxw7HXj5dc1Qg1qw
zY@=Cj9F)U|WjFMj$Wh=X$_<~U8q!I($aP)v7<NKm36t5pZNn^kV@#ba?iZTyUSaj_
z^XzzkXpwe=-;ai25*A%PTcHjKVzrye$d8f_oriJ11LhR{=vpZhyk18SC-j^+beuxh
zJPq13SaR-Tfh@O}Lpv|n_T?*U$+*li?j)nuV~iQS1ZU%d`v;9G(&d;RjFf_N5Idv_
z)zJ&K=251>tX^9k;cz{+3DmKoQ@@p{^8)MiPwS^)g%L~qNaC(zBl9!QMIZU#yuM(s
zbMdmt^7V%WkC`Sqs4aEl=jHH0&!GVItjGT&9_*f(nYyJMbzfh(4M+iio~8I%x!NQ3
z;+a8hWAn0^{|4l5KO1gQ<7YvX8Es0r<?E8&uAEi7?mNB0t1Y)=Or(#cVWzUR0qj6!
z2LmXrBiyda8PD>e$zR`e3^7$ju-#zEOjh{Yv1xd0+SNu~Bo<zih`!y+%}12rVE7!e
zK|)bU^-0$k!4F=xX6No&#c0WIn2GA5W@=f4M!!p*thv{bKbb=`E_*YRaO*>~1(!)X
zr0zXEYjLz}N@m~UCA6__6;>@Pyuzo~kxvk1cM-wGg}Lw+5)S4E^7gv%q`fw+_xc(Y
z;%=T7mlZsDw>UTb;r#9B;yrA#IJdXLr2}UL<$}XqWIwYoQ0(HM$&0T6Fuy=9MY3ca
zC<iDk>s?!_n_p9=$iYInP?&yG+`TJ<+SVXb=`O2OxkL(XK*&%37K4&ibFfb-ddq!x
zh3}=><vvpMmHP_32`-)bP`c8GZG8S5(Fc!EG*UbwZ(?&(!@KqW^zZ6-(+JjftbwOA
zvbwz|>uzPYe&Xho<&-g^GUDN32LW8Ks%o=;5MDSL;^c;|Zn<7PgnY6^pNsnuqwyMO
zwBf5ybdpEcv^evHGfD)}2n<WEaluxw%8P9pHngb<YxQC{msG{2pZ<P*SNwkFlK4&5
zY`9AV=*H3K8YQCRROmpSm6v+qWfXkP?Hm`v;*s~3hdQH$Kt%v*$_wr=BGsv7uoz%f
zlYhgL7zT#Sm`Kv;Uz=?8buYdBElxx7j_A6B<8tp4rez+XOQB*}58S#D8auRlew;Ae
zZKT6P-`?T;SgH*s*XZ5RlikeBy>s)VIzwbuS@(OT6dQ$`O>S4TO1!~5*;IRZnH*zL
zYmDw3=~g?-G)rj3p_K&-aeLWv0(S+^I-cWr)Yy!q%ndwyc#zAs;+nz2$z`4QJ(E!;
z!QWH;hMR(bp+xp{0#_;UfVGEz-!=u_9tY^!J)sl{D8CPzOwZ+=D2-ifIz_Qh(-XI-
ze;@0Ep74WlrmGcrcN}1a(i6Tb4zv{bkOFSmm0s<L|KPN{=^pLf$86kSN)N4>k6WKV
z4WyGRofs{3WM<BZOf@_gjN-`Dw<O@MD(-3DWMgyx<|}x$(_NHTdx{&s+&*J1=!T=y
zaYiXyb`n2)9&ya;4;t5O&(#l~uk@x19TunKn-S4fbVbVNbvq47j`0*X1KpNDukJ#F
z`UiNq%p$znnM|s9!<#|s$H~3gS$?Dp2DLGg&5U)*VmQfk!{Lcy_yV%UrW+N>8F}$;
zhP0o6eulx7peZsyq^#(BjT$j-v=DiP0_x~VOkk1$9G=<iKM4+|qqCGuT#ET2`(V}0
zlofL@MYPcmY_+3ra7*rD))1q-oE?2~sdM26)In@Ko(PSf68>7#i1XWT1BJHelB-_y
z-d@qk@ObaKCcrIVjhCWI;P%bj{kfmEHoJ`kDLn4V9@EgAbaiWw+bRDuD&NY*IBc$!
zS#8=ClA@;)sZ3@C@t}KgkiB1S_bS>|LA1NM*6fzsg)7!bGVzMjcA=1cgJ}}{0M#~q
zT-_;IY6}Ebe0)(H@}2ZCK3#z<`K+}=`x_7x?jhPYuf5YtkFRd{I(5-Iz1!=0pZ8V^
z)td#q&r6;RD#+6j9sPy&H^ET5wAtr5uOTb69|F33t$^|w#|!Omb%654z;Abe@);21
z7lB-x-R&O$#DEt2!WTg*(HAS411@dUJ<1{8c`ZBs9|DFbgUfGJk?#`nabMJ4%f+ju
z=1a=FkjOqS-~JA<_Cl|YxfQ2!_F`?LoZqR4eU+1tO7<eW>*o3PcU6FO`F#6(@~dBi
z=lcn~KH>SXU}f2~6R_5a2Y{S~fdv8234EzH`w%N6-&ROEwxtvn1B$H9*cG*ee=ccR
zy(+}^y$g*KnsDRbU>fLi)(;ico*?FSEfz6(7~o(4x(L`_`jkz;w{N6IuMu-+eO~Lm
z&*Qb;qtIG*(0gca)|YQor0eI0fdB6d|MlQ6VwCg45S-hOH4g3+l*@bwHHtxQ-H*v;
z{cf>*^+(Hhe|+|JxYZ!p`0Sf{xL`}w9-n0g!+GaarTT0(+Q>?DDwp-_<E=33Q(C|4
zd|$VMojL@W|AnT{QwP=dOI-KrYRgxcj1|0Q&7o{z<_&l%&OCq(z>mHFD<%){?RZ&*
zzZS#2sLv?{<Mv@7`*iNIp0D?7=0dkEMw3t*P4Q#L<XBmKlEmTt;G7)Rb<Jv*@k;LA
z`Q?0+M6<_JTX&5V8Wgv4bm&m%fmCR5EM8mfFgfU4WbTVQS^U;3@b4H!|9T#LpjPGK
zn3CBs7<=z{b+#_Ih~f$DrN$F;(V=+ybTdk}aU^yS?QA<nuqt^eRkaV@YE2R%>Wdn)
zL2r03<qYQbu1U-!y1eK!xrmv&IQ6!@#T<5-=s*HL9IBV?ZqJ@&^dWAe-h8duOEaJF
zhP2EsP95ag5x}Vt&yE024S040aEcl6d+55AeLcK^T(!CCg*}<f7uB}L>|&}lroj}g
z)6e1jn9Yz62FC5N(o3c6v|HBdP+u%cCr*kHM@ouaUuoAaas4`Xbd<ZmbF+uTNn=iF
z1`$W6)S=Shb?oI~h%JsP$<f^;?<GlY_M|T0-cFtoC4FKy<^{yeo<%s2*)z5SJM{g9
z_;V&6X=Eonh37HyZ*;|u{TzjH-ICla=E#`3#)jPNO&#oPMbEaoakbp+o!wA*zhZN<
z_as^S@~#JPlS|AzzWOI!{|w4!td$*$g77VLj=CG$#aT85uMRn<!!@C@w*|S`&m{<L
z$OHH`fG*Tn>Y_|8^=4iN{x5^SYT}|8z7_nKK63Oi360r5Bt<~sjdVJV>3sEeX|3ax
zT^xBUzB;-Oxb^W(u8-5Xm2~Rpa_{Uw5VLA_q~pVc=-6jHe*-us%anIC9y%7wV3nNi
z{cq-`$3;66EA3Q2n(ZL2@AK_A>}0{Yci7Fq?cH><DK67^GnJfEz;TsJZ?fUr#8`RW
zE>A}{`U<>ZpYBjzha`OvalEfs@@;y{h3_Eg{w){3Xrc7cF(jY<Y}}Tw%w#fu55AE^
zZgBUN$&F*o9iDxnxhrPRky}i}ixnpEa-qOl$Zg`*pA#KLSW+m0F9$nOlJ#@>yD@@@
zGA8@14s#SI2Wb%#FhwT)xPRF-L0bKN(AI&&(+|Yone=TF>8sG$dKv8XLlzqd49Vc=
zSg_4*gN#T(?O+^$s!iG;w?~Vg*_Sd2hOCf^mcZ>*xCE5+5EG50w2>M(ec;1}++??;
zXICoLPn+FNK{^0c<mHUr5)t)juYH5q`b=#1n$#6QiB~9z+BPpLN=IEiFX~z8D4jv*
zplB&@a$J;-FhtK6<kS?zx9hPwIh3eAVhsf>{1DtXBWwrDb;6><Z%Gz+KrpF-oiQ|h
ze}X>pwS@Qjri$VEPnj0Q@(HY9C~_RN$B0*~-y2W%cJ1?=xZ!9V153Hm-8-p2-wQtn
zQJT5$fUB{d67z3|sOKf8&yqsB4kxQk{5i(3?%%kK(A-V<ZJu}vnE%1(W7k6TeU(ge
zY=i5YFJG6RjRJO7zl3*k026F`DdF%T#jqu=RNs_;8GfIOqrC823L+-#)3uB{FLMHA
zd|eel`4VQ<OMg!yuPxN2TzDKJd1{z(u!PPYM>>lTo$UAA$e|)T-{^2_l3wunm9xCs
z1<~>JC|$6n*F6}k(Fuh8@GF#H#^w_Vy74~%9m=O=*_VlyF~vVM*nCzjJKMx}#z~P2
z=-bA!_VZv?M1L*Tp0;iYyW|RU*gy`Iurv;6Tjv7jEO~SiMNhaWuPv4zI=mmw@M};q
zc~{&4PMv)t&B+&8$+>)Ak7o3}jRj@?UkFbo@01SOiubFi)90x3P_fa^ca5!i!{cGN
zS8Ie1iV437>fe}$@}T`_^zF`_RJC=}$=AHor+9_y_F1e|;}!pnayN0c-|61z_N@(C
zy|F0{ZE?{?lb`u7XnN3Sn)xx_{fgs~?1^SQ$K6TAT<zTE(K8=ZDo10?_kqmv@I(rj
zdCekGwS6v*@v|V?Vnx-Pt8=yU)~#JwK<&?lrE%=Sh^m7h%m-xc9R?kEG*13uAd|N^
zuXdh6CK}AHY2F^YjF$kkgs}POI^1s<AJS=>%lD%aCJ0gOT!$4geMA!ACVXtRU!);*
z-l>u2s7q3KLf3>B{sZxDH*)&(o%ooJtiIQw?>%5Mh$|A`qvY~A+VpMAg~Ne%I=6WM
z%xkWk&!cp8roZU&F;Z;6Y>D0?Nhf<sjdEEUV-I2sp@|ID{ni(t6w6RGvMPOtkkgwE
zB<<rxBNsb|KL$Lt)Ys1KkMM>+P$tYM-?ik%+t-qw6}I-OzXx<##&1hRq3>>lO_QEi
zhl|$*xx4!EwLiOE#tK<b2vNOB!6vgVxm=cMobK73miSKg?9MWLM>`+;rrH6BuOQ_f
zdlw$)-M72|9(I3TOvMt-hr*`!7M5k4l?Bmuz31viN6w%XW5<?6g+v6lk?7gQmF!jN
zoQAFj9L{?-4@o}|Zz8hA*L8#MVO9^)F`MA)Ro!dNj&O{1oK0D8Q{C5X@oEJ^iNM@s
zW7D1WV~vmf#z|`IDc`3c>`qy`x*zpO-+9i5KLqL|ILG>qGlKKBLwt};o6;P)@NhFz
zB%iL*cMZs?JP9|n3i_75<L()~&rq3m3b-qrX`$s_bP^~QUR)bY|Em5DzpYuu^_@P?
z?x40$450P77{*o*?xjqto0mBfzF?@JoZU37({^(93Kl115J*@G_1n3&I5vmr4XEjF
z`{J!{-yZrNII=^V=vqGkx$Qdm#;)k)!fOzJ|H+M8eeV|Tz}=dg)8v*7HdX5nr)%O>
z8EC!OT{%72y&=qz=c)w?28%>6^-+6|;!4Nxq!pWzrx8>Qe+G5&yh1w9_6Av}mpxT|
z91UG_8qH!eP{FS~%}rQ--nnu0r7v(OGcN09+#eVZb>IY>z(C+vdaWqG)`(|3dy#;N
zUBh~68J3ZUp~R;*x(U&)UA4A$F<B;J&%IjF=MEtG;V;PH^@hL1nOxz|qV_r+b%M7E
zeh$!SPihm-zSE6`i*|LdBScd)1B;#@H_UC_2L{`hF&K@5^<eue<(Ems-gtD-7NWDb
z16;kCChKMlYT&Z1LpWrg*Hgf@En~`(4cT}XHh?P>lKENc8Nq)Mk1UAG>prhZTkY{p
z#6HiqFd5!2QYroZ?7y+Pj4S5X&ULByI9k77n{)wF@^caU7s2#z{n~jQM5u9|lM<bb
zGE$sT&Q{javT=4UT(-krcH5hHg@n@C0#h``SzINBmV5PKFZCY*<6@GLo438Z={I&F
z>h%ve);r;3ikLNpy@}Pe;rLr8(b1}Wma%;c%FqzX%`x84ocxTX-%wipeit?M{}K1*
zadH(^8*tCP-M4#sW|EoAq-QcordwdbrF$mJ3`;;ZqaX%_usRczgop@Hb8#BfmrjoX
zcLWr7qoRVM;wvgD?)#34f{Kb7k@t1q_dR^i^PIZ3Z}&{_{e9mb-~4{lRdwprsZ(`p
zIaPJ))Q~q^e<b9XaX&f*j&NKugJ7FbMC><u6p&!fZ!;Wg6Q`l(_whRl%f%P*fRMsL
zbSf|}$L0|A0#-tENB0jf2^J^&^3gLPKxcI|0xBZ2#h|qAi}melB5H4^f;I$~PTCvN
zw8LMcIQX=b^nLA4lQ74!cEVqFga_Am$xiBhq<i_zU<`c=d;YXgT=im3d!12WK`kYA
zQJs8$HR_R1UgAx)-?1*$o?i`K9|f9z_&2~{&^s6Y9v+AZSQ`I{Xd15l=+USUuR$7E
zBXEx>{3l}l=rQotXTb$0*na@jd^QFrKl~%9K=T`ii@<;dUgoKR9*Q}BbUJ|JlffEM
zkB&upKiUEqmI!!e37#;6ISqHXJp=c7(V2`!!_zJn;Ab%m_}OXrm=~Rcu;d3w)cW%y
z=sRLn3|<}!Pd5B5STRG?el)X46lZqqWX>{bMO!LA+6rJDwMGOnteW~OC<1UEQ^49^
z_-6|b5czP-53mL6^PO(}!D#+Z5kKKx{lHM7jFxtp&#F3lJb>XZNyk$aPOKmTD>M8H
zpq?T8iU{_lZ}qIwSEaD#ZsT%66hl-;5wyrtHN$<)ZQ$ldY)^i4K7iShzELqSslq-3
zS`>wgzNJ`*vIlb1fYE1+6nm{6C1NC9UsA?kZeIb%T)zPN_Xl#-jO|xWWT3)QU<F*{
zMca@cj<dqQ1BdGFtT^=iGu_w5{sX_ZZCIk6`ceeNh&eF-BDO$0-m#q&FkGk|`<We}
zdq3N;wl1M;0WslUAkO`(d~^Yj^V-j}jp%%|1CZzm{P{S(<#;~2kbcaP^goe)NS=^1
z)#4=&1kptR$FjmE<R@97g}_<!5X_pqvyJ<!PXe}y4c5JL*#hSBw9N1g2nn2|S7Kh_
zOn}*e-$MOGZM0|s)e@RjxE}@T?}|T#Jql$#Q!h(Ffl&`cfyTwi+<hOu6V=oDAdms=
zd(<*(XYG4z_M%IG??pTD8$B66Y#)Ja&;Kv$H0(kX(Ae+?R;gON2M`96193a(i>7Zh
zp8}fwUD~z4h|QtI81`XLzy~31>5Tj36D`DDobi~pwMvz&2a35wpIDL~kGQ+Da$Cf0
z9Vpm>B+TVvZwMX@9ZR81zy|AIej+xi@SMaX_OAE9t1}0R;20Jmf~%ryeb7eQg`}>|
zxI-efE8KmSo(EO7g4#hab&JOW_C}W`sP#L5YKG4tDszLAg6p?2GV@d9v9I6i3aENl
z_aDn#bwZc=0^2sg8SGO-riky~jX+s+uZ;tG(X({}&u0%~KT(PC%{cnGe!@Nt<$%nO
z`OQ>poyTtH%!F&tPb1T%@Bvf`Oy2XIHndXK7alZ!144t@xX!4aHlniT+Io5Fb%h@l
z27^@5*ezVyj>{Z&k+rKSFPZ~+pO2<9p7PUE;o5v7(Me6I8<}J9<n2<^N>1h(${=A5
z(Wac`<{7Op{74s0@f4HkHfO^u@Ko#ZWlKy*1;E4`<-l{1_fJ?i5&(-qqC2_)5lit8
zGt|C>!7va@#>cehqoH>QhK5nEqkLDibZc{&mxIht`7OB)&4Y>^igCl!j#_L0@?~+s
z#vWhBG&J6zb9@1q(HA-P*jBcgD#`2U43eHUU$495+OtvJJ^AY<P#A8<mhvU67ihT!
zr->TI78$u%2mg88;u7coHg2))ZbW&1raD#IwI<9x>s8P_vfHB+onRY=U#AO0qp2a;
z(<R@-Je|$F)XQXkP8zY)Tsh+5i2~yzk--J{hv=q%*iDe4&-39zbhZcShk$^KZrsU|
zwX=;Az^3BjWmH@|YvXDJV@(#*V6o<6HpczSuEtP+V{OUwF2-bl%dSHVE=i_iu#1o8
zdf6_-$ar!(PA^*cm%Wj3IWF+IFmM$0JcWN5R<ck_#K~W@4i#f@45ctPA_6&J-^Clu
z<1wM==oDrf|9bwysXF3<Yg-9kg(`sBUcr_R{y=vXew2qV3)w~lRrcKG#Ijm#pg6G1
zv<3$UdX^1xoDAT+5Kih<lVup?mJKY!Lqsn_W1G4IWKG+1u-6;tO_$<UeDT3Pz$icr
zE*a=E&(hN1P;E7oWCoTD3~9Mxbzp+T5XcV=3=J%?MZ|Xo`am8X*Bk5~=+`9%XsT@I
zhz0@%kPHn!FA#^4hg^z*fr03w0H#tHK+-%Sl|mwxznfBP+Je8NHk+GIL#uLgGZ(eS
zZn1M3W;5@chJTo#>$%4EY1oaIrOet#*m%kD8)J9o7wS*EuV7PcFUr8FHkElim9{eV
zbx7hS(uk)bk)}~66F{?xAkLOJV7D8fSa@@Mj7NRkwu*Re;Xa4Wfx4`j%MWJvoo+KB
z<_w;f;QTLF8!uowOsOzi%G8t?PZ)M{^DdHUO^2{H6wev;%#-f5I^cM)1Mpuabr5SN
z#dkIWT>;64Jz!n4SPve=gddVB9UV-rl!UsVaXITAZh`te&d1E}Q5ZS+S6)`X4CDED
zOH3H%{RIHf6HRUyae#|rzzPSzyk;1q4!{9gqQ*)Gz<6PRRSp1EI|HnCfQw_mm;)Rf
z17N1k7`Zfo;2w!s!-Q{CVEfx3*l2f<UI(cskUj@FKY=W9kSh~N$w77|khs)WC6Kt-
zeF?-$wTI$4&XyY2(1k*6Qyu`WjREoifRV^B<k{sluos$z$tt<B_<{vJb}~ecaUv%V
zQe*HjfII+P9|Pop$`8q|E`?9R@Krq*`_C5kL)3E6RGu-?a0k-xVn`z$NF$3Ot>{2n
zu^7^52h!+bNGm&#RxXCLssm}&Vo0kykXEOWj<<R#kGP83>M9C=MbXBLSPN||jkYPK
zhCA}A_wy5S<^D8coNc8u+e%xuF}(_w3GMU%Nz*&oGOp}FFAkr`FTTU&ERY|fzq*ee
zqh`?QJ5UK)6g9gL6`(~?`xl}Dv?yw2Au2#=)XlC~fM#4xT@;r~uyh@4O(BC$SH`OB
z>FET5KS(0)0Es-X)#^7%6=F}bvkC!9mmoncEG#TQi=yHp=mM(Q1E5wGqE^~aDWg6n
zlgWGv^NEd0w(E?8R*p<km$Si1`y;i$0$BKKI2v}t(PJ>PXfGwOZIqz;(qvzabYN$a
z;~EW2a>#<c$(O+4Av;r2m4IO{JOiQV4HO`MVGLMyE?UE#orze!?jaDe5-BMcl^kB*
zOzIq7<w19P3jpCGv4r7T5angLSHQ(UhjKG^d~)fU_!+7u0ReVbr9XS%bT@aVBS1I!
zPKF2;XAgef0l4^)=Ugwm5Ct{eUYcMsuE-P5^nOL2QW(Y=?&jcuEIr{F;0?#d+d-1k
z0o~~7tg=#dE~#|pgGzrZom`VR806!fPDKtkZy~fJNl8$od>bQeO}Z64VMh=3L?CXR
z%f*qyHWUI^C>zWr7DLdTn4330gu|ur$>BBggYfJRUIYDz`ZHLDJ&cJSg;Jw9q!?81
z@ET+WS2jeG=NU!?57#~snbe<&gwbXsSp&nS;(HAgU9RD)Ed1Q>L}I$P(mmG?_h2|f
z?Gucm2#VNuIjna(tQo^17+8V=>%EL+(~$>iG;}3fGKbrg)(fxH_j^A=;i;Y9@7MZ%
zEe!j9|7G8gNjTv;3b&I&N4sPjP`gaww6#tqO40bh|A7W^+Gr4<cEsYb9jTcAX8$Qs
zDMvvbZlqesdw`0XVw6{E##P~(x}d`bZ8fSCE>gY^DQ#c<bd-^QUV|{UDaCnV0~MRJ
zrEoW^c{iiH`BL1Vma9R%jt%MxH7LeJkH%-H-fCZn4M~L1kc<Wz(p79o4K}35upw~|
z&(k~e<O8kg*=$W#fPD{N<LRY6zV^c}#tW`Rufd8Zh;Gyri1kPiT?1Lo?91SE8q-Wa
zspE93KlAX5QQY(K&KfqDa9oGf^=ILy`9Y-Ae*D9LcNp4EyFRhkAc7sOVqbR;l5o!i
zCq6fU5SVI32ho*?b^AHK&TBcYlO7czP0Pt|9o)IZL39;~veS_kHeyJIjo_m!RIFUa
zKuftyQL%EFMa9ZxisEvLDrpuKE0-xMRxVQ@RxVSZO}Q+Aw3N#dP{JG+cnE~o;o~MM
zW<qOIF%txb`pI4w4*c5m%B-kbE?$bEdrdHRJ5C1dFcAZFi(*UlESURng3_*rb}JN)
zpM;GK&-Bok*htJlq5M)Uf^kDr2SL^15T}`s0VO=m4J7g0^c#)2jIy5lO)!QblK|<b
z@v1+|PS*yglW~O@gBnf@!gnx|y3BTW{I{Uxj<$v0gKaR?P*R>&f!!flE9TC)oOaHa
zXx=@Z18AE99>&e^znL@2goA?vm5EVpWg<Xj;VzGrWi;M4#9ZykM$DZ_8PI<&B%(eQ
zI3OeLq&`&zPXr38073?-VjP1R2Y9fI=S|k|c>2rB?K5C#|1@~ez%LH~pCAD4C!LGF
zq%}F$#27;K2ea#dPT<Khy4sW};Xy7h<VZR(VJEuY{75`@4QuRr1II4xs9-W=OoY*}
z7V9JA^tOt9d(p<&NH?a5U1JW*-fjZD`4#Py-$=^O5oN|iTSysZrLE~O2}QHUXW=2!
zbfecHQcN4=5c7S2x9b%-J~@a-{dN=2#h%C5{a%B$VQR$mML$Oe99|0<fgxQ+H2qEo
zxDsQZzH6fONjx3YvM(z@97;AAjnF!JF$5DF{S=fnK0X{Z4hUqUqxt=w4Yt|R8GzoL
zKGX2p{M<LuT5Gwv@4&HdsK+a%-acLoj{!D&kM_9ub-A&{D=_@(D@x&$Sv;<XE$oL+
z0idZS5hD$EAYnbc5NV_X3G3k&62?VR91SmFZfCmOu+ZI^Wad!D+EK8aY@s-Qu$UB?
zm}xF0TS!NGc0e6+gPC)$FB`;cym8E9Q6-e$u<3z=kmXIbdra1>d|V^uhi!h6eyif}
zn*^}dyb6d^>yTbxOdb|VINy;z1S0(zePtgqk6e<6ALsE&<&h$pYx3(apnR?e`{2WC
zbG4v6SS^oL>&KB-oZWvDJLZtpJ_kA&bF#b{nS|HyjQ)Enw)i4{Ikq1M&K7G!dRwp<
z?8V`fc!J9p?P#BI>VK-Q#0?&jR$cg6VK`8$Ueq>^cC`H=!?jxUOR72StF>h{yGT}O
ziFdOQlsx5WDJCe0_;1AV@&JHdZ3*N7;9D_39sur%0rKpnkx9N5>6I_CH#3(vnH1lg
z3E&6~>AoGOlLvtB!~l5!fD)JGEe`<q#sGQNP#Kb0v5S2#j*@2+FUyLHk{;M3#`j|k
zc>wr943Ot!uRNA89;57wQRD&DVMAHo6aYkiNDQ{gF4>6v9lyPRDFqQ8p+WE=s>UZ?
z_Q=~HWfRbC-rPP6CBC-NO&|YxXk-+sviVr3!bekPYI4s<Gz)bfvv;B}(U+ys6-nMa
z>P++9cgbl>p~4i)Y1C5b?@ElsLOBiZJY%8Plh?@{nsVky{6l2SY<xa`EJvrV)sHy>
zFJU4PPA}0z{cwz;k|}VxfUlXvw7G5oPG4}@%Rt8LZ>;6kHLb(TM#L2Ih4vF2)9=GM
zucMOK<S-NOUu>JVF9KhGP@fCS$lor(c@YiwYx0P$W`S@Xb~FqE$e6a7&vxdQ(9(;O
zqutRGv?OO=S0Gs2-onOZYVMH?Wq+I(HaPyUFJe%_(I1aMC#l!cIy;SCjSO*`%EN-_
zJj7Gq5H;(EyHNwuFO0{r>6i|_-QlTkXK7cfI7%y{(kc$fJcQM(@45l$p9Vf^$c|Q^
zv*AHW6_|-!r7>?rdidIt-*ER%ybR~NKO#Nu+Z>Mb>1UxXpb<qGHC;Q)p-~|af5Qp<
z(2|smW6>U@arbTf%tKS<p&;sRJ-E7Pl?O{9h;aQ~fvjW4<vIkETjiQ_<)Y=zY&ed%
z_<keiUHh~LEY~gI<4-Er##g|LqP=_ZqCGvYlNdXXnZDRU6C<WzrV~<Fs-f`vPNbhc
z#Uxrgq_K)PA|G+F;p=z$Pzz1s<XFcxs3tqJu_K#sO?%y8wOc%48x+ptc7=tm-e<=X
zu84v@m)x~fvYDhlDU?FJ)Whu1in|<mX1s>qh3Yt_-!k=Wn66YCc`9h~&)JOA`Ji~0
zT5Plh4HRa$WiG~!5yL9KgBP8_rVVxGGabfG&@d}6;bDd$0|iK1R1AN^kTJCFAr(kp
zzvN#a+6%$aKYqo4$qHwIH_e$koRoa)x4cY?);VsvlYv>nQ?&V$lDOu`lTJIh{OT~K
zYaKB9`sJ=1$HHq=8{~MJn!FRfuZobAX6N6`(~C}b#XeVs<8N3~u}u#a#eS<|_!}Oo
zm<2s&&~xL0>~?cpp?;-_sn#j1A~2NyD4uKN+3banNB&+o&B{U>F49~IS0riB*0~cg
zXjt00LwWJ>CB%e)OCk|hqZD7=D&-0YFI=5KHrauJ2onmiU>h=7pWGkwAWy=>aSM59
zfws<}eSilhY3G5E|I7oiymHxi*y<KgZhx(Ol7Wv0uP};4k+CQ#ka{fJyX-@jmxbEt
zcmbCrbEu+AhfDPrB0v*gfb0TfWH=3(2V_MX<OP6?wn1JF$jUaz4S=j_gTS=JrK{T@
zFavVwSR3TCfRwx2Kz9>VYy<5hsHY9|D}s94K>r}9uMJcv0JNm7yd{Eg={r>ghZEFZ
z2b&0LuY@xRT9rz;=U`Sg`^;uk^`9}GT630}O0(y{9UW}t;7Y_q!9)jc^59AWOsL6f
zNWSqRd<7Hc^NnlxS-2{$+Sqgq=>7$C{Sx%4*hf;N*-@auLqZe7fyjgnwA+cIZ=o}(
zV1LCtnVigprvOiWTX*@<wa5$EpwD+@9^u-G*H{K@Zl=+txi@T3!3dE+bfXswG~_^Z
zqn8M@+=1vu*9%l~Ai6H$umjO`pb-b68$r<qIj(RZy3xx78g(GLF2|J)L^pc5uvR$`
zT?bn2Ky;&52y4uN=sHl@f#^oB6jsH7=ti#+=phb7*O5QSf#`~_>J|R*QGGs6i~9h&
z?vkAwAlq2LAD-RI!G{qkgTuqK{*A3vOVX(rh*QbmGAi4i3PNiuF9zaN@*gNwe>xQd
zaVq%_lxiTIih($l{2i%wSW`+BHygbgmC5x!+ZbM~cnyOK@uIzeuVDlmUK;_dKSV$g
z*$8sK2z1~@ShyGgHq$l&uXP+K0^2W+gATmt_2K}WvZa928yud3t%7EwH!L0zy)h=h
z)|Von;9>+iA{>F!yat<`Sxn4EIV=hAVrL2#VMiN91&p1c6R!np;jxEw;<aE74|UIW
zy=c`bqE&Src&_R|fE{*G0*Yu6=)h~$y?V=Vcp1hoHW~#>7R1=)%U14RCChrawK>~U
zdsL7QW=GDOfx6t@KAdQEH_pTejQ6M-XTTlI`Y=Po+4680Z3Fsf90r)P=gd(w=2onE
z-7sIU;k`r1l*S{tr-9Xx?Qvk=KM9|S?FdFRZ@~|CDBeXRjjOQB441OoA}F@?@n#UR
ztq&%1TOZFryT#UrqcIiJ7_uCeD~EVPBPK8_Xgh&T+-A88ivgTJLi)*8(}0kGr?)Wb
zZviXKHGuMnc$~2|2etNDnS|#=O6oO8lE+qb>o+5H)!WVV;alOy18xlxaiF&W6k#li
zZvv=no@`0Li*>VTgBacLT7GMn0rC^?Y1*q6ryaeWOw_ld`mP}FIo%8Wo95+P$kPTd
zdI#J~`nsi^YO8EqAqr-w3JF`6Sa8oq{|%J!Vrl(P2eQ>lrjp5+Dr^0nfcMtA3whi<
zycK>=8m%q#g5?icbrOZpHj+GZUSk~qtU0>aMZOW`a{+EP2?{Js#KNMRU@1T>d4RRS
zVbM*n6d;y7w|Nbi*wpqiT^Vn;J#ovK!0?RJSqInIe`h^eI&eyqgt~|&!1}LH!8ipW
zR9o4&ai+ZJ9&jt0k!~xS-t<=X$yQ^Pj0Y7AZKP5+hIJ>9+e=klCaBqkr~su=aV*0f
zhRbe3^Ww({rI~P*hx<csW&LNHq^Nz)q4W+absV`S{D;~NH~O(Z(S?nl_o64^N+8Y<
zA)@e`P4?S2!y?eWins3=*n5NwHtFqKA9(XC<C6hc8o>elO*|QR7hBgJ#zbf03#{3f
z&vUQ1_<i<wyZ11XdCU_tc?2_POVh|mZAl({f4bTU({Yg(`dG!7$_ILL=ph7)B6Hgz
zth(KWY*R_uA6k7G8im>N{<U5B#{WhUQH149!my2Rha2;&W9C<h`J2i7yTv?XA}mX5
zmf{Mp!IY&bE*HbMvu+KrKTB1Q8{=p+Aj=_*v(8(No-R0>uRPXwxz^{O*Vx>_E0~U%
z9BXIttt}=QV@xtRxu8q?xAK6~cZyR%*Hf4__{Y7*sX%0JrJLX}081^>a&I!=;<@%x
zu+&sW_+*b{I+jMB>u`AUXyU70!&xpZ8wAW(u(UG^3CCk|(o?v}7#QgY`813+euOJ>
zih8NnI0Yy?I-+~P{>Dhx-{?*ExAVQmV@QJE%fYvUD;_uz?o!d~VlQAU3q%+vVHOOU
zi^)lih28mzN*yDmPHKb{pVYJ=rA}&u6ra?zA+6}h4w{QP&S^s$?LfkT&O)S>9Z1kz
zT!^%)0|}ao3y{+1K4c>~_et{v&A{YvNJteoO0^-K*nxCn8VREwkt=)99a;lq0$L2U
zeJm9!L5rfI9d=OVthXp?+pud?Tf;8Hv@c_DFxyELpfuH6z4Ctbc)IL7-uy$*CDa8t
zO#d%CXx4fWy47hU&sHc8MnbxakAz!YWW2*e7h7yl{pf;EV}3C;=HH$gI4?^NoXlYX
zHmvDo#aj;J><e1xIbH3+0#6+sS4V9d-iuz3iG!yRr?UWXx5NdJXH!cCYYG62Ghz&R
z05~%S$OFJxF+d)!;RiE#!ZJN)VN8SdZ|05aU^*L4=o5!Am@=Gzs-+TZ$rOr`+pkTr
zajT<(kx^lnib@J|)K4(5O+`4}C7h+bEap@m04|RK^8CfyKiGIWKpb(O!6<if-{*xr
z{8$cHYBJIr-aptRwga;{C=ut3tn8zy4q}>^DpXcCg|jv|mt(ArCyp{a`-59JalA*f
z8)KrgIW_Z`{=di>##*}3>oHHKkLj`LsZo=WZq%gLjhc^TEJ!@lk)V6P;hK?-1ig;L
zc_e`<y8<9v4|uZQfKQEikri6uqa@oVkBvhWhSpjoS9qg;+hoN;!`miH<{RBMiBHbj
zUxABnUDzd}Yyi0?^H0fuO~klkqHqA8K<&oVDKM;)mx)9Lg1G3m?X~$1*5+-hO~yp$
zpf)kp)K>sL-qU27e3iOi>yc-hoP~!e72P3j8L%ZPnVeM4bcZG<VbE!iElD5`WoI`T
z0z!)ZTr^r3(c%_{g&lEQg<+&Ok0&GWDWEoKP2;~=nD?qMjEV5kYgMWY4TmuJ$8BQK
zRQqemSG&m$+6~<(i`0whq#WFy(>s~d`;-%7A~c{5os@s+`-nEmLN_i;@<9mn=3#d(
zU4~mp`Te5Im}o{Hq+Y;A0t9&`QA>R(JY<@#PIS_Z{e0Kh8R=Roy{@HhV=P(++hkfY
zu&|puH3Gy)Dak-cv1HJOl#&dD6iWteNGZucNU>zlhLn;FgcM5#ZAdA}KuED<(1w(f
z41^R*25F?UWI%W#8MGl)Y=WfPh>$97c5FjBu><MEG!hy<kvk-V1e8YI91js)8K~+@
zbfc=ia5IFZKN4n)B%;DtOF&iqc6d5b%uKuNVfZcCgJDVu25%E65>T4&1htSBC=3;#
zMNumYQ2|P$Lb-<|Qp!CFrcsiNF^aY%8Os=;MNv;&hzd{|70q8GZ%TT$u&YT;iZN2E
zj|eI5BW*~j<}akU`KOUaQ_Y|7(YX1yA$9OH8aIhFQo3amp0sQsq0Z=bw8sSGDxwXQ
zlT@pEg-TEw)m2AYk|rK+*kI`#G(`_zly2&aDwsxz>7=@p=$x2FItT-M#L*0j?lLvW
zrO!wV!T@wBBM<UMV-Tv+fyQDGl*9yr4o<(pVEYV8VKK0h08s=1_j%z7oQo!*O-C08
zx>Pfmdo$!qse8auok4DkArNRKtnJ|}gyxMQ{*kN=NrWG#0DUE6vQ0Kw&kGMj2-CeT
zU@pLiknv)mNxqf`fS1Goc>uUR2FP<fZiWEB6|HVh?6NRq3$K19cyBV+U?#hC@vV!@
zza^t`Yo-`n4#|M_YoPBV1yO0Oa#o=Rq`N4>J>D|X4QTFTBqc?<6e;e(c{Zjn2BjNe
za`1lT(LjNnZi(5;#2oEqmVs6}9yV&6dNWFR9m!Itlt=i~*=W;yJ&@9_ZN(%Su@~Z7
zq-|GmKVv!h3Pm6T=BOl3S8|Ikt<plr3Md9&4oOpL3pyZXyfe%3bVN+;D^;&^OBt`e
z7X-xaf`!UIQp=j_TG}S*Br0%Lrb8Db*E)wy=>NLTxxuY-UdBp9WxgV=OnGki^zQ29
zn78}oh_Gl}lZ3ziCFC*`LfXac5@AuP`UL<+cjE_2><YjP0Yh=rt!+{7VrZ+S=8A@S
z*c+w1Oku=6uo%wg2rRYo`21o>w{;-Bm*JS~`xr=geE(wUztEBXi;E$B(2!!XA7U^e
z`(cJ!8i{co-@rPa@)~qCJ|uxlnIMkQ4T3nJI|Ffmog_hHuS^2EdJ>~iT_=grje$6Z
z4H!>9ha85eW0%%zYLYEAtXgVpic?a@iS6X=ECV~8JOJE6zzyb3YJ-rF@CoQq(AQ|Z
zi_zu`&tPZI+x-qeyvDono8Dw2bn#6##&DC3pVd~yf{+J!ZpOthpima3n_9J{GQkiP
zRIfIS@yQV?X%jikht_X%xE)1e+HOmw-|o^g(xs<2o&Ex%kSj)@EvTx7ZMLM&GAj&|
zlqNw{o<kXFN5Q1E041gQ%#@hK7NDf2Qli9~&&mi>Dc!U*VBs_!NCO0F9om}W6VRfl
zm9#Wqr~su=&o!-P2q$00=fnJ_=5kCM6xWb!FNvR%Q{gual?2ru3)UXrgD{)mt#nz@
z@&KSV2A6G05%K__6vUM0PHdYK)wWEy@&57FhLGRdKp|Oh8WZ_^OjRCG{Xz_o2Y@fe
z0D16PiJAKH3c6Ym5quE3t5PzYg`Hg4hLl=X2`OGywIQWMMj^!_V;fRxF(jmTF_cDv
z(WGPtl<;yaZwU!wHr)zW@*PW!c6hoV?TL79qy-JvC#ghQbZFOhk(~SkBm(@vIdQqN
zSWbW+I8p8Zi2zS0+GM<!*P~M@58h2D<Af}ZSXqErNh2n;w4PPlzmSa>e&9sxjvWP7
zBK65u)y~CxhD|bzmd<vJV`sHq4760%o4c2i>nk9@aOkD3UJBBw*|s!My8AjPsRzo#
zeVs1p<!12b?fx2K!`rd5fjQp-A3y-RB78TSa=_g{unTlvSah&&BrwkVe*J?;(j+Br
z*WCq|13%r=z;6?a#{8#Sq}v1`UV6I@!#(q)kV+S<U`H`<0S+930*hP_i*ACY0I}q`
z4L1yk1$OAB4swkqfyqHG>VvX!>nvAEkpbN#gLYtimP@G9Eyfx`e`&sxij)}OSU=cY
zY4T3s8V5O+5G$qJVcfxjYHIb~HadM)52di5vZ5mdAkz*Tuuf$QEErf8%H9t^W)`dn
zV_llBseDTj1gh8+hy7U^7RGxGFhN4GxrSXWnHeoi{W5@{?Ct&*sJl;O$8Q8IE*UU}
z%@cNvon#;gzle)!upL&~_c#)e8<EviG5Z;ugGO?!oq!faWgqQ81t^WGdbx&Qs4Kot
z7<i$cxqTH&e<^;};1N+Xtcoa}5695Zpk4^O^})n(p5D%-?*CzU8I;dLxm36b&{}~c
zw-DDjU4N}X?hML@Ic&51AJ4d~CeFCyZ1veD%c~g|=1?Kc*y@yL>`z1y{-Jf+fzH_3
zQFyk_#xc=(w!S9b;Y2>zz<&>SI6s7zGros0(c`$5Xl)p?x=@i`W+Zdc<CC-Xdq7x2
zi#+M$^L?#ZJlj+(+JpwNzbzQVT9D2`tUnpVei-K@59as#Vt_pHkxK=9j#@nl4tf75
zRwM4V5Ff$E<MSf;VfGQ;w)zM>aTtv>{3s(JseOzt?pJr|9m_7X6)*faV8t5jt%sk0
zPblzz68_0w?pv}fv%mB(n3IYQLKe_Qu=>hpR#f!XIoh3<c?9_5-_oxAr4xwz8!Q;S
z2DzE;s<uHVdglJcN<<fiC9Ez(a;bjHWybMKGehYxD&@y<rN{%oPhx;P0Q@ut$OFL7
zVt_mV{5%H81Hdn0fb)!mTTrE`rBs~RFJnY`kn&eCKpp^o9RuV6;5RWq9sqtD1LV2N
z&5ETaN#YVLG7it?2Q4*4VrS|NnJH9a^eKKA=znQl^t+gtJfQyj7$6S-e~1C{0Px2c
zAP>aG2LM=MN(P8#NDW>d0MH}&UYXyd2jT{u@R{tV`-ut+xx}Cc7<9y;k`SYdG&n%Y
z1ArF;<N?5s0rCLwZ$}&lBbHPi%m;r$1m0Gu!uvPp1v<UVDMxgyxbkpusc1J{ul^fc
z!XIMC;N}5Acw40LcO;oy=Iy3ie>OIWhC&=*5Q7jdF8@J{5pOqLm?*$ksjou2916D?
z9^uUFpTt9Ebn$E=#Fn9OyP*(N{kYfYMy8yj=|=Zs`mw_vo;LFRKo+WeaP%=G#e~SS
zHl9m)?30!hb2O7;j#iRMOj!(j^I<&59jZa@eH`RIjV3a_hcO|RhrC++8A6IpCJD$+
z5gxKbH(IkeJEJi>=-0-NFMgC3{LoGF!>~7hSUW%OCqJJRKaAnE3G(wf<A+HkQ)H#1
z$#KJL^Z-cS=tk(o>8jf3swxz3lZSfVe6>Bp+nM3#l_6ueBT&;eC}_v!$f_L52j!rf
zE(gQje65}A2T1k{BFh-QXTx%Q(aOOjFf#2m3h<D3x+%%fZfox_`1s@!ZUhj;<AxUA
ziGt3mOGr1m3Ik%QeL(nO`xt5a9yor^<WvqNMLFoE%fYZW4?~Z3%xCT6gDl6FR1U__
zMv=~4*P`X2fiR64NH07r2wmOWOYsx8*F$55;(86lkCK8Px@mqG_U3UnGR@D2$j=?(
zhcUEq#d?LVFxxAWsD0!zv_-=EY+fS(kU}xtG<}A>`L*rzKTP^x7JbIhoD}E}fi}@?
z=R|~V@#<7*Xf7cYn^NnSqq8^v%uZbzws(m%<!YWoL)M=cUdz$iZ}Jo2Q3f2&W}6&4
z;m2`mHhhYr8(4s3HT(gN893YI$Ok{xBH1PfJ@~Q6$Tm6fVb}Vv9AW<jKb9Zva`;O?
z2@fEKuO&r|1G;tvRg;$i!ZFe9Z~*dB;!@w?5ODb@)LUD!T#iPYb5tu~((&RMN)9EL
zZ2c>!toe2AwfGU%;#XCRjG=;Kt$L5+A(+1tG1zIJU*DeUqfGTRrD6=F)^w_`yHp$6
zQ+<r7?oukoaL=h$J&jVHAM)vmD%^W8p5tu{)r4PO7o7z3(gtF@P8i_};9T}*j3$0`
z6vx!7vmp+&QERP;WalLtZ6pf!RFNv&OA5!A_t!rGM#jA+q$_GcW8Vhq&#}T}gmzSf
z`VOR>;uRXNH=&;MX#aTX5p5Xn%$3*KBXfABqO@0>^TE5JDqhrC4zsfMN=9EdLESxO
zPxiV?rhc5~er^*y_|bC8KuM_778+vccyiUc^lIVO<|=F!&`6VPGx&Jd+n5EPTptg?
zEwH~%79rLxN86{pn)=UJvuiwmD7=~VaDyMd5iWYfO>khZhm2)Iyx#;BQavOc{VqxI
zHbARa`Qe)wyGV-Y-$YgZS-siB{QdAopgYP5C#8rMo|!#k7b6yDFFeuosoSJ78Pj%g
z+LPsDV>}@rWqB_d4TyzH;VqVt;iAsc^jXAIx=!|^qNCq|w<vw#s><IDs^p4gPElVp
z6)lHqX98a?2w@=~wdMKqxci+RUO&#xbhkPaW4KRKqnN}|j<UbKpWdx;n=rh~gT7t#
z8XS2V(00n=qL=(wnPq#kxTU~Q^bL?SZ@x(^^B0=L>f4tO*lUa5@5aZrH9}wJ#K+j0
zih1G^cc$2xr~kAIv0S)@Ke(T!04%MZ<Fa4CO3vjeRxm@7t%bb!-Q$C~D@k)82Wl~6
zP}`6Bdg7e%b%jl`+@;`1z8kBfZ1`ae45t3H%L{Ku9iz){XO}l5Kl&U;4z-OCW$Iy>
z3=jPd3#Sht2`Z4nDU7La!^emT;37`_JjB9S_L*=(SShmc`m3PRD>@vo{IHJSI;R*M
z_fA`aGvH{7LE^LEk9HdT9KtDKkMrreVv`c{_;7S7V=E^<H<O9x;Kjx2$HLJY74$SI
z?c$w?7)DQ%k}cj&fOo~(@%qi+0k(*m6s`k_*k1S%#6^1%kq??EJ6@UO=&6}%ZlXJL
zX{laA-9(>7Z3WfeczR|w`WD!l?DO>YtO64QUdhv7I%;ob^=G`+d%GV7`FOlI67|xj
zHp2;0c4gwXC&G(Ru{gzzzfFKO2$7;4fQKIgTlU!T@n9>yPT%A=!9#_NJklGfZ-GZI
z3AaL@W*quR78|3P%o66k0uK&-24FrD!swoTP=dn|?m=wrdDo_jc>B@bwAJ|h=p<JN
z-r=W^3J=_(9$=F%x`p-O24?%zUie*98y;O^(f4wE-<qViii+_uSLf>A1_6x%PXyiY
z^Z03nzQB<9FN6Q3;NKsC?Huv%!5#qP)BMNl`4;~eipVc)1c+b1jo+-ACPj$bd1(iO
z%3)|8TII<DKs5%)bBqC2r!3VHz8a@f7;}PV8&b+rt&nj1&_X&l*-B<k*g;a#&aIV)
zC0i?}$9%{G#<s)&dC-6D&4GTkud@(Y-an1;?QHp4Hz1bcD2K6d808d4z4>F~LHD8X
z><{kXp!;1^+4vsDMA!qbK?-Qx3y`G`8sDQ|MDBp5E{K)Zbz6q+lEl5J_&5f`8&OMk
zTVj|u6_jKOQZPM`g45_a4i%hBZh4SG6qv$TcPRw58y12yg*@%{v(7;-Tn^AZp#7}l
z+N<HqtcLHa8W<Dd#!QE<qS?<9ZSX}GCE;C@mcAu{-u&_Hl)pmCKM-Zc(4qks4c|mB
zgkaAkHkP(@Ezbpv{L@V>uas9}|LcVIT)x`kpD`W$W0yEHp!Oo#;GgaS{t5KvPi&`r
zCn@g}|BPXUf`6=vtpH3DR6p%C9t#h-rkmQ>7uQR@-Mq7?`-ps+f^V>J9Y((Xu62@9
zgD<)Z_#)7oe^@(TUn5^X6km+tmazExlkvqg;%f#T@<lh=gGgH(#(bRt@S=PzQ++8l
z_@cXjF9N;!P3?SroqXLVz8Dk1UW@qpj`77b$vn~e=Cc5kOS;kf+qq1>`NP|Dx~uig
z8MDYYA5<Ac8)cxopbP|h^N(n!d^aioNM&G5gte^7aG#ZdX%;ENR)ARsy3u<NP==G*
zbNWWB42)T%3_~h|Xrl~t7nFfOZ~o+V%HJgA`&9<UM37BXh96rQm_|y%kAsI?(><U@
zJR{xt7`^WB1q#g~ah@YVH?@({e#FK|M}pq;5gShFp6f`^J)o*GBOM8P9SQ93NmZHi
zMcVwjh22!7$pn*{fT>B%!iyoLCN&|&lUf_4l=*cb#pc)BkW%K?g@l85O^<CzDf8<>
zip{ULA*IZ(3n@0g-iDMizb>TM{JM~iw<>5ezs`u3`So_Rl=*c-!&yX&`Aso39C2fj
z&BxPPkThbPZQA_0=q2XYm2FI~&HTFICFa+Kc(P?v!FZOk$IU2#oR#l3)J)d`RDu>o
z%`QX*Xi-$0LUCWt?7xcv({{zaLeOkypt2AZphc;kxDXYfH0owo1AwM2wHpV7rK^8y
z3K?0ZEwv{J1b>i3X-n<tM2V&L_QIkTI_m|XbP3{b$Y(e@Q2|;Mwarqy<07%tE(WeL
zfpMZ_t_-ZqJq2QU*yLB@e!ZXBlCeL-F?&dqE<3O%C(}fp9uvW`vjfqVon{-h8>B}$
zr(;REnHxU{^Q>*K11^)p;kjIsVmIp)xUH+rk0SKbyhcZXkS@hMitn`g2t5oIRj06C
z>J)Y}R~aE!a=7vzewQnXD?GlL$rHuLGe!Nh0w#t31*CaC!quyA;`rlKeAW<tk|6L1
z@(40R&yn<CjpE7n-*V1Nd{z)=kV{ckY(^FF3ZAeK{5gV?KeJ=VPw;3_%dTXPA)i@w
zaC{EgdZ*C#QSiK~rVg(`rq}k&UCmXM4j!?kL6}Th#{Mf=vIfhOwo0e1Q9t?x*r?tH
z8<JNseyI5%$k8u>yGHGU->QW2;Yls`+^`qqL+w0j{{Y`t_V8S`whs$a(!T-)e%B$a
zutMs4W0%hl{|XOY6@3mk;L7V+ba~B~o)ml!;S}lRK|Wm>)S32!&4MfU(OC>EWlY_g
z&v8ntQx=aoB_2@EnvqOTH>GFIAigQ{8j15t5qG8>S!t*jPx{{6pH3JkV7+-Vn+4bw
zmg9~4+o%HRpRx*gS3fQ)^5J^rRJi=ZJM@k>RS*>0vEvk|w!Dz$1}7eZTg{|ocSCQ}
z)kNazYN8>E2K8B=O?ZPnon_)$T7A*I^EJ7|lcnNGzr3tk9;iB7wKt<1@S?q!((u#A
zsUUq<$xai_!X5;y*R=W|KLu@TsN83=@1fVtfMIV*&c5NotD|pVr$ifg9@3Isx`~>v
z0<;R1#Hjvbv{-*vXu6FV$7H}e`ts0_4G(^kC>kDCriO<Yn?^8G$K}r_D_gw~3L<#l
z)vJFCawFDf_tN41-@{M`Fz<x39Ae69g4=lXx8QNqExr2=vEeWqJsFgH@;NQ#{rq^}
z8Qs0fE?$A-pzY%=%dFYh+Fv~7Khm!)Mn69+!&(coiSw8|!SaaP_6W;xIZhMtjxDv0
zRqi1AKFf(M!WW=$<C8-??4x(itb>J5VP!!<?1hS!<z{-#?phLibt{%$v%wZV)unw=
zE0*3l*<(v$uW7~7J15(0N$j<)SbFDVr!9%St`$q~oNTrwu`h1L(mN;nZAt7)TCw!b
z$(EbNqB^cutg3_FIkW4QM8C8ZP4Ar9cuS&R){3Tg&g{J<(JyaB(>rIj-;(H8w4&*q
zGdple^ebD@^v;>Jw<P*it!R4Z%<@|j{pwaUy>n(!&b}nd{hC%Zy>n(=&QjaBwSw&!
zV<4tuOmok{Hx8f8cF!5&Dt>WnZS5>Yzvg7(WlJ#QCF?TkOVdcZLi6U8=xuoS_BX&9
zpTjZurO|KU^?5*391m+)qjhXoCi**-Lv6p3@1^1%OJ<bwRO7o~7RgZ>Z2mTWgb<!h
z%Olj+-FPoT@qTNzu(P{y8vsEAdm7o<T{D-QZ5V^u`tOnXV6Kv>I2$>G!TcWpf;rmy
z9~qVRN=eBE^3c!=pNj%}g*ISzb79ut1KFL!t{#YO#(J`w2eLCeXD<=TzTN>`7Q%Cb
z5)NP;_fN<skr6J=ocZBQFN%oyBB%4B9O}JRv0BaX$>XBT^%VWAv*D8qX8ZkIX+89v
zxEH(wX;-SgF?nJ0R@OeMDrb@V!`hPVX%)Cv<qfR3eR<dhG6O@#>`?ba&~2>pDR=V)
z3D2uAm%)7Sz$5MZc$u-x^cm)-^z;`NZIc)M6|Nsw3=N0=4FLPCe}wIa$bTm?JkdX5
z&p%_&zhck7W6%EB^FZu@{9mLRkiIle@*n}K8OV>LM!)eceEpK&csHB~kL`*zys(>M
zP4#X%o2%5uh?`XkS`0N3#jGe%=Wt0-xISOFo^d)MHR4l0hhbLA+~c6P8gxoUOUWdC
zL3w;D(p+F~bh;G3;PXWxj>?M8JPUcn8H|B^nQv+e_R1Kh^WhtiLU1fX8GYR)O|lGC
z51ZEy6n{MM-vdN{M#p1lf0R$y&)MFLmP0ARBA1YY>+yNQ*W-IVN%*-8`mEmcG5)Y2
zO%{xBfW_EhEKXZKQr&1FU7t=dJahfnj_r531S5_y<oHJ9crj#~Y=$}|{7WZWgho1g
zWaj#E|Bmfx&<cP?05Z--T}BYyZe&xW%(onQU`+#ApP-^SyULXv!LIF;@!m{C;P4xt
z1{Vuu;Id|lL1hmB+a@6q2jvsDO%4Q=XTkdKwy_<Cu)P{oP9Oj*7)0zTF^V4}k+!`f
ztM3us4BEpN;#0(w*X2Nd7Q{Gmtt*(TFrJA~7_JLfW~;xM$CJ**$st_%d;>_?a9iSQ
zzEF%veKtWlY9>iL)|NK6AT1#-?O0p8qTFlkifzvFyY7<dJg%vJ2;4XZ?0dADoBuk4
z;06m)ZNQyOHCb!mYOg!n=#I?9lwl!h<UuLl4bp0c3-TO$0^^L$MY6>)_+8<DgJ-qJ
zH@D?Kn$Cap|84#k9+<as|AR%2DDr@ubBMi_jDu(PCCG-UZ!(tVeeC}y-WUHO<;sJV
zI()Fm^$!-g@jutsyHoY`U#K_!`Rd?@<4x_mLr9mf0$<6Tn8_So_7vfdUAWyMJiqb)
z@V7ZM&o7T$SotI%Nj$!18pT7}_Ha5Bk2moe(l1S6h8x}y-X<o>pWINurKFkuuG%5s
z=)MOYnCj8kAkY9nnaq7t-E=AhG3oGjON{oA%WOpq`zYQ%$3V_z6r|fkpf=%Si>Wny
z2k8+$upa*)eaFVjO~{9ThUlmB@U7j&F-~#gfGwKzav7XW>CdIoSkWTdi)o+T*ti$(
zZAEag>6ywX{Kw2WK12Mm`Hv5k7mGH=27zQ*JSg-&ewlW>{Da`-G83SOZt3RVaeRru
zp9w~`hM4$@X2KC~kh^Nnn>=tP9xFouC-KoJ^xC!@w^|6r(KCTKs4w?jdohSNKS!uZ
z6?o0;<KVE4=ZTBW&l7De#t4FVT(%ic_W%a<4@lIF=lF=;?4m2=a>^U6j-XL;ED6E)
z8094}!3=_z<3c<P<GT=ctw=sR2Md7l-Wv+26JPr(Wy-03h=rD^M;wP@Ug7yc_-WSM
zCO<2wekN;jyV-W9%u!*w#)m+Ym(53l{NCO|;|Ju{o|W(l?yfl$*6xSledb5~jP`T~
zGo4=$@uQYGPoZ%i=*%3RCh={v-Jj!~`wXnu4q(CjF<`0U9rum<0jTc<-#z(MtXp!Z
zH7)b^FaHS|{xaC~zX^!V@8vStB=CI~coSoOkPhriqx~=)xGx>}Q95ux0^O(-VoVeY
z4TdMXeJuvgK<yZ0r!AXy&0Zn~Q3b?TLpvj{&XPANaZAbH;$FTl;DVVSJ|A3q^^cO*
zFQDMK{fS>c#I>5B`9XNGy&$RIMVL_jDWLC)y3yRQ7h{V87eu}C8{G~Unzh(#<BCD+
z5Dlt3*9CQGp`mR=P%A4|9)rOO`ho^39}{B#06H~VRfJ!pU*5`=lTv8n&<pP%%eRwd
zkt%xSC6-*l9&Z^wPxuwm2*R(?3GdP`R{M}sSjv1M{4xT~_mPMo-OUfM$Si}Wy(8Ew
zM;XX!F{peNJ^F}cLFLhK*RHbg+R@r5L^cnQB|+uF=fTa^3VcFgq`IPNM%Q*=H>-mA
zgU<>0BWrVhxqI3h0gB~=y{pV2Nj{Yx(AwXH;%riJe9QhUSIo1#U@}`irRJ4qthBB+
zUdV#5DSPFOt`<YVzDU?^{z}ITnoL&NW5NOp>i5UM9S09s-$<#nr?$+C@Q`}3w=mJ0
z55{4GxbXVGpZbNjJQ$rR|7+V!Fe?HW#Oi&(bK}Q4(1DVFiw;(Sc&r7cYL^y*>-)N6
zV%;S6>sDg68JxANU;Ed-7k!K4!8!Fl3|YMeZ!El%<>SBrxtEOuDotE^Hn|TF``O=P
zKQ|F*?}WHPzHp;g2)_=m3|IJ5Z?(@IG&%BE9ptnoIaJ?4ZFVU?Iwl=bQd{&jp!DR`
zt9Z)~7J9QYeO{qE-#r`k1AQDueAoZNFElxXSkn)zm#{rui1P6d(yu<p7r+lnW=-Bc
z)|Z&hzNi)Nqn&_{v;dam<DGy{0HARhE5=O7@^}r>4V9nur%h*V-jsAZ$AV?+MFS{^
zRrmWzdc+uXeaw({lb($P9Py!T9JeaP=XoP6ixo0YRK5WO(>b2{y%kNf5#H|#zlkW<
zZhin>4<oNF(!R|V_MK<kCPNRu=~t1iw=nlf9%)^HiDq(BVea!u;E2K;w02y~v4y#P
zN#NmyxnCrK&4szYB!M$9!D-wJ^7XUO<eHo?Q?Szs`(!(8l(0{=!%iUVGwrZ*2>Uc)
zC?nhX$Kh64R%NN$C<cwgF)ypFVK1(61OoXP8v$3j51`(Nb(UJR7cIkQYCaEm7$fC>
zKKy8u<3ab`(b>q8?=ZX&u<jRsnQhM66K8*2M=eiI-QyTwxeCMKw@|AN!V(ll(h!!j
zFlvzSJN$0vO5@wlZYv$(kJP$Go6{f-l|ZY<=o7?ALZ4)a^2IZ<P~>RuV^4LNvdyRh
zW+8j<V>HNEgJhxDDge2dL~by3oP>pdtJMPVvtiGW#g;woja|rZAb0m*fcL3XD@Wt~
zy39au(j-0tgyhUY_&);wv-pP+K&FoWEAjsd{NIHCcjEsu`2QCEe~SMM#(pU8adOK{
z;eQkUH{<^T{9lUytMLCC{J#zV@5BFB@Q=HG8Qh7>K-D#~9HaX<{wMK&1pXg^|3~Bh
z9Q<E||7YMI2Oyaj<Nr<ghs>NosWRWh|Bvv$@pt$c$wMwyf%&CW11q-94CXgtBQ@id
zd%|y{zVjmjL0-#@((jc7p1}Zm529zhRpuhujZ9`>gs`j4910|e(}aveMCb~H#u$TP
zOEdr@(=Le63__!MraX=C5uwF71G<sWmBydtum+G3G;6YKkReM+fLAW2B5=bk<E;=t
z%>5GK5%Aqg`dvU)xm?M_mk=I}3ykoG5H7%d58Rl!@=#Kiy#%{3uwH~9tJ+l@Apez4
zH=Lx~p>!4o77p8z3VbB}aaF?=ufSQCqO{teo^ufkb-zp=F4X14FRsjj%9!DSqq6&k
zK!F_ER>XS{9s^vv>u^7haJj!Q<C?<<hz{_(2=0aFW_b!|AP$2qf7B}<oRsc4!bm}C
zm*W%j3)G%6rj}Lij>}csiuU29!kgo2wx+;DM}c~8Toi;4bp;ni#8o>QP0iV^rA>T|
zWdr%<bJ4?-FrJ@8Fu*o_jG<M|)){X8!<zm;t~`0dU;g>P19tv@2+A|TF{u7|G_mpM
zOZZi9D(+j-gPTT>eDn1|46j!N(z6D7W@sq0<aBg?u2Wxz@Fdgc!mHUv{pKC$g;=0{
znGT*r#xd#e+8*<a?C+{|4L9#;MPXgn{5FH(_n12TK7VmDp3}rv2*-1aa3=lXTGz;3
z&F>3!2<+hYOa)s68SMNo=Nw(aPY+J`hv7c8`5oZd`e;4)TdVnn3^icb9hWU+Xm<Bk
zNo@C>_>Fer=rA!MP6)>5T;^D$#S#^Jpg#axmP`wx>n^cXYoHL<t`2NF2YD@+nqMQG
zS9%Rrh^+mZJtGEn*I{lyrrhW=AWa>DZ2eyN#-krH%(*e(JLeg#B^xA#gZOc1_u)NA
z1cql^Wq5PNA`SeqvZ4`G+faBPC^RwnL3rYCabmsaDKAfSv=I;(*1g0saM+E+c&U;p
ztkR(z<IR;oz1-{2zlTWimdjiQ-uNe>bljITI-Z-%OSrEM=OnM>8b3q|fx;hws~JhC
z<Jl&`z+MJpAjq|n!5}AuT3=4HUe1=QO$_qcaS({(oA;4}DLiY#t)3bGqHTCXva$z!
z=!1-Z{jXT)g(GMKkq%CvEycz*k+1v?IJI2mJ~(%o?BQjuMnG#CEvdrmz#-b+kKu&Z
z$gir7{cKZ)Q)+XdmlLNLaoNHCA@btvxcx3vrW(ML&=Gj$I0>wn?ncQghGRLZZo4v@
zz!!!@$V5VB7b*rPWdTJ!P{&H@HbZc0BU*n|wbrVto~l}zxy2S*AHNyZMfC0L`!dMy
z44IA%M6$@AKpJWml#gAFap{Fp^q>@XSsjdpFJiTn%(2A!P_F8f2d}3=L}7M{v#cDH
zx!R{~t3tKj^3rGkje#2bxTKVYBvq;ff!>2LWNSzIO5zdQ{_aauGMN)ILaOy*d5OTz
z@Fiq5mBbp6Qjc13N{cz2aY_*W1jHb}t5N4W8+BZI)}<|wl*sYsg+Gs*2kKTI^lA8@
zu1c*SYsoaU?3AuTt;5*62(-4|u#+MJJ@ErS@wecP6|5GlI6q_E*qBl7i<Y6*!<Q1I
zRxxo1qV%D-oQw-60K2UKH4N1vlK!=ip8o!60&EcJxP+GDqc>U(K1v%_$BgwxgJet`
zmscG)+cXR2H;ScH!P4;IPB=#2wjPcC(3M$>-UX31?t|>TsXmCV!P7DI$69s;wm0n2
zWn0rc0x|qUN!TVT74-4&m#qqBCu4n9PDE365$dLlpobBg6rsNPT+o^ZFJl_yaOldV
zKM!4(1_juIna8T{?$<dBFi%2Y>Sx&Hxt{s?YO7X<wuFrR_kl$0=O}Cbwt7IVXc%;k
zq43;Whs(R1Vg$Fu1W?n@&bXCo5`B@Y1^XzzebirrIh<-+>*xJpe&wp??^3t5@j078
z!F0|X?>qboNVe~wK61nuB3KSpiw68OX0=olnoZTUis1&c*1!IY{gPh16I9TVc~HR1
z);kSj*YvmA$k;c1A%;QzxzdEcWA#clnHU9(({Fi+74El;Dur^&r&z^~SXH_K;1aZ^
z;SK)ET35-914dz0s>yrdA3(=ayJQiP#Q;h(yLX@!hNnVAi=kv=MXG%p*_A2C!ro$#
zk?=QU+iOTnf_Vg7Q72$U8yu!Q9Nh38hp^;{(gv<Q(j*vVBvu(b{3Gdwf9J2&SKQ^7
zPy|-m@L!6R$kzqKynPP*Z-UE9UFZRXs<3IRO1EJmU4OH2`}rWg*Wv8L6>jlZ9Sz%u
zaE@#58kWs|%3nYmQxJBA*(BqB<hp<t{s};%pxjsMgSBOjz1FVPwjJ|lQdrhCW?L{W
zRPMH|mN;0nZJ0RNV_P%~R_}y7q0fPP5!q-OqoL&B(#$Ycyo%V~5pfsB3$rt(bAIud
z)xaw0)$>n{i>1=#LKas;h3}sl%$yB<61(j<JhOruo8jNc$B_<bA@+x?bU=<k-8vl!
z>`yKY@_6Cb1|#h(8l|b9B{~Io*GhlhYRCQsY$MPK!_J?BoS#6-xR;j{-jKq7615EJ
zA}PEgsynQ9_<*NxZN!?M<S8$65OO_|?EnjC*F-fBU&cWlnqMopfZ%v3d|zuCGK%vM
zt`QnM&<J15yz$mM0Is)LB+oR$YZYk#o@=xLc(&n^8^(Q|0G@F;42`7`w_7h6oryE$
zio`L<@B1dzqQ)Y1fj+guayVm*wGZO1o7mV?UgB^JT1t&KSm{F}F%b*gSf*xzvjkOJ
z(hK$j(Iyxt3(g&aWkUGZ6qqwd_497vlI*)86<7gP@MGg7)w#11uiDnpDBlA4ck&Rg
z^1wJGBh5(_%$zuDW$~>LRxT&@a?ardYooMV-*7myH6bpBW{zTeu-Vp)<*Lf1s*xf_
zs6_N0S&L0Jyfus&qLTR?R9v``YxUA=ZVMNW%J)M$TaO`mCO@lK$I@@S@P07hh5xJH
zpX&D)`u#nBP4q%M<a>l94j|NpkYs?PJZyK7XKVXsp`R3kczob+tzkG>fAnJ$GFpnn
z0jgcSg+sS+#tc5{;K>kf_?^(w20Rxi0_?28sOl%0B;}P}7{GP;tn$JfLeUaNr8~GX
zbx7%Mo`$z|b{pxIxokQ12^Ev2qf#!G`z@cgv7kNO_66xm7&z3EmSABsd60GPpxhG;
zf#ve5nI^lTp<H(f!aYH`Hy_uErley55%ypZl=}vPQvH!sX76W_%S$@KOWVWHo3gaM
zh4T8DzV7nUney+p^>r6!%PVIFvjv=<;Hkq_QyN*@Gcu6VC_GauVAn?YgV2xa18!T!
z-EDj<9msiM7A&Q3*zUVB!;AJSZ<TAJ_m)pd)w$JXw%m()pDFh*oN-`bm{D$weK=@y
zK5!+t0z<1^#!)|FFnSGoMTG5l2+|=x0Z#xi(e~ual?^%k%vLLVK!qFS?29I~RL`%x
z8bDiQg9&bal*6qv(yc6_lrDcbdVk(WEx!&O%8%Zd{Lb+BtOrv=5AfY1^S^gvJ^5~8
zkH;T%$)p<R>wLJ!4=T`Ud)77`Bcu0cGJCd7Kt(2G#<e^=z3}*E|H8(WqkwcY>%sPn
z{D|~={BaQ+owWn$ygNTnt+QsLTY*^J2@4k}p%2o~R}SnuzZuFPUiGvbc0CZ0&CTR4
z+7_~(;k?<<vxb72Q|g<P0N>opuwG`khn0%K0Si~yc=uYXYkWlmn9}NIhx%d?5dvv&
z-dO`T$GXCv2J;D8C~W`|pP{COm@y>6jE>!(GCFvB8zR;)i=w4^^=8}JNvFiNFM4GM
zDK<Nmk8^vgeC4GoIts{CA~|bin}KLk?!T60YLb>Ii@=&4FIqi}43J(f!}f3tzMntQ
z1O1L8v6VVJd!*Ag_Uv4W=b4D(vD8d)9P$G;6>;pRbw+PcDCM;ah+7h@Gt%RqSDw5U
z{m*Oum6^wCEB{bnB!uESw@$Gr;nwM2=s=BS3{X>J`6nQxXF8k@RX-yke=p=ZcB2TJ
z`7DC+<l6Pv6wX_4>3L-_xP}hzH1Q!!SVm}wf`M<u8CG_5noBXY!$cqOOf-`Pz+*g=
z|8K}Yd<bh!!M`U#@vs^^wD`>K#o@6YTK_QkM1!-0;<sJThBeaCvr!0nvHUGP8|;?i
zn$I}04lB%`^>Qv~@ed0x76AKr6O6xw{*pOfSW7^V1Qq3lRl=wd=RE{xQq!3dL<|MP
z5HWb01HWn;UgmJnKMwU;D%K9M+6(qVBWNhE+J_}x^N0cW-Y=^d+B%fWJ=yzo>C36~
zOI`YW-itnh>S<4U55Id>d(p=;@0}dXLQ75sp^1@#W#3<jKC09^^W_t^?bu#4AzWV>
zEPU1K=|q$PI~OQ}*I+wqP~wiJP)P7U+~h|MhPU4x$8K+n<u?vS5o@$KpPZm}#)cbl
zRSUZ;NIwmO`cR@``+pX2P9#owHSZ<W&^4b3BXcy6HOkY4TErH?bIh($%+J({>%|V>
z>Bv`OB@S_Mr;>x{Aa|-6??zEP3+&Ihk1crKRP}VCYq?B)&MSxtW{Xnz8W6#?X5o6!
z2MpiEukM>Z8%9!T<h6qDMphX9p?_kJ)G9efSi)gKnHp*HUO10^g!)Q|>&<@wj-xwu
zWovP9e_V$;u=N;maMvVSg#@}as!Y*0qK#~94aEo1YD9B?B*d-{u7Zpp4{_;QGV-mz
z3cT0HnD4*;5BU;@`IbBL4Ubj6iVvcS^5vZZ7E)T2sGr+eZ~T@|MmZkFZ|O(eW*XT#
zJR_VEo8%*){>8-~-u9LzF;0CZ3+2jGu27!ea4>$>uPO{rWeZ~)h6?2+1eZ4y3*|%C
z!Z(QqW6jklPrVnj0{bVm(vMUJ<k);1^2ZVLfDhYgUHg|~o2@Hf#h`vRJViHgNOOQA
zv<=YEGb~}-lZuc*{UInG&I{b-gC<ci+HxGnJzNg;y32VGumC=o$hZL1JjBA|baKr#
z1Vfpxd8mOy10O~QHwdeY-izp(MNe4tq>ElFH`iPT7v?ANbTk3k<_0>s=9HrGDzMxf
zIRw>!ESgS{mpK`Az(1q~$4q+^om_LHaI?*$<>s2l$PJngm78xKE4R=*PHuPec(^e1
z);IxfR==iXxXf>yC=h=IayCwIYaIFNF0Ih94@s0BbY5=MM-M|FFMnSC3##*e;|XZM
zS^Z8g^&1x|#9zH_c#Opx{DSK3U`7c1on8&{3h|eT(eglwze;?rVH?&37JUH}G3uMZ
zNAqlc)YR0ju?Rb5nNLxE!Sx|rEaepe;;~~q9EsQ=({sL|z#JDEU@=gWpP)$~CJCZP
zAO$7{j?G7c?!(b8Ii}*1Wpx-x@j)U&ZvoejuAkrq02x28{a)QVUkD-?1fdxzsc85&
zK{WO-K0#2RuSva)RuN9a4O0MyclsRMx0QCv6fa9ibsX{$=xyvruz$9=D8^j$1UMX}
zpt7sHf9JNR_7;W@ca=~Wd7QM|`ttVb`f5D24iz`7GzPNQ<KJCidHq0k1nU&s1k3L%
z?3$VSZg>48R6+HAH?m^T;G%R`>!apHSupQ4=rk{(-)}yNPW^5axp^_XZccq9>P};0
z*kCpL;Z`^kgT5ZKG&`H&c>vW)ezXjiW5Zd-L*&80^muqNi!|wk^Z3=S;M+i)W{_(%
zjeiRR&qM%?cn<1ZpfCYtKAFtH*J?sa98z=QcjR1klIoAVHnyNR{`{k2TP&x*vp@I|
zPKxU%qu}Fv7!yH%zUIR~K(rV6b7z2~WzhHycXXhRRl}YX_N<`<k!}7GFqmx%9|z3l
zue8=wKKLqG%;Rhjux<eJV}9e;Ois2Zg84k6tKOLAF;B~hItBrgN$fpzoo`$9G<Sk?
zFMN`!<Rbh+dJE5oTPu0kEnsZagG@$t#OnItHsV^$0Ai?%_B4SK<}j)E#wbrFho~pc
z2Pj|WWYrhx7FYBHQLiZE%l+H$Mo9E>`7s1gGZMJU>&*=sZ$_Gn!*`;(FyFrg0nNu4
zNCrV;GOu#uI1jx9;qaMYsrgo50hvy?8vxgacuo)16101juOIm1jYr}e6&t7EmnS7F
zVfnMq>u$WBNw>3j-Qfjr?9^oHN7Xx*c7;_W9G+g{!8^e`H3KnJi$m>EY%|NTFLMg=
z_C=bzi5r02lV1s|>we<~WQRQ=XKF5g63=XR;~(vgS{Ga?%Kr+u{HL<a9}vGCE>=j2
zBQ6Gn%s%|1htc{lYd!O3_&<REjW0o<aM>LY?omP~*7(s+Q95wLGR=$vJUjypsBCF4
zS6ktE=;C|B9l#jK&Z^pD-4Gy7-B&GK_FarXgOH*J0-?2&8=jecQuq!|&kivU#QY+N
zqccXm>J={g9VmtuBFp&V2w=}6?1?E@3eB1Z3>>7;QZTHm@LU^`T0;otN7-dIqO=&J
z3vYQUL;_<G0m=vNV;0`R>jEk=n0m{l47`UWK>*96uJ8jcP-g%asS#5_C0`0QASri+
zPe7LSQ_%k`UyO0=CWXtc2R~5+<EaKWqpwKFe)3Sbk765{++a<#!7(c3RWlu)jUL4|
z8#G>r*dY2da+*OKVyJq)Z@Ve#liU)6fnCHyK8l`!GFR_#)NTZ_-c*6*4F|djplJ-4
ze)Khret4G4Jg)B?0p2zzeFxJVM~Cu>>khKMJUQz6<1*{blfdW(#u$WRs%&fi!)MH#
z3L2dM*aKBO>w!Hg8uWupgV`bOZ>fiBTqt<Ua^b}&L}@Un)o`nL?;!3E2The87l~E=
z;y`{`ZkfLf_K1Nw0QLv*TbTN~Q3{$IILtqgZE{F)<-)dR2CC`tn6L~yQ%c>0%f6dY
z%e{r@V;~3}?4WyiZGUY|A^HHqes~FfYgkgfKMAE{Z1X5O6%?l44*?y^7=O!T-mgCz
zkTd)(-f;97_{4+RThKnomWic^!z6JUA}9Q8aCR=YIlEc+U(Uu-b{8^BLwv+N88AdW
z6^_-jpE(C*dJM{x<?3m-hB6K|7@mtkxwv*DC@-Bp3ZI>$j(RYxU^BUc+<_57w|o73
zVXsBm@P|JCt2mDu@^~`$i%=}jiUob3E&j4DW4?f^;^<FM2Hyf9$O_A~?IB2a8tdEm
zS|`4S*B8(ou@dO62CLU*gRyDfFP*Km1XW2-@5CROzQXYe^>@5J89o6WZDP5jxfV3b
zb87?N-#k2fc0SsTz1N9;gz{07+pt(o7H7{+BZt!o@;oqPI%IenCj3-)MsNBs(!<f0
zgH9nAKa5!WhBht0rK#_*6TI`!8=gIB8C;CN(#nZlYUuEPsdMR1#}VH7k8Ouc)k;QZ
zWcF-2E9juc?uH`fEKG>B=#XCLztW>5Ob-Wr(~~;y7S^+qldJ=(I|ORS<>l-8gK!ST
zgQ@Qzyi5%y2ro~{>t*m2GG~AW_C3zVe9ZoX2Y%iIjC}N7{DyV>=p{^bB5Y^01KHDt
zr<do|sq(@}lGtX4^{AUl7{}tt5(C~ahAK{DFr|&(SzQ}k54$f6#Vd2WH<H6?ko{o=
zE;+-u!u4()opJXTN5c1GILFq}{@__4P(K~TfPYWy51$Sn+GbAWWxw^x4-+v*YXr1#
zG@QP@=mld>Xb+eB+X2ju`wVe*iQlr*{BT{Xew*l2s^4s015~sHT*A-FR=EYpVW&wI
z&nY|=IUA#MENe&CCo%LS($FE9Jp<_a5LVI?o`GF&3<#XNHi5S@@$G%FBeT21xaNa-
zSreZheS}%HCO+&9aOhO#ZkjEbOM0n0=q~vVOqr<E@CqcdF^JX{GMO7#{|@H~DV!c`
zGkhB1y!gvzcvgrx47glWa4Co9TeOsef+*q=A{TIO=EUtVgXlLvlnEa$P_T&!LGM&f
z?Aidm!uAtvS4f(M=ABh5l65>TZlHz0ZKIttPt`Jq8}iylYCHvzvrtm-wHOR}gAQw;
zrvi#4`;(dBZ3ypT*srg^5Yvq4Z!pSlVpRkw{&}bquR*x&rJaQG@DEF$=OSt{#77{0
z13MuQ2zdL%a_}0=$Z~$IHF|?kA<NDn_!^0j2-@ZET)*1inSwYkwQFW}?ayip0N*d0
zc^mSFl*+SHG9UGGP4*lz>I?;}*w$MZSsN5qtUaW*(YOyrp5W$bmSrp|qPSl8LL{oK
z0v%S^uyN&u&nGmtC~c)fv9q$}jlI@&_4|>y54r&)6;af0ZpJzc8jS>W?+^Y5p!#|E
ziMHcMa}8uO)AN+g1qdlbH3JM18Dao;8B>hfwxbqXO|3kXE-3eJgW=ca&7>j7Zmmb~
z4T6bPj+8mJP<a7L)VxJGvdF>MHZHMV2Cubuv!|i)#>&h30F!D7(N64+nm@3eOq7NF
z@@BYa+jk&-lkLsrN|C4-l%`-({auK<?vkCLK%|*n>pjY7#0_S!+sb-CzaKfTehBJn
zyst^Qw7a)<LR%~L!mGh7m;UuX(vyQUM!93<S{^kH<iZyL+N98dW6J0Z4y(#8KlMTE
z1-`@z%D&Hgz*%<5*rvpO0Hz1#VNwjAgLWovx*x5(Iu8?JS?6b)dk!YLb2tX2Wge}i
zP6q*;EM=~N`)=olg_8{b-;6L89emYVYboOK|4Rt}5B|Ao+=2gB<Nu@hzX$&tVIB+X
zikrX+l;5ue>!bOtGrf6TGNue$TZU_HSW**X<_2z#uwL?0KktSq*Bbz|R5RCHjOiI5
z;<bTnotRp!^jf-WxMD#9*1|Phu(-rAp|=sv6$;>Qr=JTH_}@Z5moXTTl{mbP6^;PU
zKa&8-hS#QJ;=pSF3}5VG6u3qKwLdQ;BziI$p*tjgdTPjNU?9$7)MV3-wlEd;ve>5l
z5T!|lcDax>=}SnB^DM^r%(?uowpjP$)%wOO5y1s}ck6?*nkRY(vXFDj_+2{vxNa=x
z+30LVcRjLK8>~Itz?a<#ahKN}psa7J*%Gc-lm>7!0&R96|MHMYZXAF}&vgg!rtZhZ
zC~L^WGrfiU3D4v_xY^32vBnQy%3^{&w#)5sAIm-{#?k7z=g<QS27P`$7@pm$rP~HP
zG*aqCu&=hEfYbhw^U!2)Ib$z*6UJcR4+PWxK&}dR9ioVvW83O2bZ_|b5X?u8hOb7x
z_JPM~e+5nO<$zER_Z4s}d%#M^xRT3k08rzK8b-PIydv(O@NnD<AeG#RboDb$2)Zfu
zhp&Xs%9qRV9<0)LjL~e=V^1iLfF21km=KEnF(KB|Ye2{3$BkFRn~lywuB*4zKY_e(
zt=z);9MNq6QH?B-cXC3WvDo)1HjV#5ho8taZTKHXEX12v(NV*UDEQ_hY~gA<Ht<h~
zOw`es3h7{>tW&P7$C8RIH`N&~!|>}x9|c|P7+Wtl4sRz2pNq9zJ+KU+Xm_q<yLs#n
z_agrpw5R&3k-C`kWlpd@3zpA_Wd)lROg`{CC*Pj@if!yCBWux!R;;bo9)Yq_8rEJ~
zZ*EH-6Y<Zv@fhT`H0a5OuLr}mgF0qmL}zg~<F$-)_l;b)Pv&B*oY!Y1pEa-zn4LHn
zNlaV|Ux#Gc?96Q`XrHq?w<Wp&rC`Hid$<MVoMpeU`4}Sae}hTig7TxT*{Z}W%q5W3
zh?4UX_YtlPQ2(&e$dRXX<k2+V_%wn-PPXH{P41r-AS&`WVkno@erm)m#6Dbur;sOY
zi(1|<$%Acn<&jf$aE9)~JDDm@cmq<2Z(nvbC2QJ-E@VwiYFPN-2{LWcvTXmt1hN%n
zv((sr&&s+`M57t8R*5NtI6-XVr;x&rI6(JxS2!cCU7`uFTazJPEwaeLtmesqtby@)
zI0thO(M-s7J9iH09`F3TR>yyaKZySb|7W;3;*Pj~^l{CQOdI<*R>_ue>I`LRa&#bP
z$7*A?h2<<xZTvl`I4ox_Y2!YEWE=uxozWZ!Mz`8|?Z!_c7Rv@oU+N1XC!oQ+LyUE1
zD!{rlXmIZfn?pwdrA}#nu(+(4`l8QhBgAQKu+Tv$H&BTFixKT9kFyq@;zQHkV0TCI
zV4z#eo%ZDRY4ayc@5hWm`3zHd<~+>}CeGOij**1HU^dcPRO2%ApJ-4E>l$0QqQQW>
z8niC5;Tz%0yTM%mwMLE=l%*c0KE#$&L?2RW8{g5a*`uIwb{^E8viVZ@CJ@q`OWlws
zQwCdPOeYogG8^2La@bOu%*ny~@yHYV0P{<-xE`i+`QF0nZ9RU$dK8)^<&M5?!n$3*
zUV@7stDr*J-|7na$%zGn>R{H#;ANGY!`|SjNk8qy*udtYJhV{FozURGjpJcv2e<J8
zjL=jHYsv$_3kg^Qdqz$90J%DW$Op)a5{P_&T$4cL1LRslNLZeWlH+6M<E+{#2B<HK
zQRM;P<uO1W0A3LT<N@H7F+d&wUKIo60pQg!Kpp^I69eSI%d;nEGEgCCDv0>KjNh4n
z8APwpQt7pfg5CGOu{j)s2KM*Z^N-l`&)D;?*z@n$v!5Qc0k-c)!Q~&sKaNA?Wz!>Q
z+{{boH98n8h5@4R_^hD}P7gX1Y-{4%hIz(<i3c8pZr^{VyW~K0aj<Bm?20{J?D1ny
zHumIVk9cO?h`nPxthPT52E+d)moPAhn9p>CKi3idY)AO>9pNu@gum1g{$fY?j*jq`
zJHlV-2!FLBd}l}aYaQXQcZBas!ur-|Uy=j;$)35VKvmlwbIKxgMH2EFY+HVG4n(VB
zuzcEKo{J#%bQu?9qsJoT=2FU9lr8^1(j1;~RCkfkLUy<sh0*W_V;tY}e^6e0=AXc+
z-nclS84!wdP@y>H=xByRgFFCmUs+>?JOFTkB7i&qydeh21Hc<&fII-aDF(>XdUJ_+
zVDCtjTTli86?yi{SE63e=e%G`Cm#P5ouB=*$Ic)}fffIA=b8RB?mrF_=D9ff$K3xx
zaQRPI?5`aXKuw%X=p6F8OJ*>;SA#M9kK%s>|2TMx<*1(_<u>qG2eW7_Uiep3d{92d
zJzCy+A>GPw82Gkl(k+Wg*h+sDQbMEJy`|n(z;gHcVt!&EU+!LeM(xr(4@UA>FJ6Qt
zfEeUrP&wANr&y*5o6+vJr`8MIdxd8&)?bH%(c0Ree30YP(ncphH)~A-g&EW~xbgW?
zZ|<e&D6S0tZhpzR&p@0BXVIz*Tz&ddJ33y8s}XzIt#E3Ht}|5s6I<mzw#ublao=;e
z<=(ZW*xS>d&bM@G`fp2mDUfyQ5d!(PRwfSlUS{%17-hE(?kJD`r#zJG@O($I;s2CO
ztbH`inkJI&Ma%K&xS0KGM?Bj-IU3CZPnoCc%GV}}6}**Ty3Zxh;c!O+?zC8ft6dJz
zyKkp?@d6ayUTMpg`!7c2x|q*_P8{ytwCA+C6NOtkhH_8)h~<b*Bp-WeM^a0r8vWve
z8Z9o0tQPg11<1=<pRMn}>3*>w-C!%-l10;DWaHs9hfN*Ra@dpy0Pa{af_thOE#(1#
zJF5c7!|`ne#tvvlV9$knmE)63*Ld}V(Gu_g83CN38*hh)F9+19qY3;tozB4&Yw5P4
z_aPn8mF^a%qt;DFx*;7SFxJwow)_Z?==lzK#HBozAJ<v@vr<!UOh@xi#CADOxS+Se
zX)!siH_H$_spq@rbS*L*K~_V2t(xzn6K>`4WJ4RL1hB_Ok~oz=4s!4$bZ*X}>to#>
z)VrXN>(#%6c$`bbQlk3^^-pnFf&6?PXGnaE@Nx3^+2$Xyc-9&QT9Y<M8!TI_VN3b(
zKnwO_I2WFTaj$_&D^C4ST-R<LIp8lB4mPsdQqC@t5{#T5GqQ~yelyNE)SJ+Gw>H<X
zH3p4$zsb4M51N`ot-j9%?geTWRQcfnxh0^2{HXIIac{vTE?D9~6EY4KmgHSTUJ=NH
z#F2-lW#-}WT9^1qNc)!Dp=v4@elTQ2hAcJHQU?T<aj@4(y3(lfTM5hyHhS}hU?hzU
z-Z~KzN6zD^2yB3G1m9ad*=zg`L7hIXl>t5U7ed&Peoyz6X$*82M#5gRBDY_R3KABu
z|KL*n(Yb$e?w_5D=TAiSuXIrkew&ZL<)0UugKd&LY`w<EpG{JSb=c%Qw8?B}E;hkn
zex8+J+ucp(>SbH$nY)KeMhQCE0HBqg{G`e_J*<5bE0_1Q`@!6s`BSw61{F6AMw^>N
zRoXc@zb%wi2mH&KgvvJlTj;~CE(;du7peoI66jZYgYy>ex5fLd_^aFEajA{f6326#
z8D=M>h+{gOPXixNkR7P($9|SHo5#QYXLLvzH7QoUhv;k1$2_rzZJ|VUj)w*XsB89K
zZ%UjzqZq&$g#$us(~c;p*!43tpu8z=-Y8ubK@jzkcwE^yfE@5w`4N7uWex1%X-v6n
zeje4Z$>l1!TxPI-IQZW4Pr<snx>B%z3FdjZN>?s3WO)A;%=go<{eoq)Y1jjT<#K5l
z#v$Yz1Zfy31D4OHVR-umutFgX^9AefPQ$W-6^n#*xpJUHNZZqsh6RH4_NHNZ!TS2r
zu!3MqmH;*wm$zH6rAq}XSsfGw>+dHl&bLRffdRml#c6v5TeeIvm$px^!9l{}v`YjV
z8q)U|wLF#zwtPA8av7Hv$FwM0sg#C685XeN;WP{?wt$U{q+x@CtyqzU4GA_nnuaYG
zY~{){tR&c~RcY9;V5?WBVIzW#jiq5L1S^*T>yOJpEx*bGl?ux1#jurvJ>(&P`I%v>
zgH?hZbP!+znGu7n7VO}I0n2Ar7;H?i@k0R1buBkoS+F(Zg1NR)5$w=4UL}`}+x<fX
z3lAl1<tj^ikYI;}fE8lc!Gcu}%Oj7Kj@}`H)vB=ZxiqFXF4#oP2h4YPYXqB|NW%^l
zZ0#grp2G_TTemh1J4~?k>(a2QU>nw_VKu>~Hl$$_f=y4QVUvO#KAncG73_$^)39}d
z9eG3=h8;_Mx1)|s!!`)E@u&<cH?D&z!H(YO0~Xi8v|z^^orWDQ*h7y2y-ZvOM+kQ8
zL({M$1v~E8H0&tBjz2C9+bGxx$ERUO3wGiO{|{sD0T#ve#ed&B1GsdQs$xMbfPf1u
zy{gzi5wT+IV#5N0N)eG2SjCPaq7p0C*n5i_V{b8bjfy=Q^{3HjOe}fNIdgYipa1`T
z-q+{x%lVvhZkaoG%FfQr8vDY?*D}V~7f!xbEscE<<ZIo^*cVB@*w)6rDDt(5g=MqQ
zFK;yY+P1;@CyVVjhJ5YX8v9z3uYEgXUn}x;Xm9LmO}@Ae#=cnc#m5=@+K{hfJo&_S
z)RugmIvVG-BVR%%@`-J$J^4B(kWXw|9mtp1nS5g36i2=;iRd#Gb2pxRNnMP69m&@<
z$=KJ4eBHVl`x404y&L+>M17sf*P}c7RKk}?zMehMXD)nQ$k(eU`rvam9m|r)m)y(P
z*Oh#|lZ}1d$oE}uV_$dj_4&@&*Moe0`xyIrlCNK1V_z@w_3vlwOD5ld{>HxE<Qq7^
z*!Laz1`Ra!^&#KjLB_tm<VzWB?CVFqAt~tNVhs9|Z|D$X-vIIr8%jPgCkK*m_%LJN
zAo7hEZtNROzSI%q6Z0yCd?QoIC+5%)@{JlvJ~4-el5g}V<NAh?Z_H@p`i7G)ZH&}V
zHtdT>kS{&Ww4rRJpKGb)8=H<kSuF2J@@0$#pE(orbQJkA;pK8rpYV+)-?&UHYax7N
z$Txl*`NX)Sk#E9y<K;*vU(N*ZSy_m@vE<9mQZ<xKEySG6Am7AnsE=ES{$-LcFNb`h
z>^SmG%0-{0C_A2f`4iEnKaZF|zR7vy6J@i=S1<{E`tyiv@@ezIXJsPl%OT&C$;M-!
zOTNMaW8Xyb6={uqdE_geLO!w1Cy`HAXq=Z%zNtmVzRBd9R&4AmAYX~jxIQiUrcX7_
zn?k-B(~NzE<eOOnJ}WNPTM_wYO~>Vxg|C==vuA+MRKJdN<eM`S^Q^@9O(oylS(vBy
zO(S3FY-3*u`R2_r_Dv_>{JF-y8RRP~HTKOU--3C@zFFiepHDt9rnAYnu*^7b4*4n;
zkWXw|bIG@;oP1*2Dkb0Ih2#@sFpqpoD$r*w=D~dORW362m67lJ#m2q`<XgJL*jG-z
zWtHf&5%n!3-}3L#XDfUa<Xf>6eRjgPh<q!Tp|7U!EhgWp<>0fj65GcT@>Q)spFXdW
ze5+TYPrn^~Pre<ijOWHu^6jiL_AMjduGPlA<>cGF#@M%le0$a!`&N=~?>b}OD)Q}H
zPd>5Us>rv0gRyTl`HuboJ}daCN;)2`A>Yp%DNn4owd6ao3G?*(uyy3SxEXww`t#!T
z<ok6Cl@;}EAm62}#=alOcX^w!ZzK7xY&Z68BHz^=#=gzuyS5X3`eW!8@?GC$?AuDd
z8@r8t+sJowkFjq%`EKns_U$0wZ~KgWJIQx@Kb}+T&mDJ>@6G`{pR6V3%Wm@BJ&5Po
zdfy)MRsV?f>5mJ0$#?G%`t)PJ4}D+QVf5+8bU*p{5$cN=(*xv_elqqQB%gfL*!Ls(
zOnx@@9U`CUF=O9h@|hh6pNYQRBjl@b0)6^@(@*3xKM6h?{r>(a`7BP6PxS9+@>!ln
zpMHOTjC@vSz-O&5dz^gMXUQkZo*<viIrQnvo+O{`dGHy|PfwAr<^^0I`t#V+<g4|I
zNkbDm{W>~BKKqN{Gpx6><a7Ad*msV6j+b!z)z^2Pd`_258=6?@>$^Zc=PTHk8e*OQ
zLOz$P#=eW>t9=d18v61p`RZK9<FCHHOXPFC0cEZ9V}F@^^=@K)`nhq1eD!ZZeTK4E
z!G{;$uH#?4yiEo;Zs;9kfa9j#K?XQ(=^bQ%<C@+<#@DO2gb;tIkCOq8M|uYtQPRZ6
z;K1MCrHk3A3d1XoGY7!s(McFoTzI|w38w0=dqXNRrsAdHNeGIIo{s+=(PYw7_=81X
z!e8T}$cCZ_N(#Q$=6@nI5NkzHTsUISfbj1h;_q|u_XYm_y6_bKij;--T;X@g@KTAI
z7hl5VDvzmfEjrB~zLrZ10I|p%1no7+_yXTp<iCRYJQiSlFgnfBG?<p6*ePfa0h@l`
z6Yne@3Ux{zF<1-T<>iqAm%A*bjBtsi*GL-%evcxk%qWA^@E8g;z|*`I@Y@^1z_h+=
zao4QrUAgI9=HO-S#kea}3~vH)YQto>CJeVvf!&_T@MI^vPg{A%$S`O(|26a#p8mx@
zUK#Bz;mg8d(7MME5Pav0gO{1daHxOW3s~kR1(bHQE?pXI;zUckvWYV-@X97G8EfI2
z!<9{H3$7!r^caB)3O)Iz%|Dek@sC%=(Es-~Us0QsmYV@@(MzWx@Trke1ZA3=X3T^?
z1vuFF^T&U|-?XlHmkxf*kPZFEyK+oCa?pa6{s!}Kb0Gs9Sb!X4fa5JXf+TuoUslRx
zNXmB$hOafSFw9FT@<gfBqYzdO{ys2OtW@LV@03vny;F#8uJ#Cl73rnC5C9rW#evaD
z9wXr|+$s<1q&7T{fWev3aAPq%+404(B^c1}(U>Vugxi%YCXE4`?z6)0Bk=x)Zz^hm
z&#hCP@O%YiPK0~VEn0ZOy;ww1Kwx8=^mBn|n61L*CSk+QUa-*AA>1aYe@?_+@0ALC
z>Plm=Pcu<GY;iu<1j$T;!tiYq_D!^eeTAPq832EBVW=Hw8N7Tmi(s7;e4_D(dpV}z
zjoOXCDA60adLv(NOx7E4)1#6McfBb_vEI<3;hQ-JD>s9OHN5JZq^T6&JoKs1*GNvQ
z4|h|_Fe!0P!kwLLIBW-U+720RFS7CohM<LsF<F|`2ym6twn5y=g#K8o%zafVbG76M
zm(}5|NHqe<^3ANkX6&(<Ah`Ix7Vklxp>$vgMjZ8#Z5V-Ht-$Us#fUR?4Tb=|b5xcJ
zzGTAaN{rUgN8#yLbgo9HtKJC@cPmBUy=WL+kI@GDC_J31L}4iv18)6Q47mQU7_d{r
zf?Kg*6Mexr#km8W&Cm&>X@)-dYbpL(iNDt3Z!Ph6w)k5E|0cjt;M+fx_jsf=6*0K+
zlj_RGzqt14?*ClFmKFeQN*?J@Fl{Wzq(JNg{6??D>gwnGM9hI_Qa{5ppDqCw>~0Oo
z<0$kOe#;jw<uZxYgo}0z?wN&o3g0E+Ll^K+0DMJ-<=_?-83GuEY06f@e<zDO@8Azi
ze`?%mQYhqw{DdxeM;F-AMD(O-VLnd^L6#=spGg|DovD<w#T{6?hB_#o_5i*i^&Ta%
z(;fnOECxw~dtodlg<;_apQ$u{{feB{7$WeB8>MC!QS;s2`aF^44p~0um4$|_i)wOE
zdPY5k2le3#RP3|Tb7d*gra-Z1Pq?ws$pVM$2o4#1FVqr_879zo{AUAWh5u>rfXC<u
zg}Ubr5A{$t8$nIDbHxFG{gFgZyQCV%xWShIcts<wxvwiSz*2Hj#@C{G4X4b*&^X+i
zGcg#FCgB*<x5e<wLO3H&!=Hk1tQ#i?T!U3+3j7d+V)*I}cwLO*fpx4H@X)Vf`00&s
zy%C`|V)O>Q?FEwIurUIUANajvLs(|G_YmGeWa4ohdeOwkoQ@_psJnPCw({jVo)_Rf
zxcE=`h4_i@;3XUrVT&+<cXZNk#-~lg6@C*+Dh$8D052Z2$nOXX*2KrTX?{EyU(B9B
zLS_a`^(F-vNrTq~Hm5O7hPq+nfO$I=Zt6`df!dTW@(HH{;v?rR;3oXW@Teg?a&8B^
zDtax5g}0*$e+mqqG|q)J1@HdA=cdfW&-<nQ0qOpy9F*fE{A3e-H)zV1L3^X9y>`$K
ze2YK+g(C{JS0LK+g!ZbH_TWoevkVwR<@cXpa;V@LFDzrOZ|MQHbV165o1);RUCK>6
z2(~%AzYy9@JA$_I-ti_E-@}1H`Edn!w#LkyYJ#D|3e(`1Z{XlU{ek_ra!v;C@zIaX
z2<+U~-!PD1Nvz;M-fPypzO$2)Q|3{eu`ULyj=@saXOaw?3N9!7MhLEtUN|9qGw*?2
zfNy4jz28JQ52PPm!UqDylRCbck1+#RB!0hYN<VEh8v1225$<YKrUR~|mhhvAK2~Nm
zOyFD5G<TSFE9uu4=?M&F|ER1eSZ(3Zva;h;T*g1CxDS6)k>T5>IiA|VKU~TQ{=RD8
zKy|QxFnUbcC{Po4pv^rW?g4|pGb`cw#IEBqMvNH-w*WEr=}*ooEy35lE35d-@%I3j
zd%Nx(@R+y`_(o6QR-@7eVKV%K(d0ds?QU+4H%y3k*kS8);lDW;Fl!l1Vg_&0VsJMT
zgSpIJK%sG9!yg9YLA}K?L*f4~;0%Nv4(tWlCHRlKV~k<0GyD&L|F99zGwzK20b4Zw
zvtWax2aGpkS4ll%(0&>vjk9MfvS7L}yJ&|#X6#l}OYqO9oOk50i9!D-@=qYo>S<+3
zW-Q*e=0Y>JVhU>LK=fSbkM<VI@iRZ*XvX~JIl-eKz7*{`0CSr5LC^CAXeWE3{ZBe-
z9m+2yT}E0NfH^}vQ5SYCOR`|8mS`uAXg%MI4X{9aQkQ@2%;3!qsK2FQKdZd5dxK{%
z>XP}Whoc6Jw_vBJtgShgIuVU}xfiNSSL|~Z)u6RJ;Ap|dLZ$_~t-|P7>Pc1z+79lh
zHKI_TmY{lcL>-rp8aV*_uqYDyaIFIMp)czCfv7u3n+--gPm5XrZ9xy~U|D-_To+T_
zu?ELt)Y+k^@zD~Tyt_MN4^z9K_8x}*wWCodDWgQ~CbYnMOuD0b&@w*mk2yPI(DQr*
z>Mw;@L)(1RykV$1S|hHsc2db+ABUOS$llTc?ZAxmwq|Ts9M;yWIeO}h!BMSE>S2xb
ze5!%EU<gKg=M0AEL0UV_sGbQK=-0Nzwf3?b+6!Y)3$0NHlX_X9Z9#g7TJa~fr5fyL
z%ttz7PYS(p^vu1nKjBMIyAMYFI0$w446MhM#@S&I_QbBMUpCA`8s`QLF`7#KDH)0O
zj-FVm*BI>owj|U{vXg069CSyI&lt=!p;4MQ1=my?>f7b9=>NMv>Pe?`*j>S|A=skg
zzNG+8q}H0}4h}TX&Qjlnfv}BA;IU&V=GPpN%o&HwK0r>e=Lv%SfgMZh{xKm3w#ZnB
z!Ja|$F+mI4auU^fsOQIoK-LflGlP3!W@9#$YH1zvF`-gw3cpK)bw2Hfna$woKCGqL
zB&@}o?I5!2iWER($0jxUn2;w03;NLaV?qoIfhUr%pW_>1Eg^6}Q324$p-8RRZCFS<
z_68^xdijv(j39V&31U@1d!<+g=Y>G3VMra|9ZEPZZAW7*9ocS<bslW0&^{t={xP8s
z#10WXR3UX@KM}nJ8p=Ae6EMJbtU<Gn31fiH5KRHf06IrB6lem_1)`_WLN3rnqPIZ#
zK=7tBsO1Y}P64_?^aw}?bd6|^sPhI<fyc*$=@7d`)CFR*f$k6;1)2wRkBEDIOehC>
zNOS_qEe3i*v<nC`pAl_=a!Y|;5II2%TmK)?Y@n4uuZbFq*c&2yXkiV+{vwKk*ao2Y
zL{~(w{~^j0Eqo-p1<Q`@!9fa^-5kno2KtX^EyS>A5=>A#b{%5dSt5hmIDnQyExUng
z5IF+v2Qnv$208>}N%SAoaump#s4LVm4+uW%LM?wo<_Vx$L}wsV2joDs2r`kJh+;<I
zoJfS9k;8JyFkkjc6XB`=&SaaB9~17tTe?bt?AVa}j|tC!7D&9I9XmVVW5P=~_AQjO
zFtZ}ku$Fwbm@><wkfyM$aG11X_n?+QR>)353-F|!D{c=u_PeBlI(74Lt11D)%&0M#
zIi3Aa!tLRiAJR-_1K-WT4=?q`a%C(@UIE+vm0=$f7^?!po(+n@%qrH6$P+RH*;@9U
zjN7f(Ol)Bj8%lI$2GSNbf@*0NjkRoJqo`asP$1A)8C&lHOQhm^S)q)*o;wj+-^X;6
z85oRP|3N{e^*$!pNk6is6dU1>u|sSPQO>B32^G>|wgqajW83<COt`>~vuhAztUM3v
zJi+czUl^<hINuPofR^tUcAsKDG*Ds>iHe3R^q6X?1%1&%xj*FPFfM~&Jn>BB56ZNr
z%uDPgEzzq%xO|t`YwFn_Kn46VdrLH(=sNpE^n~a)W@>_?dy(iiQxT;T-DTD$xE>gc
z5@XfOj_4SyKO_eeoFSKChO`87h9@KK*ehDM_gG!ZTo8zv_n8mXc?+mgy3bk=9VdFg
zLV*~25P-|~khP}RU6>P<k~wc}g0sg4=5-G2o!gn<=td{u@>%ls)WVc7Y@soqK(YBS
z@|S?LR7>whxEF51r&0^fw7>S`vnh51_T@LY4-n4leQqBUUh@E6MVYN=7HIf-%Ipt&
z??=2H5@h<q-upFA;MLUnT&M-#>hwEh7E^nj`D?1P9O?{&r@-G+ok>(@Hx3unVQFXg
z$E6)bWXBFe3ntPy5qnIT`FxZqwiik5%|e1@Zw6x)$ma86s^vb-ta84@6qg|;8EaVz
zge`nev1NQSm0Jn@bd}ZvVdfg@*=By8GV`gu?fg1rn!tJwgyVrik+cPz=AS5YB#q!{
zE}3CpK0=)u=@%fZlf$yV=GS;5icO-e<2r8!#MpBnExXQr%vQiuN>SsO{U+!~+5&##
zYRVi;eff?1o8hwehh-0B)j+t{h&KP2;Kc6pFv_fQ$2uSI*3{meLd<+DXfx4s-i2cS
zBYMsI5<P^m?kN4mhf*y*u2_q$bc!e_63Ic(GU`ihK{qlnR$ovlEm0F7T=tEy?19Xa
zVs>mNoLy8(&816J=g}5euDNuLXe-sJCbDB%7{LmuGZ4<}T$sCeSzpPw298-b*aEby
zzZ41=uI!jK&Ckg|*xpuH(-o3V>O(Y_wuh<G2r4&}_7jUGZH)q`a|Y~D0@)TI9Km+O
z+S>W?Ez(q?ve9kr0)eL2pncXzAjn)mu^l56s;Gh6-?qhV?Q+<5X+LEKH^$gb=^)Xe
zp>6FpN+%`wEltP_gF3fLXC(MxM<A;{n0ZICR^h%iU`AUz*uo_nAUjqg1!I2+s+;n<
zmWljMszb5!BVN~fD!r3ji7J5hN}nWOqFI8}ssdP|-vz<jyn*ghxld9cWga5>EQJ!?
z0eT^Qks^T@D=T|lOAD{Ljwbpi7|BXTvSXgqmjEDaVK7i23y@o?a3pdqU)RcE!E!62
zUx-5G)<l0<VJt$9B?_@dijmt8Z6j(Uw<WT+#aO)Dj@mmn5?kmdx2I+3ORaa4J5$f<
zdScJI%Slx3Xfl>71j2r{p-i2iWT3|Kbh*0<XU`P(3ov`8%RMQx#pnxgv>$4s(2k)<
zBTclFX&Qo==_XY~|0W@23hLV!DN9hxbfjV;J61g70?e#wBIX)|vDqfupcXs!ITd5`
z1?`1$fo!qK5sKC6i&SayJJGCiq?INr^A)gX_;c6=*fVT2sSBUn?O5MF7ZTnB!Luho
z?STFTayQ52OH9P}Hkx=6t@KCQEvN(0kAm)GVC)hQo+XTeamit?feN6O>>O<UgGso#
z7GjICkp3}=fI8vs+c`+rOe3jW^<pgdn`wKB9am%QArRJCANrERemCtxv5}K8_RKVi
zdX_%&0-RaBGX0L0&xMxnm1%#XM#FJwUzrYqzSyzN5DNrKq1XgiWAJtZ(^R6Rl=;SV
zG_`OMM(~*Y#x%_w_XV9AV!1b_need(u3x~Xr9k%1G|$`u>O2Lv*5|MfK(d=1n*tB@
z1hP-2g+^p%Hrt3)W~Jsbl&cttnHFYc<}$R96{1kNQKr4wLL+iCTWmzmX5Sl89kUfi
z<Z4!BL=DW=8Br6nEk@MLY&-Skoej1gV0PFj7H)QmVyQ`tEtlGvT_u_>=$27td$Vea
z!8J>$CC==Dxjk5StZ`i8%^nefL(tbz!dMVoQ)wg1?D%BV?Xj!j?CN2!)pAYNtJ2-X
zjb-=Lcm%PHgM&TH%-+}3c=RYJ^bQC8t_|wvSX7(3s7LCfuI_?5E)jJ)<%CD0{k#|I
zs|Zv!8#T8QwF~9kcR>4E1?msvF{f6Z`Jtz(5$aN^`5I+z=@9N=&njC+gGSemhUjmp
ztK}XA7eG1N?ApqMvz4Ug1#w_^Xp!V0v+3SFz)s5f4s`aU6wt>7qYcaTx_koE^N$zm
zLed>A&|aE`I=$@#LuR}>7d*XcqkgK93-vT_ln>gW#c4R3DUL*a*lP-S)=$!ank`I+
zUJdDq+O#X?kBv)*(a!D}47M+nYRn=VPxWZb=0FeK$#xfZTl<;N^L_J6K}{Q%d$_Uj
z!<K;Nmuf)c;x*t8DbuLnsj6wX1{2~}gC_T1E$eIW9I*`Q+&Q`m^m@vA&=6?RjU7nY
z3^goGIShJ=?Aa-&!ERY}6Le$B1IRRO{1P<I{takw*59C0Qa*uBO5vXFY<P+pXhw>q
zr_6HZ;IeeDgUcI38b{iXG>0?|)Qwep+IhOMi=Gak%ROB{H+s5)Ht}i*>fqG`^nadS
zpxwM$fbR3ufX?#_1^v%63e?Z5HRxck_Mk1jI)SEnC4m-t_5>a4*#~;HXYzYjH`dmE
zAb4=?DC);52BUvy_E1mGR^+4FhK+`te<CtK+tA417;+jzobx!Z<o;QnJqn6?W<h@I
zj(L!YYs!x;ZeI)@Z3A56%Gy`f_*wNl@M8|FYnqd<LKea(;Tp#}E1@>edCNe5sEfL(
z6m{@o)K800XOh2)G_@;wED}&(Mxy3TN9{}b3n@oOx~Rc2X!mMJ6|~iD+<MUC+3R66
z{)xc#GTb3uR(dY8&b8mWa(1uxGRRpzX*(=YNoW=5W7wwLXj$CYf|&<IS$)1|Mh4W6
z^~mg!?#MT-xUoS^PkZY35<#^tLl50S-Iz^ZEOkkDL#Q%8WoYp})Q~#z3HaAfssvp+
z6?1UgbR)lhtd4ek4z;;VN6jFOB#r5W9{<^>S)?~W^=mCF<UaV1)W=q8wR#QOGZeMo
z0^CM$UnjGjuy$Ys>Kuh{ZSq1+!;>cYG<x|>(e4@g&QMCpM|ESzhx`l6H8br$=xqZS
zH%0aB#;adLyDz(;MyOEJNgXWFjv_6wLi;Icyban5Ne_{yfb10+=>J@T`iZoI6WY%g
zp#Du-NjaNI*OE@?fYCt%Q6u6|_fJDDw?o}RrK(7GQT{yAC8R-#nB%(`buX2AnM$S7
zQ6tJ;d&1Rs*z=e%FWU3$m|)^1vwP#sL09G4f?7{-1no4gF6jAjZlGZknt_hV^#P5_
z4F+vKJ_hve)OgSXQ_*9Zi5fJyH)v{c3TSZ_<`m~m0KHg%>M*qsbbmH#W#(+qTiMG&
zCl_LL#MBtCn(Sikb}u*fx&F_fxS!<AzvPq`hdmhXdlz>3-c>)N;?)<udK6stL7fPy
zpMf~{WOlOtRjBh4={?e`<8DDt3ao2=4evWXgtDt#Q1hcucXdI%R)Ola2=yd+b~=*B
z3DtEmYIFkXtlFrTeNY!CqD~}xZ6~zvl%S^DKK!O{xI{E#?QtJ<rzI}e^XbvBq@xEv
zh0H}Xd-3?fnT_|?{n9J)8}EP2I=zJYSGl0(N1^WOf_kk2)ol^#N%HJ;B##s7uT<*0
z1hj{?MeRWzzqx34CcW1P?WxmHFZ-Y_PDC}EhdPlw9+hY>fgBu9UyB|E_e$P?=e{j!
zLTA)G(qhs-JD`U-y)leNKI}2z8?5rbVNGQfeFp#6V>)cn_IPAm(o|{=`{Aq_&1F_q
zZU+xfEBoGGIyyFoEyxblvK8tBvTwCOdpAV~I-}j1v~3%-W80#pbw=fNP&f8Q-3@+t
zb52nmXv;pd0qDDY+`E1uJ<$IR^bn7#GR;ibMn*TL%&&7PUi}%C?#D5xt4J+V(LT}@
z^*7S9p`X2QZf6)~V7%HBTK}Od>Y#b34eFo{PC%_mdZz^KwVhBux_CmnxTjTmqMtd+
zxGD1ok76>L2zy8q76!BZ+hbN~b6=>(qZ6vBBkH?&)W6(OPY*_2m5w@$a^_QXb^?0Z
zc1Hby^d_l>a<~in$C2Ldi1uk`)G+Yqx5}J3IFsji2N>31ygCGOF8iQPB)wCD_D7cx
zDD^Hs(oj~}qW?!*@jph}va;2ri7gtB^5Yw}fg1XgKJ43u+QKv5ah>A8zta&lKPnDt
zRz^uVf9o;wgA2|ptf6*PXUKWu(iw6r8lx)5h}^VpU>CvuhqGEElEK~p=O>)SyY>V7
zL5snl9U_N={-61H{>JHihO?JxqhY26!?~giR|xUUu*$tNc)AZy1|2gj0~Bk3-|&DI
zVg4s&HP@dp;#r@}e(Qz$f3~}RQXaJaCQ}Q#hmMBT6*{nU=3Ip>tMi!YU@P<F#DqCu
zC*>>z4bEB)x-)k@=)K(S&{l_z(R7A`qtUc;KNyYr-l$H~P}9KHkJWPP;ox~>iCRs1
z9X$GI_@X@UcPT;L?Sk4LY<+a2trk49B2kyvp$?da>OT^7O{mt8IoWv+c-}jqW`V7&
zJDgW=6ccOhIv)(tOckn?jQYW3Fx8-}{e$4y=7_qJbR21)DD?0}s8tJ5w{$`MiL_5A
zw11z6dYH8Ke6*`NqM8<?dNx3vIt_J^GwNj@)Q6?0XT4B&v_N&H+D;dty@vD|>4FmU
zOr%mCm1q}^I0(xq&O&LQuWtGi%!Ei#&icll0Ij4?c|qgxT<hoD)8P4yj&9w?T>`uA
z)ZajlXFme{x<_?mJx2C`v$DQTU((3n9^0?Z7ijTiH`E0~P#4Ca?j$X=Mtd;nK?}48
zka}66Z9#gdIokfDTRNcqZZvAO8){_$s%bImP^$m=0<>>5Ks`k{6Ee_FC9S5itEZu-
z2j$mGMY|R0o&>ZXx_p7<QqI^Pg}jF!Y{PSPna<T^2EVf9&FNEsiTE7U6ZQ|vIWuP)
zr{S4iP#x4(iKvT*p#B_#x{tKP8tpRDqZVkNCskXa9Zq_@IohG5hceJUL;7<EwD+`8
zjtjU2#jD@Jd6$DFYKax<A<_aHwBOc5{TPW_nSmM^hq@)5>_pVM(@_TxMBUQ~HA02T
zNpD)9-Hz(~T!Qu|P?^0MfoJ$%KT9@c9f~y`O<C($JogKLy_OkU3VRYW76E%LGj<pD
z8*o2@4|=S%DsMCPdv6=iM?Ek<6ZS3eO?aF=c$#IQ4)sCpo8kgmH>DnEa!Mmm&y;4M
zZBo3w-Qew}exNnS1cKtHW6s9J+r!#vYi|!8{A{KFe21TEVXZBRf#~B}c;@4m)yBI^
zK@Rk`OTjeKb~DiKLAp8eRlTkSOW+K_js0PXp9lLpp}tAMbB2TSZM<bR#R+vVC}*D9
zN;vN|hyAA+je{B6&>EL(O)b>pq`yMD`u$0YN1S($f?GpSr?{gw%R>FN7TMvbA1K-;
z1?|41$)uj7bxA)g#%SOY)aK1lCpg5xvfobW{LKi!FSzD(hkowvfX9?U4!A7Fqt`dT
zH{{!94))gfa8jEwP+RqM)R1V@wVhB+D#@OSIyn<{BxTw=qurr5YC-_&7B%Y2*fCTm
z?hWGAGI;#zpuX&ex?l)ugbFpC)WH(%DAE!uw4aj3+n~LW^bmOp$llTc{j)PrSGPf}
z3_vw4MjcA^KVN`$^gPru%DHEU_Mh-uudvTi%1%T38D;jMQXZ7^!(8+?N<fWEMcqU8
zLl?BOLQn_RMqSudhMDOPd(NhC#oxxeDQjM$-y&r8lQ~|2nQb`$)Y!gineu=2{A*=q
z`+v(+{882x|DVx4);9k?bIw~2g3OaPLqY9rQ*B`%o}X!0YlYr<uyo(GLH!(y8k>P?
zQx~-p*+=T5-IMIqUC<tvh&r80J(!Mmcr@yUPN+31QQyo%%^|Jd7VYPQQ72J7Y&P1q
zDX2Q~<Wi}Andlio^>?BA?>nI9A(hRvMf+w4)T`vVRzaS0RNtDYKTxS-<Y`DAb6Un{
zei*H4gsLq<T}sPxjp{Fl{+Q7^RX*FAvA491H>;xszg2B5<X@hHYyW9>kzqUfoH8B!
zjXI(}tATn&g*wO*^$6)r@*g9A5_z_g-Y5S#^7kgsUeXygv1~l)e9~^Dtw{TjIwxXI
zG?o3?1nqLNTT%^cNuOJxzlAmGI?`jLi*3*oO7+B3jtO~YlAS<y>=4YcC%s3@Skf6i
z8S$t`r=eb;8q!H~Nl%fckX|NDCA~?yiF66+Zqh2!!=#DS*1kxr`FTs!_T+JHjCO|-
z)KyJUH;_HI8`@JyPmq?7ULoxmhfz}+la8c!EYMSjMka}t^cblnE$<3DjLs)dck-CF
zL60q|4b||3YWR+F94M!f?0#gwal-u34ygNS?ff(!?FZDKAG)Bum+YvzXm?eXE*<SN
z38?$hP!Cg%U0bxB=b{Ev>$cSMB5E;`THHtWM6w@}J&)|8rC6#)M^sLFJp=8!WLp-a
z9X}5>mD*am0Bzqg)H>8R(^}*qyCJC+d76=JP4ztLia8S1(2z8W^ey>olHG!|6KNmP
zaioi>#YpN^eow5YF4gZ&OFEGBBaL<oTIzHw%(+SGNy~VU*4JwC3?ol%T2sf#??W}1
zQrTR}380)UWRE4gG39F(W6jZ|aiq>vwma!7>VrGglR{<Blh&gebfl>XSi`a?)NWM6
z1X`j{Dm9Yoxj?<zMtYxS`$uYhC5?tm>v|K}Z^^%qZ1p0n^9^kag;Z)i)$oGs;CUGB
zI0Us5Z4u|G)Mm1OBRgpzMthNd=zz8Zjq?|>6KKYMq1rOY9zl9~G-jT3L3Q*-eNW41
z-x2L!$v=?nVWcCeeoYxhUr_%GL(y&mqv6J?A~hcF;yV13+{195_FxuXi^i)l?&2C<
zekoqd;(hU4>oa^pSEBlJ70XmO*DL5Ye~w|V8?P<{kB2qtry6Ajzh&wo@Z7gW^&f&7
zM5=N^dzL+_IuUhRC)76ys5|DOwxJw9%8vy7+WJz6Mwcwb^Q%O>3Q-d3Yk}Y6ppI#b
z+AAFuues?<1;wp`Qb$LldMrZSUa|^m$Sqw5`gdK_(PZ~0eNLV)@Oh0hpU_n}ZZJM>
zth;s-oP{b^{N%>F!G2gb8qQIzr>z6K?|iH$b<P2AcN#aDso=^ITtS7i6q$7;^@8gR
z@OdA;cYvz|RNE5m5h&}La~jH?RbMhJX}!4X(9cF4QA;|bx{#-{J=#(8QB&ek;|HSp
zmR&cL?bZ7>c$N=Ft&@Pdj#Rq<?T)Q(8!~^Lb{{;y)Iq&vhuX#l^>jV5)u{dAQC(`H
zI<!TN?tt1h4s~%y)Z6~31BReJrsz4U`6|_EPi4QO=sk$)*UR5Eo<ROxbJT~VE924r
zhwL3>Z?Hkn1+p!z(Y`^R^KH<6NttUY`XlKsiaJr|L$a?>W`oX{|0lJ$g-Y!r9ZscI
zQKku%`jzbCRLW}zmRb?_1m?hh=Drs29hoJnDa<rC)+Z5lTL@|usq+xDXT|wi1h5%7
z&%Fa!5BFD~DWE~@bINYeMjcU~)j++XLLFp@dW7^Q`Hzu5i9B0L@00%=`FoRRFX@b$
zST>$?K4~}7R-}DMof9!9n#%rcf_6FCEvbgJq|dF;-@+Po9qBRB#Wv^(rF!Bi$AmmH
z$xa|Ub_nL!lis6cEa{A%jCj<e(@-x^4e6x0q^C$zNH3G7lHMfUM7o4@H)$2=VbVlu
zYhNVR{JbS<d-6ELRvE-Pl%TF^in@X9x!us7LVAL<g!Bq&$2g3d(wKB4y<>r%Iy5p#
zw4}#KEopgI*kN=&dAgIwv<-S}No}ZxCsf0Cl;c1-m1OrL`;8Okk9I)aPiyC=`Dj0&
z{`}Ad?Y(42)kV9jvUKTapGiR7mxg+na_rio?K~GXm|C}`o)=Mzk<{WovL}-LknDM6
zA1%dFH9Del((4&$*CpGs8149ZsHxP}(gkSymZ8?6zM0k{57`Y#t;o}iY-_6LQCG~7
zsD_55QKWClUz6+>q@76nkd7l=Of5!Iukw3hJ$0#mcUsbcq#tRtThLOcTVc*kQcqgO
zgS5U@lV=!tYSWrJPJSP%!IaA8QceKnY$1Cr*^Mb*vlwfRCXFL?rn22hUr`_2sh$)n
zd!Do&)u1CyO~4wKMWJ@18Ya*Zg;J@JRL=$K)i%=mG}}K?>nmwAWLnpo$bL)yg=DK2
zVV!SiTPUPb>#2qpWCzc~XvZO_ooI_VPo*}K{Ttay12Ni*^g{=<9cY}tkexs?_6yaP
zLG}pJ)1xu-qzkH}H|l#@M*EIv|4ROWWDg@9N%d>WF#3Y}Ul@vZ6BrG+!a3s|XqXz$
zKrG?D7r1srHUk^4YoR_$LH()M3Al=Nfix=wJ(;yocak0l<#1O99+4$i)D1cRg5q%&
zuNB}YM<+N^>yOJ$bTvMTj?2o?88h)14ZkMLLR?S7`weTuHw87Bny&vFe=qYRoF@eE
z(RNlo0lXp8dI#|Rwl#e?d*4UxM(0;5xY9cxzo*7Kd4iakt&@)vJ7-cCbeO3JsJ2Ep
zXc}t|8q2$b{wWU!Wv1gn=bBCfjWk=}gJr8Ix}NL<V6Wy!eDInKUY}gu2K5<yTV%#!
z==xX@9D~f*mnG=&&h!I&zwQ?wGge)3+7xTM3N_@L-J;r_f}JbBB>N-Sb4{5qMy-7@
zvmw~q&6<#{0lU9hC}_AGN}jf0cdii+nk)AP-EKAlRLiqL*UH6|Qvr4>)9=aN2=+p0
z8>pk%&!9Fnu7SGqhoJs7-h=)mnYM6ZD@<HKt9dg}2RRJ%l-vn4SsnmCxf2|PYx&Ns
z4=$W7aYFkZTtA1WwdgAPJ{9`oEYW}2d`t^miYzF*h~<IqXLCSJrAkmg6SRLd-2z(8
zj)E4NTm}8h6#cKwo`Qa%{PEI9X!n?XKHP<6W^1Fyb!V@Jr<dSd4n2*)^F(T<PHYG_
zc(GEKhhxLku=W*V5q42V<Y(6gp0v#qvB0h!;kn7Zg2ElTLalJB4*yD76Cf3fZH!dT
zk{rHMTd+g}byZuk14K{EPtQ>^Yxc7s+oUbBHM=LsFKL%-!>pTNEjrcuC2F|O&RNiI
zc)ODw3n030zGM+x={3;tR>pLNVnHJFeU~PX87s&o$&1xua|LaHzBm|aIb9p>CSnyL
zHhHcFXbF+d<<3}mlN#G>Ab6K8J7=JmH5{2MJ|qdx-n@a|gmhxrg8rOrV&crE3VIxS
zN_JtDg4UGol54ZS1VzA`!|Jkb&6HZEwlXnsWy=N47{XaS_KTpE0}sme*i#}MySiYI
zx&d?Yz;aslXPGH$z`O;8mQ>3P*({=C{I%0MxsidYO4rGa4Rm7KI@sUnGmBfTlRXSn
z0<C+oxm3%~vM03Q#V!&Rv8}PD_)Als*!q2b*(n5`{7Mv*3gvuQFF`jZM*^h?IuaYg
zeAzldMWtTw_LIK^4QbU1ez8u2570uL?l3O?V%hKW!h!AJX|hO)>DckH*0lp!8<DwY
zYy#ZPs3+60y@6nL!@qKsrgFGCkPTNdY4&_2oIPI&XHOs-Nts$&?}03n2xq}qsAaZ+
zYMBJFZAvC<AA3*^W><-RmT;6p1s!8J@?i$T@r*DKu7|ILBOhgm;aZ7d@UjH>r&B$&
zJ>%Mn{UPXqCR^Q#eNYH`b_Ze{Rt01NO;WdJmIf+R#~RUebzA17#MpidHM})PPyH;;
zxa#QytLKif`jmNs#lre)&mxJ+Rp*wJsynbwf^GoCvjHM=bcb`Mo!9~*W&hHNRVkUQ
znZ+V?C+6Xe{VZpry01`oW-)4odUW5Q?!s<s6nfrzhq^0!7o^bkf}hphnFl>LUCz!I
zoLBc`X@bW3JXZH+Wr7Y&|3m#9bAh{av4xR&@74WSM?q8anBM?aCaCQw7r(*moS^@F
z8u+C!?@*<jrqI)GC>tQCV_|^baJEj+mO=4;BiSuMKMm^cH=0?8Ddl`qhxnzl=7N6C
zPxH%QF@gepC-`NuQ-VI`75I&37X_J5()nevJA&#=oaL9x9t-lFSmrm$s9dF=mi=oe
zx6-eWnZpZ&aB1sIT<@o2_JVvTZuKi+-h!Tu+UqxqjT7YKdDL$XTPkQ~<~hGo_Jg2B
znb-X0vtI<g>X7DF&Tb3x=zrgDA#;mR+B;mh&7^|)3DPuv>bHnR3EE=+)Ne6M5p>J@
zmERIJQ&3uq_kNY^f}ma<KKp&oSfo;Cw#LMNDT@^(`&;`jV>1QSYvt^}f|<eVad2rp
zeCzwKWd4Ho#5VC?#S#T+lYRZyu%m){v<mcJ%dQC8po#Kd#~ul4W821mJ!=dv*TLgh
z^vF*B8(0xhIg6@H_TR+j8fc*ZX0}|=*4R=0Ti6duIXa4NV?Pn;R5`9${@d7TLDO6d
zfG!D2gxGd=OHhA^ZD$V!4TB@l4)&iyuoX}D-@$BSuxBS2ZdJQj43SRt@8re)yO>r`
zT1Pe8#VQ2-G1d)8IZ~cb=>m|H{n80ld4MC(HOd6?K4-d{Jrh*zgY=0=tD3U_N!eqb
zP~BPJ#&)wQEgAg7{mUx<-EcRxo;LXJVXqW|I=B1pV}A=;=Di099^}PxDr{jtt4s96
z+`9XZ{`<vI=81WO?ni+<M5a&9DgOg(sh|Pgmw?s?@}F}9XosMdbM6BDMD)bGYn~hY
zhVK(W|4w}De~_89#@3&hmlt5nQ;<)=D~PotDugBC5bI1-&U`BVfmn)xOaczG{etoq
z+6EkDCk^Bn@H4w=p!xyF*#iSL4LHGG6P2>Og?<627>}iqU|XW>*lA{KpdVe&uzCgx
z4LHlZ4b(E=JPRjMX2CD;tvc1B8niGz;1?DzC~aXPP&Xx0HOs$8z(v+miNW&q0UBta
zlz>YtLu7W1yJ>Tk<q#<&ah1(8WR3~A$~F<f2*P~1&UOh}<_%Bpvg1mosz>BG(;Mu(
zph1y#>;}6dsBN!P_BYvMK}o&-Zg`Wu6Z9!}LclHdS&-$#i9lv;l;yio?#6y&4uYPQ
zI|6y?V_xvRHVYQ?*2@v7qo90<-C_L%l|t+e%Mw)4!j0W!C4x4!a0FT@Xmj~Zn`*X0
z(82P(&eiOZpuc+Dw7JLHv{iamqvu}dd#o3cmYsoe_w`$x`S1SPfctE#$iz8+pB-t3
z<;q!g<Wz`RbWmzJo-`}q0jnkGdeS_gx<n_;ajiUL?t=Qn?R9?0yor=8=MmEg!Y${~
zH#7M$i=-HCsbc~jvuvdn+K2qk3W$mzRuS+!b_D(%GmU`Hp3m4?CB~fQtqgd^ju2^K
z?yd~@gIUF4W;tu$bzQ)7mO@m@`cK{&@RA)CR6X=iz$<o_2wOiL@F#mpbc|sOZ<s1x
zsU^buV!#`=lc<y($hjWymfaIn;`bonFP7aAGfUZ(DbE7lu~UND7Q7C4&s3e1m~GzQ
z0e`dhf*Ou{5b%Lr6qF7056gomhOm~>!Y={;vKxZ5+3;j7^TwC^LF{+kgMd$BPgKhG
zIBhfe%!X4;%Z_nV%@>wUq%0BRQ;3u$;(Vo1Cg&R!QrYxB<0|u=g6j6a19XH4Yq8Uq
z@Y;#kx|V%x?W{57%>;SJ*4LQv2tjA<Z`#!0*#>gg)ZkTu;>ymrs`xL0?zcZ@s^WhO
zI!rO!E=mi_$~-kH?k>o$yINz;Lj>gw4AEHdaR!RkSn`8JI`&uJ?f%x>1fC#*y*G1@
zYNxU0eTcMd&IGt$n47}u3NbclLZZfoHx!fzduSUzTu><N%Wb$xH_X(+>#$mw*l@L=
zL*wCj3jRHjjx89Utg+>L1(h{|dr<gaf=sgpL+nv^r52M0qk%knAnDlc#EBX^K8Hxl
zeDf0nYVsq3#zZCt)Z({A=7F3k8hbvfr&3EXyvEL+Zxl30i{#P^W2LNN?P-viNTg#U
zbLVIrc%GmJx#b#1eve4Yx<D;XJRw=B^IY3i8YiAdRLXv8yI$kMPl;HG-yuz1p4VH+
z?5sJiapju@Sv9$!smJ#Tas{f-j|nnsdR5ba5C0C!=~(f+2bxCw5s{XinhNg^;@$fw
zvD`MVH10e_P=3Edn#O!Ck(R{*HQ}oT{Rt!AlwT2<7H)rQn(~OgO3y6Z{)4aFh6|d}
z@IQ?wcj>3ZiqvL-Uc7=x$1En;1UBclMQlOxf12jJS$`#SP?$@gH&+wsn8)}z8Xw+G
z(3^4f1AX~Hk!cHkX~7)_DCO?7Z64TyhY;yl!*TwBe*Bb(9jp@_=+7GuR5Am{ai-yk
zf_(h{(`a})k&gAWjSmduw?(XB%cQ^{-f$3>D`g*BB?pFZHdv|UV+Pz?#|IGU*wA_L
zfuVe(h;4(>4dYfRn5knmr_RxY@d!b`>jngd^VdXL_Q$Nzfe}1*h*IY#9cNLzO3)Tq
zn^Alxk&f-jo}-E8j|6G6a{^;{#ZaYOze-(TOYS;Mp{3dI^bpSz<O8*|<}(GwWX=nW
z<xNLmW-0qTYe`@m-d<2v<(j~De3YOAL$(EW;9H5btXn4BMa&zeVmTel9(On}p8FZ-
zRA5IQBWMh?(1~{=(y}p`)v5%(LeLWEOJ}~(Q0~{jL>@8{>x34H?gn<@TB1@W)&3IL
zgMTk#b6}12<mUtpsAn3~ljn_6%9R$@3`*u#1Pv^z8T1`@9j(NskE$Egm*)zaALbs^
zpW~1G;WFGE*gR+;w;Q8mUW73l#FrE4Sa6{xXb`_B=*pDvput>|reqd0X&;orHwpT0
z3TMOkZ9(U<x(5y8<I*v+lw~y@9W;WUBZ3(+RU0&le-Pw9bz0D9K5DE|X9t)sWB5@)
zjoUX59K#<G>DZL41wrZDE(0^+?JHT8L1TFyk(Q-qahAdV78KB~d0+;2&QvlRm9GyP
z$2|n;qP7Q(=feek&fXt1f!`3cs>jiwEWUS~Qm#+mGeOz>5s{X?t#c+Qhr5nfVh8*F
z8kEc16KR=${a=G7@&ZBb$v1-X_(ehW!>WTOagzyHPRr)IJqw!5I|>Q|D&UU<O>}!5
zq~$JIN~T5lzd=PjPtZV!>G*a*u5j!q;rEDO9ZfI^F5&6fO1S~W7<)vdV=JfIKx|YF
z#!A_o4vxXoc^Q$GdA6z>JcF+i6q3i;EPjPZ$HwHj2hZXrxmZreZ1cQ=XY&*yEh}go
z96X1gA}VFaTDJ)<<?lr1U3+)UJkBO6<<5t93ZBoiiL`7D93RT~eG%I}s9SIuhZn+7
z3o(Pf3tqsJh~U|9c#OK77m3)ef|THLzEe=!f|0=sxx*wZr)4`EX9rgpT7M6%FXrhK
z)3JaEUGNhARAjzLo)uilv-6equIDTWUdo40R%%%c`{bqkilB$hmjy55%C)>w=HF+V
z$#UMdK*{XDe)M0#`w40$A!P~bNHkj^)ptp2gIDn7M0m!s3FwN*tmSaWbrpXr$Ti|e
z|0-^xW$+K)%`j?ba23xN^v}pc!E1OKQ7Oxqe=2w#KSiWtzl2>3-oWjqDCK5{-wNKy
ztqT>x<Jd-Cmq^D(gjWY|;@%=QBK$FsLosIR*!-~n1#jlEPN97f?}E2*D?y!fpMtmY
zWFjs5eTGHIcAhO_uZrzMcJN9OtD4~vvYUS(DrM*TM1<_+E>o4hw3?X^vX5sA`fIvH
z$bNoI(2p&9gdE^@)0E7AV%`NGgz2l$%YethKk`q4S_f7KAL1jXEB&0&5UGer%W}H*
z2sy-eidegtz9EPCYe6xC1_O1PsnmHPV1yBM2~Gp*C1QKv4Dc|&Mg-?Xp>7OnAu4BM
z29Af!zh+@ArOeBIO2|>}JzJro(KADiakSw&gZ2J6H9N_}DW+4!H+2ING1Dzki$cEA
z*;39<ape;<ewsj1t`|H}VJ)Y`9DKr*%s8r3pP59Y&+MbL$DYkUC7<F|M6iX!26kH1
za)N3(&2Jmka+<$ZY7sHhIoQ)8wlvhu_OzkbOGB53oaGKmjQV+=yAqv%&*6(g&hxfJ
zILkS_$t%$)c7g9Qiv7Zm7{z|!W9MRfO1X<Xk4UNWBCj@z{mP#j#eU@rOTU)8#FrB(
z<t}k~-q+Y=ZbhWTF7w_-u`4{qD0bzWeqQCLjAB>0_k67L1dPkNkZU}KNa^(r-d@CT
zByRA{hRh=&H~CSc%-{Gqqs-rU?J|9xS3+)cA0nmByF5h1u+F=@(vbNiq?&Iv%Dm6_
z8fD(+t_$>aehGQN)kI32k9dfPVV#e7u_5zH$m4HX|D9JFW&X}j8P)QXUo?t6{boF$
z@rLC}>)66GUPPp{{s*6F6#L_wa?kl~qu6sEy%1|r%Dv$2iInyCf^QPEG_+ReOa7Bl
z<|}^ADD%}fYx6bNRDA8(>u;9mPd>mX_UAXTH+-g1><u?xq|~xB)GPEYuScZx^BwmP
zF<ka{-;D12Z$|e6FEYyfz`YiKUD|)RhDcf3e|WPcUt|ArHIWkgm(MqfedLu!v5(xp
z@@u(IJc39m_lfT{ihbrsjAEa^nUP<<={1w=zE_qVmyby^iIipMQkhYVOUB!nBt0^U
zN#Dd|NwZYn&)85|@>`CiWjrM*w1(7MP?kq8py7fZlno43Nd<zYmJJOxmnsZ2I@Chi
zN~D85G~8Vv9TTy3aOK2O+PQ+kKP}s_5UJNnh1%pGy%U6=t}P{(RZ1)e&a<qf*Mc^{
zrz|Teu}X>A!x^WQq*<-d$VQo=R?;*<JsahQT1%CJo<R#XlE)e)bFo?*Y9pNzlnbAI
zZKW52&Q3;ZyjIC{=~1n+m8t~w0J4*A2x<;gQwmw9WX1s1l1>xp*n#dPq4v@Z5qs5r
zUZ|sFwO+}b3*;ol3hI`;IMi7x5|rL!UTAG;hoIN<SB2J*?g_dN<?2c<8?csA_S|+`
zsH@b}KnFtWOKKu5`@Z3^(1udFAQyPQeIsd|pm~1Pszy@P4@zJDm~ti5UAk=`&KgTq
z8<kkz)ZaoIOCJRB@ztuPQo<%B7C5+C)lAA0)FQW9<ssb`)O=jE%2Tr2tYn_3^ElK?
zS|upO_Hk%)>58BU^B#wKOP>T4K{+2uy+tWEsoq_GU+Iyc<%M_sTS&dODzX0!yz8%)
zwhHQ-b=Tida@dBkQsz+hBGg}sCDO8rQEx*7q+@~-2Ym?*l3oj%n_aC6mSVRnb&jkw
z4GWP>b||EAvI+~8G=kpfs#W3AG(msOsuLC=#qCrwJ)GRaBBeY*Tc-Pl#Yo49;9M~{
zB&?OB+Krh=t-@lZG9oQ&oEIO~M*1YEe?d}MTdCU~rOtvL$zkoJ5<$FdU|4(UfS?4o
zw6G4+3qg~*=ZD2hZhMt-?|bROI!avxU7cSRmLO#b>N<KwSZAp~P*B)fpglx779PGe
zEKxcxs8`vpurAUSK^bL7!jhy%qTH&8lVM$@7W<U;(!;KVb(7)*9Spk@)?Ml&$SmSX
zSP!X8(4&Y~VLc`1{Ytq`VIRVJNgjfJiQwVMQiY&D!Y#wUlWqv=7U2-yM{+x$lp7aO
zFTAf5NCa0r2Q&@uC$%Tiu~j{M!~0834q_(m6@$VDNP!Bm)xnYB1Em;2C)&gNCZ%ja
zYvJ5`uoV5H(t?>?Y<P;)jY!8PhOhD;BHcTr#8!vLhYyupjv(pSi?A-?!=$c6TKHD5
zSNL!#PteNXLE)*=_eAjduY(;MDQy)L4R;2Nk`4+Quj>>%T5|u1!9RF!?aUG3W29I?
z!)IoOr%RQBY-fxJ&yd(rC9^svFMOOdN|05{R&0V)@Us%@-7+scOWG=EXy7XU9Lf6_
z#^CA?w3jP&BPwMt=M;rcl;#p?+1cV5;d#;#K{a*r!Y4^D1RbBTG<>q8KCZOTH)c(^
zR+>wsW0#Y4!BeDrf@<{E1s6(oCor>=x%b`_UL>t2(z2rsSNRu9dx><c|Dc`WI?3mh
zQs<q31L0E*G%)yR_%sP4GOf)tlM+EEcv;ia;WG?0r|GZZvkX++^lo^m6ijvMRL|Yw
z1LjH53c;L61WGW9&6j!@#pX-tM0j=|WL75SDlt}Li5)AKrU|M8v{0%L)Ft~#c!hM9
z=mhWE>N(I&1N|AkNcx~;s@{eE8@@zRpT=d<sZ?SAhF3~Mh?Gwg-%E3dwCr-lpW)w2
z8;P(^9<fY1XdqR@a_QI^tVPQjE~yo<QW}01sg!LP>=v<Fsvy#`z4oezHIn+g5?he(
z5wT91D=42R;(`*}=%9w!NFsQztAh$?qo9RA8>CNy4gqbHs(w+*eQB<V*ev;8BvQUT
zmRb=#G5;YS?%0+(3)++K2-H{5Wr%H;QUyJN*mfyf(4hVi5j&(}LD~IV0nHa=SL6oo
zCR{FP%ajfgJEcv6UTdm@cS?r^{ij*wzf-y-$R@CB#4f3tNJrln?~;`7l65Nl{_ksS
zNCWu3*bvKXV8?b#Pei$<@cr!`>8+qdb#lZW$@EuTcICUQJyI<}_+8c>sUeZ_eeqr?
ziAeco65h_M#9*GS^4}|cPo#V=x=&h7gm>-0yGx}b3bBR({Ui2EjV~!9|7OY1hy&6%
z1GRKGD6JG!Wzo{%khD?IlO>}gj!5T-;5)v#=S+`ET`w!OxR37aa8w#fq-AXyz%$*_
zazVp#o`nA_ofdREa$LmE(ic(gjZ;p<F-da;Ytb^t%%X@BQp8n-N{UN>jtN@qd(QNv
z6mbn><**E;5htbLM5WBaZArvwsX|c0%(W3`rP%A3S;_|ZuZ=h_l@XP*RNoyDzepEF
ztghR^h)YuJ4J9+DFv|a`lrJb#eKz8nv{6uVx9br%q}PH@_PZZ(OKN{pl=FTSaYrg5
zDrat<_5G`*jUskn?mrRtq}PJF`}4>LQqe7?oHN|7@kF{PXhgDg<nNNjZ6$Wt+d1-?
z6hfp^b*yw_&!yH1!P>kM`dsR&5StcvCG>?fNsv9<OZ8H!5VU$!gUFZCUxIc4y^=cK
zQCfJP)-3W*sh9|ladw(FQkg<5Bt#wgR$6YLh{$(R>|LeYK)?9N4^kgNntI(M|CPoG
zdhgdi@{^QDq-7hD)sdeit7@fO=BS~O|4C_rUif50a=DTS-n-a99Vy8!_moU+a{ovZ
z*<a9+2K^&V<@SQ!!g-IGJe)|&4y$t_YsfbQr8U$>s$`G*4F2hus_u+P3wa$;DQnYr
zVWgFOP{j7vUmj^KH-3njrEFl~mPk9fw;=1}{gJigbRsPaOa3X+US^M!%r*VbM>@)O
zL^>Fy>ygg#Od{;d!^qn5Ye9E>UqsfC=RU@AT9(%EZDd{f9uc<pDYBm2_=ytRkbFI|
zfqd*K6873G%1u^3Q)qwvT2bz@<_{$^EV+JE6S;~=xsR-w{LgdBRN>yHnap1(gnOH2
zvV|bLOTj~~B?$LY9&%klpK`sTJY{!5mJ`)L-hyzy<R!Nk^d%rT%1cfZWT%M)N+weF
zS<U5vf^eVJTuv34T~pP}Th0(PDAg2bqM#*?Zp=rXF6akGN1)|`v=H-^w+NaIF<<$(
zpzk2oLcSts48&T<e+X(7<;K+VKZ1HhIRe?fRL13L1-$!Ct}p0gg(HwgP{~3!<}bGv
zv~-~(P_m$(AQm7G7gP<g06AY!1k|aKX9-G%IyLetK^N!2y_50|LHFl50-X`G5@JE}
zEkXMr79{^E=nKSxW$AxPukGhM0@V@p7LHsYvX`L$iX4Gj>N6X-u~0clkb471pj1H_
z)7)5?oF_;-%@JsUAf2-t+!wx9(0pe{pd*3~__)E_YA*>o@8bycT+qc*c(a83S<szQ
zM<AzHO0V%fVo|b(pyP1QNtE1D&<<FJXt|r9pJ5rI<uQV0K`cft7PK5<G4d)wmm$_t
z-Y@7O#9GQX1m%>tu~zaQg65Ps0?DtHzLdZ+w3ZzOt%PN0E&B>`fPHJM93!Z4r6W+X
zpwT1TSQ~kyph+Vffr<p-eJpL|I|{-6Gd8NNEd7b?DM#Np*@8&N`nF1pij(UR6|%Z+
z)xmKx=Hb<4ya($m;XPP!axcn!V(t}ynFEwsR1pEIAT~n8+KzLBHv{JhavawqDqdb8
zXh$~2b_&YK#@J0F+|RG_kC&e+q&m=hKvYNhwV)HdhXVa0sLLcb)=9Q|gZ<R0!X}N5
z>LiB~6{^&YF_xqd)R_gbG$j*gXjGzHY@jJoUF0f-SUrcEHeF?lw^*kZ#)Y%4a-^W-
z8Z)B0%I%1Bswlte;O=r~L04lm@OI;#3PB5b;oarYB8Gdnp7MA>3ulx^^^_+WGAn_w
zH5_Xk&twDP2!16Tv#*5X`IT@4ljZrMg}=vE0WA?!BVz+l6_K*Wddu5HOkLZJ^_KSu
zTB<|3C`hB*7S&t+D9T}9ddm)fVLzXkW9z-;XhGPs-f}NN*q7dNA(65kddrIi;aO#G
zd96Y)N(UhG7!j`b4N-mMTL$_$s;~S(AzCZ_<*x6rb!DyemkR`io1Ba4FaJe^wQx32
zwtA15Cvg2m43zs26|t&{>rsQ`Wkkw3`(SyaAUtOuEbkYD=j<u+NkMqdo+4irgy-x-
z<OhQAoPCJ=S`ePI50yU)!gKbavc=!nmnY_U&OTIj6@=&PL**8N@SJ^^96_Yq<2g*$
z-~Wk6!(p;=K7WFaqQea_Jc<sNJBV^Px+CNsg7DZl!jRcpeJ5&!tiLz(=4g2LraW9^
zwi<<$EeQ7-sq#%CWjs@5(+~RbOpHpEmFF!^ut&kw!Kt!}Vo%JM6=N+fg2oj;f=qpT
z2Vt+DDo0Z6zWF=X|3R#cAPYaFB%%{4r7tOhl)hXhQf5f1e49vVZ>0P}5Vki`uK5r3
zQ}qS5qmgobL3S|KBV`XkSm&s3dNxY#E@IgFD0vvseRJ&DC^?M?TVLfrN}j2Z>QnAt
zQKRKDL6#H$1^Ql)O@B2TBd-<|<;SDP$eRQW82P`bG4ftPGp4#hro+G3Yn`gm)JG7@
zCQ|N;9V34)2=9v>BOf3-p~7`L=9_gpM*b*bxa?_$7%qF7too?5U{=2>DqVIYI-$b(
zk}i7-!o5`bH}fprPz%npba|r4#1R~87{TT+W?u<MaI9P?G86r3M30qc5b0EWI>r_Y
zsx{paXse(;5X+Dc3mOHn4Ed@ccZg-mj|2rnEK~khkkxEAHcnQ3QkJjzY)7Dag5n@H
zUT!WZ9b)6<7(tsLHbL$z=vRnMkcTJ)Yx+uPmORct*3sGW6(amZ>lmFYH~)<7l`_lV
zhS8J0**fy&mK4LxE1~&vqJcc4C(8qf@aYo2XstX-P*tg4bfF=3VwzucvAmLE@EZ=J
z{GzAIr$lCPE5GOx!|~xPjLQrI{RZRmm8MPCu$hL~g6XY{2<Or)Lk#b~{z|wNe<j?i
zzEa&n<Jj(g#)Na}Yv!RTq0wLIO%OMtZ_7o&Hug2svz{?k4l-_`A$+U;HB${&(`L!m
zUzGK}6~1GiEjtQ24A<6X%k>q4^>843j_f01Q-Vi?%#{NL%?mydK39$s^r=kEO69hK
z>=&2<brv+cm72|ydkR|E$`ojTpgj2eFkc=nr~*De%$LV11g*mzC~}2}>FTtOE|ZrF
znp39((0W1p{mz*#khcjs=V!+j$omB?hI5T_`KX``eyjY;<+Fl@H$7*%P`)fEvngD!
zlW!|TtyjoTL~IJ&dr%?&PtZKL=2#*BZIro4R{f`pCyvr0*-j9S(jvLGARLLsvYQ|r
ziN&&)Le$<8Il?G&i5zQ`xkT<{lv$~tgQj?#HYQcX_eQbj;meHZ&+z3&lo-9zh?1jM
z8PTBVD!HF%ed~~s(W~X*f^h%2T3%!5%UFnACQ`13u95GE%vx#L(d*>LhRl2*_<<f6
zCcIXe7`<M;M^wr>1Q$ndkh^h=m9qSP#nBt(N+Qfmj@~TaCepJ1>Xb%rkzFMv^S?UZ
zM{koy5n<+_=pFJ-A}t$Re^c~M`7fe!pncK1<&CmZ&Zfob=)E#C(bI3y`{f)1J&ryo
z&ot1>=tJ^y1N|L+ME=h}Jm#ouXR5EoGUk|m1g%%W{VyjBGzE_KC**aM`NUj_Z6(sF
zcEVNn6Y@SH<^1KOd`=J^El$eSM9MQNCuQR&T}~Q~GWev+NyBj^A{E|QFTWSH;Bn=Y
zY;A`9#AC5z%qe(T8<NtOGcw$QjWO!W899<j>C0I;Q4sd!tUQ=V>C4$~`f~Q0zMM7m
z#Toi?PR<pz{6FNq33wF6*8g8KQ`J2~CYi|s1PMzZY!V@0WYK`xcaSBrNK}xBpaB9#
z*@7&F5FiSXuxV6~fWeCh8WlAvXh76l1w;h}0l^3w6uePTLI3BRIx`vM>h*np@9+PA
zpXbl><V$_3POV*CT~$5Zjb*8|l@jT))Lxd#2bZPtfj5;Sq2b~~+g5M9^*ukdz0*k1
zdu<1aO2xt1*GKKQCBie_xRdyC+x|WG+sc_<>fI*xBiolm@LT?%t7AX5Ne9(k;8Ulc
z+OptHHP8~!2j7VP)OIh^@Y{~s584(p;qQeH*)}mf4tFX(v+ZEQUm<>OJId7a*01^=
zw*AC}zd}4>YwD+SsJ!)yo?qA^nedl}M{OBQ1H-4>c+7SO)A^JeVvpNqF}YHcVo%r>
zGaXGiYX8c%o~a@wGq%oF&GdH4`sh=(_n8)e<u|sIO!kzUW52asVrr8zI`)js>C`1V
zmweRzy{!XNT!-<oXKm3;cX!B({lPYXDXYU#dxLEp)0<%VqwPMXV_<pS_At{2VEMD{
zX{JllX2t$udyVOA#DTsSZ67jiowhLclI;Z3nuv_+f47}yIx=l}EPN^3Uzc-V#E|Q)
zvJKPisZYk*WFMvnQb)%snZgvC`b?}TM>A!oY>Tza8B9~5?oDJdQ*z1|J)LqLQ@iLl
zqW$GoranLcatBeVh)A!FbxHkuFzm_j=3)t52mbB$$9o!$gzKY5!u3(G*Amx9jfCr?
z5N{Z+j~WTrM@_w9xIStmTpu+Ou8$fC*GJ7{hX8CdoLPO>yP1TC7nt_MHkXM+IJ4Rt
z+d^hDRg~_HZRri$UA#B8m0ZhV3*z_2wvnC{3O;)kF2A5KY>9)h;qrSgeHj}e;lT#Z
z?@Vkb*_NnC{5Ys4tg9?wx+&;TKv#K~s8sA5bRo8@%yQF_h82T|i<H?+ezOdqJDKij
zb+G3(az4`x_$|OSatYJZ5Y|mrGHu7-3CL|sCn2o6{DA342<t9CWqKY~>`_t%>fG1m
z`^QDe1R}k*h?3)(a6T9%i<odXElRFt!rinexs3^Tsd~t_nQ)h?hdj*m+qHxG_mroZ
z+|ftvJ-w}qbG~ck4-|&2+dS@C84`pggQrsR;eET(v!=W?zFk}|xt79;>_L5w_U<Js
zncDVQ-?Nw8MzourOzbT`Ai}G5=eXXUo(1!Xc5!`WJ%!B^Wsktq0x}7HpM%$jgt4##
zDRY>di=u!YVrsq!o&lGuiQo%Sa2&6f-*DJXt|*}35S>b&xI+Qg%LJyhxb4lamqVE@
z&Wwt?L5^bbo7D>_hp5hhbM_cn%!G6H7`d7W=j{FDGfX&V?<Zei!dZHMd5{T@SbzBw
z6V8+S%Ydd>vN{LOll#j^CY&etm)8*$*$d$cbfZjUdOQ?%HRUZ#clU=~O*w&SdVko}
zlyjIa!R~ULe3+>z>>$U<3Z@rV!>*=$fvE<<;^n(c0c&7aQyye$xdwJM<#$Z?L%c+J
ziRmGTmnegq>DI-a^(5Jj33t|$WFMx0X7Em6nZnevSyP}}naoGSMT*R2YW8STp!rN)
z2ZoDOS<2LRU{j!{neK&sur&D!)4~=_f%X&CIq-Z)mnWI<d`Op<*mC|L*vFKv=DO5n
zgPH<$CaQDbxsoZbXTozOQx0Xz_ZGqKq`Z^q5bOjGxa?dRc-dJs@UpXNpnO2bgFfFc
z?k1lzCpB(}e1_8u?0K~J5cxb)o1W`?4w0`B=`&}jJjjHznW6G~B7Mhps5C>VMs!vU
zmDhP`VBF0ziwI|`sc|DbXPiIo9yAi}Sv3;Qx<+~}u{|3J+q03d&2I5pVw*J*jxVFU
zVK}~wlK1G6+40HCY<Vx!zOJ<@Th3zotSfv&S$bxiIL_ZHhbO|RLi5OMph9g4wH+CE
zyIeuEo1UD#Lq5)gHM+x_JJx8d+{j_L<1$umVZt4kvGQdiecvfZzR865opR(JBE2_y
zr~I1Z;R^arPdObpV%{l#<1jo%ck*>wAEP^E(-wG)kl;(V@)}KI6x@RzCr1+LUH)-$
z3{eqWf$oSKCnqrZ%^D9hmFdk{ljH7^Gnw|!x)10<rfmfUapUDqrgsbG1Jx2eD0<#&
z5ffyatFSEkdF=@@kqPe=Optdl;RrTCE@Z+HY=YcCRAk4ob%NZ=w0b34+FR<g%Dr+?
z+yq&`)MDjQpgl~N#=yR!Jk0dQn3ZvN%NyYR*f`FAFs2+Rlj(tJ;o=@y$rLwjecV0L
z*$ORp+i_px9@&El_b%>{HxcO(^B#E{6ONeo$b2RoF>~dEOgLiZ$~8<lVosEmOgLgr
zly5NMh&f6AlL<%6N%8~}j+m3>4@@{>PL}r8x<)u+=E>$vIAZ3>YnX7voFZeGaKxM<
zhcMxYIaQ8f!Vz<-oW}I#0N7iTMNIDxfW0+Y&XfWpX1@Ff)6Fnq=F6Q-gOXuyO@72Q
zIvMuXWIa>MWw5s<e`o5t4EEM!i#ECrH$d1l8O4+aVbkP5rZ?c}(dlwD(`W6P0?lB;
zdxJCN5+=MiI73zt=@ELSe2EE1l$r8Fw!{&7mORdcBlIl!3)45H;i5p=+v<`DxW8E-
zTM_Bed$#P(gd@>xnaY-UKkfl}3lrXtdqCdHbjlqr=E(U>=iE(!Rx@3Q3m0?c(@ZM9
zDbVXo1>M8NJXy=M7@l#TC%<IMXdW)+%X3Vl;NItaX@=`kcZaYCWizIJ5cZ&q^n@ja
zi$Zw=Q*2UGputR$aQqg?u}uBp_$`nHOv7#p7e(@6rU^GS1$vt4REu!2P`<?UD_kiT
z%37xNkY=&`jOlquvsix5wBnX<u}J>LRC!BNppbUD4$n*q7mH;prk5u*1?t4K48oSk
zD5l3DY>B*{>E{XIqC_Szsk@s34Pe?b6!s3~Fs4_BHU%2Zv>U=6mUlCK3}Fw;`#hF?
z;kyHJ4%4o_O@Vx8xXUiP7B7>F*|Pc6a8Y{MHM~^5MPYipE|s5YOBk=8jVtxJY9H)b
zCY!X!me@_dBP)|ZOt|JMlP#HW&9y?dXTmkt3K_|SYp#_N9wVkyaLu(+_G7{|*D5)H
z3D;b!WG<1u!?B9XqVLPB;yN66RKc$8D)|V<!!dG|tYE@1a+Tamr0;C4l4qH4<+e%&
zMCh{M%5Al5#?=10?QyGRTTL{BU*o;v;XR@?ay*CO6>p7vl}NYX8u<kgt{*zbt&y!d
zQ11a6826Z`JuREy4#yKRhQe@;a<JzUa;UbncWL!z+!JyX6RtO(kYky!)KAD<q6h8Y
z-m@$2N%<&|zJ@<3pJu{q_>=NQj(2h9`*CaKTTFhl_5tl>OT6N(lV3C86>ptvU`w0<
zu9JQpsSb9W0j`rRi1ZraDH+9tYlNp{e<oZbtd|)~xJFnnM-mm;m%><HA@i8l!&qJ+
zA7D#dBW#c>m~f4-K|aNVYlIDQtBwcl`Cadg@=Z<lRnVSK%Xf(MZran*_s-<g@&Jcn
zAFT9-VIQoN$2ko55;l3muwQSI-*FiB>u0=S*sq_Fzj7G%o_~15u=o5!+B;FtqI-Os
zy<s@(+AN!L7|x}hmF<}D40u*{XTme!SsBBG{p?wpMuh$Bnf}kp`-$oV_N6WIK_Z+z
zy&tzlE@8qWy+xKWVb6L_mNQ+~E=oKnYl!sGd`_NW!lU_|yu^e@bE|Z9#v0W*@Mvz8
zp-k9&wn_ZTDTZP1*(UE~!lSuO;@3w#E52=V0}~$2ZE_1yk-Z$oy60sz(*_vpo|pTW
zhCBlAE|N!?vf=vof^1+4xC(xKDy>~Gha!86tC|8eXPO=d?<bNSm=?#u`-$ZBO!d$Q
zUy^A|zd|2;N#4$ceg0)Rg$euo%W^Rj_TB9gzYmG|Vc*>@UnIh#axm@{`MwSVTHo_E
z`I(o#jH~vX{cyj3SKOP@xLT)zYmzr*029vO-;~XnV&PuT4%vpOU$3LRcgRjmH}zWI
zbBBx~(r5op*@p?w{+%+82us#E?k&zw&$eqkYXsPX*cDeJ@8dKt&O8G&o5^q1zkrIE
zdM>S1yX3=6aZBA|mt4ivG4hwV-SSDM9+4t`x2$9;=n7AI%9ogybcNk>`99M(A+TRA
z@q32Yp1+4Q1v<-gBqLnBD}QJDKBFm6)2`a`Q2TK4p2Tn0VZ86!HwC($Y1`Ov@xDxB
zdV6eBpxc=i<-wk~oW%5GUQ?h#rs<I1KjmXg4?%wal&>)5!yNMixtFOJ=9nMI@0hNJ
zdB}%SMe4G|!aU?d*`DcP2-_>KXW9T^d*ukGY6#mWCo_EnVf*AmOm#3{+Ar}<?^wTI
zVZO8<-d(L}L}<A9NWQ}~3Fi7A$)ikbA>IM`6Vuxe?|=-sM#pnQypLs9rf7)wu}sqh
zJ;aRvM2;iU<L4ncoe5WwhdkFmdh6FA?|6pyLJoQ76W>n^7oW++-ZWviUar#w<5E!k
z=W-L1->gueDkdCv4@+A&T}~W#56eIzy$5(i_F}^E<%rB;%iCKY1e(G$vGo@~Gnr;V
z*cWmY(;^7_Lat@PJ;$SRFB9%L9+mFy+)6MCAC+T?cH40jJ}S$JO2zLFwuwI~PY~%5
z^SCslFkYPlN6h20ITMbUU&<~_IAVS&dotn9!U>tkgzJD4@>V9?SvV;tGvR#xq%0;X
zvg5e)m3)*5$EB|>oAcFOHs`DJ9u-`pe=Vyhp59gYT4wg3+QM<aCjM(Vok;I-e&aJr
z^@;yRUeuQM0kFsUjg&ogE8PZroZooH5Pxi?Z>2wl>Cxs}PZ*3Zed5o^t`w$w)*0E4
z347L=%X-$C%X-!sZygSW!<U%lO*(fPTfg(<;E!*``rb=8nl=)Srj3N}g*)rD#4+-$
z97k#DH;|o^lbA5xIZy8N-mM?xG!Da5evosRFqI!<F%j0?BK{@U65$Nc4Wx6><8Fg|
z&T9$xbL1Ods<ZznKOoX?^*qmXQsBEffA$i-)$>>RDOsKr_*TzL@)#4o|MPbVFJXor
zIZp(p{|5I@3y9#C{ppuNg(@K`vM+1jKi;CsnAWyW1bUna?<HH+2BuDv9{}3I^vR@*
zc$<2O>Dx(zf!<`gVQ@{DRPQil4t^bIFH@iKBjS}h$TWETZ9vDFGUmWH!qjP|QFEFC
z{h*23(^S8DDKXwuO`>%lG{WwTx2qr~SJ*v3Et!UQpBnE_?U}}QpAHnsWa~F4zKMbt
z`q0=K(r*D!KPIfZpGsoFy8EetOjviP8pecmcdFYpQ91q9T%uC3w|hyvzj}-<v0ePt
zdM0caf3=yZYWySd0ji4WpW{~pz0NcP+Qp@IF)fC6aj6fOc20gW-mN}i`gHOJAm96A
zf$AuSRSt(Y7^^c(*k*z1M<#5uK=m6FwpoxeuG8&;Z5E{3GEE*)tAbT$ruie>B3Q*U
zVS9$CbS7-i5H*zP;>^wQP1PtSzgf=%<uGl%_m%i&DwnC|-Zz2nW2%I+xVf6mv;lsP
z(p)WI+5*2vX|5h7(z}zPY7K`y25lCqDwsOnwL3mkdEQ%y<3y<1%wcz|s)evBPUZSZ
z`+z>>Fzf}P>SrcA?x8BYmu?q)dr7EDWZHZ`=9kZu0q-gcRUa`Ox(~x-Zyj$gyn!rK
z<uJ9KhGDf#=kFg2VO{&6rM}{YsthK);z2y3BKz{07_W?J+l)`4WDQKe%)qdSzB<2M
z@E(^?Rmg;IwhUEAnefe)q3RTo9<y4gkn1rX(!1BTQ1gk3#7}L%yXq>n%uC1PTdHT7
z%<!+{Td8U<osDm!>WSc8Z1C2vcIv7ds4Vm@uLw1W3E#>Sp^BK&djAq1p&s>;HKC*0
z?IlM-Cv}=>?aaW0F6t+uQn7YsOCTc#b0`%9x_uROwTd8`Cu}{f30>7xq6cBNJ@Up#
zHP=gb+<1+8*h_<M?56blTj5!~=xwsQDyOhgaq6mVGD>Y`x~lay*+W$`ZC)Ok&{G{?
zQhB`+qE!P?kvLI$W5RXnH!r0o^im!B>6SQAnw8K;MS1DgguW`vOA``qP_w->H6cb-
zdg+0L{_1ltEljvk+53CaT%Hi8ZtzlhLcF@mOO*+UYKoV(B_yfGnbr?`Jt0N?!%J`V
zN>v{bJ!pRd-cg>W4r_w<7S<%BsX;eleh&hDnvkJR5f#}xjSCk8l^LtcGGN@9gn=r8
z2%h;F2jA;eBZyXtp^-l&+@x~7BoYU!q&SRMDmHg(k~mZq62UX5b1WiD?e>y8F-x5w
zS_$uZY@T?tI_IU<iNlnL$5b$^Q{r$HLsTld58ft6s!VTKkHlM40f(7``z2<p^+ZMV
z&eYLro0nb>8>4o3sqeLSsEb~TyEaF4PN3S-Q;XwN6cf%F#;Lwc7iSJgyi3I~`OO*%
z1ciiuyZ!O*&Uls1VYnwgUX5hJJ@N5sG869IPf!mq;okiORYrtoYWB5vE6*Jxd>e1B
z^6YuwygXNVel@UdAnfw1XLKqMZ+*{+YA2_O&n-<-?=s<YOOw=orb}>lZnFA}sR=wc
zF<G4?(s!%#)R;uw5_q>dPn9t_6Fv^kQ?E0HB^(UPQ@fcyOo$Rw)b~tB5){w{rU)1@
zr>d+Zo#u)Bll`Zv?M!#g#ITTL9p;+(Y5Y_*gK2j@hHYlbh57tc6_}ze@ri(`Dv_ya
z{w;}M$>hHf!|bWr@^DcOgyk{e(*jdfEz{KLlOU`|8d~c6M^n`>CcJ+%Rpm3`e#lg{
zh6zXSsp@4SeFtZ%I?RN-lT+0%L`8Odf@`XBr0cTa6I@eO8z$@__o{A8*hB7BiA?we
zSH2p`Gzr4;)dVJdg6lptoe7`dx=%gKgimnYuO4T@C%EocFEHT~T+`HBO!x%XG<A>(
zpWvFVzGlKFxTdR1O!x%X4CTzwb-*XMW~g>d_ypHX)sqRI;F_t@nD7a%S!yH`KEX9h
z<uTzCTm@<#Q}A-Q`=Qn_;S*f5)g~r<f@`+g;jwH3cR$oVCVYbH0d<-Q@6yaszcS%n
znmH;YQ<oZ_;F_yCGT{?kbJdMR`VP)KHJAxkZu8XLY>7{B%~u6X_ypH{wSozs;CfI!
z&4f>IJ*ajt;ah_X)qW;?YjC0ZmI<HkTA+So!l%0ysL%nrocMHCk?PKbPj?lm0ZjOG
z*Fu%Ugim)ZRP&ke>8@f`#)MCI6{}~7^xdRI>P;qGeJ)Z5*%I$2Emq$!;oYRg$~I7!
zrF1CV{ZJ7^`n}*w)Lf<(@ffz634dw7#5*qG%5;f(nZoKEc;|eHs$s%A=S$Q-iEt$~
zJ+Van=B0UwOI71<aR&8Yt^#kuvf!xbj$W>!y!23FnHo%l>#92YN-ym$uCuT9QblQ<
z{ZVxbTP}#NvzMzJCR|rNp{j^*U3Jv{glawr^MjcV(32{Ws0e;tYfV_Ia=he7Sf>^f
z>9y~A^#~JQE!L~2G&%68(+c$r6F$dKp<ZRek$r=DiwQ^e4XRcXJsYu+TSDI_*{JkW
zF#0~pM!r7i`y?CHFPsYAC)uc+gRu^~9XJwgRDGE6SH~MwHWNOPvr)|_Dzb;Q2p3PQ
zhjbY2Z9lD6FyY?z)2fmQ*Y=g3tCIuQ?~R1}M2&=3r$)l}!8cOZTwlU_FO6aNYu84?
z-{CeA{)V-Y4pDx;>ykOJM^-B55M6idk(H`95&k}FMPj8ILxjC9vHvq_rk5T|+~VnV
z7JRDc1+`SC0(Wo*^?yNaB&u`ZZ;)S5TXY!B5?=6Lnen*4pkCuJJnmKAFg)&6Y7d9u
zad^=ihQ|Sj!|=|*OX^D|Z0ncQ_e^-N;3ehzY|BgPB8B1E0q@sWt%g$F>B*><)zw7w
zZiDETRbQgzV#bil#O*v|dD~ok-TCNO)F5psc1CYYd`)d-%DZ-3;u|U?3)3vJR|JoY
z*{S+4Eh|3Sd#4)Cbj?*r_c5K$LR!vLdMDC0rUzn?K4f~F=nT`{{ut(Wv(7J-s0-6w
zO)xBlDUfKKhnyI;fa!Zbqza}-yCS{K6hQPP)6}ULW*MgQ8%NZZ>626pyOF6SynAt{
z8cnnkzAXP{BIHK|&#GTjn^>dDnFd|+N#Z-Io+)DRvBY=P!Qq%gsaTwOCb3pIM<A^f
zcc%Z6xL2(v!XEj0*gmz6s8EQuO6*t9GfjO|Bz>fI`B;9WKF}ndi~S(%fcli_Hvf;p
zK32z=9`HXH_K7;pG^ELquus(wo_I}^IH-PQQqC{K4k<a3T0*=rdwcWGls{A9qejx_
zsuR=G6a147s~93(&Le6NQJp1mPDs)hYBf`<_N|kSUAA{|T)nGPf!bQcadp^B3h1nt
zwm1J$HM>QZ#aIMyu~)sAuw727RHluwBU*i>CNdSrc1Ze4O=qf_JrTm5V;bt8)T&M$
zWy<&eIJi!oVhV#V*wm@iQ98dVO`=4d8pQOAUzemhHHE3A^Zn*^s(`5z#XHC}i{f?6
z)~RghdJV+8gQ-Q=e?snSned3!Dg7RvBJoIUkEE~F1rEdGcS=pVRi}c-@3flEgvak2
z)%i9Z_8c6)Z&frC9>01u;&vU@!P&Rf8I{8n1M$97^-N14-uEhTw6??}eO7Juk`m|C
zMKAd${h+3g(Ux1g_DcGfTFVsC^@gMdwTB4bxv9jD3SOa1<HSZ-G5n;OYQk|T`X|-F
zOBQiKWoi=Fb&gHCphhs&r}v5eS>40rpV%k*7d4j&-*^A3s$%N2VC(f4)n`nLMx`WO
zQuRz{M%|S3yNVdAOWkk5uq0uOXTmkC#h98yVRXh>ja5YRM8Oy%$!5Idr6Xa|*u&H^
z!XlJW0&@kN7j%GKF=ZSgg7>0^-I}C~1`hjh-knLNF@2o2tWS*zaTq(8egkS^Tx9xn
z?nhyMM!{X$@`0d<NlxQ1(<hLczmYj!hqVeuy1?|tpovNT#>ojftS6K(z}Rv(QmJT@
zn4c72)DX=R*n)w^ekN?eAmbQQ$Xs}Dy^%8+<E<3e51pM9Y*Y~8)uJdV#7NB3IShdE
zHaF%neRV(59wytU<w?zr?}%242@}@<2{^N{mF)8@;wqz@>FQCHNmm(RQ*}8P4Syl2
zmC=Q0o;V4$ZDS-eWsgg0)y5djWJ2z3j0;R1qcAM_UY)}Q$i0n`%X9+r1A_8l?yDX}
zDqtEo1mkUIx<HopY1*>Ss8=ABHB1F#j)a99&oC`>y^_?<c-KoilOl{09!uAeunvZp
zu2X3_YGP7HqlD?E<rdM&2%o9LcBQ`;*2#!v`WMu;lObp6urHP-wd!Q_VVW{-Pf{mi
z8d0fep7u-P)kX<Zcc89DIn#o){YjC=UXIrXdPq0pngX5XO*w~>x*4fV5zs@TjOk4O
zf_8~ALT78ssK=0YF|8SXC?LwXz%(TU!}>j-EvGj_8o`uBw3nzzbcnz(=NxU>Fm_1a
zC}R+`F&>9cq3%(}y-co*D6rhj^lLiOuS7-SO}NHI8IJiFuSmR<fbqhK=81jx`$JeH
z(^sASlX@6AOu3KwC-pR{m~IBT*6`ggk2cOz7`)wh?1`jkBj`b$!{M>tCiOBpdZ{6)
zuW=pIr4GL(-C!g#ZF$s8jxlC3J?e5N_cN9;tpn<Byv5Whqj~a;#zCTaBBs=x9BZ6s
zI<u^Gbes`UsB`a>0pDdahG?RzVZ3pdms%&s8~JSca<lf)Nrq=H2;Xv)Y}9xyJ0&L@
zAq#X{<M^3s^dTw|_!iMLV=7ZjVvpo>qu5KmlQWISnKILkgbg${GaU#%5_XeO&D6%-
zFL{u0ib#KTWQY+~r0a0Om6SZxh-8Y*v51?EWkj$~y9{YB(+M~)ZZ@0?bvYxh>XLM`
zk;Qao_J~$D8*7=K9f4FsR3sh_IudrXaZ@qnN3Ar>7@<jIw42y>*kxhEjXVxZ37Xh<
zxG_f)y^nf?0o@Az?e@nO9AP|6VYn(#K&y!A=p9lcjSV^;<u}sUqe<X<SVtPRMOc;^
zOD4Qy@D`4@o8pZ!T2UCz<Sb&85vxhy8(T*ivxw%21Ht}D*~T)RiojHEHO$40^}Fq|
zUT~Y?)?u(SJ0N+CF_H*N-8%UW<9=_vF^)TpA}@`%-(@`RrAqhRMzxprxhEMXywol5
zUL$0QC->Iw8OAswoXKS+&o`DawQ4^uxzMQbhD}LcV4U=ZJ(#@E_?I{A;pAc?yady%
zv$SgeRPy4>&c-E1ZwkX!YMs2q7^Dg6w<Y;uqmrn`l2p7Ud8zS@4zs(4ypX)ixZo47
z)NnsUrKTA~nGvCh(p+Ig5!DDxWwo)%8`kTFHO5JfH+E%p@}ma4;2+9aDvDOVo&1<F
zlqsXdd&%WS9??9Jw(^Ufj~l;o*hj<mB|l+AEX8>9L=OmCYpi8@aGXV~Gde@h$FKw#
z*VY+%OzG_pC$BRqm_BKFBKav}&m-Eh-J)-j*BdUlW?;Mzp`TS4orp@sma=on8;tH8
zcJ+!2$s3IvrbouXiruJWY5}=FZN!x6RPIXnJ^5*)f~ZssPVi5uG<GmWCbUj@#&EAd
z%Tm!V;o6ifM!uJlQnneJnIaR0r&Jk-neGf8p7N5hdZmsxEqHXwb|YYwrYxXWjYOh(
z;zk&8tBqm~duP;ylxpKV(+?f;Q(iYBSL<>P8}&fSo5pmemw|Q|r<iV>zbIv=QMg81
z_G`K}rN%fwR3wJn@N~*9<ARr7NZD;fz_krq@Z!y{rMzQIVCvZVy|6vT6s82Yr@zOT
z%d}{?67L#MGA(Rn5$_p#?mZ8ll~F*Rw`I<<EAhVZvbMD2Gh4OBZX)c-J5y?nFEt7L
z^2P^-8?LN)9V-~4#D~ThqIqKWsP|I#8f8rFpe6SispY!VH?~GPMN}m48y)+Mu*Y?n
zy}d>3H}*2!*#5(m{f7Ms9rj+!kAYS{sq<Tqb~xoD<0YokxnHInFlv~t>2f;dV`D$l
za`-05C&n?Nc_MuJ*_2O>#cOq%&2RlR<)E>a2<9QT!fX5t=Q<sB{uYb)+=yjL8ih2M
zsgh_9Q<wSf)X$B)r*yowaQwb7YM8L)j~XY4io`nj-NiBEEYrO!!&8qL2iNO(16ub;
zJz*@XKq?iF42w(s+NdI$CuX+KOg(K>Z`77Ddw6QS5%#pE@uP;PerIGceFk*aSjIGY
z{+QGsjE<Gsva^a3KN+5{B|K?I>PBHj_KkyT)lWt*rY(cq5OyO|{~i-l&l@RBDLw85
z8qBn7$jsCW#z>}5hs*^U%ajnYF!g8S9;QJN4*}iB)H1Iu^%r9{Q@6ZFffh31Ge*A}
zOPTQNZoe9<H9;SAi;Kqd9F|nNF7=Y}D$|hC6Ump1x0&)<u1o#Rc%Nw&j6}Z~2bjVj
z-tWd?rbvkQyYUs%FU!`Y3iAw;AA||>C#E5grp5e?X$+)kG0jcbx<&Sf;aAR9)5TN{
zJBd~^l<DGiPp8_<woJ}m&jNMP1T}g#RhoS`44=V)TaiS#*R>RAlnxW3e^shsj`h;(
zsiv9hrFT;u=6zoJIMvU5z)Qzd{mq45I+N-$mwD-YYM@!}B}-bc+2AF=w5Dd-GgLpw
zy=hu=bBLGPq_r?dd8tcUOEbqy*QT{HCwl3|v^M7bUdl`hH|Kb1L|S{Zm??kJ;p7hH
zDlg@vbu^#$(xkM`=F481o_4kQj+f@AMVg;_sU)qN`L&nI(xS}sUMf%PX`27gHOgO9
zkrr(>_tNIHUS=mRRi*VYdwZ!m?RqoCOEqaR=5Q~4kk;S4%S(sSV$Eq@I*}G{7Bijd
zdnPT>Jj~R5;+eE$GitLg%kR*aQq4@Jer?XArI|CB7RH}Q&M=?SL}PNM`3w_2N1JKB
zz|;js%mL<WOwn*H9$?lmJ>N1~3^Z$*-hdB{4m3Yz`q#pBsW+KNm_+f3<eSVorq0XP
zr4BN`W9qT|MDif>yvK6s`Lx02?@U2UF9F$~#TsGXmFYvw)?RX^XPMDNMdDkygF4JS
zNTh#NHq5Nug7Hd4`M{9$VdgoamC);2r;jjQ&tVu+r}U9#ikGfUA7$oy>BjV1&3||)
zBmH*sOD_#iA7i?<dQusaKGux&(mm;Snp3=VU;15UnV06IPcUEh(xUWx%+I~FJbj}1
zo0lF>pKL~N^W?B8eTq58OE0D0Yp(IqTj}?i`-qC*Nr{6!r<sSCilJSmna7#dz@6o3
z<~K~=!P{V_n?Eo)=fFKo^B1O;@XM;{rtNvmy~zIDu-ALeF#VWz4tonIgsJDe57K9v
zeVK;MhdY{PCR6bIgAg`_sLtUx1H%fLzMuXjgl%HWK~eQU+n8>N`T?k#>FwNIakI>@
z7qBd);^W+((`T7C5#bEti=GAMZJNZ3dDe{CCYZs$-Ts(gBVm5C&2eOjeaQl0lf0yW
zrV-&CF?+@X=3J(VQhUZ+Z`kf)d&YcoJBKZZw`UZZ-+NQBh$8d6mlTkw!ct?J?u><I
zBvVDHJ7bZ#jA?hVJ7bAi%d{Zgo$-(v{Gx7o{N?6SGn@(E-?P-bmg#-Rh*nF@8<<x6
zAtf+<9Q$$bQgZ^+@9jb}mYP$TG6%H=n!)r$&j_G-Oi4Yj23o{qxibo=l<EF-q;eu`
z!K1dN=Gd38ocinKrDiS@e!aZZtRyOeZ<+VXc!UYRW!^7ixw(hJR@x5&tuVjkc=*-j
zRb~T`eh2L;Gyi2e?)28~Rp$0Rx?QYMQDT+3gUKDGfZk;~HatqKHuo`|h56EI^E0Mz
zx<`pM=9f%Abyq;&GSxu5N6mjR?T2`enirY!m!xDoX3BSU?(>!m0P@!aEioXY+zjKe
zLvXc!+>Bs4vFt?h<K{I?@o=?&!n}?t9Y*LU%>GQ}&|9B02Qrn;$jW%qoIs?{oF~m0
zOxTm3G<|n!o;1sJJSfX;5U+w$!82f;S;d6$)|nqN^_({@W1aa86OIMz%paJ}La$qA
z{=)PRm}9Opt?%i&<5;lHY(j*+zzy+Q=rEwSdOk(xpXXip>zVLf_`jxX@Y2$bc^MnM
zw4mdxj7>z)m(=y+3NxPZ(#y>r%Gm5ft1`BDsrOw^WIX3Xl^NU2&Qz9C@n*NGj2FxT
zrv1?^LS8T%h~Pcl<6q6FGNa$8o+V<g*{iC|@kA>{-S{0DFPfD)jC$RR-W&#u+YMnj
zx?nk<>%TPaWgl9VvE56B6Zd7j;zOTjyk@>bX%^Y>KJ4q}0Zq_m>wCU#9`RD=xHrtk
zyZB#c>@dIPcsLg9Fu!NQd!{?g3rx?#uab6}qE;WHH{hKCJ52`@J}>i@8AyajY<<tS
z%r;)?9QU@joVUh*ow3V|p)h?F-DTcSROi_D&=Kn{^8upcj^`hW7Q4)~-c*9*F0)!&
zTCQInE_R!(|A}R(vlxpkK-Un>6OsLq?%}Wl{gCpB^!dK~vVOhWoJ(O3!c!S%GIpDb
znDW$58GFn}m=>EV^F8x1rWqn2v(~I&8fa;r`GNT?lUsJo+-ttX)I@d9+;6_g^r-5e
zdBEJmlwzc0eq!z;(j_~1S;-EXN7(XL+mOtI=2t$JpIv78nR$*aw^&AJer8@Is<S-N
z_nyqdmsx)C2g>|_`X}|lKZcE<um?r4abM;a<~SeAW0$3J%$&-Wg|<1F$IQ7tmS0|G
z`K4LHmM^MBnO~YKnARANWS%si@QGJ<S-d*)8Mge`SeIF6zTjhd>N3ky=9_Fe-q@UZ
z%G|@0WZRtijk(V!Uj1e9>dhl;dAIpuX1!U*w8FL{^E>l<rfTE;%(LbNrX`k7GJh~F
zA7TqWD7M*-W;U2ji1g9?>9QPtGMlkwrur`PC$o)@<%P>EFPL4~a-H?(%nRnVOl=Hv
zz%S+vOrd780T;~#rfV#12K;7bFvXbN1_=95ruVIV2UzW+nEoMC2T1!^rf)1m2N?Eg
zOl@p;46xhhFnwg3GN6flAybZR?f|EK84=EjlnAhIB|2`|3Fny0eu@dtO_#m%K5Q4*
zYi@#JiA2X884nHW@3QMRuO7F2UF;i%=ex_EsVy!2rYs)dvX?P!oH7u?%87LAy6nDJ
zCzrjF!X6asMH$4~##AHL4+yls%H*<c9uRDQo9QkI&k@>dnLbyq4QOuvnCY~5Z$JzC
z7fcVyLjzjczh?SPtsl_JewOJM<J5pQ_Me&Tmh}U|?biLePt38NAJE?JM}%$Wj_zO&
zA$r@2zwGE}k0qKXCfs&Dy0d*P)9=mBM_+CCeD5<gahr_1ER}2Q>LbiSr_#;tCW3eG
zx6QaV%3e)0Puw<QPjHmoeLx?FEp5+7N7*|N=@#sHSqt{G_n@!`#Z#s+@ba)|dtVN#
zF@H^owx{@{a@}RATxZW>%kQm$1Fy3S0efS!g|LdAi~i_7w*q~}hct%%(S3R7EV4(n
zim&1@uGTC4-+l~3cg;b)e#jqHr=b0HT<ym4SVfFC7mIkH6nz#3ds489M*IKd{w5S-
zJ)MZ^TiV7l|GQe~GU!}%`}~xRDPUc!;(1C<r;KI(Pi646nLZrTS=85~Rx$soKe}6I
zqEBWNrW|<pAKmHD4puSpcJ%)`3Ek-9aqIN8f8eA>|D}<Q?m=Df3r5-}t$U;Yw~HJ7
zbqaqL3qw6Q-Zr7p?Q4%M=E>!+Q~Ulptc7lqKTCNN^j=Sn=(h3E)G0qW0DXLI8hzwt
zmcBOsC+X<Ep>y|jZ@jm$oapu~r!K!mq`^;uJnqI8^Z0z}JtCg^CjG(3<3Fzrrmv5n
zZ|iCInaP;TnaNgYTmMy7upDwvW4^xaJTL?Oeb0_nVR%F)fqMLXd+Y-0pT73meYP9M
z>TnH~Dud$s`siARL8wKbTDcuo4MrbSkB@E>ZK*^5Xz#Jq`C<!L#qb9(okq7!bZyt@
zb7BO#uPpQ5_n8j0`*$hm9CiBrBCsSupcZl8U5%>!bqiqaJmvSbN4JH~%40Lpt=qge
zonOA%cq}a9QtL)b?XO2For^9*W6D-8m9DjJXWe`CnD%oFruM|usM=q<QLO^MKI<u=
z?sa<X($^I2qg9_}zU6#26;tTa0#mr7Bf9-pHJ%-fV<3FVfku9<_tLfC%ZJeNSTV-c
zY3fl<$I|*fjh5Z$O!=d~g~wQ3JKs{F+bXVw^T?BOER4ohk(G}=+CHQuy0Lw%Vl9od
zItA_To7!ZG+j1e=`_@R?%%IR+(;Gt@kDXOCUKc#>cjjS^+W*0FjAcBG+8E0s(jiSx
z$v>Kk_IRXhA_-bp3QR%q5#MzuTB5yGd``8)bgUu*EOnYzie(YEk&Vs;TfoXWY9HTz
zh`Cq=`q)HVA*Q4I$;jpCz6xq;6?em!qswCvKjor-qgus}J~h(m>k|G%XRh|qEs#Oi
z%`1<)@3Gcy-!l7#>SK-l)5b?uTYldMONA-JS?LpsCD$__-NIImrTw+)7I>JhO;}$~
zpUIC!x38tITgUopZlis_TRd*7&~9B*tsjlWP(3TtXEeG!rK+GKt81svS<K5bC&8m*
z73Zmk>(pk`+(Wmm?wMFx&xoXb0+*o=o&`3cdn~%G?A9ZUw!Bhx`VPuPk3u+x!*z;!
zi1taQ^GLh<P@8w5QSJv)J<dEu=l){q`Mz##^Iz2~Q~1B<^Vem&GT$rhue7<+=gL^V
zK7Vch$Cj6(Y9jV1J=*V2^Yk}Q|JS4Xi*#0MT|#Hgl}BIuj2e!!juQhsz0@;CVW{Ui
za%EiIS9KrO=c9IC8B3o{IFjfQ&o}+c-FlSvRh_Ty|5vI%wL?7A6s}O<wsD*29Cchh
z8tb#nIlr-vdVI!NpJ!Cm>1#_JH;q~VXWE`}>XfzWQMyq*Z3Qoe0ejRdeLQ1M*bKCJ
zu|KMI>ssqF=rnc7bxBY?Yacyc>5<2`Bzm;hXX|jVhgBr?4V`9VIu@Z<NqU??OV4~>
z+xX71bY4356(yMFU%P$dI(*8kQ`V{ZD$YEuqP7TA*6yX0i*FruO||NDCej!i6pyj;
z>F8{O`G)7(Hx9-nE6*nz-8RuH6R)#qX%RmzLe+Clt@lBiR`Cj54KrvhtX0n>Q9Yxs
zZyf_78~ycphw8D^?s0If@r<Z?=7~9aZ2rEx7{*we*iTmz-!lBQyU%r4Q@tv|(c9CL
z)4JnX{~Oixt2lJ)Hqm9){;y9)d#!qvtyldzRF6wKW$hkI$3^#$E8R(y<GePwy3uWg
zHddNN+XT)DJ!SJvO}i7uV5r9*Q_wxZ<I@=T09_4r`nn|Owh64e6gvhsS~iAydbJMK
z=aE)CcRcHNZLinzx}RX~p19ga+o0Pf5}|K<LbY3`*68mE{bOA1e`TnzzeOBfjp^&-
z*baIWj5#p-_4MJ!@kIN0%A?2a{dC6ZkwKSAmqELi!d&$7-1X7Xts2}8dyCF7xCQ3e
zc<u1b-Q&J8eVx}|_uK!?p}3ZZ^OyP+_5sPgSC{#YYq9mT`xwj>^<31myMjIzq5bvD
z5Jxu8T2J>M9T(HL3O(v-A3X=|0&540XjCiBHen>BnW3I@>LaClh>rVrRQCsMi6!yW
z;_t-0(nepKbS<<S&mDcO@wA4{MTeqVh2Dqs-G%$Fy00vW_R-giKMVb@`s)_fwbQfZ
zE3Xu~c8zBu>`Bu6-}hQGVKTO}w$!7Uz8-0}Zwl!4T-WprUt8*<<{OG@MvvuF!RVe#
zSB?KEw{Khd?g#$0zpe|;60Jh-Vrid6eQ`X|D-rGfBnaC?uLrfwm2Tat+F!STcIy__
z>1=>~4EUY?RhXl8`{szd9B>}d2&Ub>p??-vr-rLSJZe~SkGnB1kIx@N@4g3p^xD(Y
z=l`?MPq}EL%QN1mE_!W#sdZy0wt&Y{w+Zf$cy=CepGxmw+vrO1=V!N$i~8R^AN6^m
z_iXi!x37=hC-n8fT`9@CA3D^xFa5RKH=S;@($V(X-`D4_)A_$0>RZkmdg5{MEvNR;
zHt4pAyQ3Rz{;X`;{>t4{oR@mi_l=A8|IXjn=Kl|F-(#U?$bVgHZLcjG-GA>GU74~z
zzpnJZ(&z76UK!Wdr&Dh{mvw6B_UyguGgSNd+H1G2>7RvOY5zavgQc>H+n3^5py${+
zWj#LsSuT3Ks-ju<pV|2O`}Tp!SBx9JK7XArrehJqXa^GYzdL4jU4rRo^)2V0xwp3e
zfA3t@cO~=;NAKQyW;=NG(e2~$Z(N;eAH71<E9j_eu*^Dc<18BH!*Ff#_-lLLS(E3w
zj5fahxQ@{4M+>jq8!bJn4{eX?@zH02?k$Zgugljve<zmjuCJb>zS|5-IH(Keg+4a%
zZZj+R+(mbnbbr(L+O%8G8+HHD^Y*{Gk9PTeH+`24?_SwN+XZ;_Tun3fze>Tg=kRAe
zN|#FC57IV&-Sht}o&OE~jlIirulbKYQZ%QP+W+~P+t}+oJ1vcQ{imy~uVtfKk9(eV
z<-hk=Vx!MW)3?oadGyGswJ`;~>*ZO!>V3koN!VlY=-Y($!8w>!yheMf`rfqmxkNtg
zXv9N*tC*6Gecoe_=RVqad>)~@3AooSdCsqACVGyCzjD!*|EZO9?X<n#m%}vm?_@0E
z%KdY_zR)&Wwa=Az&wbnN@3?gteAD-hrGICFcOE^zJkh)KzM29nAPe7})RxAr=%dGh
zwZV-ehHfQYU%l`2!@ZdD(?ie()hfON9}BmwE*0Jng8Pq@rq)F{7%S)jJidO(7^=&o
zckFd8dcBFe$2K~ep4~QIA3Z+c-Bp|Lr+rkcJB+||zYp`W3M`>TI3{_@;JFWbBVFC}
zJy~5Uob$uA1Ip&v57hhBjp|(|Qu+09>^%)rzEUxLkA0&X&Lb+D_R;GyU6Q|6-7>mH
z_=_eR|BgueH@20hC3So1*3ft7wR<?N6MgT|=rx+Q*F8b|X!j$~{%~J_cJuVQNgvb3
zHu2o$(R)YQ|If;){jr@r<=^eVR$A_dxiq?M;<JD2BgOB|e`l%vl}PaaPoajW{+l+Y
z*bkO=Q5ztHLxj38W#98!|IX^~`21OG=wqi_{z{ua^VhNTT@^iZs91?*Yn(+`1olj;
zczsTzzbyjY9qAm@s*lv5F6giCTm3Q{-M2&UvI^}+OYOFaNpO})abu<@9bbP7*<0yX
z7TQwh1-}A<SeLuU=V6-KzkX_?d(nKf)W6oV>YZxx(f+8=PvGu=P4vq^%d77}^}TO}
zyOH`{Jd71|mi<naT6GKSS&eQheeP@3zYx$Zqvuh&owaJ8n`swX|6T>%p5H_2``yJ<
zwjMrZ(`C@}y4NP+l}I0v#-n3{E1DHrRp*Y!)UzhiHbbHH&<5+Jee`kv&u*K*Qc3Y7
zl<MzY%U&AvcP;hxrAIHc*L_d-E>zFlTf1MS`-$4E+g!W#Y*xE<YX7rt{c9hc<_MUJ
zT7-5FqTa6Ey3eEA6RKw^I@GtczP0$@Q*x}MmCtBjx9-DN`sjB4Yt>i4dubh~+u;PP
zQ{Y!UG@j^`|E$G)TgkWe{`a)lpVeKLR_lLnxBtHv>&k0~ZreZm?e3qIU;9721do)j
zjXs(YOVR&#+JF1_W_0`Bo7SV5w#56<w#)8E<4n)Wt3^E1VYik>T|JKJS%+TVY4@!#
zyY{R&@ID~iLw^kCgnGTH$BMs>`yuT^>Uo`Z`_|}n+7;2E+O2<0r0*f>vHkzH`(hxr
zgU(Bz7w7|X0~)>ceGT6`X!$;O!SruVbX;FI{`SL@CY~?<&W-)k<NsfE<1aTnaed4G
zKjp^XT>Yo?-(22k)0?gfINo|<{eR`gerplFtI<Dm>-pYa+xxbsKC?V6BSipQjScu~
z0)KbH-(dK=6@Fo9z+V&iyA%Ef!{4pKPmH(tiA1ZP=xlL|SgRY{SBbktyjX2XfHxy0
z0H?xVI{amb7|S5|8w&nIfwM%eC5!%_Zn+uUH-r0Tc!k<9NOKstN5bDN@HYznvf=M`
z_?sZgE%%5@OD_CP0lrV1vfKyu_knvlxTk}AI=OS;{{qWQ;F-V$@HYp-=K#+kcW28y
zD91c-&l7p@|8&cIkpq8;*7;yFAL16l|L~-*wFvy--7S`d;4XnQO2EH_+&PwI@c(kC
z_j34u4fwBt|JQ@fdT_5NcW28+NPi=^H$ooIiaN1Jd;@>q!QT(!Gm&fi8vec&v%zP!
z_?HNRKm31!I4|B47RzVwcPIRP0)MmNZvxEl@k#GMP$gQBI~=r$=mF{$eM#d;(?|!C
zjs$Hg#*n*|)G5xafoEyO7xAdt?HbYn+&zX|EnX4tE{y^`)gl}ezZ0-d{Lriq=#o3(
zT}I*@JP*B2e3ghk8%wVST^Jt^8dI#m{;4r3;$5)|o}vl?y+!O3``~G-!4@p}1k#@c
zJ}J3R;L}^1E%+qnK7r3wR$0(K&5D-N`t6D&+a~MyM+ey!QJHs&uln6>n<1Vk$pig%
zA*u>Q4J4JMCTSDW?(RH_n{S%}Z$_8}8dW&gwvE!?W{r5D$hH&Q582)Yb&GwZk+5Rj
zU^_%Mk?<@`k}Xo4gST2n(l>e{#nwc0yM{am{ym1gXv0_*@WB?F0Ohm@C%K)_4%J|T
zZ^Vp*=jAKGePYB0(618r*q|<nAAlRb^b;xiE;<T|-}%`IE&L6*@om&Q#YCw4acfN3
z1@QTy*>9lO{*ln;FM@kvyp)mD=1wR>kPNYoC~ps{%Y%ybf}LM$YGSqRG`U+?CZ=_l
z=d2@(qh*-2tYfx}0RPD{l0u`&ea`wSypQi^>qir}$r$qa*}7rTHknB7OtQ=(ceWMV
zA=`>|548N=vaQM?|6J01(gM;73tCoK(6YjUEnLrv{^zW<kG-zWS%;LrtGZb5xnPTJ
zOZr~$d41j?RY<uMQZCh$PBo=-&f34+YCx=F)7WO6*X>=k&02fs2HPgf-Cf%ofi|pr
z9Q3zHqpxLkP%k6SQWci~x&T_B%!*~$2}g5?QEsh>3m2Hqc%uSJ3#$bywsr;OSV6gC
z=qw{p_hEt0^`oT{o2hnH<gTJvnG`EhmzMf4_S<i4;Wp9#h|vY~gfYW%XZmSlisj&A
zzZmPR`iM+g6l9*WUN^KBYMrsTR!xDt;QLh858*8`>#RrnwJ~cbuX1XEa%zD{DqALL
zEi1P00dgOpG8`uNVRD~@6wa7w)G`*^rEYtnom)rEGU~~{!Mf8CZNEr$X|O)*H`?A{
z{n#%De6Tedz<)fv%JayS*>)`30=u+fUey*1bwZj)?WlF&k1Z2I8fM!T*UW)Ext$}D
z+|l4a#t~z~ykcyaOQel@GTFyaXr%3jW@8-ZtOuc2WJA6dfvP|;uSBxU1U+g;t+Qu=
zPL_of8bY~*P@02n567o938B=o$sV=No<sJB$vzj{O5{^0YMs4+LJv@AA*EJAr7fY-
z)>3(DITTA?MlD=MEnG;cm4J?M6xw<W8RIAi_fb1)oxK8dvfOMd>o~?yMJZQNIjbrC
zYD&M_hHYL?X;y)~64jvN?NwBZa%$}wN~e}WYaq2F)>=xfmTYP%-vbb85vU3j+pV7B
z9wwiYpko||$^J0KJxnDzNhLW+B^hb^XZxQ1BW(-P`uJy3`)5+E>nVkLid%2{Wu=t$
zltR5ej$|20mJMXtK)GKe_eF9`iDg4opg00ZNhPE<tf#mYRvhcfA+_IZ<<{+sj#w*n
zPor2)vd1)Ge3N*kSO;#m2!}D`t$=Wd<rX7tzxwy|$KLK1JuF*R9tsG9xRYfq?D}r7
z)r!`|NuXWIaHM^|^v8f&8odw06F|}S!{k0mHdzAuYL>vhnkDe)oTL;^l1)9?)R0XL
z+0>9tjrhfBxN1ay|0bX>`v<t{DONqjYM@vJ6sv$@6;P}OvS}cji)2$lHWg%3K{geX
zas{PaK`CFPSQjalv|zoeC{`84s-jrZg0+@3f;q`1hir1l#z~=03XPDMLMDY~QfMZn
z5Fs&z5O~r*+!aEWVdM_evB(`k?np`@n^MT86tXFWNJ=4+EF;M>nk*B^GLbA3$ugQO
zqscOwEMut5F;vbN@<}A0T#B1ZadRndBH1L8O(xk?lT9_*RFh36*<|XJsSKORW;5Ar
zCYu;4Ll%`GOXo<IWn@`KmStpFMn@!(?6b)}o9uHe*q36+K8EaLbjoBOLq{-%j$n-V
zr~e(U81YWPIM86%-L4!;A(zS@O({fE3el88G^G$tDMV8W(Ud|or4UUi<We1TDV=;u
zr;ySqq;v`?oqV#%Cz}GY$tRn9vdPyrlvh6GRY3LyWM4@3<z!z@_T^+>PWFXlSxA;8
zWLZL%C1hDbmL+6aLY5_DnF(iTohu6z#(Z*@lYb8ROtIXT2VWMl%pr|#iSE!5Q6dI<
zertCXjUH7rau$NmczeF(^zuEnljIXkHo5GBSFRXxU!>4-2(5G%vJZylgU>#90r^OY
zJ~=SvjB(^hyrN~XqEDuFQ;sJE=9o#AHQ>`Nu%3L%EjW`br#Vjv<yAr{=YV^R!%6N$
zN+DWe3I*hDptu#_?iP5F+-2adbSIL{0UM5-2k0tXMfQ@?sU~+OxpT>#Nbb$#j-j}j
z<c=Ws1o)y!P|zkzVEfjf_??Mt3XP=DY^q&0)u^85T_cO{3mR#AclLsya_h&jN32e2
zA196E7pXiKsca48ZXkC!T+P#h_tDWj1nL&3y^MSs$@3*%N%JMn%JL<))h3vk+#S5l
z7Si$l;7xF4xjQ%?`hXIfEFB}42ESs%uLl-LTrU(#TtV!#J+sgXbE;aHQ*E-`v8p=w
zwB?a*Zv~&TB*VK2-nG44@<H$+8`f@$rNfAigK<W8DEPRoZx@^eeVcb4Y%qm<d2SAt
z1lu;B>V-4gppZ?LwB9X3&RLHq_6GehEhZ$+cDP?$2!^JD&sX5z!#1MLO(7*z&JwCu
z38hdXab;9OX`Z&>{C1NCzxZ<6_S?1C^7w_2O_pgr;LGHemluepn=G!|!o_h*W-HXm
zx1v9Om1UFV$t2X1biD8jE1N9%EtO4{>985M$%0=}*<>+Vn~*}x?c{SCroXRuxG1CJ
zc#dY*=Pd3!`ZhgBB{^rg3f}g8&a!LBjZII|mG>O=fuAjbJ%fTy+px7y+x%~a^`PzZ
zs|GfG#r8?7dz&7oa$2lsql1EuTiO-QZ0fM~>lGAau|9NbIfUME`%_Kvifn;=@u-zi
z|H1hHT+_j4vaBF=f?C98a#yhrUiUBBP+Q1P2kdB84gPhm8Y+K{#5q-s#92oz*&iUq
zQ9{8RK(Jq-_A(BGe}40mpfJy&+)qlpj-Qlx9Y0K|Ny;UJG?6rtw4U@ZX)S3kX(4G9
zsiZlNq`8))nNK45B$7`e`Q*|ZDVO|n$)}dIg3ba|1*;+K?e$R3-)uO$-rl@k;(DZB
z;+Zwi^6`p80pXULGs8u=<<<1}n}=IoZuVhww6uWFbNy$-7iO_NFOo`yZYOC7X&7k)
zX{5rGBNe6`2|mBsqRBr-4ZG(;Xe6|o5-|$DDI25kTe7hJo#NlZX~px)X}um+>!&R%
z;47ht6bn}q@CFBR;|c=5=ZCpxlj1tUB67%`OPWtw10^5hC?Gd{1q)_wCFCw6cR9H$
zNH?ppjytakx30eG)K%xKH)nizRk&qqvvAP`Qn0oRw^a6r@4}O1G|gJ0_57K9YDjBI
z50D-vJxN+mT1{=(0PZ>$x|Kk8e)DSBh4622QDLnwDy(&b!d};)aExkDIR1xQvNP`u
z>jG^)Kdi4jJp}e%<m)$_HU?9z!!1FB9uFG{?x(_LSnzGF$E_=dU$Bh<ANcN|wJCfp
zc8nFjHZp;HCRm^A{{gt4>;DnyLDD0nN}&Ij<lf#K-LvfzD22iD$E=^i2FvQMKZ8bf
z6|Dx#cW0ZV{;k3w<;gPK((?ActwusQEn<unzkM>sir-2(2cg;E#&4s9TLNx>zxfy|
z_Ny^g{OZXVD}LVuW98fCS$8dexz#)@C+LLYnpTUfqw@dRYK+{q;?q{))>oi^PLZeD
z^lL2*Y)NTg`$z+?j85`#l8=*oaAv-}d5D2$Vu*ofVi>u@*p0L62=a*_p9n+y;9NSA
z{3FRflKdkL?T>TpXbO#{&}a&crqF0ZhvE!8hHPTUCWdTc$R>ttVhn9VGcki^Vg}B{
zYAjgV8Vi<of@sw~N+d$PETCA^M5-6I=g+M(!GE%BpfkFGuJsMHTF*A{YLacxEP~?Z
z7}%q7D1}^#m1~rBgjF`JaSF(%0DO*Evmt%-$6X`bm2!&)3-13kSg<$7*>LwDo6@YO
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
U)$?8t$nCr0@OK~oUrFG90|lFfegFUf

literal 0
HcmV?d00001

diff --git a/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll.meta b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll.meta
new file mode 100644
index 0000000..562c49f
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Lib/Zenject.ReflectionBaking.Mono.Cecil.dll.meta
@@ -0,0 +1,32 @@
+fileFormatVersion: 2
+guid: 0fdc9d5333ed94347bd076c3946dd19d
+timeCreated: 1538196673
+licenseType: Pro
+PluginImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  iconMap: {}
+  executionOrder: {}
+  isPreloaded: 0
+  isOverridable: 0
+  platformData:
+  - first:
+      Any: 
+    second:
+      enabled: 0
+      settings: {}
+  - first:
+      Editor: Editor
+    second:
+      enabled: 1
+      settings:
+        DefaultValueInitialized: true
+  - first:
+      Windows Store Apps: WindowsStoreApps
+    second:
+      enabled: 0
+      settings:
+        CPU: AnyCPU
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity.meta b/Assets/Source/Editor/ReflectionBaking/Unity.meta
new file mode 100644
index 0000000..55f44ff
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: bdf7617b0450e55498cedcfc70529ff5
+folderAsset: yes
+timeCreated: 1537245054
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs b/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs
new file mode 100644
index 0000000..d633e8a
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs
@@ -0,0 +1,66 @@
+﻿using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using ModestTree;
+using UnityEditorInternal;
+using UnityEngine;
+
+namespace Zenject.ReflectionBaking
+{
+    public class AssemblyPathRegistry
+    {
+        private static List<string> _assemblies;
+
+        public static List<string> GetAllGeneratedAssemblyRelativePaths()
+        {
+            if (_assemblies == null)
+            {
+                _assemblies = LookupAllGeneratedAssemblyPaths();
+                Assert.IsNotNull(_assemblies);
+            }
+
+            return _assemblies;
+        }
+
+        private static bool IsManagedAssembly(string systemPath)
+        {
+            var dllType = InternalEditorUtility.DetectDotNetDll(systemPath);
+            return dllType != DllType.Unknown && dllType != DllType.Native;
+        }
+
+        private static List<string> LookupAllGeneratedAssemblyPaths()
+        {
+            var assemblies = new List<string>(20);
+
+            // We could also add the ones in the project but we probably don't want to edit those
+            //FindAssemblies(Application.dataPath, 120, assemblies);
+
+            FindAssemblies(Application.dataPath + "/../Library/ScriptAssemblies/", 2, assemblies);
+
+            return assemblies;
+        }
+
+        public static void FindAssemblies(string systemPath, int maxDepth, List<string> result)
+        {
+            if (maxDepth > 0)
+                if (Directory.Exists(systemPath))
+                {
+                    var dirInfo = new DirectoryInfo(systemPath);
+
+                    result.AddRange(
+                        dirInfo.GetFiles().Select(x => x.FullName)
+                            .Where(IsManagedAssembly)
+                            .Select(ReflectionBakingInternalUtil.ConvertAbsoluteToAssetPath));
+
+                    var directories = dirInfo.GetDirectories();
+
+                    for (var i = 0; i < directories.Length; i++)
+                    {
+                        var current = directories[i];
+
+                        FindAssemblies(current.FullName, maxDepth - 1, result);
+                    }
+                }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs.meta
new file mode 100644
index 0000000..145ab1b
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/AssemblyPathRegistry.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: f96372c95411c904bb55ba67b55e0c84
+timeCreated: 1537003252
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs
new file mode 100644
index 0000000..1d8ba52
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs
@@ -0,0 +1,94 @@
+using System;
+using System.Diagnostics;
+using System.IO;
+using System.Linq;
+using ModestTree;
+using UnityEditor;
+using UnityEditor.Compilation;
+using Zenject.ReflectionBaking.Mono.Cecil;
+using Debug = UnityEngine.Debug;
+
+namespace Zenject.ReflectionBaking
+{
+    public static class ReflectionBakingBuildObserver
+    {
+        [InitializeOnLoadMethod]
+        public static void Initialize()
+        {
+            CompilationPipeline.assemblyCompilationFinished += OnAssemblyCompiled;
+        }
+
+        private static void OnAssemblyCompiled(string assemblyAssetPath, CompilerMessage[] messages)
+        {
+#if !UNITY_2018_1_OR_NEWER
+            if (Application.isEditor && !BuildPipeline.isBuildingPlayer)
+            {
+                return;
+            }
+#endif
+
+            if (EditorUserBuildSettings.activeBuildTarget == BuildTarget.WSAPlayer)
+                Log.Warn("Zenject reflection baking skipped because it is not currently supported on WSA platform!");
+            else
+                TryWeaveAssembly(assemblyAssetPath);
+        }
+
+        private static void TryWeaveAssembly(string assemblyAssetPath)
+        {
+            if (string.IsNullOrEmpty(assemblyAssetPath))
+                return;
+
+            var settings = ReflectionBakingInternalUtil.TryGetEnabledSettingsInstance();
+
+            if (settings == null) return;
+
+            var assemblyName = Path.GetFileNameWithoutExtension(assemblyAssetPath);
+
+            if (settings.AllGeneratedAssemblies && settings.ExcludeAssemblies.Select(Path.GetFileNameWithoutExtension)
+                .Contains(assemblyName)) return;
+
+            if (!settings.AllGeneratedAssemblies && !settings.IncludeAssemblies.Select(Path.GetFileNameWithoutExtension)
+                .Contains(assemblyName)) return;
+
+            var stopwatch = new Stopwatch();
+            stopwatch.Start();
+
+            var assemblyFullPath = ReflectionBakingInternalUtil.ConvertAssetPathToSystemPath(assemblyAssetPath);
+
+            var readerParameters = new ReaderParameters
+            {
+                AssemblyResolver = new UnityAssemblyResolver()
+                // Is this necessary?
+                //ReadSymbols = true,
+            };
+
+            var module = ModuleDefinition.ReadModule(assemblyFullPath, readerParameters);
+
+            var assemblyRefNames = module.AssemblyReferences.Select(x => x.Name.ToLower()).ToList();
+
+            if (!assemblyRefNames.Contains("zenject-usage"))
+                // Zenject-usage is used by the generated methods
+                // Important that we do this check otherwise we can corrupt some dlls that don't have access to it
+                return;
+
+            var assembly = AppDomain.CurrentDomain.GetAssemblies()
+                .Where(x => x.GetName().Name == assemblyName).OnlyOrDefault();
+
+            Assert.IsNotNull(assembly, "Could not find unique assembly '{0}' in currently loaded list of assemblies",
+                assemblyName);
+
+            var numTypesChanged = ReflectionBakingModuleEditor.WeaveAssembly(
+                module, assembly, settings.NamespacePatterns);
+
+            if (numTypesChanged > 0)
+            {
+                var writerParams = new WriterParameters();
+
+                module.Write(assemblyFullPath, writerParams);
+
+                Debug.Log("Added reflection baking to '{0}' types in assembly '{1}', took {2:0.00} seconds"
+                    .Fmt(numTypesChanged, Path.GetFileName(assemblyAssetPath), stopwatch.Elapsed.TotalSeconds));
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs.meta
new file mode 100644
index 0000000..5dd24cd
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingBuildObserver.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 374dbffd3e3c6504489ada7d14aa4006
+timeCreated: 1537501691
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs
new file mode 100644
index 0000000..0da55bd
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs
@@ -0,0 +1,76 @@
+using System.IO;
+using System.Reflection;
+using ModestTree;
+using UnityEditor;
+using UnityEngine;
+
+namespace Zenject.ReflectionBaking
+{
+    public static class ReflectionBakingInternalUtil
+    {
+        public static string ConvertAssetPathToSystemPath(string assetPath)
+        {
+            var path = Application.dataPath;
+            var pathLength = path.Length;
+            path = path.Substring(0, pathLength - /* Assets */ 6);
+            path = Path.Combine(path, assetPath);
+            return path;
+        }
+
+        public static ZenjectReflectionBakingSettings TryGetEnabledSettingsInstance()
+        {
+            var guids = AssetDatabase.FindAssets("t:ZenjectReflectionBakingSettings");
+
+            if (guids.IsEmpty()) return null;
+
+            ZenjectReflectionBakingSettings enabledSettings = null;
+
+            foreach (var guid in guids)
+            {
+                var candidate = AssetDatabase.LoadAssetAtPath<ZenjectReflectionBakingSettings>(
+                    AssetDatabase.GUIDToAssetPath(guid));
+
+                if (Application.isEditor && candidate.IsEnabledInEditor ||
+                    BuildPipeline.isBuildingPlayer && candidate.IsEnabledInBuilds)
+                {
+                    Assert.IsNull(enabledSettings,
+                        "Found multiple enabled ZenjectReflectionBakingSettings objects!  Please disable/delete one to continue.");
+                    enabledSettings = candidate;
+                }
+            }
+
+            return enabledSettings;
+        }
+
+        public static string ConvertAbsoluteToAssetPath(string systemPath)
+        {
+            var projectPath = Application.dataPath;
+
+            // Remove 'Assets'
+            projectPath = projectPath.Substring(0, projectPath.Length - /* Assets */ 6);
+
+            var systemPathLength = systemPath.Length;
+            var assetPathLength = systemPathLength - projectPath.Length;
+
+            Assert.That(assetPathLength > 0, "Unexpect path '{0}'", systemPath);
+
+            return systemPath.Substring(projectPath.Length, assetPathLength);
+        }
+
+        public static void TryForceUnityFullCompile()
+        {
+            var compInterface = typeof(Editor).Assembly.GetType(
+                "UnityEditor.Scripting.ScriptCompilation.EditorCompilationInterface");
+
+            if (compInterface != null)
+            {
+                var dirtyAllScriptsMethod = compInterface.GetMethod(
+                    "DirtyAllScripts", BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
+
+                dirtyAllScriptsMethod.Invoke(null, null);
+            }
+
+            AssetDatabase.Refresh();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs.meta
new file mode 100644
index 0000000..d6416f9
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingInternalUtil.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 68724c9557073844fb7c3f088c588d32
+timeCreated: 1537003252
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs
new file mode 100644
index 0000000..4e88e5f
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs
@@ -0,0 +1,24 @@
+#if !NOT_UNITY3D
+
+using System.IO;
+using UnityEditor;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject.ReflectionBaking
+{
+    public static class ReflectionBakingMenuItems
+    {
+        [MenuItem("Assets/Create/Zenject/Reflection Baking Settings", false, 100)]
+        public static void CreateReflectionBakingSettings()
+        {
+            var folderPath = ZenUnityEditorUtil.GetCurrentDirectoryAssetPathFromSelection();
+
+            var config = ScriptableObject.CreateInstance<ZenjectReflectionBakingSettings>();
+
+            ZenUnityEditorUtil.SaveScriptableObjectAsset(
+                Path.Combine(folderPath, "ZenjectReflectionBakingSettings.asset"), config);
+        }
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs.meta
new file mode 100644
index 0000000..c0d6a94
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ReflectionBakingMenuItems.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 549215a3ba27806449b2b1542fdffc03
+timeCreated: 1537690031
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs b/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs
new file mode 100644
index 0000000..0505d0d
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs
@@ -0,0 +1,93 @@
+﻿using System;
+using System.Collections.Generic;
+using System.IO;
+using Zenject.ReflectionBaking.Mono.Cecil;
+
+namespace Zenject.ReflectionBaking
+{
+    public class UnityAssemblyResolver : BaseAssemblyResolver
+    {
+        private readonly IDictionary<string, string> _appDomainAssemblyLocations;
+        private readonly IDictionary<string, AssemblyDefinition> _cache;
+
+        public UnityAssemblyResolver()
+        {
+            _appDomainAssemblyLocations = new Dictionary<string, string>();
+            _cache = new Dictionary<string, AssemblyDefinition>();
+
+            var domain = AppDomain.CurrentDomain;
+
+            var assemblies = domain.GetAssemblies();
+
+            for (var i = 0; i < assemblies.Length; i++)
+            {
+#if NET_4_6
+                if (assemblies[i].IsDynamic) continue;
+#endif
+
+                _appDomainAssemblyLocations[assemblies[i].FullName] = assemblies[i].Location;
+
+                var assemblyPath = assemblies[i].Location;
+
+                if (!string.IsNullOrEmpty(assemblyPath))
+                    AddSearchDirectory(Path.GetDirectoryName(assemblies[i].Location));
+            }
+        }
+
+        public override AssemblyDefinition Resolve(AssemblyNameReference name)
+        {
+            var assemblyDef = FindAssemblyDefinition(name.FullName, null);
+
+            if (assemblyDef == null)
+            {
+                assemblyDef = base.Resolve(name);
+                _cache[name.FullName] = assemblyDef;
+            }
+
+            return assemblyDef;
+        }
+
+        public override AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters)
+        {
+            var assemblyDef = FindAssemblyDefinition(name.FullName, parameters);
+
+            if (assemblyDef == null)
+            {
+                assemblyDef = base.Resolve(name, parameters);
+                _cache[name.FullName] = assemblyDef;
+            }
+
+            return assemblyDef;
+        }
+
+        /// Searches for AssemblyDefinition in our cache, and failing that,
+        /// looks for a known location.  Returns null if both attempts fail.
+        private AssemblyDefinition FindAssemblyDefinition(string fullName, ReaderParameters parameters)
+        {
+            if (fullName == null) throw new ArgumentNullException("fullName");
+
+            AssemblyDefinition assemblyDefinition;
+
+            // Look in cache first
+            if (_cache.TryGetValue(fullName, out assemblyDefinition)) return assemblyDefinition;
+
+            // Try to use known location
+
+            string location;
+
+            if (_appDomainAssemblyLocations.TryGetValue(fullName, out location))
+            {
+                if (parameters != null)
+                    assemblyDefinition = AssemblyDefinition.ReadAssembly(location, parameters);
+                else
+                    assemblyDefinition = AssemblyDefinition.ReadAssembly(location);
+
+                _cache[fullName] = assemblyDefinition;
+
+                return assemblyDefinition;
+            }
+
+            return null;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs.meta
new file mode 100644
index 0000000..e059b37
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/UnityAssemblyResolver.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b107233111f831043b3d5983fe6f1b25
+timeCreated: 1537934945
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs
new file mode 100644
index 0000000..39cac55
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs
@@ -0,0 +1,56 @@
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject.ReflectionBaking
+{
+    public class ZenjectReflectionBakingSettings : ScriptableObject
+    {
+        [SerializeField]
+        bool _isEnabledInBuilds = true;
+
+        [SerializeField]
+        bool _isEnabledInEditor = false;
+
+        [SerializeField]
+        bool _allGeneratedAssemblies = true;
+
+        [SerializeField]
+        List<string> _includeAssemblies = null;
+
+        [SerializeField]
+        List<string> _excludeAssemblies = null;
+
+        [SerializeField]
+        List<string> _namespacePatterns = null;
+
+        public List<string> NamespacePatterns
+        {
+            get { return _namespacePatterns; }
+        }
+
+        public List<string> IncludeAssemblies
+        {
+            get { return _includeAssemblies; }
+        }
+
+        public List<string> ExcludeAssemblies
+        {
+            get { return _excludeAssemblies; }
+        }
+
+        public bool IsEnabledInEditor
+        {
+            get { return _isEnabledInEditor; }
+        }
+
+        public bool IsEnabledInBuilds
+        {
+            get { return _isEnabledInBuilds; }
+        }
+
+        public bool AllGeneratedAssemblies
+        {
+            get { return _allGeneratedAssemblies; }
+        }
+    }
+}
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs.meta
new file mode 100644
index 0000000..48127d1
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettings.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1ab372d6a005c8344b5d6b25dbc310ce
+timeCreated: 1536333743
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs
new file mode 100644
index 0000000..f5972e0
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs
@@ -0,0 +1,236 @@
+﻿using UnityEditor;
+using UnityEditorInternal;
+using UnityEngine;
+
+namespace Zenject.ReflectionBaking
+{
+    [CustomEditor(typeof(ZenjectReflectionBakingSettings))]
+    public class ZenjectReflectionBakingSettingsEditor : Editor
+    {
+        SerializedProperty _includeAssemblies;
+        SerializedProperty _excludeAssemblies;
+        SerializedProperty _namespacePatterns;
+        SerializedProperty _isEnabledInBuilds;
+        SerializedProperty _isEnabledInEditor;
+        SerializedProperty _allGeneratedAssemblies;
+
+        // Lists
+        ReorderableList _includeAssembliesList;
+        ReorderableList _excludeAssembliesList;
+        ReorderableList _namespacePatternsList;
+
+        // Layouts
+        Vector2 _logScrollPosition;
+        int _selectedLogIndex;
+
+        bool _hasModifiedProperties;
+
+        static GUIContent _includeAssembliesListHeaderContent = new GUIContent
+        {
+            text = "Include Assemblies",
+            tooltip = "The list of all the assemblies that will be editted to have reflection information directly embedded"
+        };
+
+        static GUIContent _excludeAssembliesListHeaderContent = new GUIContent
+        {
+            text = "Exclude Assemblies",
+            tooltip = "The list of all the assemblies that will not be editted"
+        };
+
+        static GUIContent _namespacePatternListHeaderContent = new GUIContent
+        {
+            text = "Namespace Patterns",
+            tooltip = "This list of Regex patterns will be compared to the name of each type in the given assemblies, and when a match is found that type will be editting to directly contain reflection information"
+        };
+
+        void OnEnable()
+        {
+            _includeAssemblies = serializedObject.FindProperty("_includeAssemblies");
+            _excludeAssemblies = serializedObject.FindProperty("_excludeAssemblies");
+            _namespacePatterns = serializedObject.FindProperty("_namespacePatterns");
+            _isEnabledInEditor = serializedObject.FindProperty("_isEnabledInEditor");
+            _isEnabledInBuilds = serializedObject.FindProperty("_isEnabledInBuilds");
+            _allGeneratedAssemblies = serializedObject.FindProperty("_allGeneratedAssemblies");
+
+            _namespacePatternsList = new ReorderableList(serializedObject, _namespacePatterns);
+            _namespacePatternsList.drawHeaderCallback += OnNamespacePatternsDrawHeader;
+            _namespacePatternsList.drawElementCallback += OnNamespacePatternsDrawElement;
+
+            _includeAssembliesList = new ReorderableList(serializedObject, _includeAssemblies);
+            _includeAssembliesList.drawHeaderCallback += OnIncludeWeavedAssemblyDrawHeader;
+            _includeAssembliesList.onAddCallback += OnIncludeWeavedAssemblyElementAdded;
+            _includeAssembliesList.drawElementCallback += OnIncludeAssemblyListDrawElement;
+
+            _excludeAssembliesList = new ReorderableList(serializedObject, _excludeAssemblies);
+            _excludeAssembliesList.drawHeaderCallback += OnExcludeWeavedAssemblyDrawHeader;
+            _excludeAssembliesList.onAddCallback += OnExcludeWeavedAssemblyElementAdded;
+            _excludeAssembliesList.drawElementCallback += OnExcludeAssemblyListDrawElement;
+        }
+
+        void OnNamespacePatternsDrawElement(Rect rect, int index, bool isActive, bool isFocused)
+        {
+            SerializedProperty indexProperty = _namespacePatterns.GetArrayElementAtIndex(index);
+            indexProperty.stringValue = EditorGUI.TextField(rect, indexProperty.stringValue);
+        }
+
+        void OnExcludeAssemblyListDrawElement(Rect rect, int index, bool isActive, bool isFocused)
+        {
+            SerializedProperty indexProperty = _excludeAssemblies.GetArrayElementAtIndex(index);
+            EditorGUI.LabelField(rect, indexProperty.stringValue, EditorStyles.textArea);
+        }
+
+        void OnIncludeAssemblyListDrawElement(Rect rect, int index, bool isActive, bool isFocused)
+        {
+            SerializedProperty indexProperty = _includeAssemblies.GetArrayElementAtIndex(index);
+            EditorGUI.LabelField(rect, indexProperty.stringValue, EditorStyles.textArea);
+        }
+
+        void OnNamespacePatternsDrawHeader(Rect rect)
+        {
+            GUI.Label(rect, _namespacePatternListHeaderContent);
+        }
+
+        void OnExcludeWeavedAssemblyDrawHeader(Rect rect)
+        {
+            GUI.Label(rect, _excludeAssembliesListHeaderContent);
+        }
+
+        void OnIncludeWeavedAssemblyDrawHeader(Rect rect)
+        {
+            GUI.Label(rect, _includeAssembliesListHeaderContent);
+        }
+
+        public override void OnInspectorGUI()
+        {
+            EditorGUI.BeginChangeCheck();
+            {
+                GUILayout.Label("Settings", EditorStyles.boldLabel);
+
+                EditorGUILayout.PropertyField(_isEnabledInBuilds, true);
+
+                var oldIsEnabledInEditorValue = _isEnabledInEditor.boolValue;
+                EditorGUILayout.PropertyField(_isEnabledInEditor, true);
+
+                if (oldIsEnabledInEditorValue != _isEnabledInEditor.boolValue)
+                {
+                    ReflectionBakingInternalUtil.TryForceUnityFullCompile();
+                }
+
+#if !UNITY_2018_1_OR_NEWER
+                if (_isEnabledInEditor.boolValue)
+                {
+                    EditorGUILayout.HelpBox(
+                        "Reflection baking inside unity editor requires Unity 2018+!  It is however supported for builds", MessageType.Error);
+                }
+#endif
+                EditorGUILayout.PropertyField(_allGeneratedAssemblies, true);
+
+                if (_allGeneratedAssemblies.boolValue)
+                {
+                    _excludeAssembliesList.DoLayoutList();
+
+                    GUI.enabled = false;
+
+                    try
+                    {
+                        _includeAssembliesList.DoLayoutList();
+                    }
+                    finally
+                    {
+                        GUI.enabled = true;
+                    }
+                }
+                else
+                {
+                    GUI.enabled = false;
+
+                    try
+                    {
+                        _excludeAssembliesList.DoLayoutList();
+                    }
+                    finally
+                    {
+                        GUI.enabled = true;
+                    }
+
+                    _includeAssembliesList.DoLayoutList();
+                }
+
+                _namespacePatternsList.DoLayoutList();
+            }
+
+            if (EditorGUI.EndChangeCheck())
+            {
+                _hasModifiedProperties = true;
+            }
+
+            if (_hasModifiedProperties)
+            {
+                _hasModifiedProperties = false;
+                ApplyModifiedProperties();
+            }
+        }
+
+        void ApplyModifiedProperties()
+        {
+            serializedObject.ApplyModifiedProperties();
+            serializedObject.Update();
+        }
+
+        void OnExcludeWeavedAssemblyElementAdded(ReorderableList list)
+        {
+            OnAssemblyElementAdded(_excludeAssemblies, list);
+        }
+
+        void OnIncludeWeavedAssemblyElementAdded(ReorderableList list)
+        {
+            OnAssemblyElementAdded(_includeAssemblies, list);
+        }
+
+        void OnAssemblyElementAdded(SerializedProperty listProperty, ReorderableList list)
+        {
+            GenericMenu menu = new GenericMenu();
+
+            var paths = AssemblyPathRegistry.GetAllGeneratedAssemblyRelativePaths();
+
+            for (int i = 0; i < paths.Count; i++)
+            {
+                var path = paths[i];
+
+                bool foundMatch = false;
+
+                for (int k = 0; k < listProperty.arraySize; k++)
+                {
+                    SerializedProperty current = listProperty.GetArrayElementAtIndex(k);
+
+                    if (path == current.stringValue.Replace("/", "\\"))
+                    {
+                        foundMatch = true;
+                        break;
+                    }
+                }
+
+                if (!foundMatch)
+                {
+                    GUIContent content = new GUIContent(path);
+                    menu.AddItem(content, false, p => OnWeavedAssemblyAdded(listProperty, p), path);
+                }
+            }
+
+            if (menu.GetItemCount() == 0)
+            {
+                menu.AddDisabledItem(new GUIContent("[All Assemblies Added]"));
+            }
+
+            menu.ShowAsContext();
+        }
+
+        void OnWeavedAssemblyAdded(SerializedProperty listProperty, object path)
+        {
+            listProperty.arraySize++;
+            SerializedProperty weaved = listProperty.GetArrayElementAtIndex(listProperty.arraySize - 1);
+            weaved.stringValue = ((string)path).Replace("\\", "/");
+            ApplyModifiedProperties();
+        }
+    }
+}
diff --git a/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs.meta b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs.meta
new file mode 100644
index 0000000..32cc2bd
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Unity/ZenjectReflectionBakingSettingsEditor.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 90683e755a104ed4ab5841ef7bb58742
+timeCreated: 1538185954
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef
new file mode 100644
index 0000000..4dc72cd
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef
@@ -0,0 +1,11 @@
+{
+    "name": "Zenject-ReflectionBaking-Editor",
+    "references": [
+        "Zenject",
+        "Zenject-Editor"
+    ],
+    "includePlatforms": [
+        "Editor"
+    ],
+    "excludePlatforms": []
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef.meta b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef.meta
new file mode 100644
index 0000000..4b6a6d2
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking-Editor.asmdef.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 14f8b558cd941e545961d1d8d31254f0
+timeCreated: 1536994295
+licenseType: Free
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking.csproj.meta b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking.csproj.meta
new file mode 100644
index 0000000..91982f4
--- /dev/null
+++ b/Assets/Source/Editor/ReflectionBaking/Zenject-ReflectionBaking.csproj.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 91b0b4c77fdd1d24aa1af646e9d29960
+timeCreated: 1536994288
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/SceneParentLoading.meta b/Assets/Source/Editor/SceneParentLoading.meta
new file mode 100644
index 0000000..99b8eb6
--- /dev/null
+++ b/Assets/Source/Editor/SceneParentLoading.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 8b93c2560e2014a4893f387eb7690dbd
+folderAsset: yes
+timeCreated: 1520777708
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs b/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs
new file mode 100644
index 0000000..14246bb
--- /dev/null
+++ b/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs
@@ -0,0 +1,22 @@
+using System;
+using System.Collections.Generic;
+using UnityEditor;
+using UnityEngine;
+
+namespace Zenject.Internal
+{
+    public class DefaultSceneContractConfig : ScriptableObject
+    {
+        public const string ResourcePath = "ZenjectDefaultSceneContractConfig";
+
+        public List<ContractInfo> DefaultContracts;
+
+        [Serializable]
+        public class ContractInfo
+        {
+            public string ContractName;
+            public SceneAsset Scene;
+        }
+    }
+
+}
diff --git a/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs.meta b/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs.meta
new file mode 100644
index 0000000..4fd624e
--- /dev/null
+++ b/Assets/Source/Editor/SceneParentLoading/DefaultSceneContractConfig.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 8620c058a9173b84a97d72ed5e94dbd7
+timeCreated: 1520778887
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs b/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs
new file mode 100644
index 0000000..c0f17a8
--- /dev/null
+++ b/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs
@@ -0,0 +1,326 @@
+﻿using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEditor;
+using UnityEditor.SceneManagement;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace Zenject.Internal
+{
+    [InitializeOnLoad]
+    public static class SceneParentAutomaticLoader
+    {
+        static SceneParentAutomaticLoader()
+        {
+            EditorApplication.playModeStateChanged += OnPlayModeStateChanged;
+        }
+
+        static void OnPlayModeStateChanged(PlayModeStateChange state)
+        {
+            if (state == PlayModeStateChange.ExitingEditMode)
+            {
+                try
+                {
+                    ValidateMultiSceneSetupAndLoadDefaultSceneParents();
+                }
+                catch (Exception e)
+                {
+                    EditorApplication.isPlaying = false;
+                    throw new ZenjectException(
+                        "Failure occurred when attempting to load default scene parent contracts!", e);
+                }
+            }
+            else if (state == PlayModeStateChange.EnteredEditMode)
+            {
+                // It would be cool to restore the initial scene set up here but in order to do this
+                // we would have to make sure that the user saves the scene before running which
+                // would be too annoying, so just leave any changes we've made alone
+            }
+        }
+
+        public static void ValidateMultiSceneSetupAndLoadDefaultSceneParents()
+        {
+            var defaultContractsMap = LoadDefaultContractsMap();
+
+            // NOTE: Even if configs is empty we still want to do the below logic to validate the
+            // multi scene setup
+
+            var sceneInfos = GetLoadedZenjectSceneInfos();
+            var contractMap = GetCurrentSceneContractsMap(sceneInfos);
+
+            foreach (var sceneInfo in sceneInfos)
+            {
+                ProcessScene(sceneInfo, contractMap, defaultContractsMap);
+            }
+        }
+
+        static Dictionary<string, LoadedSceneInfo> GetCurrentSceneContractsMap(
+            List<LoadedSceneInfo> sceneInfos)
+        {
+            var contractMap = new Dictionary<string, LoadedSceneInfo>();
+
+            foreach (var info in sceneInfos)
+            {
+                AddToContractMap(contractMap, info);
+            }
+
+            return contractMap;
+        }
+
+        static void ProcessScene(
+            LoadedSceneInfo sceneInfo,
+            Dictionary<string, LoadedSceneInfo> contractMap,
+            Dictionary<string, string> defaultContractsMap)
+        {
+            if (sceneInfo.SceneContext != null)
+            {
+                Assert.IsNull(sceneInfo.DecoratorContext);
+                ProcessSceneParents(sceneInfo, contractMap, defaultContractsMap);
+            }
+            else
+            {
+                Assert.IsNotNull(sceneInfo.DecoratorContext);
+                ProcessSceneDecorators(sceneInfo, contractMap, defaultContractsMap);
+            }
+        }
+
+        static void ProcessSceneDecorators(
+            LoadedSceneInfo sceneInfo,
+            Dictionary<string, LoadedSceneInfo> contractMap,
+            Dictionary<string, string> defaultContractsMap)
+        {
+            var decoratedContractName = sceneInfo.DecoratorContext.DecoratedContractName;
+
+            LoadedSceneInfo decoratedSceneInfo;
+
+            if (contractMap.TryGetValue(decoratedContractName, out decoratedSceneInfo))
+            {
+                ValidateDecoratedSceneMatch(sceneInfo, decoratedSceneInfo);
+                return;
+            }
+
+            decoratedSceneInfo = LoadDefaultSceneForContract(
+                sceneInfo, decoratedContractName, defaultContractsMap);
+
+            EditorSceneManager.MoveSceneAfter(decoratedSceneInfo.Scene, sceneInfo.Scene);
+
+            ValidateDecoratedSceneMatch(sceneInfo, decoratedSceneInfo);
+
+            ProcessScene(decoratedSceneInfo, contractMap, defaultContractsMap);
+        }
+
+        static void ProcessSceneParents(
+            LoadedSceneInfo sceneInfo,
+            Dictionary<string, LoadedSceneInfo> contractMap,
+            Dictionary<string, string> defaultContractsMap)
+        {
+            foreach (var parentContractName in sceneInfo.SceneContext.ParentContractNames)
+            {
+                LoadedSceneInfo parentInfo;
+
+                if (contractMap.TryGetValue(parentContractName, out parentInfo))
+                {
+                    ValidateParentChildMatch(parentInfo, sceneInfo);
+                    continue;
+                }
+
+                parentInfo = LoadDefaultSceneForContract(sceneInfo, parentContractName, defaultContractsMap);
+
+                AddToContractMap(contractMap, parentInfo);
+
+                EditorSceneManager.MoveSceneBefore(parentInfo.Scene, sceneInfo.Scene);
+
+                ValidateParentChildMatch(parentInfo, sceneInfo);
+
+                ProcessScene(parentInfo, contractMap, defaultContractsMap);
+            }
+        }
+
+        static LoadedSceneInfo LoadDefaultSceneForContract(
+            LoadedSceneInfo sceneInfo, string contractName, Dictionary<string, string> defaultContractsMap)
+        {
+            string scenePath;
+
+            if (!defaultContractsMap.TryGetValue(contractName, out scenePath))
+            {
+                throw Assert.CreateException(
+                    "Could not fill contract '{0}' for scene '{1}'.  No scenes with that contract name are loaded, and could not find a match in any default scene contract configs to auto load one either."
+                    .Fmt(contractName, sceneInfo.Scene.name));
+            }
+
+            Scene scene;
+
+            try
+            {
+                scene = EditorSceneManager.OpenScene(scenePath, OpenSceneMode.Additive);
+            }
+            catch (Exception e)
+            {
+                throw new ZenjectException(
+                    "Error while attempting to load contracts for scene '{0}'".Fmt(sceneInfo.Scene.name), e);
+            }
+
+            return CreateLoadedSceneInfo(scene);
+        }
+
+        static void ValidateDecoratedSceneMatch(
+            LoadedSceneInfo decoratorInfo, LoadedSceneInfo decoratedInfo)
+        {
+            var decoratorIndex = GetSceneIndex(decoratorInfo.Scene);
+            var decoratedIndex = GetSceneIndex(decoratedInfo.Scene);
+            var activeIndex = GetSceneIndex(EditorSceneManager.GetActiveScene());
+
+            Assert.That(decoratorIndex < decoratedIndex,
+                "Decorator scene '{0}' must be loaded before decorated scene '{1}'.  Please drag the decorator scene to be placed above the other scene in the scene hierarchy.",
+                decoratorInfo.Scene.name, decoratedInfo.Scene.name);
+
+            if (activeIndex > decoratorIndex)
+            {
+                EditorSceneManager.SetActiveScene(decoratorInfo.Scene);
+            }
+        }
+
+        static void ValidateParentChildMatch(
+            LoadedSceneInfo parentSceneInfo, LoadedSceneInfo sceneInfo)
+        {
+            var parentIndex = GetSceneIndex(parentSceneInfo.Scene);
+            var childIndex = GetSceneIndex(sceneInfo.Scene);
+            var activeIndex = GetSceneIndex(EditorSceneManager.GetActiveScene());
+
+            Assert.That(parentIndex < childIndex,
+                "Parent scene '{0}' must be loaded before child scene '{1}'.  Please drag it to be placed above its child in the scene hierarchy.", parentSceneInfo.Scene.name, sceneInfo.Scene.name);
+
+            if (activeIndex > parentIndex)
+            {
+                EditorSceneManager.SetActiveScene(parentSceneInfo.Scene);
+            }
+        }
+
+        static int GetSceneIndex(Scene scene)
+        {
+            for (int i = 0; i < EditorSceneManager.sceneCount; i++)
+            {
+                if (EditorSceneManager.GetSceneAt(i) == scene)
+                {
+                    return i;
+                }
+            }
+
+            throw Assert.CreateException();
+        }
+
+        static Dictionary<string, string> LoadDefaultContractsMap()
+        {
+            var configs = Resources.LoadAll<DefaultSceneContractConfig>(DefaultSceneContractConfig.ResourcePath);
+
+            var map = new Dictionary<string, string>();
+
+            foreach (var config in configs)
+            {
+                foreach (var info in config.DefaultContracts)
+                {
+                    if (info.ContractName.Trim().IsEmpty())
+                    {
+                        Log.Warn("Found empty contract name in default scene contract config at path '{0}'", AssetDatabase.GetAssetPath(config));
+                        continue;
+                    }
+
+                    Assert.That(!map.ContainsKey(info.ContractName),
+                        "Found duplicate contract '{0}' in default scene contract config at '{1}'!  Default contract already specified", info.ContractName, AssetDatabase.GetAssetPath(config));
+
+                    map.Add(info.ContractName, AssetDatabase.GetAssetPath(info.Scene));
+                }
+            }
+
+            return map;
+        }
+
+        static LoadedSceneInfo CreateLoadedSceneInfo(Scene scene)
+        {
+            var info = TryCreateLoadedSceneInfo(scene);
+            Assert.IsNotNull(info, "Expected scene '{0}' to be a zenject scene", scene.name);
+            return info;
+        }
+
+        static LoadedSceneInfo TryCreateLoadedSceneInfo(Scene scene)
+        {
+            var sceneContext = ZenUnityEditorUtil.TryGetSceneContextForScene(scene);
+            var decoratorContext = ZenUnityEditorUtil.TryGetDecoratorContextForScene(scene);
+
+            if (sceneContext == null && decoratorContext == null)
+            {
+                return null;
+            }
+
+            var info = new LoadedSceneInfo
+            {
+                Scene = scene
+            };
+
+            if (sceneContext != null)
+            {
+                Assert.IsNull(decoratorContext,
+                "Found both SceneContext and SceneDecoratorContext in scene '{0}'", scene.name);
+
+                info.SceneContext = sceneContext;
+            }
+            else
+            {
+                Assert.IsNotNull(decoratorContext);
+
+                info.DecoratorContext = decoratorContext;
+            }
+
+            return info;
+        }
+
+        static List<LoadedSceneInfo> GetLoadedZenjectSceneInfos()
+        {
+            var result = new List<LoadedSceneInfo>();
+
+            for (int i = 0; i < EditorSceneManager.sceneCount; i++)
+            {
+                var scene = EditorSceneManager.GetSceneAt(i);
+                var info = TryCreateLoadedSceneInfo(scene);
+
+                if (info != null)
+                {
+                    result.Add(info);
+                }
+            }
+
+            return result;
+        }
+
+        static void AddToContractMap(
+            Dictionary<string, LoadedSceneInfo> contractMap, LoadedSceneInfo info)
+        {
+            if (info.SceneContext == null)
+            {
+                return;
+            }
+
+            foreach (var contractName in info.SceneContext.ContractNames)
+            {
+                LoadedSceneInfo currentInfo;
+
+                if (contractMap.TryGetValue(contractName, out currentInfo))
+                {
+                    throw Assert.CreateException(
+                        "Found multiple scene contracts with name '{0}'. Scene '{1}' and scene '{2}'",
+                        contractName, currentInfo.Scene.name, info.Scene.name);
+                }
+
+                contractMap.Add(contractName, info);
+            }
+        }
+
+        public class LoadedSceneInfo
+        {
+            public SceneContext SceneContext;
+            public SceneDecoratorContext DecoratorContext;
+            public Scene Scene;
+        }
+    }
+}
diff --git a/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs.meta b/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs.meta
new file mode 100644
index 0000000..e7881d9
--- /dev/null
+++ b/Assets/Source/Editor/SceneParentLoading/SceneParentAutomaticLoader.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: c9f09e0752f64214ba3413d7fdc47736
+timeCreated: 1520771371
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestBuildAssemblyFilter.cs b/Assets/Source/Editor/TestBuildAssemblyFilter.cs
new file mode 100644
index 0000000..756bebe
--- /dev/null
+++ b/Assets/Source/Editor/TestBuildAssemblyFilter.cs
@@ -0,0 +1,41 @@
+using System.Collections.Generic;
+using System.Linq;
+using UnityEditor;
+using UnityEditor.Build;
+
+namespace Zenject.Internal
+{
+    public sealed class TestBuildAssemblyFilter : IFilterBuildAssemblies
+    {
+        private readonly IReadOnlyList<string> ExcludedAssemblies = new List<string>
+        {
+            "Zenject-TestFramework"
+        };
+
+        public int callbackOrder { get; }
+
+        public string[] OnFilterAssemblies(BuildOptions buildOptions, string[] assemblies)
+        {
+            if (buildOptions.HasFlag(BuildOptions.IncludeTestAssemblies))
+            {
+                return assemblies;
+            }
+            return assemblies.Where(x => ValidateName(x)).ToArray();
+        }
+
+        private bool ValidateName(string assemblyName)
+        {
+            for (int i = 0; i < ExcludedAssemblies.Count; ++i)
+            {
+                string target = ExcludedAssemblies[i];
+
+                if (assemblyName.Contains(target))
+                {
+                    return false;
+                }
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/Assets/Source/Editor/TestBuildAssemblyFilter.cs.meta b/Assets/Source/Editor/TestBuildAssemblyFilter.cs.meta
new file mode 100644
index 0000000..bf5e1f5
--- /dev/null
+++ b/Assets/Source/Editor/TestBuildAssemblyFilter.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: c9527e6cb809d074d9491f864505969e
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework.meta b/Assets/Source/Editor/TestFramework.meta
new file mode 100644
index 0000000..6e01a39
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: dd37a6fe62077344583c1ff10a2f0962
+folderAsset: yes
+timeCreated: 1520787886
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/SceneTestFixture.cs b/Assets/Source/Editor/TestFramework/SceneTestFixture.cs
new file mode 100644
index 0000000..efcc2b8
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/SceneTestFixture.cs
@@ -0,0 +1,97 @@
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using NUnit.Framework;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+using Zenject.Internal;
+using Assert = ModestTree.Assert;
+
+// Ignore warning about using SceneManager.UnloadScene instead of SceneManager.UnloadSceneAsync
+#pragma warning disable 618
+
+namespace Zenject
+{
+    public abstract class SceneTestFixture
+    {
+        private readonly List<DiContainer> _sceneContainers = new List<DiContainer>();
+
+        private bool _hasLoadedScene;
+
+        protected DiContainer SceneContainer { get; private set; }
+
+        protected IEnumerable<DiContainer> SceneContainers => _sceneContainers;
+
+        public IEnumerator LoadScene(string sceneName)
+        {
+            return LoadScenes(sceneName);
+        }
+
+        public IEnumerator LoadScenes(params string[] sceneNames)
+        {
+            Assert.That(!_hasLoadedScene, "Attempted to load scene twice!");
+            _hasLoadedScene = true;
+
+            // Clean up any leftovers from previous test
+            ZenjectTestUtil.DestroyEverythingExceptTestRunner(false);
+
+            Assert.That(SceneContainers.IsEmpty());
+
+            for (var i = 0; i < sceneNames.Length; i++)
+            {
+                var sceneName = sceneNames[i];
+
+                Assert.That(Application.CanStreamedLevelBeLoaded(sceneName),
+                    "Cannot load scene '{0}' for test '{1}'.  The scenes used by SceneTestFixture derived classes must be added to the build settings for the test to work",
+                    sceneName, GetType());
+
+                Log.Info("Loading scene '{0}' for testing", sceneName);
+
+                var loader =
+                    SceneManager.LoadSceneAsync(sceneName, i == 0 ? LoadSceneMode.Single : LoadSceneMode.Additive);
+
+                while (!loader.isDone) yield return null;
+
+                SceneContext sceneContext = null;
+
+                if (ProjectContext.HasInstance)
+                    // ProjectContext might be null if scene does not have a scene context
+                {
+                    var scene = SceneManager.GetSceneByName(sceneName);
+
+                    sceneContext = ProjectContext.Instance.Container.Resolve<SceneContextRegistry>()
+                        .TryGetSceneContextForScene(scene);
+                }
+
+                _sceneContainers.Add(sceneContext == null ? null : sceneContext.Container);
+            }
+
+            SceneContainer = _sceneContainers.Where(x => x != null).LastOrDefault();
+
+            if (SceneContainer != null) SceneContainer.Inject(this);
+        }
+
+        [SetUp]
+        public virtual void SetUp()
+        {
+            StaticContext.Clear();
+            SetMemberDefaults();
+        }
+
+        private void SetMemberDefaults()
+        {
+            _hasLoadedScene = false;
+            SceneContainer = null;
+            _sceneContainers.Clear();
+        }
+
+        [TearDown]
+        public virtual void Teardown()
+        {
+            ZenjectTestUtil.DestroyEverythingExceptTestRunner(true);
+            StaticContext.Clear();
+            SetMemberDefaults();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/SceneTestFixture.cs.meta b/Assets/Source/Editor/TestFramework/SceneTestFixture.cs.meta
new file mode 100644
index 0000000..db7d9df
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/SceneTestFixture.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 325fb0e9bd879b440a9b5c077309c199
+timeCreated: 1527233974
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs b/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs
new file mode 100644
index 0000000..6ef3c6a
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs
@@ -0,0 +1,14 @@
+#if UNITY_EDITOR
+
+using UnityEditor;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class SceneTestFixtureSceneReference : ScriptableObject
+    {
+        public SceneAsset Scene;
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs.meta b/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs.meta
new file mode 100644
index 0000000..b74ca24
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/SceneTestFixtureSceneReference.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5b634c456740a0e42928511e3f2ada75
+timeCreated: 1527233974
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs b/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs
new file mode 100644
index 0000000..a05dedc
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs
@@ -0,0 +1,9 @@
+using System;
+
+namespace Zenject
+{
+    [AttributeUsage(AttributeTargets.Method)]
+    public class ValidateOnlyAttribute : Attribute
+    {
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs.meta b/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs.meta
new file mode 100644
index 0000000..59ff5d5
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ValidateOnlyAttribute.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2f9f4a0ef011f8846b17c8dc23e69b11
+timeCreated: 1506450521
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef b/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef
new file mode 100644
index 0000000..a9061cb
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef
@@ -0,0 +1,19 @@
+{
+    "name": "Zenject-TestFramework",
+    "references": [
+        "Zenject",
+        "UnityEngine.TestRunner",
+        "UnityEditor.TestRunner"
+    ],
+    "includePlatforms": [],
+    "excludePlatforms": [],
+    "allowUnsafeCode": false,
+    "overrideReferences": true,
+    "precompiledReferences": [
+        "nunit.framework.dll"
+    ],
+    "autoReferenced": false,
+    "defineConstraints": [],
+    "versionDefines": [],
+    "noEngineReferences": false
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef.meta b/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef.meta
new file mode 100644
index 0000000..9dc3291
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/Zenject-TestFramework.asmdef.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: a2f2239355369ba4fb6909aeaa41def5
+timeCreated: 1531969421
+licenseType: Free
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs b/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs
new file mode 100644
index 0000000..652c23a
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs
@@ -0,0 +1,152 @@
+using System;
+using System.Collections;
+using System.Linq;
+using NUnit.Framework;
+using NUnit.Framework.Interfaces;
+using UnityEngine;
+using Zenject.Internal;
+using Assert = ModestTree.Assert;
+using Object = UnityEngine.Object;
+
+namespace Zenject
+{
+    public abstract class ZenjectIntegrationTestFixture
+    {
+        private bool _hasEndedInstall;
+        private bool _hasStartedInstall;
+        private SceneContext _sceneContext;
+
+        protected DiContainer Container
+        {
+            get
+            {
+                Assert.That(_hasStartedInstall,
+                    "Must call PreInstall() before accessing ZenjectIntegrationTestFixture.Container!");
+                return _sceneContext.Container;
+            }
+        }
+
+        protected SceneContext SceneContext
+        {
+            get
+            {
+                Assert.That(_hasStartedInstall,
+                    "Must call PreInstall() before accessing ZenjectIntegrationTestFixture.SceneContext!");
+                return _sceneContext;
+            }
+        }
+
+        [SetUp]
+        public void Setup()
+        {
+            Assert.That(Application.isPlaying,
+                "ZenjectIntegrationTestFixture is meant to be used for play mode tests only.  Please ensure your test file '{0}' is outside of the editor folder and try again.",
+                GetType());
+
+            ZenjectTestUtil.DestroyEverythingExceptTestRunner(true);
+            StaticContext.Clear();
+        }
+
+        protected void SkipInstall()
+        {
+            PreInstall();
+            PostInstall();
+        }
+
+        protected void PreInstall()
+        {
+            Assert.That(!_hasStartedInstall, "Called PreInstall twice in test '{0}'!",
+                TestContext.CurrentContext.Test.Name);
+            _hasStartedInstall = true;
+
+            Assert.That(!ProjectContext.HasInstance);
+
+            var shouldValidate = CurrentTestHasAttribute<ValidateOnlyAttribute>();
+            ProjectContext.ValidateOnNextRun = shouldValidate;
+
+            Assert.That(_sceneContext == null);
+
+            _sceneContext = SceneContext.Create();
+            _sceneContext.Install();
+
+            Assert.That(ProjectContext.HasInstance);
+
+            Assert.IsEqual(shouldValidate, ProjectContext.Instance.Container.IsValidating);
+            Assert.IsEqual(shouldValidate, _sceneContext.Container.IsValidating);
+        }
+
+        private bool CurrentTestHasAttribute<T>()
+            where T : Attribute
+        {
+            return GetType().GetMethod(TestContext.CurrentContext.Test.MethodName)
+                .GetCustomAttributes(true)
+                .Cast<Attribute>().OfType<T>().Any();
+        }
+
+        protected void PostInstall()
+        {
+            Assert.That(_hasStartedInstall,
+                "Called PostInstall but did not call PreInstall in test '{0}'!", TestContext.CurrentContext.Test.Name);
+
+            Assert.That(!_hasEndedInstall, "Called PostInstall twice in test '{0}'!",
+                TestContext.CurrentContext.Test.Name);
+
+            _hasEndedInstall = true;
+            _sceneContext.Resolve();
+
+            Container.Inject(this);
+
+            if (!Container.IsValidating)
+                // We don't have to do this here but it's kind of convenient
+                // We could also remove it and just require that users add a yield after calling
+                // and it would have the same effect
+                Container.Resolve<MonoKernel>().Initialize();
+        }
+
+        protected IEnumerator DestroyEverything()
+        {
+            Assert.That(_hasStartedInstall,
+                "Called DestroyAll but did not call PreInstall (or SkipInstall) in test '{0}'!",
+                TestContext.CurrentContext.Test.Name);
+            DestroyEverythingInternal(false);
+            // Wait one frame for GC to really destroy everything
+            yield return null;
+        }
+
+        private void DestroyEverythingInternal(bool immediate)
+        {
+            if (_sceneContext != null)
+            {
+                // We need to use DestroyImmediate so that all the IDisposable's etc get processed immediately before
+                // next test runs
+                if (immediate)
+                    Object.DestroyImmediate(_sceneContext.gameObject);
+                else
+                    Object.Destroy(_sceneContext.gameObject);
+
+                _sceneContext = null;
+            }
+
+            ZenjectTestUtil.DestroyEverythingExceptTestRunner(immediate);
+            StaticContext.Clear();
+        }
+
+        [TearDown]
+        public void TearDown()
+        {
+            if (TestContext.CurrentContext.Result.Outcome == ResultState.Success)
+            {
+                Assert.That(_hasStartedInstall,
+                    "PreInstall (or SkipInstall) was not called in test '{0}'!", TestContext.CurrentContext.Test.Name);
+
+                Assert.That(_hasEndedInstall,
+                    "PostInstall was not called in test '{0}'!", TestContext.CurrentContext.Test.Name);
+            }
+
+            DestroyEverythingInternal(true);
+
+            _hasStartedInstall = false;
+            _hasEndedInstall = false;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs.meta b/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs.meta
new file mode 100644
index 0000000..02049b1
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectIntegrationTestFixture.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e0464fe2b382d1d4babf13bf0c3fa044
+timeCreated: 1506429461
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs b/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs
new file mode 100644
index 0000000..fb82161
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs
@@ -0,0 +1,39 @@
+using ModestTree;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace Zenject.Internal
+{
+    public static class ZenjectTestUtil
+    {
+        public const string UnitTestRunnerGameObjectName = "Code-based tests runner";
+
+        public static void DestroyEverythingExceptTestRunner(bool immediate)
+        {
+            var testRunner = GameObject.Find(UnitTestRunnerGameObjectName);
+            Assert.IsNotNull(testRunner);
+            Object.DontDestroyOnLoad(testRunner);
+
+            // We want to clear all objects across all scenes to ensure the next test is not affected
+            // at all by previous tests
+            for (var i = 0; i < SceneManager.sceneCount; i++)
+                foreach (var obj in SceneManager.GetSceneAt(i).GetRootGameObjects())
+                    Object.DestroyImmediate(obj);
+
+            if (ProjectContext.HasInstance)
+            {
+                var dontDestroyOnLoadRoots = ProjectContext.Instance.gameObject.scene
+                    .GetRootGameObjects();
+
+                foreach (var rootObj in dontDestroyOnLoadRoots)
+                    if (rootObj.name != UnitTestRunnerGameObjectName)
+                    {
+                        if (immediate)
+                            Object.DestroyImmediate(rootObj);
+                        else
+                            Object.Destroy(rootObj);
+                    }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs.meta b/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs.meta
new file mode 100644
index 0000000..da09451
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectTestUtil.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 4101e443fc2ede94c99d4d759087cc44
+timeCreated: 1527644566
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs b/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs
new file mode 100644
index 0000000..8013fea
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs
@@ -0,0 +1,26 @@
+﻿using NUnit.Framework;
+
+namespace Zenject
+{
+    // Inherit from this and mark you class with [TestFixture] attribute to do some unit tests
+    // For anything more complicated than this, such as tests involving interaction between
+    // several classes, or if you want to use interfaces such as IInitializable or IDisposable,
+    // then I recommend using ZenjectIntegrationTestFixture instead
+    // See documentation for details
+    public abstract class ZenjectUnitTestFixture
+    {
+        protected DiContainer Container { get; private set; }
+
+        [SetUp]
+        public virtual void Setup()
+        {
+            Container = new DiContainer(StaticContext.Container);
+        }
+
+        [TearDown]
+        public virtual void Teardown()
+        {
+            StaticContext.Clear();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs.meta b/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs.meta
new file mode 100644
index 0000000..39b496e
--- /dev/null
+++ b/Assets/Source/Editor/TestFramework/ZenjectUnitTestFixture.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 51305c7ccfc8a9f4390aeefc54674cde
+timeCreated: 1536808207
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/UnityInspectorListEditor.cs b/Assets/Source/Editor/UnityInspectorListEditor.cs
new file mode 100644
index 0000000..f2da9e8
--- /dev/null
+++ b/Assets/Source/Editor/UnityInspectorListEditor.cs
@@ -0,0 +1,103 @@
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEditor;
+using UnityEditorInternal;
+using UnityEngine;
+
+namespace Zenject
+{
+    public abstract class UnityInspectorListEditor : Editor
+    {
+        List<ReorderableList> _installersLists;
+        List<SerializedProperty> _installersProperties;
+
+        protected abstract string[] PropertyDisplayNames
+        {
+            get;
+        }
+
+        protected abstract string[] PropertyNames
+        {
+            get;
+        }
+
+        protected abstract string[] PropertyDescriptions
+        {
+            get;
+        }
+
+        public virtual void OnEnable()
+        {
+            _installersProperties = new List<SerializedProperty>();
+            _installersLists = new List<ReorderableList>();
+
+            var descriptions = PropertyDescriptions;
+            var names = PropertyNames;
+            var displayNames = PropertyDisplayNames;
+
+            Assert.IsEqual(descriptions.Length, names.Length);
+
+            var infos = Enumerable.Range(0, names.Length).Select(i => new { Name = names[i], DisplayName = displayNames[i], Description = descriptions[i] }).ToList();
+
+            foreach (var info in infos)
+            {
+                var installersProperty = serializedObject.FindProperty(info.Name);
+                _installersProperties.Add(installersProperty);
+
+                ReorderableList installersList = new ReorderableList(serializedObject, installersProperty, true, true, true, true);
+                _installersLists.Add(installersList);
+
+                var closedName = info.DisplayName;
+                var closedDesc = info.Description;
+
+                installersList.drawHeaderCallback += rect =>
+                {
+                    GUI.Label(rect,
+                    new GUIContent(closedName, closedDesc));
+                };
+                installersList.drawElementCallback += (rect, index, active, focused) =>
+                {
+                    var installerProperty = installersProperty.GetArrayElementAtIndex(index);
+                    var leafInstaller = installerProperty.objectReferenceValue as IInstaller;
+
+                    bool isValid = leafInstaller.ValidateAsComposite();
+
+                    if (!isValid) { GUI.color = Color.red; }
+
+                    rect.width -= 40;
+                    rect.x += 20;
+                    EditorGUI.PropertyField(rect, installersProperty.GetArrayElementAtIndex(index), GUIContent.none, true);
+                    if (!isValid) { EditorGUI.LabelField(rect, new GUIContent("", CompositeInstallerEditorDescriptions.ErrorTooltip)); }
+
+                    GUI.color = Color.white;
+                };
+            }
+        }
+
+        public sealed override void OnInspectorGUI()
+        {
+            serializedObject.Update();
+
+            OnGui();
+
+            serializedObject.ApplyModifiedProperties();
+        }
+
+        protected virtual void OnGui()
+        {
+            if (Application.isPlaying)
+            {
+                GUI.enabled = false;
+            }
+
+            foreach (var list in _installersLists)
+            {
+                list.DoLayoutList();
+            }
+
+            GUI.enabled = true;
+        }
+    }
+}
+
diff --git a/Assets/Source/Editor/UnityInspectorListEditor.cs.meta b/Assets/Source/Editor/UnityInspectorListEditor.cs.meta
new file mode 100644
index 0000000..42acfd9
--- /dev/null
+++ b/Assets/Source/Editor/UnityInspectorListEditor.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 06d16f2f9107265428d41710db4cbb14
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ZenMenuItems.cs b/Assets/Source/Editor/ZenMenuItems.cs
new file mode 100644
index 0000000..913e851
--- /dev/null
+++ b/Assets/Source/Editor/ZenMenuItems.cs
@@ -0,0 +1,350 @@
+#if !NOT_UNITY3D
+
+using System.IO;
+using ModestTree;
+using UnityEditor;
+using UnityEditor.SceneManagement;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace Zenject.Internal
+{
+    public static class ZenMenuItems
+    {
+        [MenuItem("Edit/Zenject/Validate Current Scenes #&v")]
+        public static void ValidateCurrentScene()
+        {
+            ValidateCurrentSceneInternal();
+        }
+
+        [MenuItem("Edit/Zenject/Validate Then Run #&r")]
+        public static void ValidateCurrentSceneThenRun()
+        {
+            if (ValidateCurrentSceneInternal()) EditorApplication.isPlaying = true;
+        }
+
+        [MenuItem("Edit/Zenject/Help...")]
+        public static void OpenDocumentation()
+        {
+            Application.OpenURL("https://github.com/svermeulen/zenject");
+        }
+
+        [MenuItem("GameObject/Zenject/Scene Context", false, 9)]
+        public static void CreateSceneContext(MenuCommand menuCommand)
+        {
+            var root = new GameObject("SceneContext").AddComponent<SceneContext>();
+            Selection.activeGameObject = root.gameObject;
+
+            EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
+        }
+
+        [MenuItem("GameObject/Zenject/Decorator Context", false, 9)]
+        public static void CreateDecoratorContext(MenuCommand menuCommand)
+        {
+            var root = new GameObject("DecoratorContext").AddComponent<SceneDecoratorContext>();
+            Selection.activeGameObject = root.gameObject;
+
+            EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
+        }
+
+        [MenuItem("GameObject/Zenject/Game Object Context", false, 9)]
+        public static void CreateGameObjectContext(MenuCommand menuCommand)
+        {
+            var root = new GameObject("GameObjectContext").AddComponent<GameObjectContext>();
+            Selection.activeGameObject = root.gameObject;
+
+            EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
+        }
+
+        [MenuItem("Edit/Zenject/Create Project Context")]
+        public static void CreateProjectContextInDefaultLocation()
+        {
+            var fullDirPath = Path.Combine(Application.dataPath, "Resources");
+
+            if (!Directory.Exists(fullDirPath)) Directory.CreateDirectory(fullDirPath);
+
+            CreateProjectContextInternal("Assets/Resources");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Default Scene Contract Config", false, 80)]
+        public static void CreateDefaultSceneContractConfig()
+        {
+            var folderPath = ZenUnityEditorUtil.GetCurrentDirectoryAssetPathFromSelection();
+
+            if (!folderPath.EndsWith("/Resources"))
+            {
+                EditorUtility.DisplayDialog("Error",
+                    "ZenjectDefaultSceneContractConfig objects must be placed directly underneath a folder named 'Resources'.  Please try again.",
+                    "Ok");
+                return;
+            }
+
+            var config = ScriptableObject.CreateInstance<DefaultSceneContractConfig>();
+
+            ZenUnityEditorUtil.SaveScriptableObjectAsset(
+                Path.Combine(folderPath, DefaultSceneContractConfig.ResourcePath + ".asset"), config);
+        }
+
+        [MenuItem("Assets/Create/Zenject/Installer", false, 1)]
+        public static void CreateInstaller()
+        {
+            AddCSharpClassTemplate("Installer", "UntitledInstaller",
+                "using UnityEngine;"
+                + "\nusing Zenject;"
+                + "\n"
+                + "\npublic class CLASS_NAME : Installer<CLASS_NAME>"
+                + "\n{"
+                + "\n    public override void InstallBindings()"
+                + "\n    {"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Mono Installer", false, 2)]
+        public static void CreateMonoInstaller()
+        {
+            AddCSharpClassTemplate("Mono Installer", "UntitledInstaller",
+                "using UnityEngine;"
+                + "\nusing Zenject;"
+                + "\n"
+                + "\npublic class CLASS_NAME : MonoInstaller"
+                + "\n{"
+                + "\n    public override void InstallBindings()"
+                + "\n    {"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Scriptable Object Installer", false, 3)]
+        public static void CreateScriptableObjectInstaller()
+        {
+            AddCSharpClassTemplate("Scriptable Object Installer", "UntitledInstaller",
+                "using UnityEngine;"
+                + "\nusing Zenject;"
+                + "\n"
+                + "\n[CreateAssetMenu(fileName = \"CLASS_NAME\", menuName = \"Installers/CLASS_NAME\")]"
+                + "\npublic class CLASS_NAME : ScriptableObjectInstaller<CLASS_NAME>"
+                + "\n{"
+                + "\n    public override void InstallBindings()"
+                + "\n    {"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Composite Scriptable Object Installer", false, 4)]
+        public static void CreateCompositeScriptableObjectInstaller()
+        {
+            ProjectWindowUtil.CreateAsset(
+                ScriptableObject.CreateInstance<CompositeScriptableObjectInstaller>(),
+                "CompositeScriptableObjectInstaller.asset");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Editor Window", false, 20)]
+        public static void CreateEditorWindow()
+        {
+            AddCSharpClassTemplate("Editor Window", "UntitledEditorWindow",
+                "using UnityEngine;"
+                + "\nusing UnityEditor;"
+                + "\nusing Zenject;"
+                + "\n"
+                + "\npublic class CLASS_NAME : ZenjectEditorWindow"
+                + "\n{"
+                + "\n    [MenuItem(\"Window/CLASS_NAME\")]"
+                + "\n    public static CLASS_NAME GetOrCreateWindow()"
+                + "\n    {"
+                + "\n        var window = EditorWindow.GetWindow<CLASS_NAME>();"
+                + "\n        window.titleContent = new GUIContent(\"CLASS_NAME\");"
+                + "\n        return window;"
+                + "\n    }"
+                + "\n"
+                + "\n    public override void InstallBindings()"
+                + "\n    {"
+                + "\n        // TODO"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Project Context", false, 40)]
+        public static void CreateProjectContext()
+        {
+            var absoluteDir = ZenUnityEditorUtil.TryGetSelectedFolderPathInProjectsTab();
+
+            if (absoluteDir == null)
+            {
+                EditorUtility.DisplayDialog("Error",
+                    "Could not find directory to place the '{0}.prefab' asset.  Please try again by right clicking in the desired folder within the projects pane."
+                        .Fmt(ProjectContext.ProjectContextResourcePath), "Ok");
+                return;
+            }
+
+            var parentFolderName = Path.GetFileName(absoluteDir);
+
+            if (parentFolderName != "Resources")
+            {
+                EditorUtility.DisplayDialog("Error",
+                    "'{0}.prefab' must be placed inside a directory named 'Resources'.  Please try again by right clicking within the Project pane in a valid Resources folder."
+                        .Fmt(ProjectContext.ProjectContextResourcePath), "Ok");
+                return;
+            }
+
+            CreateProjectContextInternal(absoluteDir);
+        }
+
+        private static void CreateProjectContextInternal(string absoluteDir)
+        {
+            var assetPath = ZenUnityEditorUtil.ConvertFullAbsolutePathToAssetPath(absoluteDir);
+            var prefabPath =
+                (Path.Combine(assetPath, ProjectContext.ProjectContextResourcePath) + ".prefab").Replace("\\", "/");
+
+            var gameObject = new GameObject();
+
+            try
+            {
+                gameObject.AddComponent<ProjectContext>();
+
+#if UNITY_2018_3_OR_NEWER
+                var prefabObj = PrefabUtility.SaveAsPrefabAsset(gameObject, prefabPath);
+#else
+                var prefabObj = PrefabUtility.ReplacePrefab(gameObject, PrefabUtility.CreateEmptyPrefab(prefabPath));
+#endif
+
+                Selection.activeObject = prefabObj;
+            }
+            finally
+            {
+                Object.DestroyImmediate(gameObject);
+            }
+
+            Debug.Log("Created new ProjectContext at '{0}'".Fmt(prefabPath));
+        }
+
+        public static string AddCSharpClassTemplate(
+            string friendlyName, string defaultFileName, string templateStr)
+        {
+            return AddCSharpClassTemplate(
+                friendlyName, defaultFileName, templateStr,
+                ZenUnityEditorUtil.GetCurrentDirectoryAssetPathFromSelection());
+        }
+
+        public static string AddCSharpClassTemplate(
+            string friendlyName, string defaultFileName,
+            string templateStr, string folderPath)
+        {
+            var absolutePath = EditorUtility.SaveFilePanel(
+                "Choose name for " + friendlyName,
+                folderPath,
+                defaultFileName + ".cs",
+                "cs");
+
+            if (absolutePath == "")
+                // Dialog was cancelled
+                return null;
+
+            if (!absolutePath.ToLower().EndsWith(".cs")) absolutePath += ".cs";
+
+            var className = Path.GetFileNameWithoutExtension(absolutePath);
+            File.WriteAllText(absolutePath, templateStr.Replace("CLASS_NAME", className));
+
+            AssetDatabase.Refresh();
+
+            var assetPath = ZenUnityEditorUtil.ConvertFullAbsolutePathToAssetPath(absolutePath);
+
+            EditorUtility.FocusProjectWindow();
+            Selection.activeObject = AssetDatabase.LoadAssetAtPath<Object>(assetPath);
+
+            return assetPath;
+        }
+
+        [MenuItem("Edit/Zenject/Validate All Active Scenes")]
+        public static void ValidateAllActiveScenes()
+        {
+            ZenUnityEditorUtil.SaveThenRunPreserveSceneSetup(() =>
+            {
+                var numValidated = ZenUnityEditorUtil.ValidateAllActiveScenes();
+                Log.Info("Validated all '{0}' active scenes successfully", numValidated);
+            });
+        }
+
+        private static bool ValidateCurrentSceneInternal()
+        {
+            return ZenUnityEditorUtil.SaveThenRunPreserveSceneSetup(() =>
+            {
+                SceneParentAutomaticLoader.ValidateMultiSceneSetupAndLoadDefaultSceneParents();
+                ZenUnityEditorUtil.ValidateCurrentSceneSetup();
+                Log.Info("All scenes validated successfully");
+            });
+        }
+
+        [MenuItem("Assets/Create/Zenject/Unit Test", false, 60)]
+        public static void CreateUnitTest()
+        {
+            AddCSharpClassTemplate("Unit Test", "UntitledUnitTest",
+                "using Zenject;"
+                + "\nusing NUnit.Framework;"
+                + "\n"
+                + "\n[TestFixture]"
+                + "\npublic class CLASS_NAME : ZenjectUnitTestFixture"
+                + "\n{"
+                + "\n    [Test]"
+                + "\n    public void RunTest1()"
+                + "\n    {"
+                + "\n        // TODO"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Integration Test", false, 60)]
+        public static void CreateIntegrationTest()
+        {
+            AddCSharpClassTemplate("Integration Test", "UntitledIntegrationTest",
+                "using Zenject;"
+                + "\nusing System.Collections;"
+                + "\nusing UnityEngine.TestTools;"
+                + "\n"
+                + "\npublic class CLASS_NAME : ZenjectIntegrationTestFixture"
+                + "\n{"
+                + "\n    [UnityTest]"
+                + "\n    public IEnumerator RunTest1()"
+                + "\n    {"
+                + "\n        // Setup initial state by creating game objects from scratch, loading prefabs/scenes, etc"
+                + "\n"
+                + "\n        PreInstall();"
+                + "\n"
+                + "\n        // Call Container.Bind methods"
+                + "\n"
+                + "\n        PostInstall();"
+                + "\n"
+                + "\n        // Add test assertions for expected state"
+                + "\n        // Using Container.Resolve or [Inject] fields"
+                + "\n        yield break;"
+                + "\n    }"
+                + "\n}");
+        }
+
+        [MenuItem("Assets/Create/Zenject/Scene Test", false, 60)]
+        public static void CreateSceneTest()
+        {
+            AddCSharpClassTemplate("Scene Test Fixture", "UntitledSceneTest",
+                "using Zenject;"
+                + "\nusing System.Collections;"
+                + "\nusing UnityEngine;"
+                + "\nusing UnityEngine.TestTools;"
+                + "\n"
+                + "\npublic class CLASS_NAME : SceneTestFixture"
+                + "\n{"
+                + "\n    [UnityTest]"
+                + "\n    public IEnumerator TestScene()"
+                + "\n    {"
+                + "\n        yield return LoadScene(\"InsertSceneNameHere\");"
+                + "\n"
+                + "\n        // TODO: Add assertions here now that the scene has started"
+                + "\n        // Or you can just uncomment to simply wait some time to make sure the scene plays without errors"
+                + "\n        //yield return new WaitForSeconds(1.0f);"
+                + "\n"
+                + "\n        // Note that you can use SceneContainer.Resolve to look up objects that you need for assertions"
+                + "\n    }"
+                + "\n}");
+        }
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Editor/ZenMenuItems.cs.meta b/Assets/Source/Editor/ZenMenuItems.cs.meta
new file mode 100644
index 0000000..a9dfb2f
--- /dev/null
+++ b/Assets/Source/Editor/ZenMenuItems.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d45338750ad0b4f4b90ed09091927b46
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/ZenUnityEditorUtil.cs b/Assets/Source/Editor/ZenUnityEditorUtil.cs
new file mode 100644
index 0000000..a66f1a2
--- /dev/null
+++ b/Assets/Source/Editor/ZenUnityEditorUtil.cs
@@ -0,0 +1,352 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using ModestTree;
+using UnityEditor;
+using UnityEditor.SceneManagement;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace Zenject.Internal
+{
+    public static class ZenUnityEditorUtil
+    {
+        // Returns true if succeeds without errors
+        public static bool SaveThenRunPreserveSceneSetup(Action action)
+        {
+            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())
+            {
+                var originalSceneSetup = EditorSceneManager.GetSceneManagerSetup();
+
+                try
+                {
+                    action();
+                    return true;
+                }
+                catch (Exception e)
+                {
+                    Log.ErrorException(e);
+                    return false;
+                }
+                finally
+                {
+                    EditorSceneManager.RestoreSceneManagerSetup(originalSceneSetup);
+                }
+            }
+
+            return false;
+        }
+
+        // Feel free to call this method from an editor script, or a unit test, etc.
+        // An exception will be thrown if any validation errors are encountered
+        public static void ValidateCurrentSceneSetup()
+        {
+            bool encounteredError = false;
+
+            Application.LogCallback logCallback = (condition, stackTrace, type) =>
+            {
+                if (type == LogType.Error || type == LogType.Assert
+                    || type == LogType.Exception)
+                {
+                    encounteredError = true;
+                }
+            };
+
+            Application.logMessageReceived += logCallback;
+
+            try
+            {
+                Assert.That(!ProjectContext.HasInstance);
+                ProjectContext.ValidateOnNextRun = true;
+
+                foreach (var sceneContext in GetAllSceneContexts())
+                {
+                    sceneContext.Validate();
+                }
+            }
+            catch (Exception e)
+            {
+                Log.ErrorException(e);
+                encounteredError = true;
+            }
+            finally
+            {
+                Application.logMessageReceived -= logCallback;
+            }
+
+            if (encounteredError)
+            {
+                throw new ZenjectException("Zenject Validation Failed!  See errors below for details.");
+            }
+        }
+
+        // NOTE: An exception will be thrown if any validation errors are encountered
+        // Returns the number of scenes that successfully validated
+        public static int ValidateAllActiveScenes()
+        {
+            var activeScenePaths = EditorBuildSettings.scenes.Where(x => x.enabled)
+                .Select(x => x.path).ToList();
+
+            foreach (var scenePath in activeScenePaths)
+            {
+                EditorSceneManager.OpenScene(scenePath, OpenSceneMode.Single);
+                ValidateCurrentSceneSetup();
+            }
+
+            return activeScenePaths.Count;
+        }
+
+        // Don't use this
+        public static void RunCurrentSceneSetup()
+        {
+            Assert.That(!ProjectContext.HasInstance);
+
+            foreach (var sceneContext in GetAllSceneContexts())
+            {
+                try
+                {
+                    sceneContext.Run();
+                }
+                catch (Exception e)
+                {
+                    // Add a bit more context
+                    throw new ZenjectException(
+                        "Scene '{0}' Failed To Start!".Fmt(sceneContext.gameObject.scene.name), e);
+                }
+            }
+        }
+
+        public static SceneContext GetSceneContextForScene(Scene scene)
+        {
+            var sceneContext = TryGetSceneContextForScene(scene);
+
+            Assert.IsNotNull(sceneContext,
+                "Could not find scene context for scene '{0}'", scene.name);
+
+            return sceneContext;
+        }
+
+        public static SceneContext TryGetSceneContextForScene(Scene scene)
+        {
+            if (!scene.isLoaded)
+            {
+                return null;
+            }
+
+            var sceneContexts = scene.GetRootGameObjects()
+                .SelectMany(x => x.GetComponentsInChildren<SceneContext>()).ToList();
+
+            if (sceneContexts.IsEmpty())
+            {
+                return null;
+            }
+
+            Assert.That(sceneContexts.Count == 1,
+                "Found multiple SceneContexts in scene '{0}'.  Expected a maximum of one.", scene.name);
+
+            return sceneContexts[0];
+        }
+
+        public static SceneDecoratorContext GetDecoratorContextForScene(Scene scene)
+        {
+            var decoratorContext = TryGetDecoratorContextForScene(scene);
+
+            Assert.IsNotNull(decoratorContext,
+                "Could not find decorator context for scene '{0}'", scene.name);
+
+            return decoratorContext;
+        }
+
+        public static SceneDecoratorContext TryGetDecoratorContextForScene(Scene scene)
+        {
+            if (!scene.isLoaded)
+            {
+                return null;
+            }
+
+            var decoratorContexts = scene.GetRootGameObjects()
+                .SelectMany(x => x.GetComponentsInChildren<SceneDecoratorContext>()).ToList();
+
+            if (decoratorContexts.IsEmpty())
+            {
+                return null;
+            }
+
+            Assert.That(decoratorContexts.Count == 1,
+                "Found multiple DecoratorContexts in scene '{0}'.  Expected a maximum of one.", scene.name);
+
+            return decoratorContexts[0];
+        }
+
+        static IEnumerable<SceneContext> GetAllSceneContexts()
+        {
+            var decoratedSceneNames = new List<string>();
+
+            for (int i = 0; i < EditorSceneManager.sceneCount; i++)
+            {
+                var scene = EditorSceneManager.GetSceneAt(i);
+
+                var sceneContext = TryGetSceneContextForScene(scene);
+                var decoratorContext = TryGetDecoratorContextForScene(scene);
+
+                if (sceneContext != null)
+                {
+                    Assert.That(decoratorContext == null,
+                        "Found both SceneDecoratorContext and SceneContext in the same scene '{0}'.  This is not allowed", scene.name);
+
+                    decoratedSceneNames.RemoveAll(x => sceneContext.ContractNames.Contains(x));
+
+                    yield return sceneContext;
+                }
+                else if (decoratorContext != null)
+                {
+                    Assert.That(!string.IsNullOrEmpty(decoratorContext.DecoratedContractName),
+                        "Missing Decorated Contract Name on SceneDecoratorContext in scene '{0}'", scene.name);
+
+                    decoratedSceneNames.Add(decoratorContext.DecoratedContractName);
+                }
+            }
+
+            Assert.That(decoratedSceneNames.IsEmpty(),
+                "Found decorator scenes without a corresponding scene to decorator.  Missing scene contracts: {0}", decoratedSceneNames.Join(", "));
+        }
+
+        public static string ConvertAssetPathToAbsolutePath(string assetPath)
+        {
+            return Path.Combine(
+                Path.Combine(Path.GetFullPath(Application.dataPath), ".."), assetPath);
+        }
+
+        public static string ConvertFullAbsolutePathToAssetPath(string fullPath)
+        {
+            fullPath = Path.GetFullPath(fullPath);
+
+            var assetFolderFullPath = Path.GetFullPath(Application.dataPath);
+
+            if (fullPath.Length == assetFolderFullPath.Length)
+            {
+                Assert.IsEqual(fullPath, assetFolderFullPath);
+                return "Assets";
+            }
+
+            var assetPath = fullPath.Remove(0, assetFolderFullPath.Length + 1).Replace("\\", "/");
+            return "Assets/" + assetPath;
+        }
+
+        public static string GetCurrentDirectoryAssetPathFromSelection()
+        {
+            return ConvertFullAbsolutePathToAssetPath(
+                GetCurrentDirectoryAbsolutePathFromSelection());
+        }
+
+        public static string GetCurrentDirectoryAbsolutePathFromSelection()
+        {
+            var folderPath = TryGetSelectedFolderPathInProjectsTab();
+
+            if (folderPath != null)
+            {
+                return folderPath;
+            }
+
+            var filePath = TryGetSelectedFilePathInProjectsTab();
+
+            if (filePath != null)
+            {
+                return Path.GetDirectoryName(filePath);
+            }
+
+            return Application.dataPath;
+        }
+
+        public static string TryGetSelectedFilePathInProjectsTab()
+        {
+            return GetSelectedFilePathsInProjectsTab().OnlyOrDefault();
+        }
+
+        public static List<string> GetSelectedFilePathsInProjectsTab()
+        {
+            return GetSelectedPathsInProjectsTab()
+                .Where(x => File.Exists(x)).ToList();
+        }
+
+        public static List<string> GetSelectedAssetPathsInProjectsTab()
+        {
+            var paths = new List<string>();
+
+            UnityEngine.Object[] selectedAssets = Selection.GetFiltered(
+                typeof(UnityEngine.Object), SelectionMode.Assets);
+
+            foreach (var item in selectedAssets)
+            {
+                var assetPath = AssetDatabase.GetAssetPath(item);
+
+                if (!string.IsNullOrEmpty(assetPath))
+                {
+                    paths.Add(assetPath);
+                }
+            }
+
+            return paths;
+        }
+
+        public static List<string> GetSelectedPathsInProjectsTab()
+        {
+            var paths = new List<string>();
+
+            UnityEngine.Object[] selectedAssets = Selection.GetFiltered(
+                typeof(UnityEngine.Object), SelectionMode.Assets);
+
+            foreach (var item in selectedAssets)
+            {
+                var relativePath = AssetDatabase.GetAssetPath(item);
+
+                if (!string.IsNullOrEmpty(relativePath))
+                {
+                    var fullPath = Path.GetFullPath(Path.Combine(
+                        Application.dataPath, Path.Combine("..", relativePath)));
+
+                    paths.Add(fullPath);
+                }
+            }
+
+            return paths;
+        }
+
+        // Taken from http://wiki.unity3d.com/index.php?title=CreateScriptableObjectAsset
+        public static void SaveScriptableObjectAsset(
+            string path, ScriptableObject asset)
+        {
+            Assert.That(path.EndsWith(".asset"));
+
+            string assetPathAndName = AssetDatabase.GenerateUniqueAssetPath(path);
+
+            AssetDatabase.CreateAsset(asset, assetPathAndName);
+
+            AssetDatabase.SaveAssets();
+            AssetDatabase.Refresh();
+            EditorUtility.FocusProjectWindow();
+            Selection.activeObject = asset;
+        }
+
+        // Note that the path is relative to the Assets folder
+        public static List<string> GetSelectedFolderPathsInProjectsTab()
+        {
+            return GetSelectedPathsInProjectsTab()
+                .Where(x => Directory.Exists(x)).ToList();
+        }
+
+        // Returns the best guess directory in projects pane
+        // Useful when adding to Assets -> Create context menu
+        // Returns null if it can't find one
+        // Note that the path is relative to the Assets folder for use in AssetDatabase.GenerateUniqueAssetPath etc.
+        public static string TryGetSelectedFolderPathInProjectsTab()
+        {
+            return GetSelectedFolderPathsInProjectsTab().OnlyOrDefault();
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Editor/ZenUnityEditorUtil.cs.meta b/Assets/Source/Editor/ZenUnityEditorUtil.cs.meta
new file mode 100644
index 0000000..48848d9
--- /dev/null
+++ b/Assets/Source/Editor/ZenUnityEditorUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f798e3a2f0079b840804c0516d265f03
+timeCreated: 1461710838
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Editor/Zenject-Editor.asmdef b/Assets/Source/Editor/Zenject-Editor.asmdef
new file mode 100644
index 0000000..929b03c
--- /dev/null
+++ b/Assets/Source/Editor/Zenject-Editor.asmdef
@@ -0,0 +1,10 @@
+{
+    "name": "Zenject-Editor",
+    "references": [
+        "Zenject"
+    ],
+    "includePlatforms": [
+        "Editor"
+    ],
+    "excludePlatforms": []
+}
\ No newline at end of file
diff --git a/Assets/Source/Editor/Zenject-Editor.asmdef.meta b/Assets/Source/Editor/Zenject-Editor.asmdef.meta
new file mode 100644
index 0000000..b3baf73
--- /dev/null
+++ b/Assets/Source/Editor/Zenject-Editor.asmdef.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: d0acddb179989574c8355991596bd3e6
+timeCreated: 1531030222
+licenseType: Free
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData:
+  assetBundleName:
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime.meta b/Assets/Source/Runtime.meta
new file mode 100644
index 0000000..62281b8
--- /dev/null
+++ b/Assets/Source/Runtime.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: fb9242e26ea385743abb8476b18d1e9f
+folderAsset: yes
+timeCreated: 1459463884
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces.meta b/Assets/Source/Runtime/AnimatorInterfaces.meta
new file mode 100644
index 0000000..2f1da5c
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 3c5ae8c1093da554d8bf77c912cc5433
+folderAsset: yes
+timeCreated: 1487820668
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs
new file mode 100644
index 0000000..2c42706
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs
@@ -0,0 +1,28 @@
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class AnimatorIkHandlerManager : MonoBehaviour
+    {
+        List<IAnimatorIkHandler> _handlers;
+
+        [Inject]
+        public void Construct(
+            // Use local to avoid inheriting handlers from a parent context
+            [Inject(Source = InjectSources.Local)]
+            List<IAnimatorIkHandler> handlers)
+        {
+            _handlers = handlers;
+        }
+
+        public void OnAnimatorIk()
+        {
+            foreach (var handler in _handlers)
+            {
+                handler.OnAnimatorIk();
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs.meta b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs.meta
new file mode 100644
index 0000000..dc7eb3b
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorIkHandlerManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 34ee2459debfb734d968c54ced01b9af
+timeCreated: 1487820668
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs
new file mode 100644
index 0000000..243a7bc
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs
@@ -0,0 +1,21 @@
+using UnityEngine;
+
+namespace Zenject
+{
+    public class AnimatorInstaller : Installer<Animator, AnimatorInstaller>
+    {
+        readonly Animator _animator;
+
+        public AnimatorInstaller(Animator animator)
+        {
+            _animator = animator;
+        }
+
+        public override void InstallBindings()
+        {
+            Container.Bind<AnimatorIkHandlerManager>().FromNewComponentOn(_animator.gameObject);
+            Container.Bind<AnimatorIkHandlerManager>().FromNewComponentOn(_animator.gameObject);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs.meta b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs.meta
new file mode 100644
index 0000000..6c0766c
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f4cbf7c6883911843ae4a64582422dda
+timeCreated: 1487820669
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs
new file mode 100644
index 0000000..4293e33
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs
@@ -0,0 +1,28 @@
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class AnimatorMoveHandlerManager : MonoBehaviour
+    {
+        List<IAnimatorMoveHandler> _handlers;
+
+        [Inject]
+        public void Construct(
+            // Use local to avoid inheriting handlers from a parent context
+            [Inject(Source = InjectSources.Local)]
+            List<IAnimatorMoveHandler> handlers)
+        {
+            _handlers = handlers;
+        }
+
+        public void OnAnimatorMove()
+        {
+            foreach (var handler in _handlers)
+            {
+                handler.OnAnimatorMove();
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs.meta b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs.meta
new file mode 100644
index 0000000..2e11343
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/AnimatorMoveHandlerManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a07f8d298d010b34ca694d0d124b66d2
+timeCreated: 1487820669
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs
new file mode 100644
index 0000000..f2e023c
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs
@@ -0,0 +1,8 @@
+namespace Zenject
+{
+    public interface IAnimatorIkHandler
+    {
+        void OnAnimatorIk();
+    }
+}
+
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs.meta b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs.meta
new file mode 100644
index 0000000..8510686
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorIkHandler.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 510bfbdebf6be804b92145cf677898b9
+timeCreated: 1487820668
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs
new file mode 100644
index 0000000..2f23f03
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs
@@ -0,0 +1,8 @@
+namespace Zenject
+{
+    public interface IAnimatorMoveHandler
+    {
+        void OnAnimatorMove();
+    }
+}
+
diff --git a/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs.meta b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs.meta
new file mode 100644
index 0000000..62e1260
--- /dev/null
+++ b/Assets/Source/Runtime/AnimatorInterfaces/IAnimatorMoveHandler.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 8e42d79e9a3ccae46b54d9b173778a17
+timeCreated: 1487820669
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Async.meta b/Assets/Source/Runtime/Async.meta
new file mode 100644
index 0000000..213c029
--- /dev/null
+++ b/Assets/Source/Runtime/Async.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: fc8c4aa98540d8d45914c45695c00cc1
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Async/AddressableInject.cs b/Assets/Source/Runtime/Async/AddressableInject.cs
new file mode 100644
index 0000000..51773f9
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AddressableInject.cs
@@ -0,0 +1,25 @@
+﻿#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+using System;
+using System.Threading;
+using System.Threading.Tasks;
+using UnityEngine.ResourceManagement.AsyncOperations;
+using Zenject;
+
+[ZenjectAllowDuringValidation]
+[NoReflectionBaking]
+public class AddressableInject<T> : AsyncInject<T> where T : UnityEngine.Object
+{
+    private AsyncOperationHandle<T> _handle;
+    public AsyncOperationHandle AssetReferenceHandle => _handle;
+    
+    public AddressableInject(InjectContext context, Func<CancellationToken, Task<AsyncOperationHandle<T>>> asyncMethod) 
+        : base(context)
+    {
+        StartAsync(async (ct) =>
+        {
+            _handle = await asyncMethod(ct);
+            return _handle.Result;
+        }, cancellationTokenSource.Token);
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/AddressableInject.cs.meta b/Assets/Source/Runtime/Async/AddressableInject.cs.meta
new file mode 100644
index 0000000..d02f93e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AddressableInject.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 6a6d9c621b22426bb466edc56d2c97bb
+timeCreated: 1595196971
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs b/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs
new file mode 100644
index 0000000..cf22a7b
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs
@@ -0,0 +1,42 @@
+﻿using ModestTree;
+
+namespace Zenject
+{
+    public static class AsyncDiContainerExtensions
+    {
+        public static
+#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+            ConcreteAddressableIdBinderGeneric<TContract>
+#else
+            ConcreteAsyncIdBinderGeneric<TContract> 
+#endif
+            BindAsync<TContract>(this DiContainer container)
+        {
+            return BindAsync<TContract>(container, container.StartBinding());
+        }
+
+        public static
+#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+            ConcreteAddressableIdBinderGeneric<TContract>
+#else
+            ConcreteAsyncIdBinderGeneric<TContract> 
+#endif
+            BindAsync<TContract>(this DiContainer container, BindStatement bindStatement)
+        {
+            var bindInfo = bindStatement.SpawnBindInfo();
+
+            Assert.That(!typeof(TContract).DerivesFrom<IPlaceholderFactory>(),
+                "You should not use Container.BindAsync for factory classes.  Use Container.BindFactory instead.");
+
+            Assert.That(!bindInfo.ContractTypes.Contains(typeof(AsyncInject<TContract>)));
+            bindInfo.ContractTypes.Add(typeof(IAsyncInject));
+            bindInfo.ContractTypes.Add(typeof(AsyncInject<TContract>));
+
+#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+            return new ConcreteAddressableIdBinderGeneric<TContract>(container, bindInfo, bindStatement);
+#else
+            return new ConcreteAsyncIdBinderGeneric<TContract>(container, bindInfo, bindStatement);
+#endif
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs.meta b/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs.meta
new file mode 100644
index 0000000..beb735e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AsyncDiContainerExtensions.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 552755346c0745d7bd238b074b30353d
+timeCreated: 1593918171
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/AsyncInject.cs b/Assets/Source/Runtime/Async/AsyncInject.cs
new file mode 100644
index 0000000..e1f598e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AsyncInject.cs
@@ -0,0 +1,138 @@
+﻿using System;
+using System.Runtime.CompilerServices;
+using System.Threading;
+using System.Threading.Tasks;
+using ModestTree;
+
+namespace Zenject
+{
+    public interface IAsyncInject
+    {
+        bool HasResult { get; }
+        bool IsCancelled  { get; }
+        bool IsFaulted  { get; }
+        bool IsCompleted { get; }
+        
+        TaskAwaiter GetAwaiter();
+    }
+
+
+    [ZenjectAllowDuringValidation]
+    [NoReflectionBaking]
+    public class AsyncInject<T> : IAsyncInject
+    {
+        protected readonly CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
+        protected readonly InjectContext _context;
+
+        public event Action<T> Completed;
+        public event Action<AggregateException>  Faulted;
+        public event Action Cancelled;
+
+        public bool HasResult { get; protected set; }
+        public bool IsSuccessful { get; protected set; }
+        public bool IsCancelled  { get; protected set; }
+        public bool IsFaulted  { get; protected set; }
+
+        public bool IsCompleted => IsSuccessful || IsCancelled || IsFaulted;
+        
+        T _result;
+        Task<T> task;
+        
+        protected AsyncInject(InjectContext context)
+        {
+            _context = context;
+        }
+        
+        public AsyncInject(InjectContext context, Func<CancellationToken, Task<T>> asyncMethod)
+        {
+            _context = context;
+
+            StartAsync(asyncMethod, cancellationTokenSource.Token);
+        }
+
+        public void Cancel()
+        {
+            cancellationTokenSource.Cancel();
+        }
+        
+        protected async void StartAsync(Func<CancellationToken, Task<T>> asyncMethod, CancellationToken token)
+        {
+            try
+            {
+                task = asyncMethod(token);
+                await task;
+            }
+            catch (AggregateException e)
+            {
+                HandleFaulted(e);
+                return;
+            }
+            catch (Exception e)
+            {
+                HandleFaulted(new AggregateException(e));
+                return;
+            }
+
+            if (token.IsCancellationRequested)
+            {
+                HandleCancelled();
+                return;
+            }
+            
+            if (task.IsCompleted)
+            {
+                HandleCompleted(task.Result);
+            }else if (task.IsCanceled)
+            {
+                HandleCancelled();
+            }else if (task.IsFaulted)
+            {
+                HandleFaulted(task.Exception);
+            }
+        }
+
+        private void HandleCompleted(T result)
+        {
+            _result = result;
+            HasResult = !result.Equals(default(T));
+            IsSuccessful = true;
+            Completed?.Invoke(result);
+        }
+
+        private void HandleCancelled()
+        {
+            IsCancelled = true;
+            Cancelled?.Invoke();
+        }
+
+        private void HandleFaulted(AggregateException exception)
+        {
+            IsFaulted = true;
+            Faulted?.Invoke(exception);
+        }
+
+        public bool TryGetResult(out T result)
+        {
+            if (HasResult)
+            {
+                result = _result;
+                return true;
+            }
+            result = default;
+            return false;
+        }
+
+        public T Result
+        {
+            get
+            {
+                Assert.That(HasResult, "AsyncInject does not have a result.  ");
+                return _result;
+            }
+        }
+        
+        public TaskAwaiter<T> GetAwaiter() => task.GetAwaiter();
+
+        TaskAwaiter IAsyncInject.GetAwaiter() => task.ContinueWith(task => { }).GetAwaiter();
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/AsyncInject.cs.meta b/Assets/Source/Runtime/Async/AsyncInject.cs.meta
new file mode 100644
index 0000000..5c65809
--- /dev/null
+++ b/Assets/Source/Runtime/Async/AsyncInject.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: ccd159e3fca64594aed21b2c23728200
+timeCreated: 1593623842
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders.meta b/Assets/Source/Runtime/Async/Binders.meta
new file mode 100644
index 0000000..81a4f2f
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: ea94649cc87248d6b7c83152035c58ef
+timeCreated: 1593628209
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs
new file mode 100644
index 0000000..7f2a890
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs
@@ -0,0 +1,43 @@
+﻿#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+using System;
+using System.Threading.Tasks;
+using UnityEngine.AddressableAssets;
+using UnityEngine.Assertions;
+using UnityEngine.ResourceManagement.AsyncOperations;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AddressableFromBinderGeneric<TContract, TConcrete> : AsyncFromBinderGeneric<TContract, TConcrete>
+        where TConcrete : TContract
+    {
+        public AddressableFromBinderGeneric(
+            DiContainer container, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(container, bindInfo, bindStatement)
+        {}
+        
+        public AsyncFromBinderBase FromAssetReferenceT<TConcreteObj>(AssetReferenceT<TConcreteObj> reference)
+            where TConcreteObj:UnityEngine.Object, TConcrete
+        {
+            BindInfo.RequireExplicitScope = false;
+
+            var contractType = typeof(TContract);
+            if (typeof(UnityEngine.Object).IsAssignableFrom(contractType))
+            {
+                var addressableInjectType = typeof(AddressableInject<>).MakeGenericType(typeof(TContract));
+                BindInfo.ContractTypes.Add(addressableInjectType);
+            }
+            
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, originalType) => new AddressableProviderSimple<TContract, TConcreteObj>(reference));
+
+            return this;
+        }
+
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs.meta
new file mode 100644
index 0000000..4960a1f
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AddressableFromBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 4617aa76923941fca100087c6a1c0f47
+timeCreated: 1595185267
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs
new file mode 100644
index 0000000..4dad5c6
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs
@@ -0,0 +1,27 @@
+﻿using System;
+using System.Diagnostics.Contracts;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AsyncFromBinderBase : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public AsyncFromBinderBase(DiContainer bindContainer, Type contractType, BindInfo bindInfo)
+            : base(bindInfo)
+        {
+            BindContainer = bindContainer;
+            ContractType = contractType;
+        }
+        
+        internal DiContainer BindContainer
+        {
+            get; private set;
+        }
+        
+        protected Type ContractType
+        {
+            get; private set;
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs.meta b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs.meta
new file mode 100644
index 0000000..43f8530
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderBase.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: afefb93ca4194de4a97fe68d8ce948e4
+timeCreated: 1593628300
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs
new file mode 100644
index 0000000..27818ff
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs
@@ -0,0 +1,53 @@
+﻿using System;
+using System.Threading;
+using System.Threading.Tasks;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AsyncFromBinderGeneric<TContract, TConcrete> : AsyncFromBinderBase where TConcrete : TContract
+    {
+        public AsyncFromBinderGeneric(
+            DiContainer container, BindInfo bindInfo,
+                BindStatement bindStatement)
+            : base(container, typeof(TContract), bindInfo)
+        {
+            BindStatement = bindStatement;
+        }
+
+        protected BindStatement BindStatement
+        {
+            get; private set;
+        }
+        
+        protected IBindingFinalizer SubFinalizer
+        {
+            set { BindStatement.SetFinalizer(value); }
+        }
+
+        public AsyncFromBinderBase FromMethod(Func<Task<TConcrete>> method)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, originalType) => new AsyncMethodProviderSimple<TContract, TConcrete>(method));
+
+            return this;
+        }
+        
+        public AsyncFromBinderBase FromMethod(Func<CancellationToken, Task<TConcrete>> method)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, originalType) => new AsyncMethodProviderSimple<TContract, TConcrete>(method));
+
+            return this;
+        }
+        
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs.meta
new file mode 100644
index 0000000..d76b01e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/AsyncFromBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: a90ebf554b2241dd89c69883e3bd399e
+timeCreated: 1593628851
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs
new file mode 100644
index 0000000..3d16763
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs
@@ -0,0 +1,23 @@
+﻿#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteAddressableBinderGeneric<TContract> : AddressableFromBinderGeneric<TContract, TContract>
+    {
+        public ConcreteAddressableBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+            bindInfo.ToChoice = ToChoices.Self;
+        }
+
+        public AddressableFromBinderGeneric<TContract, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            return new AddressableFromBinderGeneric<TContract, TConcrete>(
+                BindContainer, BindInfo, BindStatement);
+        }
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs.meta
new file mode 100644
index 0000000..c3aeb0f
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 8f00f9577e78451f9c5bba42164bbbe6
+timeCreated: 1595185142
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs
new file mode 100644
index 0000000..f1ce025
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs
@@ -0,0 +1,22 @@
+﻿#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteAddressableIdBinderGeneric<TContract> : ConcreteAddressableBinderGeneric<TContract>
+    {
+        public ConcreteAddressableIdBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo, 
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {}
+        
+        public ConcreteAddressableIdBinderGeneric<TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+        
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs.meta
new file mode 100644
index 0000000..f812811
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAddressableIdBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 6b8a4f8f2d7d4987bf374adc67374d87
+timeCreated: 1595184977
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs
new file mode 100644
index 0000000..cd7d1df
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs
@@ -0,0 +1,26 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteAsyncBinderGeneric<TContract> : AsyncFromBinderGeneric<TContract, TContract>
+    {
+        public ConcreteAsyncBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+            bindInfo.ToChoice = ToChoices.Self;
+        }
+
+        public AsyncFromBinderGeneric<TContract, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            return new AsyncFromBinderGeneric<TContract, TConcrete>(
+                BindContainer, BindInfo, BindStatement);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs.meta
new file mode 100644
index 0000000..cbf7610
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 11dfa5bdf00747969d6004197d2b5474
+timeCreated: 1593631454
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs
new file mode 100644
index 0000000..719aa64
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs
@@ -0,0 +1,19 @@
+﻿namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteAsyncIdBinderGeneric<TContract> : ConcreteAsyncBinderGeneric<TContract>
+    {
+        public ConcreteAsyncIdBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+        }
+
+        public ConcreteAsyncBinderGeneric<TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs.meta b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs.meta
new file mode 100644
index 0000000..9c5f9ce
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Binders/ConcreteAsyncIdBinderGeneric.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 7e53ee42d6a14260b7836ce3b9121958
+timeCreated: 1593626138
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Extenject-Async.asmdef b/Assets/Source/Runtime/Async/Extenject-Async.asmdef
new file mode 100644
index 0000000..7c9a797
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Extenject-Async.asmdef
@@ -0,0 +1,23 @@
+{
+    "name": "Extenject-Async",
+    "references": [
+        "GUID:0d8beb7f090555447a6cf5ce9e54dbb4",
+        "GUID:9e24947de15b9834991c9d8411ea37cf",
+        "GUID:84651a3751eca9349aac36a66bba901b"
+    ],
+    "includePlatforms": [],
+    "excludePlatforms": [],
+    "allowUnsafeCode": false,
+    "overrideReferences": false,
+    "precompiledReferences": [],
+    "autoReferenced": true,
+    "defineConstraints": [],
+    "versionDefines": [
+        {
+            "name": "com.unity.addressables",
+            "expression": "0.0.0",
+            "define": "EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS"
+        }
+    ],
+    "noEngineReferences": false
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Extenject-Async.asmdef.meta b/Assets/Source/Runtime/Async/Extenject-Async.asmdef.meta
new file mode 100644
index 0000000..99b329f
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Extenject-Async.asmdef.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 9bf848f31e601a249a6bebdc53287470
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Async/Providers.meta b/Assets/Source/Runtime/Async/Providers.meta
new file mode 100644
index 0000000..5401adf
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Providers.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 07ce4df13cf04773a2251f822737f454
+timeCreated: 1593623009
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs b/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs
new file mode 100644
index 0000000..9522258
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs
@@ -0,0 +1,52 @@
+﻿#if EXTENJECT_INCLUDE_ADDRESSABLE_BINDINGS
+using System;
+using System.Collections.Generic;
+using System.Threading;
+using System.Threading.Tasks;
+using ModestTree;
+using UnityEngine.AddressableAssets;
+using UnityEngine.ResourceManagement.AsyncOperations;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AddressableProviderSimple<TContract, TConcrete> : IProvider where TConcrete : UnityEngine.Object, TContract
+    {
+        private AssetReferenceT<TConcrete> assetReference;
+
+        public AddressableProviderSimple(AssetReferenceT<TConcrete> assetReference)
+        {
+            this.assetReference = assetReference;
+        }
+        
+        public bool TypeVariesBasedOnMemberType => false;
+        public bool IsCached => false;
+        public Type GetInstanceType(InjectContext context) => typeof(TConcrete);
+
+        public void GetAllInstancesWithInjectSplit(InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+            
+            injectAction = null;
+
+            Func<CancellationToken, Task<AsyncOperationHandle<TConcrete>>> addressableLoadDelegate = async (_) =>
+            {
+                AsyncOperationHandle<TConcrete> loadHandle = Addressables.LoadAssetAsync<TConcrete>(assetReference);
+                await loadHandle.Task;
+                
+                if (loadHandle.Status == AsyncOperationStatus.Failed)
+                {
+                    throw new Exception("Async operation failed", loadHandle.OperationException);
+                }
+                
+                return  loadHandle;
+            }; 
+            
+            var asyncInject = new AddressableInject<TConcrete>(context, addressableLoadDelegate);
+
+            buffer.Add(asyncInject);
+        }
+    }
+}
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs.meta b/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs.meta
new file mode 100644
index 0000000..e9efac3
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Providers/AddressableProviderSimple.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: a46dbe0d4a1445c3bb8c5e58739a07a3
+timeCreated: 1595192404
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs b/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs
new file mode 100644
index 0000000..0274d0e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs
@@ -0,0 +1,62 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Diagnostics.Contracts;
+using System.Threading;
+using System.Threading.Tasks;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AsyncMethodProviderSimple<TContract, TConcrete> : IProvider where TConcrete : TContract
+    {
+        readonly Func<Task<TConcrete>> _method;
+        readonly Func<CancellationToken, Task<TConcrete>> _methodCancellable;
+
+        public AsyncMethodProviderSimple(Func<Task<TConcrete>> method)
+        {
+            _method = method;
+        }
+        
+        public AsyncMethodProviderSimple(Func<CancellationToken, Task<TConcrete>> method)
+        {
+            _methodCancellable = method;
+        }
+
+        public bool TypeVariesBasedOnMemberType => false;
+        public bool IsCached => false;
+        public Type GetInstanceType(InjectContext context) => typeof(TConcrete);
+
+        public void GetAllInstancesWithInjectSplit(InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+            
+            injectAction = null;
+
+            Func<CancellationToken, Task<TContract>> typeCastAsyncCall = null;
+            if (_methodCancellable != null)
+            {
+                typeCastAsyncCall = async ct =>
+                {
+                    var task = _methodCancellable(ct);
+                    await task;
+                    return (TContract) task.Result;
+                };
+            }else if (_method != null)
+            {
+                typeCastAsyncCall = async _ =>
+                {
+                    var task = _method();
+                    await task;
+                    return (TContract) task.Result;
+                };
+            }
+            Assert.IsNotNull(typeCastAsyncCall);
+            
+            var asyncInject = new AsyncInject<TContract>(context, typeCastAsyncCall);
+
+            buffer.Add(asyncInject);
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs.meta b/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs.meta
new file mode 100644
index 0000000..6ac833e
--- /dev/null
+++ b/Assets/Source/Runtime/Async/Providers/AsyncMethodProviderSimple.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 4d44f5c255f640aa8da6d4c74628f22f
+timeCreated: 1593623062
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Binding.meta b/Assets/Source/Runtime/Binding.meta
new file mode 100644
index 0000000..457ab81
--- /dev/null
+++ b/Assets/Source/Runtime/Binding.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: e92094ea8d3ee634f858163622b6abbb
+folderAsset: yes
+timeCreated: 1459463884
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo.meta b/Assets/Source/Runtime/Binding/BindInfo.meta
new file mode 100644
index 0000000..64b8452
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: a78a183f887b72e45b2ec6d77fb514d8
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs b/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs
new file mode 100644
index 0000000..6d0c754
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs
@@ -0,0 +1,100 @@
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public enum ScopeTypes
+    {
+        Unset,
+        Transient,
+        Singleton
+    }
+
+    public enum ToChoices
+    {
+        Self,
+        Concrete
+    }
+
+    public enum InvalidBindResponses
+    {
+        Assert,
+        Skip
+    }
+
+    public enum BindingInheritanceMethods
+    {
+        None,
+        CopyIntoAll,
+        CopyDirectOnly,
+        MoveIntoAll,
+        MoveDirectOnly
+    }
+
+    [NoReflectionBaking]
+    public class BindInfo : IDisposable
+    {
+        public bool MarkAsCreationBinding;
+        public bool MarkAsUniqueSingleton;
+        public object ConcreteIdentifier;
+        public bool SaveProvider;
+        public bool OnlyBindIfNotBound;
+        public bool RequireExplicitScope;
+        public object Identifier;
+        public readonly List<Type> ContractTypes;
+        public BindingInheritanceMethods BindingInheritanceMethod;
+        public InvalidBindResponses InvalidBindResponse;
+        public bool NonLazy;
+        public BindingCondition Condition;
+        public ToChoices ToChoice;
+        public string ContextInfo;
+        public readonly List<Type> ToTypes; // Only relevant with ToChoices.Concrete
+        public ScopeTypes Scope;
+        public readonly List<TypeValuePair> Arguments;
+        public Action<InjectContext, object> InstantiatedCallback;
+
+        public BindInfo()
+        {
+            ContractTypes = new List<Type>();
+            ToTypes = new List<Type>();
+            Arguments = new List<TypeValuePair>();
+
+            Reset();
+        }
+
+        public void Dispose()
+        {
+            ZenPools.DespawnBindInfo(this);
+        }
+
+        [Conditional("UNITY_EDITOR")]
+        public void SetContextInfo(string contextInfo)
+        {
+            ContextInfo = contextInfo;
+        }
+
+        public void Reset()
+        {
+            MarkAsCreationBinding = true;
+            MarkAsUniqueSingleton = false;
+            ConcreteIdentifier = null;
+            SaveProvider = false;
+            OnlyBindIfNotBound = false;
+            RequireExplicitScope = false;
+            Identifier = null;
+            ContractTypes.Clear();
+            BindingInheritanceMethod = BindingInheritanceMethods.None;
+            InvalidBindResponse = InvalidBindResponses.Assert;
+            NonLazy = false;
+            Condition = null;
+            ToChoice = ToChoices.Self;
+            ContextInfo = null;
+            ToTypes.Clear();
+            Scope = ScopeTypes.Unset;
+            Arguments.Clear();
+            InstantiatedCallback = null;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs.meta b/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs.meta
new file mode 100644
index 0000000..d44507c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/BindInfo.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 647e28e377c50e549b443131ce6163fc
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs b/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs
new file mode 100644
index 0000000..c3e9993
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs
@@ -0,0 +1,83 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class BindStatement : IDisposable
+    {
+        readonly List<IDisposable> _disposables;
+        IBindingFinalizer _bindingFinalizer;
+
+        public BindStatement()
+        {
+            _disposables = new List<IDisposable>();
+            Reset();
+        }
+
+        public BindingInheritanceMethods BindingInheritanceMethod
+        {
+            get
+            {
+                AssertHasFinalizer();
+                return _bindingFinalizer.BindingInheritanceMethod;
+            }
+        }
+
+        public bool HasFinalizer
+        {
+            get { return _bindingFinalizer != null; }
+        }
+
+        public void SetFinalizer(IBindingFinalizer bindingFinalizer)
+        {
+            _bindingFinalizer = bindingFinalizer;
+        }
+
+        void AssertHasFinalizer()
+        {
+            if (_bindingFinalizer == null)
+            {
+                throw Assert.CreateException(
+                    "Unfinished binding!  Some required information was left unspecified.");
+            }
+        }
+
+        public void AddDisposable(IDisposable disposable)
+        {
+            _disposables.Add(disposable);
+        }
+
+        public BindInfo SpawnBindInfo()
+        {
+            var bindInfo = ZenPools.SpawnBindInfo();
+            AddDisposable(bindInfo);
+            return bindInfo;
+        }
+
+        public void FinalizeBinding(DiContainer container)
+        {
+            AssertHasFinalizer();
+            _bindingFinalizer.FinalizeBinding(container);
+        }
+
+        public void Reset()
+        {
+            _bindingFinalizer = null;
+
+            for (int i = 0; i < _disposables.Count; i++)
+            {
+                _disposables[i].Dispose();
+            }
+
+            _disposables.Clear();
+        }
+
+        public void Dispose()
+        {
+            ZenPools.DespawnStatement(this);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs.meta b/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs.meta
new file mode 100644
index 0000000..d876198
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/BindStatement.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 63a8f1068d150404f820c8cc9057dbc8
+timeCreated: 1535868299
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs b/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs
new file mode 100644
index 0000000..c15cf2e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs
@@ -0,0 +1,31 @@
+using System;
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryBindInfo
+    {
+        public FactoryBindInfo(Type factoryType)
+        {
+            FactoryType = factoryType;
+            Arguments = new List<TypeValuePair>();
+        }
+
+        public Type FactoryType
+        {
+            get; private set;
+        }
+
+        public Func<DiContainer, IProvider> ProviderFunc
+        {
+            get; set;
+        }
+
+        public List<TypeValuePair> Arguments
+        {
+            get;
+            set;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs.meta b/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs.meta
new file mode 100644
index 0000000..fe1142a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/FactoryBindInfo.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e69b2b4566e331e44a9f92e4e309816a
+timeCreated: 1484520532
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs b/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs
new file mode 100644
index 0000000..ab1774c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs
@@ -0,0 +1,93 @@
+#if !NOT_UNITY3D
+
+using System;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class GameObjectCreationParameters
+    {
+        public string Name
+        {
+            get;
+            set;
+        }
+
+        public string GroupName
+        {
+            get;
+            set;
+        }
+
+        public Transform ParentTransform
+        {
+            get;
+            set;
+        }
+
+        public Func<InjectContext, Transform> ParentTransformGetter
+        {
+            get;
+            set;
+        }
+
+        public Vector3? Position
+        {
+            get;
+            set;
+        }
+
+        public Quaternion? Rotation
+        {
+            get;
+            set;
+        }
+
+        public static readonly GameObjectCreationParameters Default = new GameObjectCreationParameters();
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + (Name == null ? 0 : Name.GetHashCode());
+                hash = hash * 29 + (GroupName == null ? 0 : GroupName.GetHashCode());
+                hash = hash * 29 + (ParentTransform == null ? 0 : ParentTransform.GetHashCode());
+                hash = hash * 29 + (ParentTransformGetter == null ? 0 : ParentTransformGetter.GetHashCode());
+                hash = hash * 29 + (!Position.HasValue ? 0 : Position.Value.GetHashCode());
+                hash = hash * 29 + (!Rotation.HasValue ? 0 : Rotation.Value.GetHashCode());
+                return hash;
+            }
+        }
+
+        public override bool Equals(object other)
+        {
+            if (other is GameObjectCreationParameters)
+            {
+                GameObjectCreationParameters otherId = (GameObjectCreationParameters)other;
+                return otherId == this;
+            }
+
+            return false;
+        }
+
+        public bool Equals(GameObjectCreationParameters that)
+        {
+            return this == that;
+        }
+
+        public static bool operator ==(GameObjectCreationParameters left, GameObjectCreationParameters right)
+        {
+            return Equals(left.Name, right.Name)
+                && Equals(left.GroupName, right.GroupName);
+        }
+
+        public static bool operator !=(GameObjectCreationParameters left, GameObjectCreationParameters right)
+        {
+            return !left.Equals(right);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs.meta b/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs.meta
new file mode 100644
index 0000000..cbf33b3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/GameObjectCreationParameters.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2b708f7f76ea5574e9a39b60cc5a8238
+timeCreated: 1477163090
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs b/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs
new file mode 100644
index 0000000..5ca06a3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs
@@ -0,0 +1,35 @@
+namespace Zenject
+{
+    public enum PoolExpandMethods
+    {
+        OneAtATime,
+        Double,
+        Disabled
+    }
+
+    [NoReflectionBaking]
+    public class MemoryPoolBindInfo
+    {
+        public MemoryPoolBindInfo()
+        {
+            ExpandMethod = PoolExpandMethods.OneAtATime;
+            MaxSize = int.MaxValue;
+        }
+
+        public PoolExpandMethods ExpandMethod
+        {
+            get; set;
+        }
+
+        public int InitialSize
+        {
+            get; set;
+        }
+
+        public int MaxSize
+        {
+            get; set;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs.meta b/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs.meta
new file mode 100644
index 0000000..6b72e89
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindInfo/MemoryPoolBindInfo.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3f8798fbf64bca945a7be04615c08c4f
+timeCreated: 1485711462
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders.meta b/Assets/Source/Runtime/Binding/Binders.meta
new file mode 100644
index 0000000..d985320
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 3e0d343c02f9d0a488a62abffae00ceb
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..21bb923
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,106 @@
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ArgConditionCopyNonLazyBinder : InstantiateCallbackConditionCopyNonLazyBinder
+    {
+        public ArgConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<T>(T param)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param1));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param2));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3>(
+            TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param1));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param2));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param3));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param1));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param2));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param3));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param4));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param1));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param2));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param3));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param4));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param5));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
+        {
+            BindInfo.Arguments.Clear();
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param1));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param2));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param3));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param4));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param5));
+            BindInfo.Arguments.Add(InjectUtil.CreateTypePair(param6));
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArguments(object[] args)
+        {
+            BindInfo.Arguments.Clear();
+
+            for (int i = 0; i < args.Length; i++)
+            {
+                var arg = args[i];
+
+                Assert.IsNotNull(arg,
+                    "Cannot include null values when creating a zenject argument list because zenject has no way of deducing the type from a null value.  If you want to allow null, use the Explicit form.");
+
+                BindInfo.Arguments.Add(
+                    new TypeValuePair(arg.GetType(), arg));
+            }
+            return this;
+        }
+
+        public InstantiateCallbackConditionCopyNonLazyBinder WithArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            BindInfo.Arguments.Clear();
+
+            foreach (var arg in extraArgs)
+            {
+                BindInfo.Arguments.Add(arg);
+            }
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..ae1492d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d0eff25a90fc7a4479dbb9a1f74dddc2
+timeCreated: 1483833202
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders.meta
new file mode 100644
index 0000000..a00de7d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: b3b29de51c8625443984cbd926505d00
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs
new file mode 100644
index 0000000..957f69c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs
@@ -0,0 +1,78 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteBinderGeneric<TContract> : FromBinderGeneric<TContract>
+    {
+        public ConcreteBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+            ToSelf();
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FromBinderGeneric<TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo, (container, type) => new TransientProvider(
+                    type, container, BindInfo.Arguments,
+                    BindInfo.ContextInfo, BindInfo.ConcreteIdentifier,
+                    BindInfo.InstantiatedCallback));
+
+            return this;
+        }
+
+        public FromBinderGeneric<TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FromBinderGeneric<TConcrete>(
+                BindContainer, BindInfo, BindStatement);
+        }
+
+        public FromBinderNonGeneric To(params Type[] concreteTypes)
+        {
+            return To((IEnumerable<Type>)concreteTypes);
+        }
+
+        public FromBinderNonGeneric To(IEnumerable<Type> concreteTypes)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(
+                concreteTypes, BindInfo.ContractTypes, BindInfo.InvalidBindResponse);
+
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.AddRange(concreteTypes);
+
+            return new FromBinderNonGeneric(
+                BindContainer, BindInfo, BindStatement);
+        }
+
+#if !(UNITY_WSA && ENABLE_DOTNET)
+        public FromBinderNonGeneric To(
+            Action<ConventionSelectTypesBinder> generator)
+        {
+            var bindInfo = new ConventionBindInfo();
+
+            // Automatically filter by the given contract types
+            bindInfo.AddTypeFilter(
+                concreteType => BindInfo.ContractTypes.All(contractType => concreteType.DerivesFromOrEqual(contractType)));
+
+            generator(new ConventionSelectTypesBinder(bindInfo));
+            return To(bindInfo.ResolveTypes());
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs.meta
new file mode 100644
index 0000000..e7628aa
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 62ec581e8d820a74797d1dabf19d85c3
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs
new file mode 100644
index 0000000..3bf7135
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs
@@ -0,0 +1,81 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteBinderNonGeneric : FromBinderNonGeneric
+    {
+        public ConcreteBinderNonGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+            ToSelf();
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FromBinderNonGeneric ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo, (container, type) => new TransientProvider(
+                    type, container, BindInfo.Arguments, BindInfo.ContextInfo, BindInfo.ConcreteIdentifier,
+                    BindInfo.InstantiatedCallback));
+
+            return this;
+        }
+
+        public FromBinderNonGeneric To<TConcrete>()
+        {
+            return To(typeof(TConcrete));
+        }
+
+        public FromBinderNonGeneric To(params Type[] concreteTypes)
+        {
+            return To((IEnumerable<Type>)concreteTypes);
+        }
+
+        public FromBinderNonGeneric To(IEnumerable<Type> concreteTypes)
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.AddRange(concreteTypes);
+
+            if (BindInfo.ToTypes.Count > 1 && BindInfo.ContractTypes.Count > 1)
+            {
+                // Be more lenient in this case to behave similar to convention based bindings
+                BindInfo.InvalidBindResponse = InvalidBindResponses.Skip;
+            }
+            else
+            {
+                BindingUtil.AssertIsDerivedFromTypes(concreteTypes, BindInfo.ContractTypes, BindInfo.InvalidBindResponse);
+            }
+
+            return this;
+        }
+
+#if !(UNITY_WSA && ENABLE_DOTNET)
+        public FromBinderNonGeneric To(
+            Action<ConventionSelectTypesBinder> generator)
+        {
+            var bindInfo = new ConventionBindInfo();
+
+            // This is nice because it allows us to do things like Bind(all interfaces).To(specific types)
+            // instead of having to do Bind(all interfaces).To(specific types that inherit from one of these interfaces)
+            BindInfo.InvalidBindResponse = InvalidBindResponses.Skip;
+
+            generator(new ConventionSelectTypesBinder(bindInfo));
+
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.AddRange(bindInfo.ResolveTypes());
+
+            return this;
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs.meta
new file mode 100644
index 0000000..0208630
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteBinderNonGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b04935d23b1499e42a242d63a3fe248b
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs
new file mode 100644
index 0000000..f351e2a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteIdBinderGeneric<TContract> : ConcreteBinderGeneric<TContract>
+    {
+        public ConcreteIdBinderGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+        }
+
+        public ConcreteBinderGeneric<TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs.meta
new file mode 100644
index 0000000..6eec9f2
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 358cdf402ef00ff40ac81f3bbe7018f0
+timeCreated: 1463318690
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs
new file mode 100644
index 0000000..d80f2ca
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteIdBinderNonGeneric : ConcreteBinderNonGeneric
+    {
+        public ConcreteIdBinderNonGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+        }
+
+        public ConcreteBinderNonGeneric WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs.meta
new file mode 100644
index 0000000..a1b1a3e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteBinders/ConcreteIdBinderNonGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1251d518904c9574897614d756f76756
+timeCreated: 1463318690
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..4b84dbf
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,17 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConcreteIdArgConditionCopyNonLazyBinder : ArgConditionCopyNonLazyBinder
+    {
+        public ConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public ArgConditionCopyNonLazyBinder WithConcreteId(object id)
+        {
+            BindInfo.ConcreteIdentifier = id;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..4646915
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5803a20c252d8ae4498e79e8b3bb09e0
+timeCreated: 1523257672
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..27feedd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs
@@ -0,0 +1,41 @@
+using System;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConditionCopyNonLazyBinder : CopyNonLazyBinder
+    {
+        public ConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public CopyNonLazyBinder When(BindingCondition condition)
+        {
+            BindInfo.Condition = condition;
+            return this;
+        }
+
+        public CopyNonLazyBinder WhenInjectedIntoInstance(object instance)
+        {
+            return When(r => ReferenceEquals(r.ObjectInstance, instance));
+        }
+
+        public CopyNonLazyBinder WhenInjectedInto(params Type[] targets)
+        {
+            return When(r => targets.Where(x => r.ObjectType != null && r.ObjectType.DerivesFromOrEqual(x)).Any());
+        }
+
+        public CopyNonLazyBinder WhenInjectedInto<T>()
+        {
+            return When(r => r.ObjectType != null && r.ObjectType.DerivesFromOrEqual(typeof(T)));
+        }
+
+        public CopyNonLazyBinder WhenNotInjectedInto<T>()
+        {
+            return When(r => r.ObjectType == null || !r.ObjectType.DerivesFromOrEqual(typeof(T)));
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..905792a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a638543bf618ed94fb418f48d9ea9329
+timeCreated: 1483833202
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions.meta b/Assets/Source/Runtime/Binding/Binders/Conventions.meta
new file mode 100644
index 0000000..f6c965b
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: cecd58a5468ced54aabe6cc4d2eed9a8
+folderAsset: yes
+timeCreated: 1462127452
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs
new file mode 100644
index 0000000..4f560c9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs
@@ -0,0 +1,72 @@
+#if !(UNITY_WSA && ENABLE_DOTNET)
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConventionAssemblySelectionBinder
+    {
+        public ConventionAssemblySelectionBinder(ConventionBindInfo bindInfo)
+        {
+            BindInfo = bindInfo;
+        }
+
+        protected ConventionBindInfo BindInfo
+        {
+            get;
+            private set;
+        }
+
+        public void FromAllAssemblies()
+        {
+            // Do nothing
+            // This is the default
+        }
+
+        public void FromAssemblyContaining<T>()
+        {
+            FromAssembliesContaining(typeof(T));
+        }
+
+        public void FromAssembliesContaining(params Type[] types)
+        {
+            FromAssembliesContaining((IEnumerable<Type>)types);
+        }
+
+        public void FromAssembliesContaining(IEnumerable<Type> types)
+        {
+            FromAssemblies(types.Select(t => t.Assembly).Distinct());
+        }
+
+        public void FromThisAssembly()
+        {
+            FromAssemblies(Assembly.GetCallingAssembly());
+        }
+
+        public void FromAssembly(Assembly assembly)
+        {
+            FromAssemblies(assembly);
+        }
+
+        public void FromAssemblies(params Assembly[] assemblies)
+        {
+            FromAssemblies((IEnumerable<Assembly>)assemblies);
+        }
+
+        public void FromAssemblies(IEnumerable<Assembly> assemblies)
+        {
+            BindInfo.AddAssemblyFilter(assembly => assemblies.Contains(assembly));
+        }
+
+        public void FromAssembliesWhere(Func<Assembly, bool> predicate)
+        {
+            BindInfo.AddAssemblyFilter(predicate);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs.meta
new file mode 100644
index 0000000..ec85c6c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionAssemblySelectionBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5229c122d45b5634ebd4b9bccee749ac
+timeCreated: 1462127487
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs
new file mode 100644
index 0000000..6a9662f
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs
@@ -0,0 +1,77 @@
+#if !(UNITY_WSA && ENABLE_DOTNET)
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConventionBindInfo
+    {
+        readonly List<Func<Type, bool>> _typeFilters = new List<Func<Type, bool>>();
+        readonly List<Func<Assembly, bool>> _assemblyFilters = new List<Func<Assembly, bool>>();
+
+#if ZEN_MULTITHREADING
+        readonly object _locker = new object();
+#endif
+        static Dictionary<Assembly, Type[]> _assemblyTypeCache = new Dictionary<Assembly, Type[]>();
+
+        public void AddAssemblyFilter(Func<Assembly, bool> predicate)
+        {
+            _assemblyFilters.Add(predicate);
+        }
+
+        public void AddTypeFilter(Func<Type, bool> predicate)
+        {
+            _typeFilters.Add(predicate);
+        }
+
+        IEnumerable<Assembly> GetAllAssemblies()
+        {
+            // This seems fast enough that it's not worth caching
+            // We also want to allow dynamically loading assemblies
+            return AppDomain.CurrentDomain.GetAssemblies();
+        }
+
+        bool ShouldIncludeAssembly(Assembly assembly)
+        {
+            return _assemblyFilters.All(predicate => predicate(assembly));
+        }
+
+        bool ShouldIncludeType(Type type)
+        {
+            return _typeFilters.All(predicate => predicate(type));
+        }
+
+        Type[] GetTypes(Assembly assembly)
+        {
+            Type[] types;
+
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                // This is much faster than calling assembly.GetTypes() every time
+                if (!_assemblyTypeCache.TryGetValue(assembly, out types))
+                {
+                    types = assembly.GetTypes();
+                    _assemblyTypeCache[assembly] = types;
+                }
+            }
+
+            return types;
+        }
+
+        public List<Type> ResolveTypes()
+        {
+            return GetAllAssemblies()
+                .Where(ShouldIncludeAssembly)
+                .SelectMany(assembly => GetTypes(assembly))
+                .Where(ShouldIncludeType).ToList();
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs.meta b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs.meta
new file mode 100644
index 0000000..13be29d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionBindInfo.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f1e908965ce63ab40b271724cb5490aa
+timeCreated: 1462127523
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs
new file mode 100644
index 0000000..2fe5cb0
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs
@@ -0,0 +1,139 @@
+#if !(UNITY_WSA && ENABLE_DOTNET)
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text.RegularExpressions;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConventionFilterTypesBinder : ConventionAssemblySelectionBinder
+    {
+        public ConventionFilterTypesBinder(ConventionBindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public ConventionFilterTypesBinder DerivingFromOrEqual<T>()
+        {
+            return DerivingFromOrEqual(typeof(T));
+        }
+
+        public ConventionFilterTypesBinder DerivingFromOrEqual(Type parentType)
+        {
+            BindInfo.AddTypeFilter(type => type.DerivesFromOrEqual(parentType));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder DerivingFrom<T>()
+        {
+            return DerivingFrom(typeof(T));
+        }
+
+        public ConventionFilterTypesBinder DerivingFrom(Type parentType)
+        {
+            BindInfo.AddTypeFilter(type => type.DerivesFrom(parentType));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder WithAttribute<T>()
+            where T : Attribute
+        {
+            return WithAttribute(typeof(T));
+        }
+
+        public ConventionFilterTypesBinder WithAttribute(Type attribute)
+        {
+            Assert.That(attribute.DerivesFrom<Attribute>());
+            BindInfo.AddTypeFilter(t => t.HasAttribute(attribute));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder WithoutAttribute<T>()
+            where T : Attribute
+        {
+            return WithoutAttribute(typeof(T));
+        }
+
+        public ConventionFilterTypesBinder WithoutAttribute(Type attribute)
+        {
+            Assert.That(attribute.DerivesFrom<Attribute>());
+            BindInfo.AddTypeFilter(t => !t.HasAttribute(attribute));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder WithAttributeWhere<T>(Func<T, bool> predicate)
+            where T : Attribute
+        {
+            BindInfo.AddTypeFilter(t => t.HasAttribute<T>() && t.AllAttributes<T>().All(predicate));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder Where(Func<Type, bool> predicate)
+        {
+            BindInfo.AddTypeFilter(predicate);
+            return this;
+        }
+
+        public ConventionFilterTypesBinder InNamespace(string ns)
+        {
+            return InNamespaces(ns);
+        }
+
+        public ConventionFilterTypesBinder InNamespaces(params string[] namespaces)
+        {
+            return InNamespaces((IEnumerable<string>)namespaces);
+        }
+
+        public ConventionFilterTypesBinder InNamespaces(IEnumerable<string> namespaces)
+        {
+            BindInfo.AddTypeFilter(t => namespaces.Any(n => IsInNamespace(t, n)));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder WithSuffix(string suffix)
+        {
+            BindInfo.AddTypeFilter(t => t.Name.EndsWith(suffix));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder WithPrefix(string prefix)
+        {
+            BindInfo.AddTypeFilter(t => t.Name.StartsWith(prefix));
+            return this;
+        }
+
+        public ConventionFilterTypesBinder MatchingRegex(string pattern)
+        {
+            return MatchingRegex(pattern, RegexOptions.None);
+        }
+
+        public ConventionFilterTypesBinder MatchingRegex(string pattern, RegexOptions options)
+        {
+            return MatchingRegex(new Regex(pattern, options));
+        }
+
+        public ConventionFilterTypesBinder MatchingRegex(Regex regex)
+        {
+            BindInfo.AddTypeFilter(t => regex.IsMatch(t.Name));
+            return this;
+        }
+
+        static bool IsInNamespace(Type type, string requiredNs)
+        {
+            var actualNs = type.Namespace ?? "";
+
+            if (requiredNs.Length > actualNs.Length)
+            {
+                return false;
+            }
+
+            return actualNs.StartsWith(requiredNs)
+                && (actualNs.Length == requiredNs.Length || actualNs[requiredNs.Length] == '.');
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs.meta
new file mode 100644
index 0000000..0ae752f
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionFilterTypesBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: fc3e9c89606ca52458403153ad0d9b3e
+timeCreated: 1462127525
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs
new file mode 100644
index 0000000..fee1245
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs
@@ -0,0 +1,52 @@
+#if !(UNITY_WSA && ENABLE_DOTNET)
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ConventionSelectTypesBinder
+    {
+        readonly ConventionBindInfo _bindInfo;
+
+        public ConventionSelectTypesBinder(ConventionBindInfo bindInfo)
+        {
+            _bindInfo = bindInfo;
+        }
+
+        ConventionFilterTypesBinder CreateNextBinder()
+        {
+            return new ConventionFilterTypesBinder(_bindInfo);
+        }
+
+        public ConventionFilterTypesBinder AllTypes()
+        {
+            // Do nothing (this is the default)
+            return CreateNextBinder();
+        }
+
+        public ConventionFilterTypesBinder AllClasses()
+        {
+            _bindInfo.AddTypeFilter(t => t.IsClass);
+            return CreateNextBinder();
+        }
+
+        public ConventionFilterTypesBinder AllNonAbstractClasses()
+        {
+            _bindInfo.AddTypeFilter(t => t.IsClass && !t.IsAbstract);
+            return CreateNextBinder();
+        }
+
+        public ConventionFilterTypesBinder AllAbstractClasses()
+        {
+            _bindInfo.AddTypeFilter(t => t.IsClass && t.IsAbstract);
+            return CreateNextBinder();
+        }
+
+        public ConventionFilterTypesBinder AllInterfaces()
+        {
+            _bindInfo.AddTypeFilter(t => t.IsInterface);
+            return CreateNextBinder();
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs.meta
new file mode 100644
index 0000000..30ddff4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Conventions/ConventionSelectTypesBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 05d17b3e7f09bc44f8be86e01642ee8d
+timeCreated: 1462127469
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs
new file mode 100644
index 0000000..0688112
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs
@@ -0,0 +1,66 @@
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class CopyNonLazyBinder : NonLazyBinder
+    {
+        List<BindInfo> _secondaryBindInfos;
+
+        public CopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        // This is used in cases where you have multiple bindings that depend on each other so should
+        // be inherited together (eg. FromIFactory)
+        internal void AddSecondaryCopyBindInfo(BindInfo bindInfo)
+        {
+            if (_secondaryBindInfos == null)
+            {
+                _secondaryBindInfos = new List<BindInfo>();
+            }
+            _secondaryBindInfos.Add(bindInfo);
+        }
+
+        public NonLazyBinder CopyIntoAllSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.CopyIntoAll);
+            return this;
+        }
+
+        // Only copy the binding into children and not grandchildren
+        public NonLazyBinder CopyIntoDirectSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.CopyDirectOnly);
+            return this;
+        }
+
+        // Do not apply the binding on the current container
+        public NonLazyBinder MoveIntoAllSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.MoveIntoAll);
+            return this;
+        }
+
+        // Do not apply the binding on the current container
+        public NonLazyBinder MoveIntoDirectSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.MoveDirectOnly);
+            return this;
+        }
+
+        void SetInheritanceMethod(BindingInheritanceMethods method)
+        {
+            BindInfo.BindingInheritanceMethod = method;
+
+            if (_secondaryBindInfos != null)
+            {
+                foreach (var secondaryBindInfo in _secondaryBindInfos)
+                {
+                    secondaryBindInfo.BindingInheritanceMethod = method;
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..a8fbbfd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/CopyNonLazyBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 6cf2e5d7a11cf6c418960ff59949b5fa
+timeCreated: 1483833202
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..e47c270
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,24 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(
+            SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo)
+            : base(bindInfo)
+        {
+            SubContainerCreatorBindInfo = subContainerBindInfo;
+        }
+
+        protected SubContainerCreatorBindInfo SubContainerCreatorBindInfo
+        {
+            get; private set;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithDefaultGameObjectParent(string defaultParentName)
+        {
+            SubContainerCreatorBindInfo.DefaultParentName = defaultParentName;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..8fb3526
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: f6b4e164706b85c408cd7e8f28266747
+timeCreated: 1535254660
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory.meta b/Assets/Source/Runtime/Binding/Binders/Factory.meta
new file mode 100644
index 0000000..38471df
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 580f48a64cf849041937c7ad570aaf89
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder.meta
new file mode 100644
index 0000000..684d028
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 3fd0e848e31df144fbbeab59a2c137e2
+folderAsset: yes
+timeCreated: 1528637818
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs
new file mode 100644
index 0000000..70eaa44
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TContract> : FactoryToChoiceBinder<TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2>(TParam1 param1, TParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3>(
+            TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs.meta
new file mode 100644
index 0000000..dc51afd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder0.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ca3197650e9628a45b99e79b8dea27d9
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs
new file mode 100644
index 0000000..480e4a4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TContract> : FactoryToChoiceBinder<TParam1, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs.meta
new file mode 100644
index 0000000..6ceaecc
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder1.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: a37e124df695f644e87579f08ea443f7
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs
new file mode 100644
index 0000000..d8d043f
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs.meta
new file mode 100644
index 0000000..cf501be
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder10.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 614bb4e31afa5154487c94e128e9461a
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs
new file mode 100644
index 0000000..48b49b5
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs.meta
new file mode 100644
index 0000000..03b0997
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder2.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 3b450191ad6422c4f841a99cdf3d108a
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs
new file mode 100644
index 0000000..f0f5b46
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs.meta
new file mode 100644
index 0000000..933a645
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder3.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 667d9c959f8ba004f86c8202d637f9ce
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs
new file mode 100644
index 0000000..eee66e6
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs.meta
new file mode 100644
index 0000000..d49815c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder4.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ce44f168dd48e1442b43a43c925abc47
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs
new file mode 100644
index 0000000..dbd7ffd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs.meta
new file mode 100644
index 0000000..7d13097
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder5.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: f3c4d5776729d2d4abae523dd6dce595
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs
new file mode 100644
index 0000000..304e9eb
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs
@@ -0,0 +1,71 @@
+using System.Collections.Generic;
+using System.Linq;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+    {
+        public FactoryArgumentsToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // We use generics instead of params object[] so that we preserve type info
+        // So that you can for example pass in a variable that is null and the type info will
+        // still be used to map null on to the correct field
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<T>(T param)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2>(TFactoryParam1 param1, TFactoryParam2 param2)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments<TFactoryParam1, TFactoryParam2, TFactoryParam3, TFactoryParam4, TFactoryParam5, TFactoryParam6>(
+            TFactoryParam1 param1, TFactoryParam2 param2, TFactoryParam3 param3, TFactoryParam4 param4, TFactoryParam5 param5, TFactoryParam6 param6)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgListExplicit(param1, param2, param3, param4, param5, param6);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArguments(object[] args)
+        {
+            FactoryBindInfo.Arguments = InjectUtil.CreateArgList(args);
+            return this;
+        }
+
+        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithFactoryArgumentsExplicit(IEnumerable<TypeValuePair> extraArgs)
+        {
+            FactoryBindInfo.Arguments = extraArgs.ToList();
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs.meta
new file mode 100644
index 0000000..e65ab57
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryArgumentsToChoiceBinder/FactoryArgumentsToChoiceBinder6.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 22836272211e07a459544765e2e7c098
+timeCreated: 1528637818
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder.meta
new file mode 100644
index 0000000..00719d6
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: aa754ab1fdfa8714fb6eddd17108e5c6
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs
new file mode 100644
index 0000000..28338a4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs
@@ -0,0 +1,182 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TContract> : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj>(null, method);
+        }
+
+        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(
+            object subIdentifier, Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj>(subIdentifier, method, InjectSources.Any);
+        }
+
+        public ConditionCopyNonLazyBinder FromResolveGetter<TObj>(
+            object subIdentifier, Func<TObj, TContract> method, InjectSources source)
+        {
+            FactoryBindInfo.ProviderFunc =
+                (container) => new GetterProvider<TObj, TContract>(subIdentifier, method, container, source, false);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(Func<DiContainer, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ArgConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+
+#if !NOT_UNITY3D
+
+        public ConditionCopyNonLazyBinder FromComponentInHierarchy(
+            bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(ContractType);
+
+            return FromMethod(_ =>
+                {
+                    var res = BindContainer.Resolve<Context>().GetRootGameObjects()
+                        .Select(x => x.GetComponentInChildren<TContract>(includeInactive))
+                        .Where(x => x != null).FirstOrDefault();
+
+                    Assert.IsNotNull(res,
+                        "Could not find component '{0}' through FromComponentInHierarchy factory binding", typeof(TContract));
+
+                    return res;
+                });
+        }
+#endif
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder0Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(
+            this FactoryFromBinder<TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<IMemoryPool>
+            where TMemoryPool : MemoryPool<IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>().WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(
+            this FactoryFromBinder<TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract>(
+            this FactoryFromBinder<TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TContract, PoolableMemoryPool<IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(
+            this FactoryFromBinder<TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TContract>(
+            this FactoryFromBinder<TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TContract, MonoPoolableMemoryPool<IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TContract, TMemoryPool>(
+            this FactoryFromBinder<TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<IMemoryPool>
+            where TMemoryPool : MemoryPool<IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TContract>(
+            this FactoryFromBinder<TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs.meta
new file mode 100644
index 0000000..b2a0473
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder0.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: fd0f7feaafd2cc44da895162de285da7
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs
new file mode 100644
index 0000000..d97fb52
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs
@@ -0,0 +1,140 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TContract> : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(Func<DiContainer, TParam1, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder1Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TContract>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TContract, PoolableMemoryPool<TParam1, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TContract>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TContract, MonoPoolableMemoryPool<TParam1, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>().WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs.meta
new file mode 100644
index 0000000..5ab6707
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder1.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 57ab0b3d05763f14fb530d07a5acd481
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs
new file mode 100644
index 0000000..a13be59
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs
@@ -0,0 +1,62 @@
+using System;
+
+#if !NOT_UNITY3D
+
+#endif
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+                Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> method)
+        {
+            ProviderFunc =
+                container => new MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        {
+            return FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public ArgConditionCopyNonLazyBinder FromIFactory(
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                CreateIFactoryBinder<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>>(out factoryId));
+
+            ProviderFunc =
+                container => { return new IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs.meta
new file mode 100644
index 0000000..6e05cf8
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder10.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: d835e30b6131d754e892d6f397e9921a
+timeCreated: 1507270780
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs
new file mode 100644
index 0000000..0793774
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs
@@ -0,0 +1,141 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TContract> : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(Func<DiContainer, TParam1, TParam2, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TParam2, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder2Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TParam2, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TParam2, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TContract, PoolableMemoryPool<TParam1, TParam2, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TContract, MonoPoolableMemoryPool<TParam1, TParam2, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>()
+                .WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TParam2, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs.meta
new file mode 100644
index 0000000..9eb0704
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder2.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a36f88760754c1c498ab3270dfb88b72
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs
new file mode 100644
index 0000000..c840a8a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs
@@ -0,0 +1,141 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TParam3, TContract> : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(Func<DiContainer, TParam1, TParam2, TParam3, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TParam2, TParam3, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TParam3, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder3Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TParam2, TParam3, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TParam2, TParam3, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, PoolableMemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, MonoPoolableMemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>()
+                .WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs.meta
new file mode 100644
index 0000000..6a7b7dd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder3.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 4eb3a4d5d01c55748b43f48a1da3c7b6
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs
new file mode 100644
index 0000000..eb5dcf3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs
@@ -0,0 +1,145 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TParam3, TParam4, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder4Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TParam4, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TParam2, TParam3, TParam4, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>()
+                .WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs.meta
new file mode 100644
index 0000000..5415a05
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder4.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e67ee9caa78de914a9c727a607c3d8c0
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs
new file mode 100644
index 0000000..0903628
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs
@@ -0,0 +1,146 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder5Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>()
+                .WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs.meta
new file mode 100644
index 0000000..f2ce519
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder5.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 901200be3b8d1cc40876aa50a03103b8
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs
new file mode 100644
index 0000000..db9a917
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs
@@ -0,0 +1,148 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        : FactoryFromBinderBase
+    {
+        public FactoryFromBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, typeof(TContract), bindInfo, factoryBindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder FromMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> method)
+        {
+            ProviderFunc =
+                (container) => new MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(method);
+
+            return this;
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ConditionCopyNonLazyBinder FromFactory<TSubFactory>()
+            where TSubFactory : IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        {
+            return this.FromIFactory(x => x.To<TSubFactory>().AsCached());
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> FromSubContainerResolve(object subIdentifier)
+        {
+            return new FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+                BindContainer, BindInfo, FactoryBindInfo, subIdentifier);
+        }
+    }
+
+    // These methods have to be extension methods for the UWP build (with .NET backend) to work correctly
+    // When these are instance methods it takes a really long time then fails with StackOverflowException
+    public static class FactoryFromBinder6Extensions
+    {
+        public static ArgConditionCopyNonLazyBinder FromIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder,
+            Action<ConcreteBinderGeneric<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>>> factoryBindGenerator)
+        {
+            Guid factoryId;
+            factoryBindGenerator(
+                fromBinder.CreateIFactoryBinder<IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>>(out factoryId));
+
+            fromBinder.ProviderFunc =
+                (container) => { return new IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(container, factoryId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+
+#if !NOT_UNITY3D
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+        {
+            return fromBinder.FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromMonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>>(poolBindGenerator);
+        }
+#endif
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>
+        {
+            return fromBinder.FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(x => {});
+        }
+
+        public static ArgConditionCopyNonLazyBinder FromPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(
+            this FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> fromBinder,
+            Action<MemoryPoolInitialSizeMaxSizeBinder<TContract>> poolBindGenerator)
+            // Unfortunately we have to pass the same contract in again to satisfy the generic
+            // constraints below
+            where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+            where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>
+        {
+            Assert.IsEqual(typeof(TContract), typeof(TContract));
+
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var poolId = Guid.NewGuid();
+
+            // Important to use NoFlush otherwise the binding will be finalized early
+            var binder = fromBinder.BindContainer.BindMemoryPoolCustomInterfaceNoFlush<TContract, TMemoryPool, TMemoryPool>()
+                .WithId(poolId);
+
+            // Always make it non lazy by default in case the user sets an InitialSize
+            binder.NonLazy();
+
+            poolBindGenerator(binder);
+
+            fromBinder.ProviderFunc =
+                (container) => { return new PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool>(container, poolId); };
+
+            return new ArgConditionCopyNonLazyBinder(fromBinder.BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs.meta
new file mode 100644
index 0000000..06fc6ab
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/FactoryFromBinder6.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b79f4e548e208b1418f013d2fdb0e076
+timeCreated: 1528529860
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder.meta
new file mode 100644
index 0000000..7fd1151
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 17d1fc460074cfc419ffecab2a7e97e8
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs
new file mode 100644
index 0000000..93c71bd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs
@@ -0,0 +1,143 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TContract>
+        : FactorySubContainerBinderBase<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(Action<DiContainer> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(Action<DiContainer> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Action<DiContainer> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab, Action<DiContainer> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath, Action<DiContainer> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        [System.Obsolete("ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab)
+        {
+            return ByNewContextPrefab(prefab);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefab(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        [System.Obsolete("ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath)
+        {
+            return ByNewContextPrefabResource(resourcePath);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefab(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs.meta
new file mode 100644
index 0000000..e68d9a4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder0.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3c12d5eb6ac4cc8449986d020ef27e4f
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs
new file mode 100644
index 0000000..d600346
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs
@@ -0,0 +1,97 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(Action<DiContainer, TParam1> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+            Action<DiContainer, TParam1> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Action<DiContainer, TParam1> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab, Action<DiContainer, TParam1> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath, Action<DiContainer, TParam1> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs.meta
new file mode 100644
index 0000000..e0ae7f9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder1.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b119fe818c4bae143ab8f9a4f2a1b0fd
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs
new file mode 100644
index 0000000..10e3ac9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs
@@ -0,0 +1,113 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>( container,
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>( container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>( container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>( container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs.meta
new file mode 100644
index 0000000..7cc4e44
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder10.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 3b6136acd174dfc4d9b9d3f2b9e110e4
+timeCreated: 1507270779
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs
new file mode 100644
index 0000000..b3f6e18
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs
@@ -0,0 +1,97 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(Action<DiContainer, TParam1, TParam2> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc = 
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+            Action<DiContainer, TParam1, TParam2> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Action<DiContainer, TParam1, TParam2> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab, Action<DiContainer, TParam1, TParam2> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath, Action<DiContainer, TParam1, TParam2> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs.meta
new file mode 100644
index 0000000..58b2722
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder2.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5f32bdc495dbe204caab18bace045515
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs
new file mode 100644
index 0000000..66ecc33
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs
@@ -0,0 +1,98 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+            Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab, Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath, Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs.meta
new file mode 100644
index 0000000..efc469c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder3.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: fdb97e2862ca0a24e8f87c081ea05727
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs
new file mode 100644
index 0000000..490adaf
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs
@@ -0,0 +1,116 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs.meta
new file mode 100644
index 0000000..9025a41
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b0f061434819b334289a066ab685ab37
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs
new file mode 100644
index 0000000..52fc3c9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs
@@ -0,0 +1,115 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs.meta
new file mode 100644
index 0000000..bc11daa
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder5.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e562a021e16d4a2418f6c47de105c64e
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs
new file mode 100644
index 0000000..fa4300e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs
@@ -0,0 +1,115 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        : FactorySubContainerBinderWithParams<TContract>
+    {
+        public FactorySubContainerBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+        {
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+                        container, subcontainerBindInfo, installerMethod), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+                        container, gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerMethod), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs.meta
new file mode 100644
index 0000000..9db45d8
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder6.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 6bc525cf91bd29644ab941902ab4a8d2
+timeCreated: 1528529860
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs
new file mode 100644
index 0000000..a5b7a27
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs
@@ -0,0 +1,179 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinderBase<TContract>
+    {
+        public FactorySubContainerBinderBase(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+        {
+            FactoryBindInfo = factoryBindInfo;
+            SubIdentifier = subIdentifier;
+            BindInfo = bindInfo;
+            BindContainer = bindContainer;
+
+            // Reset so we get errors if we end here
+            factoryBindInfo.ProviderFunc = null;
+        }
+
+        protected DiContainer BindContainer
+        {
+            get; private set;
+        }
+
+        protected FactoryBindInfo FactoryBindInfo
+        {
+            get; private set;
+        }
+
+        protected Func<DiContainer, IProvider> ProviderFunc
+        {
+            get { return FactoryBindInfo.ProviderFunc; }
+            set { FactoryBindInfo.ProviderFunc = value; }
+        }
+
+        protected BindInfo BindInfo
+        {
+            get;
+            private set;
+        }
+
+        protected object SubIdentifier
+        {
+            get;
+            private set;
+        }
+
+        protected Type ContractType
+        {
+            get { return typeof(TContract); }
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller<TInstaller>()
+            where TInstaller : InstallerBase
+        {
+            return ByInstaller(typeof(TInstaller));
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstaller(Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var subcontainerBindInfo = new SubContainerCreatorBindInfo();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByInstaller(
+                        container, subcontainerBindInfo, installerType, BindInfo.Arguments), false);
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+#if !NOT_UNITY3D
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>()
+            where TInstaller : InstallerBase
+        {
+            return ByNewGameObjectInstaller(typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewGameObjectInstaller(
+                        container, gameObjectInfo, installerType, BindInfo.Arguments), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(
+            Func<InjectContext, UnityEngine.Object> prefabGetter)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabInstaller(prefabGetter, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabInstaller(
+                        container,
+                        new PrefabProviderCustom(prefabGetter),
+                        gameObjectInfo, installerType, BindInfo.Arguments), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(
+            UnityEngine.Object prefab)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabInstaller(prefab, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(
+            UnityEngine.Object prefab, Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabInstaller(
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo, installerType, BindInfo.Arguments), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(
+            string resourcePath)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabResourceInstaller(resourcePath, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(
+            string resourcePath, Type installerType)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabInstaller(
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo, installerType, BindInfo.Arguments), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs.meta
new file mode 100644
index 0000000..97ad77f
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 387c12fd770c48e49bcefe4c0723d511
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs
new file mode 100644
index 0000000..a07d20c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs
@@ -0,0 +1,96 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactorySubContainerBinderWithParams<TContract> : FactorySubContainerBinderBase<TContract>
+    {
+        public FactorySubContainerBinderWithParams(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)
+            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)
+        {
+        }
+
+#if !NOT_UNITY3D
+
+        [System.Obsolete("ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(Type installerType, UnityEngine.Object prefab)
+        {
+            return ByNewContextPrefab(installerType, prefab);
+        }
+
+        [System.Obsolete("ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab<TInstaller>(UnityEngine.Object prefab)
+            where TInstaller : IInstaller
+        {
+            return ByNewContextPrefab<TInstaller>(prefab);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab<TInstaller>(UnityEngine.Object prefab)
+            where TInstaller : IInstaller
+        {
+            return ByNewContextPrefab(typeof(TInstaller), prefab);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(Type installerType, UnityEngine.Object prefab)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            Assert.That(installerType.DerivesFrom<MonoInstaller>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'MonoInstaller'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc = 
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabWithParams(
+                        installerType,
+                        container,
+                        new PrefabProvider(prefab),
+                        gameObjectInfo), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        [System.Obsolete("ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource<TInstaller>(string resourcePath)
+            where TInstaller : IInstaller
+        {
+            return ByNewContextPrefabResource<TInstaller>(resourcePath);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(
+            Type installerType, string resourcePath)
+        {
+            return ByNewContextPrefabResource(installerType, resourcePath);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource<TInstaller>(string resourcePath)
+            where TInstaller : IInstaller
+        {
+            return ByNewContextPrefabResource(typeof(TInstaller), resourcePath);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(
+            Type installerType, string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc = 
+                (container) => new SubContainerDependencyProvider(
+                    ContractType, SubIdentifier,
+                    new SubContainerCreatorByNewPrefabWithParams(
+                        installerType,
+                        container,
+                        new PrefabProviderResource(resourcePath),
+                        gameObjectInfo), false);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs.meta
new file mode 100644
index 0000000..8a3bc94
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinderWithParams.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a002e9dce4e8af54d948529d6beda84b
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped.meta
new file mode 100644
index 0000000..3559ab4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 97d57d9da80f7414a8fed9f2a04621b8
+folderAsset: yes
+timeCreated: 1512304190
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs
new file mode 100644
index 0000000..bc8dc0b
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs
@@ -0,0 +1,16 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinderUntyped : FactoryFromBinderBase
+    {
+        public FactoryFromBinderUntyped(
+            DiContainer bindContainer, Type contractType, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, contractType, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // TODO - add similar methods found in FactoryFromBinder<>
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs.meta
new file mode 100644
index 0000000..b56a974
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinder/Untyped/FactoryFromBinderUntyped.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ed1989ebc010d0746ab301cc5747f5c8
+timeCreated: 1512304191
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs
new file mode 100644
index 0000000..cbad75e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs
@@ -0,0 +1,297 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryFromBinderBase : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public FactoryFromBinderBase(
+            DiContainer bindContainer, Type contractType, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindInfo)
+        {
+            FactoryBindInfo = factoryBindInfo;
+            BindContainer = bindContainer;
+            ContractType = contractType;
+            factoryBindInfo.ProviderFunc =
+                (container) => new TransientProvider(
+                    ContractType, container, BindInfo.Arguments, BindInfo.ContextInfo, BindInfo.ConcreteIdentifier,
+                    BindInfo.InstantiatedCallback);
+        }
+
+        // Don't use this
+        internal DiContainer BindContainer
+        {
+            get; private set;
+        }
+
+        protected FactoryBindInfo FactoryBindInfo
+        {
+            get; private set;
+        }
+
+        // Don't use this
+        internal Func<DiContainer, IProvider> ProviderFunc
+        {
+            get { return FactoryBindInfo.ProviderFunc; }
+            set { FactoryBindInfo.ProviderFunc = value; }
+        }
+
+        protected Type ContractType
+        {
+            get; private set;
+        }
+
+        public IEnumerable<Type> AllParentTypes
+        {
+            get
+            {
+                yield return ContractType;
+
+                foreach (var type in BindInfo.ToTypes)
+                {
+                    yield return type;
+                }
+            }
+        }
+
+        // Note that this isn't necessary to call since it's the default
+        public ConditionCopyNonLazyBinder FromNew()
+        {
+            BindingUtil.AssertIsNotComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromResolve()
+        {
+            return FromResolve(null);
+        }
+
+        public ConditionCopyNonLazyBinder FromInstance(object instance)
+        {
+            BindingUtil.AssertInstanceDerivesFromOrEqual(instance, AllParentTypes);
+
+            ProviderFunc =
+                (container) => new InstanceProvider(ContractType, instance, container, null);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromResolve(object subIdentifier)
+        {
+            ProviderFunc =
+                (container) => new ResolveProvider(
+                    ContractType, container,
+                    subIdentifier, false, InjectSources.Any, false);
+
+            return this;
+        }
+
+        // Don't use this
+        internal ConcreteBinderGeneric<T> CreateIFactoryBinder<T>(out Guid factoryId)
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            factoryId = Guid.NewGuid();
+
+            // Very important here that we use NoFlush otherwise the main binding will be finalized early
+            return BindContainer.BindNoFlush<T>().WithId(factoryId);
+        }
+
+#if !NOT_UNITY3D
+
+        public ConditionCopyNonLazyBinder FromComponentOn(GameObject gameObject)
+        {
+            BindingUtil.AssertIsValidGameObject(gameObject);
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            ProviderFunc =
+                (container) => new GetFromGameObjectComponentProvider(
+                    ContractType, gameObject, true);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromComponentOn(Func<InjectContext, GameObject> gameObjectGetter)
+        {
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            ProviderFunc =
+                (container) => new GetFromGameObjectGetterComponentProvider(
+                    ContractType, gameObjectGetter, true);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromComponentOnRoot()
+        {
+            return FromComponentOn(
+                ctx => BindContainer.Resolve<Context>().gameObject);
+        }
+
+        public ConditionCopyNonLazyBinder FromNewComponentOn(GameObject gameObject)
+        {
+            BindingUtil.AssertIsValidGameObject(gameObject);
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            ProviderFunc =
+                (container) => new AddToExistingGameObjectComponentProvider(
+                    gameObject, container, ContractType,
+                    BindInfo.Arguments, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromNewComponentOn(
+            Func<InjectContext, GameObject> gameObjectGetter)
+        {
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            ProviderFunc =
+                (container) => new AddToExistingGameObjectComponentProviderGetter(
+                    gameObjectGetter, container, ContractType,
+                    BindInfo.Arguments, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback);
+
+            return this;
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject()
+        {
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new AddToNewGameObjectComponentProvider(
+                    container, ContractType,
+                    BindInfo.Arguments, gameObjectInfo, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new InstantiateOnPrefabComponentProvider(
+                    ContractType,
+                    new PrefabInstantiator(
+                        container, gameObjectInfo,
+                        ContractType, new [] { ContractType }, BindInfo.Arguments,
+                        new PrefabProvider(prefab), BindInfo.InstantiatedCallback));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+            BindingUtil.AssertIsInterfaceOrComponent(ContractType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new GetFromPrefabComponentProvider(
+                    ContractType,
+                    new PrefabInstantiator(
+                        container, gameObjectInfo,
+                        ContractType, new [] { ContractType }, BindInfo.Arguments,
+                        new PrefabProvider(prefab),
+                        BindInfo.InstantiatedCallback), true);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrComponent(ContractType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new GetFromPrefabComponentProvider(
+                    ContractType,
+                    new PrefabInstantiator(
+                        container, gameObjectInfo,
+                        ContractType, new [] { ContractType }, BindInfo.Arguments,
+                        new PrefabProviderResource(resourcePath), BindInfo.InstantiatedCallback), true);
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsComponent(ContractType);
+            BindingUtil.AssertIsNotAbstract(ContractType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            ProviderFunc =
+                (container) => new InstantiateOnPrefabComponentProvider(
+                    ContractType,
+                    new PrefabInstantiator(
+                        container, gameObjectInfo,
+                        ContractType, new [] { ContractType }, BindInfo.Arguments,
+                        new PrefabProviderResource(resourcePath),
+                        BindInfo.InstantiatedCallback));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public ConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrScriptableObject(ContractType);
+
+            ProviderFunc =
+                (container) => new ScriptableObjectResourceProvider(
+                    resourcePath, ContractType, container, BindInfo.Arguments,
+                    true, null, BindInfo.InstantiatedCallback);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrScriptableObject(ContractType);
+
+            ProviderFunc =
+                (container) => new ScriptableObjectResourceProvider(
+                    resourcePath, ContractType, container, BindInfo.Arguments,
+                    false, null, BindInfo.InstantiatedCallback);
+
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder FromResource(string resourcePath)
+        {
+            BindingUtil.AssertDerivesFromUnityObject(ContractType);
+
+            ProviderFunc =
+                (container) => new ResourceProvider(resourcePath, ContractType, true);
+
+            return this;
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs.meta
new file mode 100644
index 0000000..2bac69e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryFromBinderBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1cdc9466c4b6c7f4f81675e8f546672f
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder.meta
new file mode 100644
index 0000000..0d34499
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: e1f8d57baff273344a3f10da1e51b772
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs
new file mode 100644
index 0000000..ef2d56a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs
@@ -0,0 +1,29 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DecoratorToChoiceFromBinder<TContract>
+    {
+        DiContainer _bindContainer;
+        BindInfo _bindInfo;
+        FactoryBindInfo _factoryBindInfo;
+
+        public DecoratorToChoiceFromBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+        {
+            _bindContainer = bindContainer;
+            _bindInfo = bindInfo;
+            _factoryBindInfo = factoryBindInfo;
+        }
+
+        public FactoryFromBinder<TContract, TConcrete> With<TConcrete>()
+            where TConcrete : TContract
+        {
+            _bindInfo.ToChoice = ToChoices.Concrete;
+            _bindInfo.ToTypes.Clear();
+            _bindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TContract, TConcrete>(
+                _bindContainer, _bindInfo, _factoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs.meta
new file mode 100644
index 0000000..b8546d0
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/DecoratorToChoiceFromBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: e70f91cb77703ce42ae6ad721b89d35c
+timeCreated: 1528372067
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs
new file mode 100644
index 0000000..55f7c6a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs
@@ -0,0 +1,42 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TContract> : FactoryFromBinder<TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinderUntyped To(Type concreteType)
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(concreteType);
+
+            return new FactoryFromBinderUntyped(
+                BindContainer, concreteType, BindInfo, FactoryBindInfo);
+        }
+
+        public FactoryFromBinder<TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs.meta
new file mode 100644
index 0000000..696f046
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder0.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 98bc5c26f28a00544afe116adee67cc2
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs
new file mode 100644
index 0000000..a840fe1
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs
@@ -0,0 +1,31 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TContract> : FactoryFromBinder<TParam1, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs.meta
new file mode 100644
index 0000000..f9fc082
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder1.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 388c17c735861d145903203b31cb190d
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs
new file mode 100644
index 0000000..dfad70e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs
@@ -0,0 +1,32 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        : FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs.meta
new file mode 100644
index 0000000..5712a9d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder10.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 4cdcd151f6d139642b7a2a6968c6ebd8
+timeCreated: 1507270779
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs
new file mode 100644
index 0000000..24ee228
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs
@@ -0,0 +1,32 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TContract> : FactoryFromBinder<TParam1, TParam2, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs.meta
new file mode 100644
index 0000000..f593953
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder2.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 59c18bddf62adaf46b1de0564bf02388
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs
new file mode 100644
index 0000000..add26ce
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs
@@ -0,0 +1,33 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> : FactoryFromBinder<TParam1, TParam2, TParam3, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs.meta
new file mode 100644
index 0000000..2c6a2b0
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a71cc77bd306cca459126294c63080b1
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs
new file mode 100644
index 0000000..07bcfa2
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs
@@ -0,0 +1,31 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> : FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs.meta
new file mode 100644
index 0000000..c2ab179
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder4.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: fee2c810a2ee8d2489a6a29177b48d82
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs
new file mode 100644
index 0000000..887ccea
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs
@@ -0,0 +1,32 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        : FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs.meta
new file mode 100644
index 0000000..98d8c87
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder5.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: dc472af8f2bc5bf498b8e85704193aac
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs
new file mode 100644
index 0000000..74a999d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs
@@ -0,0 +1,32 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        : FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+    {
+        public FactoryToChoiceBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        // Note that this is the default, so not necessary to call
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> ToSelf()
+        {
+            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);
+            return this;
+        }
+
+        public FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TConcrete> To<TConcrete>()
+            where TConcrete : TContract
+        {
+            BindInfo.ToChoice = ToChoices.Concrete;
+            BindInfo.ToTypes.Clear();
+            BindInfo.ToTypes.Add(typeof(TConcrete));
+
+            return new FactoryFromBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TConcrete>(BindContainer, BindInfo, FactoryBindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs.meta
new file mode 100644
index 0000000..48c8ed9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder6.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 4c738f3e9159a7e4f8450de246530f96
+timeCreated: 1528529860
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder.meta
new file mode 100644
index 0000000..7854787
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: ad3cf76cc0b1c154e868ae8b570a78b8
+folderAsset: yes
+timeCreated: 1484511595
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs
new file mode 100644
index 0000000..8b25c26
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TContract> : FactoryArgumentsToChoiceBinder<TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer container, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(container, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs.meta
new file mode 100644
index 0000000..df27539
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder0.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: dca817e151a0eac4480344dcf838b949
+timeCreated: 1484511596
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs
new file mode 100644
index 0000000..8032001
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs
@@ -0,0 +1,18 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TContract> : FactoryArgumentsToChoiceBinder<TParam1, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs.meta
new file mode 100644
index 0000000..74c19ba
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder1.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a005e8d2a91ae2647927c047c663d046
+timeCreated: 1484511596
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs
new file mode 100644
index 0000000..ff2e195
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs
@@ -0,0 +1,19 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs.meta
new file mode 100644
index 0000000..5bf959a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder10.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 3e0b2700788fac54698446fcfad2b705
+timeCreated: 1507270779
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs
new file mode 100644
index 0000000..9c25cf6
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs
@@ -0,0 +1,19 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TContract> : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs.meta
new file mode 100644
index 0000000..a665abe
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder2.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: c109e2a5fd72a004e83beae958fa888a
+timeCreated: 1484511596
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs
new file mode 100644
index 0000000..a15c462
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs.meta
new file mode 100644
index 0000000..2aade6a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder3.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: be02341a689ce654ab7160ce4eb5ed0e
+timeCreated: 1484511596
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs
new file mode 100644
index 0000000..9ddd8e9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs
@@ -0,0 +1,18 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs.meta
new file mode 100644
index 0000000..c0280fe
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder4.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e65744c901e080744aada3988bfdf11c
+timeCreated: 1484511596
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs
new file mode 100644
index 0000000..0dd45b3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs
@@ -0,0 +1,19 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs.meta
new file mode 100644
index 0000000..97a6def
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder5.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 20b01a4cfa147764a9e52134e2a32bb4
+timeCreated: 1484511595
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs
new file mode 100644
index 0000000..05e63e9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs
@@ -0,0 +1,19 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        : FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+    {
+        public FactoryToChoiceIdBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+        }
+
+        public FactoryArgumentsToChoiceBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs.meta
new file mode 100644
index 0000000..696bb68
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/FactoryToChoiceIdBinder/FactoryToChoiceIdBinder6.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b60ae0cff4748ec43b6cb040b0f3a728
+timeCreated: 1528529860
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs
new file mode 100644
index 0000000..fb8c67c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs
@@ -0,0 +1,50 @@
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PlaceholderFactoryBindingFinalizer<TContract> : ProviderBindingFinalizer
+    {
+        readonly FactoryBindInfo _factoryBindInfo;
+
+        public PlaceholderFactoryBindingFinalizer(
+            BindInfo bindInfo, FactoryBindInfo factoryBindInfo)
+            : base(bindInfo)
+        {
+            // Note that it doesn't derive from PlaceholderFactory<TContract>
+            // when used with To<>, so we can only check IPlaceholderFactory
+            Assert.That(factoryBindInfo.FactoryType.DerivesFrom<IPlaceholderFactory>());
+
+            _factoryBindInfo = factoryBindInfo;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            var provider = _factoryBindInfo.ProviderFunc(container);
+
+            var transientProvider = new TransientProvider(
+                _factoryBindInfo.FactoryType,
+                container,
+                _factoryBindInfo.Arguments.Concat(
+                    InjectUtil.CreateArgListExplicit(
+                        provider,
+                        new InjectContext(container, typeof(TContract)))).ToList(),
+                BindInfo.ContextInfo, BindInfo.ConcreteIdentifier, null);
+
+            IProvider mainProvider;
+
+            if (BindInfo.Scope == ScopeTypes.Unset || BindInfo.Scope == ScopeTypes.Singleton)
+            {
+                mainProvider = BindingUtil.CreateCachedProvider(transientProvider);
+            }
+            else
+            {
+                Assert.IsEqual(BindInfo.Scope, ScopeTypes.Transient);
+                mainProvider = transientProvider;
+            }
+
+            RegisterProviderForAllContracts(container, mainProvider);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs.meta
new file mode 100644
index 0000000..826fecd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/PlaceholderFactoryBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2a3880a3063c56747b32995b66a8a1ca
+timeCreated: 1486691381
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling.meta b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling.meta
new file mode 100644
index 0000000..bb1b952
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: a019116e68c18f342995df14d6fbcf87
+folderAsset: yes
+timeCreated: 1484511595
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs
new file mode 100644
index 0000000..3c1ba29
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs
@@ -0,0 +1,55 @@
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MemoryPoolBindingFinalizer<TContract> : ProviderBindingFinalizer
+    {
+        readonly MemoryPoolBindInfo _poolBindInfo;
+        readonly FactoryBindInfo _factoryBindInfo;
+
+        public MemoryPoolBindingFinalizer(
+            BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo)
+            : base(bindInfo)
+        {
+            // Note that it doesn't derive from MemoryPool<TContract>
+            // when used with To<>, so we can only check IMemoryPoolBase
+            Assert.That(factoryBindInfo.FactoryType.DerivesFrom<IMemoryPool>());
+
+            _factoryBindInfo = factoryBindInfo;
+            _poolBindInfo = poolBindInfo;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            var factory = new FactoryProviderWrapper<TContract>(
+                _factoryBindInfo.ProviderFunc(container), new InjectContext(container, typeof(TContract)));
+
+            var settings = new MemoryPoolSettings(
+                _poolBindInfo.InitialSize, _poolBindInfo.MaxSize, _poolBindInfo.ExpandMethod);
+
+            var transientProvider = new TransientProvider(
+                _factoryBindInfo.FactoryType,
+                container,
+                _factoryBindInfo.Arguments.Concat(
+                    InjectUtil.CreateArgListExplicit(factory, settings)).ToList(),
+                BindInfo.ContextInfo, BindInfo.ConcreteIdentifier, null);
+
+            IProvider mainProvider;
+
+            if (BindInfo.Scope == ScopeTypes.Unset || BindInfo.Scope == ScopeTypes.Singleton)
+            {
+                mainProvider = BindingUtil.CreateCachedProvider(transientProvider);
+            }
+            else
+            {
+                Assert.IsEqual(BindInfo.Scope, ScopeTypes.Transient);
+                mainProvider = transientProvider;
+            }
+
+            RegisterProviderForAllContracts(container, mainProvider);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs.meta
new file mode 100644
index 0000000..d8a1476
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 41eb30ac64078db4090dd136ccaf1fbe
+timeCreated: 1485699960
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs
new file mode 100644
index 0000000..75cce20
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs
@@ -0,0 +1,33 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MemoryPoolExpandBinder<TContract> : FactoryArgumentsToChoiceBinder<TContract>
+    {
+        public MemoryPoolExpandBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo)
+        {
+            MemoryPoolBindInfo = poolBindInfo;
+
+            ExpandByOneAtATime();
+        }
+
+        protected MemoryPoolBindInfo MemoryPoolBindInfo
+        {
+            get; private set;
+        }
+
+        public FactoryArgumentsToChoiceBinder<TContract> ExpandByOneAtATime()
+        {
+            MemoryPoolBindInfo.ExpandMethod = PoolExpandMethods.OneAtATime;
+            return this;
+        }
+
+        public FactoryArgumentsToChoiceBinder<TContract> ExpandByDoubling()
+        {
+            MemoryPoolBindInfo.ExpandMethod = PoolExpandMethods.Double;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs.meta
new file mode 100644
index 0000000..b28207d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolExpandBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 95b7c7be81364a740b952460f5a07bbf
+timeCreated: 1485699961
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs
new file mode 100644
index 0000000..284f2d9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs
@@ -0,0 +1,59 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MemoryPoolMaxSizeBinder<TContract> : MemoryPoolExpandBinder<TContract>
+    {
+        public MemoryPoolMaxSizeBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo, poolBindInfo)
+        {
+        }
+
+        public MemoryPoolExpandBinder<TContract> WithMaxSize(int size)
+        {
+            MemoryPoolBindInfo.MaxSize = size;
+            return this;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class MemoryPoolInitialSizeMaxSizeBinder<TContract> : MemoryPoolMaxSizeBinder<TContract>
+    {
+        public MemoryPoolInitialSizeMaxSizeBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo, poolBindInfo)
+        {
+        }
+
+        public MemoryPoolMaxSizeBinder<TContract> WithInitialSize(int size)
+        {
+            MemoryPoolBindInfo.InitialSize = size;
+            return this;
+        }
+
+        public FactoryArgumentsToChoiceBinder<TContract> WithFixedSize(int size)
+        {
+            MemoryPoolBindInfo.InitialSize = size;
+            MemoryPoolBindInfo.MaxSize = size;
+            MemoryPoolBindInfo.ExpandMethod = PoolExpandMethods.Disabled;
+            return this;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class MemoryPoolIdInitialSizeMaxSizeBinder<TContract> : MemoryPoolInitialSizeMaxSizeBinder<TContract>
+    {
+        public MemoryPoolIdInitialSizeMaxSizeBinder(
+            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, MemoryPoolBindInfo poolBindInfo)
+            : base(bindContainer, bindInfo, factoryBindInfo, poolBindInfo)
+        {
+        }
+
+        public MemoryPoolInitialSizeMaxSizeBinder<TContract> WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs.meta
new file mode 100644
index 0000000..2a903e1
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/Factory/Pooling/MemoryPoolInitialSizeBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 80ff9e6d501d30d4a82639f4ae453712
+timeCreated: 1485699961
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders.meta b/Assets/Source/Runtime/Binding/Binders/FromBinders.meta
new file mode 100644
index 0000000..c8ba425
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: b62c8a25fc0c5d34680c100f745a80e1
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs
new file mode 100644
index 0000000..39e5793
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs
@@ -0,0 +1,880 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using System.Linq;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public abstract class FromBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public FromBinder(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindInfo)
+        {
+            BindStatement = bindStatement;
+            BindContainer = bindContainer;
+        }
+
+        protected DiContainer BindContainer
+        {
+            get; private set;
+        }
+
+        protected BindStatement BindStatement
+        {
+            get;
+            private set;
+        }
+
+        protected IBindingFinalizer SubFinalizer
+        {
+            set { BindStatement.SetFinalizer(value); }
+        }
+
+        protected IEnumerable<Type> AllParentTypes
+        {
+            get { return BindInfo.ContractTypes.Concat(BindInfo.ToTypes); }
+        }
+
+        protected IEnumerable<Type> ConcreteTypes
+        {
+            get
+            {
+                if (BindInfo.ToChoice == ToChoices.Self)
+                {
+                    return BindInfo.ContractTypes;
+                }
+
+                Assert.IsNotEmpty(BindInfo.ToTypes);
+                return BindInfo.ToTypes;
+            }
+        }
+
+        // This is the default if nothing else is called
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNew()
+        {
+            BindingUtil.AssertTypesAreNotComponents(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve()
+        {
+            return FromResolve(null);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier)
+        {
+            return FromResolve(subIdentifier, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolve(object subIdentifier, InjectSources source)
+        {
+            return FromResolveInternal(subIdentifier, false, source);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll()
+        {
+            return FromResolveAll(null);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier)
+        {
+            return FromResolveAll(subIdentifier, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAll(object subIdentifier, InjectSources source)
+        {
+            return FromResolveInternal(subIdentifier, true, source);
+        }
+
+        ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveInternal(object subIdentifier, bool matchAll, InjectSources source)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new ResolveProvider(
+                    type, container, subIdentifier, false, source, matchAll));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public SubContainerBinder FromSubContainerResolveAll()
+        {
+            return FromSubContainerResolveAll(null);
+        }
+
+        public SubContainerBinder FromSubContainerResolveAll(object subIdentifier)
+        {
+            return FromSubContainerResolveInternal(subIdentifier, true);
+        }
+
+        public SubContainerBinder FromSubContainerResolve()
+        {
+            return FromSubContainerResolve(null);
+        }
+
+        public SubContainerBinder FromSubContainerResolve(object subIdentifier)
+        {
+            return FromSubContainerResolveInternal(subIdentifier, false);
+        }
+
+        SubContainerBinder FromSubContainerResolveInternal(
+            object subIdentifier, bool resolveAll)
+        {
+            // It's unlikely they will want to create the whole subcontainer with each binding
+            // (aka transient) which is the default so require that they specify it
+            BindInfo.RequireExplicitScope = true;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            return new SubContainerBinder(
+                BindInfo, BindStatement, subIdentifier, resolveAll);
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactoryBase<TContract>(
+            Action<ConcreteBinderGeneric<IFactory<TContract>>> factoryBindGenerator)
+        {
+            // Use a random ID so that our provider is the only one that can find it and so it doesn't
+            // conflict with anything else
+            var factoryId = Guid.NewGuid();
+
+            // Important to use NoFlush here otherwise the main binding will finalize early
+            var subBinder = BindContainer.BindNoFlush<IFactory<TContract>>()
+                .WithId(factoryId);
+
+            factoryBindGenerator(subBinder);
+
+            // This is kind of like a look up method like FromMethod so don't enforce specifying scope
+            // The internal binding will require an explicit scope so should be obvious enough
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new IFactoryProvider<TContract>(container, factoryId));
+
+            var binder = new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+            // Needed for example if the user uses MoveIntoDirectSubContainers
+            binder.AddSecondaryCopyBindInfo(subBinder.BindInfo);
+            return binder;
+        }
+
+#if !NOT_UNITY3D
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(GameObject gameObject)
+        {
+            BindingUtil.AssertIsValidGameObject(gameObject);
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new GetFromGameObjectComponentProvider(
+                    type, gameObject, false));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(GameObject gameObject)
+        {
+            BindingUtil.AssertIsValidGameObject(gameObject);
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new GetFromGameObjectComponentProvider(
+                    type, gameObject, true));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOn(Func<InjectContext, GameObject> gameObjectGetter)
+        {
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new GetFromGameObjectGetterComponentProvider(
+                    type, gameObjectGetter, false));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOn(Func<InjectContext, GameObject> gameObjectGetter)
+        {
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new GetFromGameObjectGetterComponentProvider(
+                    type, gameObjectGetter, true));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsOnRoot()
+        {
+            return FromComponentsOn(
+                ctx => ctx.Container.Resolve<Context>().gameObject);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentOnRoot()
+        {
+            return FromComponentOn(
+                ctx => ctx.Container.Resolve<Context>().gameObject);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(GameObject gameObject)
+        {
+            BindingUtil.AssertIsValidGameObject(gameObject);
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new AddToExistingGameObjectComponentProvider(
+                    gameObject, container, type, BindInfo.Arguments, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOn(Func<InjectContext, GameObject> gameObjectGetter)
+        {
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new AddToExistingGameObjectComponentProviderGetter(
+                    gameObjectGetter, container, type, BindInfo.Arguments, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentSibling()
+        {
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new SingleProviderBindingFinalizer(
+                BindInfo, (container, type) => new AddToCurrentGameObjectComponentProvider(
+                    container, type, BindInfo.Arguments, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnRoot()
+        {
+            return FromNewComponentOn(
+                ctx => ctx.Container.Resolve<Context>().gameObject);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject()
+        {
+            return FromNewComponentOnNewGameObject(new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewGameObject(
+            GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new AddToNewGameObjectComponentProvider(
+                    container,
+                    type,
+                    BindInfo.Arguments,
+                    gameObjectInfo, BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(string resourcePath)
+        {
+            return FromNewComponentOnNewPrefabResource(resourcePath, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefabResource(
+            string resourcePath, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabResourceBindingFinalizer(
+                BindInfo, gameObjectInfo, resourcePath,
+                (contractType, instantiator) => new InstantiateOnPrefabComponentProvider(contractType, instantiator));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(UnityEngine.Object prefab)
+        {
+            return FromNewComponentOnNewPrefab(prefab, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromNewComponentOnNewPrefab(
+            UnityEngine.Object prefab, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+            BindingUtil.AssertIsComponent(ConcreteTypes);
+            BindingUtil.AssertTypesAreNotAbstract(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabBindingFinalizer(
+                BindInfo, gameObjectInfo, prefab,
+                (contractType, instantiator) =>
+                    new InstantiateOnPrefabComponentProvider(contractType, instantiator));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(UnityEngine.Object prefab)
+        {
+            return FromComponentInNewPrefab(
+                prefab, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefab(
+            UnityEngine.Object prefab, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabBindingFinalizer(
+                BindInfo, gameObjectInfo, prefab,
+                (contractType, instantiator) => new GetFromPrefabComponentProvider(contractType, instantiator, true));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefab(UnityEngine.Object prefab)
+        {
+            return FromComponentsInNewPrefab(
+                prefab, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefab(
+            UnityEngine.Object prefab, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabBindingFinalizer(
+                BindInfo, gameObjectInfo, prefab,
+                (contractType, instantiator) => new GetFromPrefabComponentProvider(contractType, instantiator, false));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(string resourcePath)
+        {
+            return FromComponentInNewPrefabResource(resourcePath, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInNewPrefabResource(
+            string resourcePath, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabResourceBindingFinalizer(
+                BindInfo, gameObjectInfo, resourcePath,
+                (contractType, instantiator) => new GetFromPrefabComponentProvider(contractType, instantiator, true));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefabResource(string resourcePath)
+        {
+            return FromComponentsInNewPrefabResource(resourcePath, new GameObjectCreationParameters());
+        }
+
+        internal NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInNewPrefabResource(
+            string resourcePath, GameObjectCreationParameters gameObjectInfo)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new PrefabResourceBindingFinalizer(
+                BindInfo, gameObjectInfo, resourcePath,
+                (contractType, instantiator) => new GetFromPrefabComponentProvider(contractType, instantiator, false));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObject(ScriptableObject resource)
+        {
+            return FromScriptableObjectInternal(resource, true);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObject(ScriptableObject resource)
+        {
+            return FromScriptableObjectInternal(resource, false);
+        }
+
+        ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObjectInternal(
+            ScriptableObject resource, bool createNew)
+        {
+            BindingUtil.AssertIsInterfaceOrScriptableObject(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new ScriptableObjectInstanceProvider(
+                    resource, type, container, BindInfo.Arguments, createNew,
+                    BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromNewScriptableObjectResource(string resourcePath)
+        {
+            return FromScriptableObjectResourceInternal(resourcePath, true);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObjectResource(string resourcePath)
+        {
+            return FromScriptableObjectResourceInternal(resourcePath, false);
+        }
+
+        ScopeConcreteIdArgConditionCopyNonLazyBinder FromScriptableObjectResourceInternal(
+            string resourcePath, bool createNew)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            BindingUtil.AssertIsInterfaceOrScriptableObject(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new ScriptableObjectResourceProvider(
+                    resourcePath, type, container, BindInfo.Arguments, createNew,
+                    BindInfo.ConcreteIdentifier, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResource(string resourcePath)
+        {
+            BindingUtil.AssertDerivesFromUnityObject(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (_, type) => new ResourceProvider(resourcePath, type, true));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResources(string resourcePath)
+        {
+            BindingUtil.AssertDerivesFromUnityObject(ConcreteTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (_, type) => new ResourceProvider(resourcePath, type, false));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInChildren(
+            bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentInChildren to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        var match = monoBehaviour.GetComponentInChildren(concreteType, includeInactive);
+
+                        if (match == null)
+                        {
+                            Assert.That(ctx.Optional,
+                                "Could not find any component with type '{0}' through FromComponentInChildren binding", concreteType);
+                            return Enumerable.Empty<object>();
+                        }
+
+                        return new object[] { match };
+                    },
+                    container));
+
+            return this;
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildrenBase(
+            bool excludeSelf, Func<Component, bool> predicate, bool includeInactive)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentsInChildren to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        var res = monoBehaviour.GetComponentsInChildren(concreteType, includeInactive)
+                            .Where(x => !ReferenceEquals(x, ctx.ObjectInstance));
+
+                        if (excludeSelf)
+                        {
+                            res = res.Where(x => x.gameObject != monoBehaviour.gameObject);
+                        }
+
+                        if (predicate != null)
+                        {
+                            res = res.Where(predicate);
+                        }
+
+                        return res.Cast<object>();
+                    },
+                    container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInParents(
+            bool excludeSelf = false, bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentSibling to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        var matches = monoBehaviour.GetComponentsInParent(concreteType, includeInactive)
+                            .Where(x => !ReferenceEquals(x, ctx.ObjectInstance));
+
+                        if (excludeSelf)
+                        {
+                            matches = matches.Where(x => x.gameObject != monoBehaviour.gameObject);
+                        }
+
+                        var match = matches.FirstOrDefault();
+
+                        if (match == null)
+                        {
+                            Assert.That(ctx.Optional,
+                                "Could not find any component with type '{0}' through FromComponentInParents binding", concreteType);
+
+                            return Enumerable.Empty<object>();
+                        }
+
+                        return new object[] { match };
+                    },
+                    container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInParents(
+            bool excludeSelf = false, bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentSibling to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        var res = monoBehaviour.GetComponentsInParent(concreteType, includeInactive)
+                            .Where(x => !ReferenceEquals(x, ctx.ObjectInstance));
+
+                        if (excludeSelf)
+                        {
+                            res = res.Where(x => x.gameObject != monoBehaviour.gameObject);
+                        }
+
+                        return res.Cast<object>();
+                    },
+                    container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentSibling()
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentSibling to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        var match = monoBehaviour.GetComponent(concreteType);
+
+                        if (match == null)
+                        {
+                            Assert.That(ctx.Optional,
+                                "Could not find any component with type '{0}' through FromComponentSibling binding", concreteType);
+                            return Enumerable.Empty<object>();
+                        }
+
+                        return new object[] { match };
+                    },
+                    container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsSibling()
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        Assert.That(ctx.ObjectType.DerivesFromOrEqual<MonoBehaviour>(),
+                            "Cannot use FromComponentSibling to inject data into non monobehaviours!");
+
+                        Assert.IsNotNull(ctx.ObjectInstance);
+
+                        var monoBehaviour = (MonoBehaviour)ctx.ObjectInstance;
+
+                        return monoBehaviour.GetComponents(concreteType)
+                            .Where(x => !ReferenceEquals(x, monoBehaviour)).Cast<object>();
+                    },
+                    container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentInHierarchy(
+            bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            // Since this is a pretty heavy operation, let's require an explicit scope
+            // Most of the time they should use AsCached or AsSingle
+            BindInfo.RequireExplicitScope = true;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        var match = container.Resolve<Context>().GetRootGameObjects()
+                            .Select(x => x.GetComponentInChildren(concreteType, includeInactive))
+                            .Where(x => x != null && !ReferenceEquals(x, ctx.ObjectInstance)).FirstOrDefault();
+
+                        if (match == null)
+                        {
+                            Assert.That(ctx.Optional,
+                                "Could not find any component with type '{0}' through FromComponentInHierarchy binding", concreteType);
+                            return Enumerable.Empty<object>();
+                        }
+
+                        return new object[] { match };
+                    },
+                    container));
+
+            return this;
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchyBase(
+            Func<Component, bool> predicate = null, bool includeInactive = true)
+        {
+            BindingUtil.AssertIsInterfaceOrComponent(AllParentTypes);
+
+            BindInfo.RequireExplicitScope = true;
+
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, concreteType) => new MethodMultipleProviderUntyped(ctx =>
+                    {
+                        var res = container.Resolve<Context>().GetRootGameObjects()
+                            .SelectMany(x => x.GetComponentsInChildren(concreteType, includeInactive))
+                            .Where(x => !ReferenceEquals(x, ctx.ObjectInstance));
+
+                        if (predicate != null)
+                        {
+                            res = res.Where(predicate);
+                        }
+
+                        return res.Cast<object>();
+                    },
+                    container));
+
+            return this;
+        }
+#endif
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodUntyped(Func<InjectContext, object> method)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new MethodProviderUntyped(method, container));
+
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleUntyped(Func<InjectContext, IEnumerable<object>> method)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new MethodMultipleProviderUntyped(method, container));
+
+            return this;
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodBase<TConcrete>(Func<InjectContext, TConcrete> method)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(typeof(TConcrete), AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new MethodProvider<TConcrete>(method, container));
+
+            return this;
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultipleBase<TConcrete>(Func<InjectContext, IEnumerable<TConcrete>> method)
+        {
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new MethodProviderMultiple<TConcrete>(method, container));
+
+            return this;
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetterBase<TObj, TResult>(
+            object identifier, Func<TObj, TResult> method, InjectSources source, bool matchMultiple)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(typeof(TResult), AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new GetterProvider<TObj, TResult>(identifier, method, container, source, matchMultiple));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+
+        protected ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstanceBase(object instance)
+        {
+            BindingUtil.AssertInstanceDerivesFromOrEqual(instance, AllParentTypes);
+
+            BindInfo.RequireExplicitScope = false;
+            // Don't know how it's created so can't assume here that it violates AsSingle
+            BindInfo.MarkAsCreationBinding = false;
+            SubFinalizer = new ScopableBindingFinalizer(
+                BindInfo,
+                (container, type) => new InstanceProvider(type, instance, container, BindInfo.InstantiatedCallback));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs.meta
new file mode 100644
index 0000000..b4ce936
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1bfe8c7cab3320b4a818fbb97098fb11
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs
new file mode 100644
index 0000000..c23ed7e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs
@@ -0,0 +1,132 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using System.Linq;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FromBinderGeneric<TContract> : FromBinder
+    {
+        public FromBinderGeneric(
+            DiContainer bindContainer,
+            BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(typeof(TContract), BindInfo.ContractTypes);
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TFactory>()
+            where TFactory : IFactory<TContract>
+        {
+            return FromIFactory(x => x.To<TFactory>().AsCached());
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory(
+            Action<ConcreteBinderGeneric<IFactory<TContract>>> factoryBindGenerator)
+        {
+            return FromIFactoryBase<TContract>(factoryBindGenerator);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(Func<TContract> method)
+        {
+            return FromMethodBase<TContract>(ctx => method());
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(Func<InjectContext, TContract> method)
+        {
+            return FromMethodBase<TContract>(method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple(Func<InjectContext, IEnumerable<TContract>> method)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(typeof(TContract), AllParentTypes);
+            return FromMethodMultipleBase<TContract>(method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj>(null, method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj>(identifier, method, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj>(object identifier, Func<TObj, TContract> method, InjectSources source)
+        {
+            return FromResolveGetterBase<TObj, TContract>(identifier, method, source, false);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(Func<TObj, TContract> method)
+        {
+            return FromResolveAllGetter<TObj>(null, method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, Func<TObj, TContract> method)
+        {
+            return FromResolveAllGetter<TObj>(identifier, method, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj>(object identifier, Func<TObj, TContract> method, InjectSources source)
+        {
+            return FromResolveGetterBase<TObj, TContract>(identifier, method, source, true);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(TContract instance)
+        {
+            return FromInstanceBase(instance);
+        }
+
+#if !NOT_UNITY3D
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(
+            Func<TContract, bool> predicate, bool includeInactive = true)
+        {
+            return FromComponentsInChildren(false, predicate, includeInactive);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(
+            bool excludeSelf = false, Func<TContract, bool> predicate = null, bool includeInactive = true)
+        {
+            Func<Component, bool> subPredicate;
+
+            if (predicate != null)
+            {
+                subPredicate = component => predicate((TContract)(object)component);
+            }
+            else
+            {
+                subPredicate = null;
+            }
+
+            return FromComponentsInChildrenBase(
+                excludeSelf, subPredicate, includeInactive);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(
+            Func<TContract, bool> predicate = null, bool includeInactive = true)
+        {
+            Func<Component, bool> subPredicate;
+
+            if (predicate != null)
+            {
+                subPredicate = component => predicate((TContract)(object)component);
+            }
+            else
+            {
+                subPredicate = null;
+            }
+
+            return FromComponentsInHierarchyBase(subPredicate, includeInactive);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs.meta
new file mode 100644
index 0000000..bdf3df3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 97eaa55248b4c824a887df4db7cf888d
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs
new file mode 100644
index 0000000..a92ea9e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs
@@ -0,0 +1,100 @@
+using System;
+using System.Collections.Generic;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class FromBinderNonGeneric : FromBinder
+    {
+        public FromBinderNonGeneric(
+            DiContainer bindContainer, BindInfo bindInfo,
+            BindStatement bindStatement)
+            : base(bindContainer, bindInfo, bindStatement)
+        {
+        }
+
+        // Shortcut for FromIFactory and also for backwards compatibility
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory<TConcrete, TFactory>()
+            where TFactory : IFactory<TConcrete>
+        {
+            return FromIFactory<TConcrete>(x => x.To<TFactory>().AsCached());
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory<TContract>(
+            Action<ConcreteBinderGeneric<IFactory<TContract>>> factoryBindGenerator)
+        {
+            return FromIFactoryBase<TContract>(factoryBindGenerator);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod<TConcrete>(Func<InjectContext, TConcrete> method)
+        {
+            return FromMethodBase<TConcrete>(method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple<TConcrete>(Func<InjectContext, IEnumerable<TConcrete>> method)
+        {
+            BindingUtil.AssertIsDerivedFromTypes(typeof(TConcrete), AllParentTypes);
+            return FromMethodMultipleBase<TConcrete>(method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj, TContract>(null, method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, Func<TObj, TContract> method)
+        {
+            return FromResolveGetter<TObj, TContract>(identifier, method, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter<TObj, TContract>(object identifier, Func<TObj, TContract> method, InjectSources source)
+        {
+            return FromResolveGetterBase<TObj, TContract>(identifier, method, source, false);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(Func<TObj, TContract> method)
+        {
+            return FromResolveAllGetter<TObj, TContract>(null, method);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, Func<TObj, TContract> method)
+        {
+            return FromResolveAllGetter<TObj, TContract>(identifier, method, InjectSources.Any);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter<TObj, TContract>(object identifier, Func<TObj, TContract> method, InjectSources source)
+        {
+            return FromResolveGetterBase<TObj, TContract>(identifier, method, source, true);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(object instance)
+        {
+            return FromInstanceBase(instance);
+        }
+
+#if !NOT_UNITY3D
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(
+            Func<Component, bool> predicate, bool includeInactive = true)
+        {
+            return FromComponentsInChildren(false, predicate, includeInactive);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(
+            bool excludeSelf = false, Func<Component, bool> predicate = null, bool includeInactive = true)
+        {
+            return FromComponentsInChildrenBase(excludeSelf, predicate, includeInactive);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(
+            Func<Component, bool> predicate = null, bool includeInactive = true)
+        {
+            return FromComponentsInHierarchyBase(predicate, includeInactive);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs.meta b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs.meta
new file mode 100644
index 0000000..5841043
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/FromBinders/FromBinderNonGeneric.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e54c591a4175efc4688be675528600c1
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/GameObject.meta b/Assets/Source/Runtime/Binding/Binders/GameObject.meta
new file mode 100644
index 0000000..e50dbcd
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/GameObject.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 6a5ff7e3b16416245acfcd6be217a53f
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..c9a7b73
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,23 @@
+#if !NOT_UNITY3D
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder : TransformScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(
+            BindInfo bindInfo,
+            GameObjectCreationParameters gameObjectInfo)
+            : base(bindInfo, gameObjectInfo)
+        {
+        }
+
+        public TransformScopeConcreteIdArgConditionCopyNonLazyBinder WithGameObjectName(string gameObjectName)
+        {
+            GameObjectInfo.Name = gameObjectName;
+            return this;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..d37bb16
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/GameObject/NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 74c9bb72aa7484d49a39760d2246f1a3
+timeCreated: 1523257673
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..31bd1f9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,45 @@
+#if !NOT_UNITY3D
+
+using System;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class TransformScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public TransformScopeConcreteIdArgConditionCopyNonLazyBinder(
+            BindInfo bindInfo,
+            GameObjectCreationParameters gameObjectInfo)
+            : base(bindInfo)
+        {
+            GameObjectInfo = gameObjectInfo;
+        }
+
+        protected GameObjectCreationParameters GameObjectInfo
+        {
+            get;
+            private set;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(Transform parent)
+        {
+            GameObjectInfo.ParentTransform = parent;
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransform(Func<InjectContext, Transform> parentGetter)
+        {
+            GameObjectInfo.ParentTransformGetter = parentGetter;
+            return this;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder UnderTransformGroup(string transformGroupname)
+        {
+            GameObjectInfo.GroupName = transformGroupname;
+            return this;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..7288ae4
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/GameObject/TransformScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: d6441d2557329b14b8a80a6d3c490e9b
+timeCreated: 1523257674
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/IdBinder.cs b/Assets/Source/Runtime/Binding/Binders/IdBinder.cs
new file mode 100644
index 0000000..620ae88
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IdBinder.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class IdBinder
+    {
+        BindInfo _bindInfo;
+
+        public IdBinder(BindInfo bindInfo)
+        {
+            _bindInfo = bindInfo;
+        }
+
+        public void WithId(object identifier)
+        {
+            _bindInfo.Identifier = identifier;
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Binders/IdBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/IdBinder.cs.meta
new file mode 100644
index 0000000..99c248e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IdBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 371e1c0b9a8ff664f993cbe2a547eeae
+timeCreated: 1484790451
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..5947289
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,17 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class IdScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public IdScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithId(object identifier)
+        {
+            BindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..e08850d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IdScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ba3894c2363faea4480796349be1c939
+timeCreated: 1535254660
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs b/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs
new file mode 100644
index 0000000..9c9aa28
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs
@@ -0,0 +1,24 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class IfNotBoundBinder
+    {
+        public IfNotBoundBinder(BindInfo bindInfo)
+        {
+            BindInfo = bindInfo;
+        }
+
+        // Do not use this
+        public BindInfo BindInfo
+        {
+            get;
+            private set;
+        }
+
+        public void IfNotBound()
+        {
+            BindInfo.OnlyBindIfNotBound = true;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs.meta
new file mode 100644
index 0000000..cc58076
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/IfNotBoundBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b9f24b7d14dcf8441a1c2b4166a5ec9c
+timeCreated: 1519465920
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..226a96a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs
@@ -0,0 +1,49 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class InstantiateCallbackConditionCopyNonLazyBinder : ConditionCopyNonLazyBinder
+    {
+        public InstantiateCallbackConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public ConditionCopyNonLazyBinder OnInstantiated(
+            Action<InjectContext, object> callback)
+        {
+            BindInfo.InstantiatedCallback = callback;
+            return this;
+        }
+
+        public ConditionCopyNonLazyBinder OnInstantiated<T>(
+            Action<InjectContext, T> callback)
+        {
+            // Can't do this here because of factory bindings
+            //Assert.That(BindInfo.ContractTypes.All(x => x.DerivesFromOrEqual<T>()));
+
+            BindInfo.InstantiatedCallback = (ctx, obj) =>
+            {
+                if (obj is ValidationMarker)
+                {
+                    Assert.That(ctx.Container.IsValidating);
+
+                    ValidationMarker marker = obj as ValidationMarker;
+
+                    Assert.That(marker.MarkedType.DerivesFromOrEqual<T>(),
+                        "Invalid generic argument to OnInstantiated! {0} must be type {1}", marker.MarkedType, typeof(T));
+                }
+                else
+                {
+                    Assert.That(obj == null || obj is T,
+                        "Invalid generic argument to OnInstantiated! {0} must be type {1}", obj.GetType(), typeof(T));
+
+                    callback(ctx, (T)obj);
+                }
+            };
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..5291ea1
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/InstantiateCallbackConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 0711425cf187dd94ea21d8ed6f38d981
+timeCreated: 1535263051
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs
new file mode 100644
index 0000000..6214ec9
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs
@@ -0,0 +1,23 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class NonLazyBinder : IfNotBoundBinder
+    {
+        public NonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public IfNotBoundBinder NonLazy()
+        {
+            BindInfo.NonLazy = true;
+            return this;
+        }
+
+        public IfNotBoundBinder Lazy()
+        {
+            BindInfo.NonLazy = false;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs.meta
new file mode 100644
index 0000000..fa393ca
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/NonLazyBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 58c27840cbeb2fa4695b09d536809bb2
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..2c058a3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,31 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ScopeConcreteIdArgConditionCopyNonLazyBinder : ConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo bindInfo)
+            : base(bindInfo)
+        {
+        }
+
+        public ConcreteIdArgConditionCopyNonLazyBinder AsCached()
+        {
+            BindInfo.Scope = ScopeTypes.Singleton;
+            return this;
+        }
+
+        public ConcreteIdArgConditionCopyNonLazyBinder AsSingle()
+        {
+            BindInfo.Scope = ScopeTypes.Singleton;
+            BindInfo.MarkAsUniqueSingleton = true;
+            return this;
+        }
+
+        // Note that this is the default so it's not necessary to call this
+        public ConcreteIdArgConditionCopyNonLazyBinder AsTransient()
+        {
+            BindInfo.Scope = ScopeTypes.Transient;
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..8d82f12
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/ScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5a71e3efc6d683d4cbc3b881bc4e2772
+timeCreated: 1523257672
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs b/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs
new file mode 100644
index 0000000..b53373d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs
@@ -0,0 +1,316 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerBinder
+    {
+        readonly BindInfo _bindInfo;
+        readonly BindStatement _bindStatement;
+        readonly object _subIdentifier;
+        readonly bool _resolveAll;
+
+        public SubContainerBinder(
+            BindInfo bindInfo,
+            BindStatement bindStatement,
+            object subIdentifier, bool resolveAll)
+        {
+            _bindInfo = bindInfo;
+            _bindStatement = bindStatement;
+            _subIdentifier = subIdentifier;
+            _resolveAll = resolveAll;
+
+            // Reset in case the user ends the binding here
+            bindStatement.SetFinalizer(null);
+        }
+
+        protected IBindingFinalizer SubFinalizer
+        {
+            set { _bindStatement.SetFinalizer(value); }
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstance(DiContainer subContainer)
+        {
+            SubFinalizer = new SubContainerBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (_) => new SubContainerCreatorByInstance(subContainer));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo);
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByInstanceGetter(
+            Func<InjectContext, DiContainer> subContainerGetter)
+        {
+            SubFinalizer = new SubContainerBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (_) => new SubContainerCreatorByInstanceGetter(subContainerGetter));
+
+            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo);
+        }
+
+        public
+#if NOT_UNITY3D
+            WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
+#else
+            WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+#endif
+            ByInstaller<TInstaller>()
+            where TInstaller : InstallerBase
+        {
+            return ByInstaller(typeof(TInstaller));
+        }
+
+        public
+#if NOT_UNITY3D
+            WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
+#else
+            WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+#endif
+            ByInstaller(Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var subContainerBindInfo = new SubContainerCreatorBindInfo();
+
+            SubFinalizer = new SubContainerBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByInstaller(container, subContainerBindInfo, installerType));
+
+            return new
+#if NOT_UNITY3D
+                WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
+#else
+                WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+#endif
+                (subContainerBindInfo, _bindInfo);
+        }
+
+        public
+#if NOT_UNITY3D
+            WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
+#else
+            WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+#endif
+            ByMethod(Action<DiContainer> installerMethod)
+        {
+            var subContainerBindInfo = new SubContainerCreatorBindInfo();
+
+            SubFinalizer = new SubContainerBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByMethod(container, subContainerBindInfo, installerMethod));
+
+            return new
+#if NOT_UNITY3D
+                WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder
+#else
+                WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+#endif
+                (subContainerBindInfo, _bindInfo);
+        }
+
+#if !NOT_UNITY3D
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(
+            Action<DiContainer> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewGameObjectMethod(
+                    container, gameObjectInfo, installerMethod));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Action<DiContainer> installerMethod)
+        {
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabMethod(
+                    container,
+                    new PrefabProviderCustom(prefabGetter),
+                    gameObjectInfo, installerMethod));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(
+            UnityEngine.Object prefab, Action<DiContainer> installerMethod)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabMethod(
+                    container,
+                    new PrefabProvider(prefab),
+                    gameObjectInfo, installerMethod));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller<TInstaller>()
+            where TInstaller : InstallerBase
+        {
+            return ByNewGameObjectInstaller(typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectInstaller(Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewGameObjectInstaller(
+                    container, gameObjectInfo, installerType, _bindInfo.Arguments));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(
+            Func<InjectContext, UnityEngine.Object> prefabGetter)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabInstaller(prefabGetter, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(
+            Func<InjectContext, UnityEngine.Object> prefabGetter, Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabInstaller(
+                    container,
+                    new PrefabProviderCustom(prefabGetter),
+                    gameObjectInfo, installerType, _bindInfo.Arguments));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller<TInstaller>(
+            UnityEngine.Object prefab)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabInstaller(prefab, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabInstaller(
+            UnityEngine.Object prefab, Type installerType)
+        {
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabInstaller(
+                    container,
+                    new PrefabProvider(prefab),
+                    gameObjectInfo, installerType, _bindInfo.Arguments));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(
+            string resourcePath, Action<DiContainer> installerMethod)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabMethod(
+                    container,
+                    new PrefabProviderResource(resourcePath),
+                    gameObjectInfo, installerMethod));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller<TInstaller>(
+            string resourcePath)
+            where TInstaller : InstallerBase
+        {
+            return ByNewPrefabResourceInstaller(resourcePath, typeof(TInstaller));
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceInstaller(
+            string resourcePath, Type installerType)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefabInstaller(
+                    container,
+                    new PrefabProviderResource(resourcePath),
+                    gameObjectInfo, installerType, _bindInfo.Arguments));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        [System.Obsolete("ByNewPrefab has been renamed to ByNewContextPrefab to avoid confusion with ByNewPrefabInstaller and ByNewPrefabMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefab(UnityEngine.Object prefab)
+        {
+            return ByNewContextPrefab(prefab);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefab(UnityEngine.Object prefab)
+        {
+            BindingUtil.AssertIsValidPrefab(prefab);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefab(
+                    container, new PrefabProvider(prefab), gameObjectInfo));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+
+        [System.Obsolete("ByNewPrefabResource has been renamed to ByNewContextPrefabResource to avoid confusion with ByNewPrefabResourceInstaller and ByNewPrefabResourceMethod")]
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResource(string resourcePath)
+        {
+            return ByNewContextPrefabResource(resourcePath);
+        }
+
+        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewContextPrefabResource(string resourcePath)
+        {
+            BindingUtil.AssertIsValidResourcePath(resourcePath);
+
+            var gameObjectInfo = new GameObjectCreationParameters();
+
+            SubFinalizer = new SubContainerPrefabBindingFinalizer(
+                _bindInfo, _subIdentifier, _resolveAll,
+                (container) => new SubContainerCreatorByNewPrefab(
+                    container, new PrefabProviderResource(resourcePath), gameObjectInfo));
+
+            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(_bindInfo, gameObjectInfo);
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs.meta
new file mode 100644
index 0000000..e1689de
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/SubContainerBinder.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 4d1fcd1593b05194a82073206057613e
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..3d1912e
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,28 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder : DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        public WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder(
+            SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo)
+            : base(subContainerBindInfo, bindInfo)
+        {
+        }
+
+        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel()
+        {
+            SubContainerCreatorBindInfo.CreateKernel = true;
+            return this;
+        }
+
+        // This would be used in cases where you want to control the execution order for the
+        // subcontainer
+        public DefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>()
+            where TKernel : Kernel
+        {
+            SubContainerCreatorBindInfo.CreateKernel = true;
+            SubContainerCreatorBindInfo.KernelType = typeof(TKernel);
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..14931a3
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/WithKernelDefaultParentScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 4690c1b02bdf3d34998b8a505c85b1b2
+timeCreated: 1535254659
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs b/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs
new file mode 100644
index 0000000..72b1b91
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs
@@ -0,0 +1,31 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder : ScopeConcreteIdArgConditionCopyNonLazyBinder
+    {
+        SubContainerCreatorBindInfo _subContainerBindInfo;
+
+        public WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder(
+            SubContainerCreatorBindInfo subContainerBindInfo, BindInfo bindInfo)
+            : base(bindInfo)
+        {
+            _subContainerBindInfo = subContainerBindInfo;
+        }
+
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel()
+        {
+            _subContainerBindInfo.CreateKernel = true;
+            return this;
+        }
+
+        // This would be used in cases where you want to control the execution order for the
+        // subcontainer
+        public ScopeConcreteIdArgConditionCopyNonLazyBinder WithKernel<TKernel>()
+            where TKernel : Kernel
+        {
+            _subContainerBindInfo.CreateKernel = true;
+            _subContainerBindInfo.KernelType = typeof(TKernel);
+            return this;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta b/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
new file mode 100644
index 0000000..4037793
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Binders/WithKernelScopeConcreteIdArgConditionCopyNonLazyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 6447473513963f742b7ab3c02ec633a8
+timeCreated: 1535254659
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/BindingUtil.cs b/Assets/Source/Runtime/Binding/BindingUtil.cs
new file mode 100644
index 0000000..bfea1d7
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindingUtil.cs
@@ -0,0 +1,380 @@
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using ModestTree;
+using Zenject.Internal;
+using System.Linq;
+using TypeExtensions = ModestTree.TypeExtensions;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+
+#if UNITY_EDITOR
+using UnityEditor;
+#endif
+
+#endif
+
+namespace Zenject
+{
+    internal static class BindingUtil
+    {
+#if !NOT_UNITY3D
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsValidPrefab(UnityEngine.Object prefab)
+        {
+            Assert.That(!ZenUtilInternal.IsNull(prefab), "Received null prefab during bind command");
+
+#if UNITY_EDITOR
+            // Unfortunately we can't do this check because asset bundles return PrefabType.None here
+            // as discussed here: https://github.com/svermeulen/Zenject/issues/269#issuecomment-323419408
+            //Assert.That(PrefabUtility.GetPrefabType(prefab) == PrefabType.Prefab,
+                //"Expected prefab but found game object with name '{0}' during bind command", prefab.name);
+#endif
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsValidGameObject(GameObject gameObject)
+        {
+            Assert.That(!ZenUtilInternal.IsNull(gameObject), "Received null game object during bind command");
+
+#if UNITY_EDITOR
+            // Unfortunately we can't do this check because asset bundles return PrefabType.None here
+            // as discussed here: https://github.com/svermeulen/Zenject/issues/269#issuecomment-323419408
+            //Assert.That(PrefabUtility.GetPrefabType(gameObject) != PrefabType.Prefab,
+                //"Expected game object but found prefab instead with name '{0}' during bind command", gameObject.name);
+#endif
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotComponent(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsNotComponent(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotComponent<T>()
+        {
+            AssertIsNotComponent(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotComponent(Type type)
+        {
+            Assert.That(!type.DerivesFrom(typeof(Component)),
+                "Invalid type given during bind command.  Expected type '{0}' to NOT derive from UnityEngine.Component", type);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertDerivesFromUnityObject(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertDerivesFromUnityObject(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertDerivesFromUnityObject<T>()
+        {
+            AssertDerivesFromUnityObject(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertDerivesFromUnityObject(Type type)
+        {
+            Assert.That(type.DerivesFrom<UnityEngine.Object>(),
+                "Invalid type given during bind command.  Expected type '{0}' to derive from UnityEngine.Object", type);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertTypesAreNotComponents(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsNotComponent(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsValidResourcePath(string resourcePath)
+        {
+            Assert.That(!string.IsNullOrEmpty(resourcePath), "Null or empty resource path provided");
+
+            // We'd like to validate the path here but unfortunately there doesn't appear to be
+            // a way to do this besides loading it
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrScriptableObject(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsInterfaceOrScriptableObject(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrScriptableObject<T>()
+        {
+            AssertIsInterfaceOrScriptableObject(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrScriptableObject(Type type)
+        {
+            Assert.That(type.DerivesFrom(typeof(ScriptableObject)) || type.IsInterface(),
+                "Invalid type given during bind command.  Expected type '{0}' to either derive from UnityEngine.ScriptableObject or be an interface", type);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrComponent(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsInterfaceOrComponent(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrComponent<T>()
+        {
+            AssertIsInterfaceOrComponent(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsInterfaceOrComponent(Type type)
+        {
+            Assert.That(type.DerivesFrom(typeof(Component)) || type.IsInterface(),
+                "Invalid type given during bind command.  Expected type '{0}' to either derive from UnityEngine.Component or be an interface", type);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsComponent(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsComponent(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsComponent<T>()
+        {
+            AssertIsComponent(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsComponent(Type type)
+        {
+            Assert.That(type.DerivesFrom(typeof(Component)),
+                "Invalid type given during bind command.  Expected type '{0}' to derive from UnityEngine.Component", type);
+        }
+#else
+        public static void AssertTypesAreNotComponents(IEnumerable<Type> types)
+        {
+        }
+
+        public static void AssertIsNotComponent(Type type)
+        {
+        }
+
+        public static void AssertIsNotComponent<T>()
+        {
+        }
+
+        public static void AssertIsNotComponent(IEnumerable<Type> types)
+        {
+        }
+#endif
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertTypesAreNotAbstract(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsNotAbstract(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotAbstract(IEnumerable<Type> types)
+        {
+            foreach (var type in types)
+            {
+                AssertIsNotAbstract(type);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotAbstract<T>()
+        {
+            AssertIsNotAbstract(typeof(T));
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsNotAbstract(Type type)
+        {
+            Assert.That(!type.IsAbstract(),
+                "Invalid type given during bind command.  Expected type '{0}' to not be abstract.", type);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsDerivedFromType(Type concreteType, Type parentType)
+        {
+#if !(UNITY_WSA && ENABLE_DOTNET)
+            // TODO: Is it possible to do this on WSA?
+
+            Assert.That(parentType.IsOpenGenericType() == concreteType.IsOpenGenericType(),
+                "Invalid type given during bind command.  Expected type '{0}' and type '{1}' to both either be open generic types or not open generic types", parentType, concreteType);
+
+            if (parentType.IsOpenGenericType())
+            {
+                Assert.That(concreteType.IsOpenGenericType());
+                Assert.That(TypeExtensions.IsAssignableToGenericType(concreteType, parentType),
+                    "Invalid type given during bind command.  Expected open generic type '{0}' to derive from open generic type '{1}'", concreteType, parentType);
+            }
+            else
+#endif
+            {
+                Assert.That(concreteType.DerivesFromOrEqual(parentType),
+                    "Invalid type given during bind command.  Expected type '{0}' to derive from type '{1}'", concreteType, parentType);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertConcreteTypeListIsNotEmpty(IEnumerable<Type> concreteTypes)
+        {
+            Assert.That(concreteTypes.Count() >= 1,
+                "Must supply at least one concrete type to the current binding");
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsDerivedFromTypes(
+            IEnumerable<Type> concreteTypes, IEnumerable<Type> parentTypes, InvalidBindResponses invalidBindResponse)
+        {
+            if (invalidBindResponse == InvalidBindResponses.Assert)
+            {
+                AssertIsDerivedFromTypes(concreteTypes, parentTypes);
+            }
+            else
+            {
+                Assert.IsEqual(invalidBindResponse, InvalidBindResponses.Skip);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsDerivedFromTypes(IEnumerable<Type> concreteTypes, IEnumerable<Type> parentTypes)
+        {
+            foreach (var concreteType in concreteTypes)
+            {
+                AssertIsDerivedFromTypes(concreteType, parentTypes);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertIsDerivedFromTypes(Type concreteType, IEnumerable<Type> parentTypes)
+        {
+            foreach (var parentType in parentTypes)
+            {
+                AssertIsDerivedFromType(concreteType, parentType);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertInstanceDerivesFromOrEqual(object instance, IEnumerable<Type> parentTypes)
+        {
+            if (!ZenUtilInternal.IsNull(instance))
+            {
+                foreach (var baseType in parentTypes)
+                {
+                    AssertInstanceDerivesFromOrEqual(instance, baseType);
+                }
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void AssertInstanceDerivesFromOrEqual(object instance, Type baseType)
+        {
+            if (!ZenUtilInternal.IsNull(instance))
+            {
+                Assert.That(instance.GetType().DerivesFromOrEqual(baseType),
+                    "Invalid type given during bind command.  Expected type '{0}' to derive from type '{1}'", instance.GetType(), baseType);
+            }
+        }
+
+        public static IProvider CreateCachedProvider(IProvider creator)
+        {
+            if (creator.TypeVariesBasedOnMemberType)
+            {
+                return new CachedOpenTypeProvider(creator);
+            }
+
+            return new CachedProvider(creator);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/BindingUtil.cs.meta b/Assets/Source/Runtime/Binding/BindingUtil.cs.meta
new file mode 100644
index 0000000..0368938
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/BindingUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3d9014e328d4ff04682edfaaa5bdad36
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers.meta b/Assets/Source/Runtime/Binding/Finalizers.meta
new file mode 100644
index 0000000..466ee4a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 95ed99f2cba5359419d007822a4c0c31
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs
new file mode 100644
index 0000000..ca6901a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs
@@ -0,0 +1,12 @@
+namespace Zenject
+{
+    public interface IBindingFinalizer
+    {
+        BindingInheritanceMethods BindingInheritanceMethod
+        {
+            get;
+        }
+
+        void FinalizeBinding(DiContainer container);
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs.meta
new file mode 100644
index 0000000..e00a034
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/IBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d0c24b30b6678884db62f15947ec943c
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs
new file mode 100644
index 0000000..f7d913b
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs
@@ -0,0 +1,17 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class NullBindingFinalizer : IBindingFinalizer
+    {
+        public BindingInheritanceMethods BindingInheritanceMethod
+        {
+            get { return BindingInheritanceMethods.None; }
+        }
+
+        public void FinalizeBinding(DiContainer container)
+        {
+            // Do nothing
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs.meta
new file mode 100644
index 0000000..2b5694a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/NullBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 6b41a20eb0faa1041bf6aa0bfcc76064
+timeCreated: 1480010956
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs
new file mode 100644
index 0000000..a689399
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs
@@ -0,0 +1,158 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+        readonly UnityEngine.Object _prefab;
+        readonly Func<Type, IPrefabInstantiator, IProvider> _providerFactory;
+
+        public PrefabBindingFinalizer(
+            BindInfo bindInfo,
+            GameObjectCreationParameters gameObjectBindInfo,
+            UnityEngine.Object prefab, Func<Type, IPrefabInstantiator, IProvider> providerFactory)
+            : base(bindInfo)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _prefab = prefab;
+            _providerFactory = providerFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+                FinalizeBindingSelf(container);
+            }
+            else
+            {
+                FinalizeBindingConcrete(container, BindInfo.ToTypes);
+            }
+        }
+
+        void FinalizeBindingConcrete(DiContainer container, List<Type> concreteTypes)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                            _providerFactory(
+                                concreteType,
+                                new PrefabInstantiator(
+                                    container,
+                                    _gameObjectBindInfo,
+                                    concreteType,
+                                    concreteTypes,
+                                    BindInfo.Arguments,
+                                    new PrefabProvider(_prefab),
+                                    BindInfo.InstantiatedCallback)));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var argumentTarget = concreteTypes.OnlyOrDefault();
+
+                    if (argumentTarget == null)
+                    {
+                        Assert.That(BindInfo.Arguments.IsEmpty(),
+                            "Cannot provide arguments to prefab instantiator when using more than one concrete type");
+                    }
+
+                    var prefabCreator = new PrefabInstantiatorCached(
+                        new PrefabInstantiator(
+                            container,
+                            _gameObjectBindInfo,
+                            argumentTarget,
+                            concreteTypes,
+                            BindInfo.Arguments,
+                            new PrefabProvider(_prefab),
+                            BindInfo.InstantiatedCallback));
+
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) => BindingUtil.CreateCachedProvider(
+                            _providerFactory(concreteType, prefabCreator)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void FinalizeBindingSelf(DiContainer container)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            _providerFactory(
+                                contractType,
+                                new PrefabInstantiator(
+                                    container,
+                                    _gameObjectBindInfo,
+                                    contractType,
+                                    BindInfo.ContractTypes,
+                                    BindInfo.Arguments,
+                                    new PrefabProvider(_prefab),
+                                    BindInfo.InstantiatedCallback)));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var argumentTarget = BindInfo.ContractTypes.OnlyOrDefault();
+
+                    if (argumentTarget == null)
+                    {
+                        Assert.That(BindInfo.Arguments.IsEmpty(),
+                            "Cannot provide arguments to prefab instantiator when using more than one concrete type");
+                    }
+
+                    var prefabCreator = new PrefabInstantiatorCached(
+                        new PrefabInstantiator(
+                            container,
+                            _gameObjectBindInfo,
+                            argumentTarget,
+                            BindInfo.ContractTypes,
+                            BindInfo.Arguments,
+                            new PrefabProvider(_prefab),
+                            BindInfo.InstantiatedCallback));
+
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            BindingUtil.CreateCachedProvider(
+                                _providerFactory(contractType, prefabCreator)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs.meta
new file mode 100644
index 0000000..ad51cc6
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/PrefabBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 10487121a4674d74884ee65e70762e35
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs
new file mode 100644
index 0000000..92b8a5c
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs
@@ -0,0 +1,157 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabResourceBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+        readonly string _resourcePath;
+        readonly Func<Type, IPrefabInstantiator, IProvider> _providerFactory;
+
+        public PrefabResourceBindingFinalizer(
+            BindInfo bindInfo,
+            GameObjectCreationParameters gameObjectBindInfo,
+            string resourcePath, Func<Type, IPrefabInstantiator, IProvider> providerFactory)
+            : base(bindInfo)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _resourcePath = resourcePath;
+            _providerFactory = providerFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+                FinalizeBindingSelf(container);
+            }
+            else
+            {
+                FinalizeBindingConcrete(container, BindInfo.ToTypes);
+            }
+        }
+
+        void FinalizeBindingConcrete(DiContainer container, List<Type> concreteTypes)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                            _providerFactory(
+                                concreteType,
+                                new PrefabInstantiator(
+                                    container,
+                                    _gameObjectBindInfo,
+                                    concreteType,
+                                    concreteTypes,
+                                    BindInfo.Arguments,
+                                    new PrefabProviderResource(_resourcePath),
+                                    BindInfo.InstantiatedCallback)));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var argumentTarget = concreteTypes.OnlyOrDefault();
+
+                    if (argumentTarget == null)
+                    {
+                        Assert.That(BindInfo.Arguments.IsEmpty(),
+                            "Cannot provide arguments to prefab instantiator when using more than one concrete type");
+                    }
+
+                    var prefabCreator = new PrefabInstantiatorCached(
+                        new PrefabInstantiator(
+                            container,
+                            _gameObjectBindInfo,
+                            argumentTarget,
+                            concreteTypes,
+                            BindInfo.Arguments,
+                            new PrefabProviderResource(_resourcePath),
+                            BindInfo.InstantiatedCallback));
+
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) => BindingUtil.CreateCachedProvider(
+                            _providerFactory(concreteType, prefabCreator)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void FinalizeBindingSelf(DiContainer container)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            _providerFactory(
+                                contractType,
+                                new PrefabInstantiator(
+                                    container,
+                                    _gameObjectBindInfo,
+                                    contractType,
+                                    BindInfo.ContractTypes,
+                                    BindInfo.Arguments,
+                                    new PrefabProviderResource(_resourcePath),
+                                    BindInfo.InstantiatedCallback)));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var argumentTarget = BindInfo.ContractTypes.OnlyOrDefault();
+
+                    if (argumentTarget == null)
+                    {
+                        Assert.That(BindInfo.Arguments.IsEmpty(),
+                            "Cannot provide arguments to prefab instantiator when using more than one concrete type");
+                    }
+
+                    var prefabCreator = new PrefabInstantiatorCached(
+                        new PrefabInstantiator(
+                            container,
+                            _gameObjectBindInfo,
+                            argumentTarget,
+                            BindInfo.ContractTypes,
+                            BindInfo.Arguments,
+                            new PrefabProviderResource(_resourcePath),
+                            BindInfo.InstantiatedCallback));
+
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            BindingUtil.CreateCachedProvider(
+                                _providerFactory(contractType, prefabCreator)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs.meta
new file mode 100644
index 0000000..1dc8904
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/PrefabResourceBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: b851ccfb909f66c4587d694f6e37b279
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs
new file mode 100644
index 0000000..074b5c2
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs
@@ -0,0 +1,248 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class ProviderBindingFinalizer : IBindingFinalizer
+    {
+        public ProviderBindingFinalizer(BindInfo bindInfo)
+        {
+            BindInfo = bindInfo;
+        }
+
+        public BindingInheritanceMethods BindingInheritanceMethod
+        {
+            get { return BindInfo.BindingInheritanceMethod; }
+        }
+
+        protected BindInfo BindInfo
+        {
+            get;
+            private set;
+        }
+
+        protected ScopeTypes GetScope()
+        {
+            if (BindInfo.Scope == ScopeTypes.Unset)
+            {
+                // If condition is set then it's probably fine to allow the default of transient
+                Assert.That(!BindInfo.RequireExplicitScope || BindInfo.Condition != null,
+                    "Scope must be set for the previous binding!  Please either specify AsTransient, AsCached, or AsSingle. Last binding: Contract: {0}, Identifier: {1} {2}",
+                    BindInfo.ContractTypes.Select(x => x.PrettyName()).Join(", "), BindInfo.Identifier,
+                    BindInfo.ContextInfo != null ? "Context: '{0}'".Fmt(BindInfo.ContextInfo) : "");
+                return ScopeTypes.Transient;
+            }
+
+            return BindInfo.Scope;
+        }
+
+        public void FinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ContractTypes.Count == 0)
+            {
+                // We could assert her instead but it is nice when used with things like
+                // BindInterfaces() (and there aren't any interfaces) to allow
+                // interfaces to be added later
+                return;
+            }
+
+            try
+            {
+                OnFinalizeBinding(container);
+            }
+            catch (Exception e)
+            {
+                throw Assert.CreateException(
+                    e, "Error while finalizing previous binding! Contract: {0}, Identifier: {1} {2}",
+                    BindInfo.ContractTypes.Select(x => x.PrettyName()).Join(", "), BindInfo.Identifier,
+                    BindInfo.ContextInfo != null ? "Context: '{0}'".Fmt(BindInfo.ContextInfo) : "");
+            }
+        }
+
+        protected abstract void OnFinalizeBinding(DiContainer container);
+
+        protected void RegisterProvider<TContract>(
+            DiContainer container, IProvider provider)
+        {
+            RegisterProvider(container, typeof(TContract), provider);
+        }
+
+        protected void RegisterProvider(
+            DiContainer container, Type contractType, IProvider provider)
+        {
+            if (BindInfo.OnlyBindIfNotBound && container.HasBindingId(contractType, BindInfo.Identifier))
+            {
+                return;
+            }
+
+            container.RegisterProvider(
+                new BindingId(contractType, BindInfo.Identifier),
+                BindInfo.Condition,
+                provider, BindInfo.NonLazy);
+
+            if (contractType.IsValueType() && !(contractType.IsGenericType() && contractType.GetGenericTypeDefinition() == typeof(Nullable<>)))
+            {
+                var nullableType = typeof(Nullable<>).MakeGenericType(contractType);
+
+                // Also bind to nullable primitives
+                // this is useful so that we can have optional primitive dependencies
+                container.RegisterProvider(
+                    new BindingId(nullableType, BindInfo.Identifier),
+                    BindInfo.Condition,
+                    provider, BindInfo.NonLazy);
+            }
+        }
+
+        protected void RegisterProviderPerContract(
+            DiContainer container, Func<DiContainer, Type, IProvider> providerFunc)
+        {
+            foreach (var contractType in BindInfo.ContractTypes)
+            {
+                var provider = providerFunc(container, contractType);
+
+                if (BindInfo.MarkAsUniqueSingleton)
+                {
+                    container.SingletonMarkRegistry.MarkSingleton(contractType);
+                }
+                else if (BindInfo.MarkAsCreationBinding)
+                {
+                    container.SingletonMarkRegistry.MarkNonSingleton(contractType);
+                }
+
+                RegisterProvider(container, contractType, provider);
+            }
+        }
+
+        protected void RegisterProviderForAllContracts(
+            DiContainer container, IProvider provider)
+        {
+            foreach (var contractType in BindInfo.ContractTypes)
+            {
+                if (BindInfo.MarkAsUniqueSingleton)
+                {
+                    container.SingletonMarkRegistry.MarkSingleton(contractType);
+                }
+                else if (BindInfo.MarkAsCreationBinding)
+                {
+                    container.SingletonMarkRegistry.MarkNonSingleton(contractType);
+                }
+
+                RegisterProvider(container, contractType, provider);
+            }
+        }
+
+        protected void RegisterProvidersPerContractAndConcreteType(
+            DiContainer container,
+            List<Type> concreteTypes,
+            Func<Type, Type, IProvider> providerFunc)
+        {
+            Assert.That(!BindInfo.ContractTypes.IsEmpty());
+            Assert.That(!concreteTypes.IsEmpty());
+
+            foreach (var contractType in BindInfo.ContractTypes)
+            {
+                foreach (var concreteType in concreteTypes)
+                {
+                    if (ValidateBindTypes(concreteType, contractType))
+                    {
+                        RegisterProvider(container, contractType, providerFunc(contractType, concreteType));
+                    }
+                }
+            }
+        }
+
+        // Returns true if the bind should continue, false to skip
+        bool ValidateBindTypes(Type concreteType, Type contractType)
+        {
+            bool isConcreteOpenGenericType = concreteType.IsOpenGenericType();
+            bool isContractOpenGenericType = contractType.IsOpenGenericType();
+            if (isConcreteOpenGenericType != isContractOpenGenericType)
+            {
+                return false;
+            }
+
+#if !(UNITY_WSA && ENABLE_DOTNET)
+            // TODO: Is it possible to do this on WSA?
+
+            if (isContractOpenGenericType)
+            {
+                Assert.That(isConcreteOpenGenericType);
+
+                if (TypeExtensions.IsAssignableToGenericType(concreteType, contractType))
+                {
+                    return true;
+                }
+            }
+            else if (concreteType.DerivesFromOrEqual(contractType))
+            {
+                return true;
+            }
+#else
+            if (concreteType.DerivesFromOrEqual(contractType))
+            {
+                return true;
+            }
+#endif
+
+            if (BindInfo.InvalidBindResponse == InvalidBindResponses.Assert)
+            {
+                throw Assert.CreateException(
+                    "Expected type '{0}' to derive from or be equal to '{1}'", concreteType, contractType);
+            }
+
+            Assert.IsEqual(BindInfo.InvalidBindResponse, InvalidBindResponses.Skip);
+            return false;
+        }
+
+        // Note that if multiple contract types are provided per concrete type,
+        // it will re-use the same provider for each contract type
+        // (each concrete type will have its own provider though)
+        protected void RegisterProvidersForAllContractsPerConcreteType(
+            DiContainer container,
+            List<Type> concreteTypes,
+            Func<DiContainer, Type, IProvider> providerFunc)
+        {
+            Assert.That(!BindInfo.ContractTypes.IsEmpty());
+            Assert.That(!concreteTypes.IsEmpty());
+
+            var providerMap = ZenPools.SpawnDictionary<Type, IProvider>();
+            try
+            {
+                foreach (var concreteType in concreteTypes)
+                {
+                    var provider = providerFunc(container, concreteType);
+
+                    providerMap[concreteType] = provider;
+
+                    if (BindInfo.MarkAsUniqueSingleton)
+                    {
+                        container.SingletonMarkRegistry.MarkSingleton(concreteType);
+                    }
+                    else if (BindInfo.MarkAsCreationBinding)
+                    {
+                        container.SingletonMarkRegistry.MarkNonSingleton(concreteType);
+                    }
+                }
+
+                foreach (var contractType in BindInfo.ContractTypes)
+                {
+                    foreach (var concreteType in concreteTypes)
+                    {
+                        if (ValidateBindTypes(concreteType, contractType))
+                        {
+                            RegisterProvider(container, contractType, providerMap[concreteType]);
+                        }
+                    }
+                }
+            }
+            finally
+            {
+                ZenPools.DespawnDictionary(providerMap);
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs.meta
new file mode 100644
index 0000000..07bf5fe
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/ProviderBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: ee5cb643a9ee24c4fa00e62afc9ef599
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs
new file mode 100644
index 0000000..e88c15a
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs
@@ -0,0 +1,93 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ScopableBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly Func<DiContainer, Type, IProvider> _providerFactory;
+
+        public ScopableBindingFinalizer(
+            BindInfo bindInfo, Func<DiContainer, Type, IProvider> providerFactory)
+            : base(bindInfo)
+        {
+            _providerFactory = providerFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+                FinalizeBindingSelf(container);
+            }
+            else
+            {
+                FinalizeBindingConcrete(container, BindInfo.ToTypes);
+            }
+        }
+
+        void FinalizeBindingConcrete(DiContainer container, List<Type> concreteTypes)
+        {
+            if (concreteTypes.Count == 0)
+            {
+                // This can be common when using convention based bindings
+                return;
+            }
+
+            var scope = GetScope();
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container, concreteTypes, _providerFactory);
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                            BindingUtil.CreateCachedProvider(
+                                _providerFactory(container, concreteType)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void FinalizeBindingSelf(DiContainer container)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProviderPerContract(container, _providerFactory);
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            BindingUtil.CreateCachedProvider(
+                                _providerFactory(container, contractType)));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs.meta
new file mode 100644
index 0000000..42f6eea
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/ScopableBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d2392181aaeca434cb15e2719d7567d6
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs
new file mode 100644
index 0000000..3bb2453
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs
@@ -0,0 +1,37 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SingleProviderBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly Func<DiContainer, Type, IProvider> _providerFactory;
+
+        public SingleProviderBindingFinalizer(
+            BindInfo bindInfo, Func<DiContainer, Type, IProvider> providerFactory)
+            : base(bindInfo)
+        {
+            _providerFactory = providerFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+
+                RegisterProviderPerContract(container, _providerFactory);
+            }
+            else
+            {
+                // Empty sometimes when using convention based bindings
+                if (!BindInfo.ToTypes.IsEmpty())
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container, BindInfo.ToTypes, _providerFactory);
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs.meta
new file mode 100644
index 0000000..6f15993
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SingleProviderBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: deaa9a3ee9e42a8448bba948495b9225
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs
new file mode 100644
index 0000000..236757d
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs
@@ -0,0 +1,106 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly object _subIdentifier;
+        readonly bool _resolveAll;
+        readonly Func<DiContainer, ISubContainerCreator> _creatorFactory;
+
+        public SubContainerBindingFinalizer(
+            BindInfo bindInfo, object subIdentifier,
+            bool resolveAll, Func<DiContainer, ISubContainerCreator> creatorFactory)
+            : base(bindInfo)
+        {
+            _subIdentifier = subIdentifier;
+            _resolveAll = resolveAll;
+            _creatorFactory = creatorFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+                FinalizeBindingSelf(container);
+            }
+            else
+            {
+                FinalizeBindingConcrete(container, BindInfo.ToTypes);
+            }
+        }
+
+        void FinalizeBindingConcrete(DiContainer container, List<Type> concreteTypes)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                            new SubContainerDependencyProvider(
+                                concreteType, _subIdentifier, _creatorFactory(container), _resolveAll));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var containerCreator = new SubContainerCreatorCached(_creatorFactory(container));
+
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                            new SubContainerDependencyProvider(
+                                concreteType, _subIdentifier, containerCreator, _resolveAll));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void FinalizeBindingSelf(DiContainer container)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) => new SubContainerDependencyProvider(
+                            contractType, _subIdentifier, _creatorFactory(container), _resolveAll));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var containerCreator = new SubContainerCreatorCached(_creatorFactory(container));
+
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                            new SubContainerDependencyProvider(
+                                contractType, _subIdentifier, containerCreator, _resolveAll));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs.meta
new file mode 100644
index 0000000..a6aeac8
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SubContainerBindingFinalizer.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b263fb784fd4b8140b850ff4d68c7aad
+timeCreated: 1535189470
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs b/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs
new file mode 100644
index 0000000..05790a2
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs
@@ -0,0 +1,112 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerPrefabBindingFinalizer : ProviderBindingFinalizer
+    {
+        readonly object _subIdentifier;
+        readonly bool _resolveAll;
+        readonly Func<DiContainer, ISubContainerCreator> _subContainerCreatorFactory;
+
+        public SubContainerPrefabBindingFinalizer(
+            BindInfo bindInfo,
+            object subIdentifier, bool resolveAll,
+            Func<DiContainer, ISubContainerCreator> subContainerCreatorFactory)
+            : base(bindInfo)
+        {
+            _subIdentifier = subIdentifier;
+            _resolveAll = resolveAll;
+            _subContainerCreatorFactory = subContainerCreatorFactory;
+        }
+
+        protected override void OnFinalizeBinding(DiContainer container)
+        {
+            if (BindInfo.ToChoice == ToChoices.Self)
+            {
+                Assert.IsEmpty(BindInfo.ToTypes);
+                FinalizeBindingSelf(container);
+            }
+            else
+            {
+                FinalizeBindingConcrete(container, BindInfo.ToTypes);
+            }
+        }
+
+        void FinalizeBindingConcrete(DiContainer container, List<Type> concreteTypes)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) => new SubContainerDependencyProvider(
+                            concreteType, _subIdentifier,
+                            _subContainerCreatorFactory(container), _resolveAll));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var containerCreator = new SubContainerCreatorCached(
+                        _subContainerCreatorFactory(container));
+
+                    RegisterProvidersForAllContractsPerConcreteType(
+                        container,
+                        concreteTypes,
+                        (_, concreteType) =>
+                        new SubContainerDependencyProvider(
+                            concreteType, _subIdentifier, containerCreator, _resolveAll));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        void FinalizeBindingSelf(DiContainer container)
+        {
+            var scope = GetScope();
+
+            switch (scope)
+            {
+                case ScopeTypes.Transient:
+                {
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) => new SubContainerDependencyProvider(
+                            contractType, _subIdentifier,
+                            _subContainerCreatorFactory(container), _resolveAll));
+                    break;
+                }
+                case ScopeTypes.Singleton:
+                {
+                    var containerCreator = new SubContainerCreatorCached(
+                        _subContainerCreatorFactory(container));
+
+                    RegisterProviderPerContract(
+                        container,
+                        (_, contractType) =>
+                        new SubContainerDependencyProvider(
+                            contractType, _subIdentifier, containerCreator, _resolveAll));
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs.meta b/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs.meta
new file mode 100644
index 0000000..5be3d44
--- /dev/null
+++ b/Assets/Source/Runtime/Binding/Finalizers/SubContainerPrefabBindingFinalizer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: da4cb0f689a9b074aa3d2f2da8b38015
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories.meta b/Assets/Source/Runtime/Factories.meta
new file mode 100644
index 0000000..4230331
--- /dev/null
+++ b/Assets/Source/Runtime/Factories.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: 2750a8b0a1173074e9387536c12de4f7
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs b/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs
new file mode 100644
index 0000000..30a887f
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs
@@ -0,0 +1,36 @@
+using ModestTree;
+
+namespace Zenject
+{
+    public class FactoryProviderWrapper<TContract> : IFactory<TContract>
+    {
+        readonly IProvider _provider;
+        readonly InjectContext _injectContext;
+
+        public FactoryProviderWrapper(
+            IProvider provider, InjectContext injectContext)
+        {
+            Assert.That(injectContext.MemberType.DerivesFromOrEqual<TContract>());
+
+            _provider = provider;
+            _injectContext = injectContext;
+        }
+
+        public TContract Create()
+        {
+            var instance = _provider.GetInstance(_injectContext);
+
+            if (_injectContext.Container.IsValidating)
+            {
+                // During validation it is sufficient to just call the _provider.GetInstance
+                return default(TContract);
+            }
+
+            Assert.That(instance == null
+                || instance.GetType().DerivesFromOrEqual(_injectContext.MemberType));
+
+            return (TContract)instance;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs.meta b/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs.meta
new file mode 100644
index 0000000..b9101a2
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/FactoryProviderWrapper.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f1157303ef95f2448a355067327cb83a
+timeCreated: 1488133028
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/IFactory.cs b/Assets/Source/Runtime/Factories/IFactory.cs
new file mode 100644
index 0000000..f62fe0d
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/IFactory.cs
@@ -0,0 +1,62 @@
+namespace Zenject
+{
+    public interface IFactory
+    {
+    }
+
+    public interface IFactory<out TValue> : IFactory
+    {
+        TValue Create();
+    }
+
+    public interface IFactory<in TParam1, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, in TParam8, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, in TParam8, in TParam9, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
+    }
+
+    public interface IFactory<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, in TParam8, in TParam9, in TParam10, out TValue> : IFactory
+    {
+        TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
+    }
+}
+
diff --git a/Assets/Source/Runtime/Factories/IFactory.cs.meta b/Assets/Source/Runtime/Factories/IFactory.cs.meta
new file mode 100644
index 0000000..f9703f0
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/IFactory.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 62c651ad6c58c1140ac224dc6284fa5e
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/KeyedFactory.cs b/Assets/Source/Runtime/Factories/KeyedFactory.cs
new file mode 100644
index 0000000..f8f6cac
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/KeyedFactory.cs
@@ -0,0 +1,193 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+
+namespace Zenject
+{
+    public abstract class KeyedFactoryBase<TBase, TKey> : IValidatable
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        [InjectOptional]
+        readonly List<ValuePair<TKey, Type>> _typePairs = null;
+
+        Dictionary<TKey, Type> _typeMap = null;
+
+        [InjectOptional]
+        readonly Type _fallbackType = null;
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        protected abstract IEnumerable<Type> ProvidedTypes
+        {
+            get;
+        }
+
+        public ICollection<TKey> Keys
+        {
+            get { return _typeMap.Keys; }
+        }
+
+        protected Dictionary<TKey, Type> TypeMap
+        {
+            get { return _typeMap; }
+        }
+
+        [Inject]
+        public void Initialize()
+        {
+            Assert.That(_fallbackType == null || _fallbackType.DerivesFromOrEqual<TBase>(),
+                "Expected fallback type '{0}' to derive from '{1}'", _fallbackType, typeof(TBase));
+
+#if UNITY_EDITOR
+            var duplicates = _typePairs.Select(x => x.First).GetDuplicates();
+
+            if (!duplicates.IsEmpty())
+            {
+                throw Assert.CreateException(
+                    "Found duplicate values in KeyedFactory: {0}", duplicates.Select(x => x.ToString()).Join(", "));
+            }
+#endif
+
+            _typeMap = _typePairs.ToDictionary(x => x.First, x => x.Second);
+            _typePairs.Clear();
+        }
+
+        public bool HasKey(TKey key)
+        {
+            return _typeMap.ContainsKey(key);
+        }
+
+        protected Type GetTypeForKey(TKey key)
+        {
+            Type keyedType;
+
+            if (!_typeMap.TryGetValue(key, out keyedType))
+            {
+                Assert.IsNotNull(_fallbackType, "Could not find instance for key '{0}'", key);
+                return _fallbackType;
+            }
+
+            return keyedType;
+        }
+
+        public virtual void Validate()
+        {
+            foreach (var constructType in _typeMap.Values)
+            {
+                Container.InstantiateExplicit(
+                    constructType, ValidationUtil.CreateDefaultArgs(ProvidedTypes.ToArray()));
+            }
+        }
+
+        protected static ConditionCopyNonLazyBinder AddBindingInternal<TDerived>(DiContainer container, TKey key)
+            where TDerived : TBase
+        {
+            return container.Bind<ValuePair<TKey, Type>>()
+                .FromInstance(ValuePair.New(key, typeof(TDerived)));
+        }
+    }
+
+    // Zero parameters
+    public class KeyedFactory<TBase, TKey> : KeyedFactoryBase<TBase, TKey>
+    {
+        protected override IEnumerable<Type> ProvidedTypes
+        {
+            get { return new Type[0]; }
+        }
+
+        public virtual TBase Create(TKey key)
+        {
+            var type = GetTypeForKey(key);
+            return (TBase)Container.Instantiate(type);
+        }
+    }
+
+    // One parameter
+    public class KeyedFactory<TBase, TKey, TParam1> : KeyedFactoryBase<TBase, TKey>
+    {
+        protected override IEnumerable<Type> ProvidedTypes
+        {
+            get { return new[] { typeof(TParam1) }; }
+        }
+
+        public virtual TBase Create(TKey key, TParam1 param1)
+        {
+            return (TBase)Container.InstantiateExplicit(
+                GetTypeForKey(key),
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1)
+                });
+        }
+    }
+
+    // Two parameters
+    public class KeyedFactory<TBase, TKey, TParam1, TParam2> : KeyedFactoryBase<TBase, TKey>
+    {
+        protected override IEnumerable<Type> ProvidedTypes
+        {
+            get { return new[] { typeof(TParam1), typeof(TParam2) }; }
+        }
+
+        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2)
+        {
+            return (TBase)Container.InstantiateExplicit(
+                GetTypeForKey(key),
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2)
+                });
+        }
+    }
+
+    // Three parameters
+    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3> : KeyedFactoryBase<TBase, TKey>
+    {
+        protected override IEnumerable<Type> ProvidedTypes
+        {
+            get { return new[] { typeof(TParam1), typeof(TParam2), typeof(TParam3) }; }
+        }
+
+        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            return (TBase)Container.InstantiateExplicit(
+                GetTypeForKey(key),
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3)
+                });
+        }
+    }
+
+    // Four parameters
+    public class KeyedFactory<TBase, TKey, TParam1, TParam2, TParam3, TParam4> : KeyedFactoryBase<TBase, TKey>
+    {
+        protected override IEnumerable<Type> ProvidedTypes
+        {
+            get { return new[] { typeof(TParam1), typeof(TParam2), typeof(TParam3), typeof(TParam4) }; }
+        }
+
+        public virtual TBase Create(TKey key, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            return (TBase)Container.InstantiateExplicit(
+                GetTypeForKey(key),
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3),
+                    InjectUtil.CreateTypePair(param4)
+                });
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/KeyedFactory.cs.meta b/Assets/Source/Runtime/Factories/KeyedFactory.cs.meta
new file mode 100644
index 0000000..feaab4f
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/KeyedFactory.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 73ed4b67b639aaf4c94f61339a6ff413
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/PlaceholderFactory.cs b/Assets/Source/Runtime/Factories/PlaceholderFactory.cs
new file mode 100644
index 0000000..1e3afe7
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PlaceholderFactory.cs
@@ -0,0 +1,302 @@
+using System;
+using System.Collections.Generic;
+#if !NOT_UNITY3D
+using JetBrains.Annotations;
+#endif
+
+namespace Zenject
+{
+    // Zero parameters
+    public class PlaceholderFactory<TValue> : PlaceholderFactoryBase<TValue>, IFactory<TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create()
+        {
+            return CreateInternal(new List<TypeValuePair>());
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get { yield break; }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TValue> : PlaceholderFactory<TValue>
+    {
+    }
+
+    // One parameter
+    public class PlaceholderFactory<TParam1, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get { yield return typeof(TParam1); }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TValue> : PlaceholderFactory<TParam1, TValue>
+    {
+    }
+
+    // Two parameters
+    public class PlaceholderFactory<TParam1, TParam2, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param1, TParam2 param2)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TValue> : PlaceholderFactory<TParam1, TParam2, TValue>
+    {
+    }
+
+    // Three parameters
+    public class PlaceholderFactory<TParam1, TParam2, TParam3, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TParam3, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+                yield return typeof(TParam3);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TParam3, TValue> : PlaceholderFactory<TParam1, TParam2, TParam3, TValue>
+    {
+    }
+
+    // Four parameters
+    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3),
+                    InjectUtil.CreateTypePair(param4)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+                yield return typeof(TParam3);
+                yield return typeof(TParam4);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TParam3, TParam4, TValue>
+        : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TValue>
+    {
+    }
+
+    // Five parameters
+    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3),
+                    InjectUtil.CreateTypePair(param4),
+                    InjectUtil.CreateTypePair(param5)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+                yield return typeof(TParam3);
+                yield return typeof(TParam4);
+                yield return typeof(TParam5);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+    {
+    }
+
+    // Six parameters
+    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+    {
+        // Note: Most of the time you should not override this method and should instead
+        // use BindFactory<>.FromIFactory if you want to do some custom logic
+#if !NOT_UNITY3D
+        [NotNull]
+#endif
+        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3),
+                    InjectUtil.CreateTypePair(param4),
+                    InjectUtil.CreateTypePair(param5),
+                    InjectUtil.CreateTypePair(param6)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+                yield return typeof(TParam3);
+                yield return typeof(TParam4);
+                yield return typeof(TParam5);
+                yield return typeof(TParam6);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+    {
+    }
+
+    // Ten parameters
+    public class PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
+        : PlaceholderFactoryBase<TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
+    {
+        // If you were hoping to override this method, use BindFactory<>.ToFactory instead
+        public virtual TValue Create(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10)
+        {
+            return CreateInternal(
+                new List<TypeValuePair>
+                {
+                    InjectUtil.CreateTypePair(param1),
+                    InjectUtil.CreateTypePair(param2),
+                    InjectUtil.CreateTypePair(param3),
+                    InjectUtil.CreateTypePair(param4),
+                    InjectUtil.CreateTypePair(param5),
+                    InjectUtil.CreateTypePair(param6),
+                    InjectUtil.CreateTypePair(param7),
+                    InjectUtil.CreateTypePair(param8),
+                    InjectUtil.CreateTypePair(param9),
+                    InjectUtil.CreateTypePair(param10)
+                });
+        }
+
+        protected sealed override IEnumerable<Type> ParamTypes
+        {
+            get
+            {
+                yield return typeof(TParam1);
+                yield return typeof(TParam2);
+                yield return typeof(TParam3);
+                yield return typeof(TParam4);
+                yield return typeof(TParam5);
+                yield return typeof(TParam6);
+                yield return typeof(TParam7);
+                yield return typeof(TParam8);
+                yield return typeof(TParam9);
+                yield return typeof(TParam10);
+            }
+        }
+    }
+
+    [Obsolete("Zenject.Factory has been renamed to PlaceholderFactory.  Zenject.Factory will be removed in future versions")]
+    public class Factory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
+        : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue>
+    {
+    }
+}
+
diff --git a/Assets/Source/Runtime/Factories/PlaceholderFactory.cs.meta b/Assets/Source/Runtime/Factories/PlaceholderFactory.cs.meta
new file mode 100644
index 0000000..46ad9e5
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PlaceholderFactory.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 665a56f53857092408155478e576cfd0
+timeCreated: 1486691381
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs b/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs
new file mode 100644
index 0000000..be43001
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs
@@ -0,0 +1,61 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    public interface IPlaceholderFactory : IValidatable
+    {
+    }
+
+    // Placeholder factories can be used to choose a creation method in an installer, using FactoryBinder
+    public abstract class PlaceholderFactoryBase<TValue> : IPlaceholderFactory
+    {
+        IProvider _provider;
+        InjectContext _injectContext;
+
+        [Inject]
+        void Construct(IProvider provider, InjectContext injectContext)
+        {
+            Assert.IsNotNull(provider);
+            Assert.IsNotNull(injectContext);
+
+            _provider = provider;
+            _injectContext = injectContext;
+        }
+
+        protected TValue CreateInternal(List<TypeValuePair> extraArgs)
+        {
+            try
+            {
+                var result = _provider.GetInstance(_injectContext, extraArgs);
+
+                if (_injectContext.Container.IsValidating && result is ValidationMarker)
+                {
+                    return default(TValue);
+                }
+
+                Assert.That(result == null || result.GetType().DerivesFromOrEqual<TValue>());
+
+                return (TValue) result;
+            }
+            catch (Exception e)
+            {
+                throw new ZenjectException(
+                    "Error during construction of type '{0}' via {1}.Create method!".Fmt(typeof(TValue), GetType()), e);
+            }
+        }
+
+        public virtual void Validate()
+        {
+            _provider.GetInstance(
+                _injectContext, ValidationUtil.CreateDefaultArgs(ParamTypes.ToArray()));
+        }
+
+        protected abstract IEnumerable<Type> ParamTypes
+        {
+            get;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs.meta b/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs.meta
new file mode 100644
index 0000000..e347876
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PlaceholderFactoryBase.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 2a15cf923ae4d72418e9951480e9f178
+timeCreated: 1527952932
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling.meta b/Assets/Source/Runtime/Factories/Pooling.meta
new file mode 100644
index 0000000..6887d73
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 0f3fb191ad2b6c74c97f488543a89c82
+folderAsset: yes
+timeCreated: 1484511595
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs
new file mode 100644
index 0000000..185e0fe
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs
@@ -0,0 +1,90 @@
+using System;
+
+namespace Zenject
+{
+    public interface IMemoryPool
+    {
+        int NumTotal { get; }
+        int NumActive { get; }
+        int NumInactive { get; }
+
+        Type ItemType
+        {
+            get;
+        }
+
+        /// <summary>
+        /// Changes pool size by creating new elements or destroying existing elements
+        /// This bypasses the configured expansion method (OneAtATime or Doubling)
+        /// </summary>
+        void Resize(int desiredPoolSize);
+
+        void Clear();
+
+        /// <summary>
+        /// Expands the pool by the additional size.
+        /// This bypasses the configured expansion method (OneAtATime or Doubling)
+        /// </summary>
+        /// <param name="numToAdd">The additional number of items to allocate in the pool</param>
+        void ExpandBy(int numToAdd);
+
+        /// <summary>
+        /// Shrinks the MemoryPool by removing a given number of elements
+        /// This bypasses the configured expansion method (OneAtATime or Doubling)
+        /// </summary>
+        /// <param name="numToRemove">The amount of items to remove from the pool</param>
+        void ShrinkBy(int numToRemove);
+
+        void Despawn(object obj);
+    }
+
+    public interface IDespawnableMemoryPool<TValue> : IMemoryPool
+    {
+        void Despawn(TValue item);
+    }
+
+    public interface IMemoryPool<TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn();
+    }
+
+    public interface IMemoryPool<in TParam1, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, in TParam4, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
+    }
+
+    public interface IMemoryPool<in TParam1, in TParam2, in TParam3, in TParam4, in TParam5, in TParam6, in TParam7, in TParam8, TValue> : IDespawnableMemoryPool<TValue>
+    {
+        TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs.meta
new file mode 100644
index 0000000..7598a2b
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/IMemoryPool.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 13b8377ec575a1a44a1028ee324ba17a
+timeCreated: 1485699960
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs
new file mode 100644
index 0000000..89356d9
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs
@@ -0,0 +1,316 @@
+namespace Zenject
+{
+    // Zero parameters
+    public class MemoryPool<TValue> : MemoryPoolBase<TValue>, IMemoryPool<TValue>, IFactory<TValue>
+    {
+        public TValue Spawn()
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TValue>.Create()
+        {
+            return Spawn();
+        }
+    }
+
+    // One parameter
+    public class MemoryPool<TParam1, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TValue>, IFactory<TParam1, TValue>
+    {
+        public TValue Spawn(TParam1 param)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param, item);
+                }
+            }
+
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TValue>.Create(TParam1 p1)
+        {
+            return Spawn(p1);
+        }
+    }
+
+    // Two parameters
+    public class MemoryPool<TParam1, TParam2, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TValue>, IFactory<TParam1, TParam2, TValue>
+    {
+        public TValue Spawn(TParam1 param1, TParam2 param2)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, item);
+                }
+            }
+
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TValue>.Create(TParam1 p1, TParam2 p2)
+        {
+            return Spawn(p1, p2);
+        }
+    }
+
+    // Three parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TValue>, IFactory<TParam1, TParam2, TParam3, TValue>
+    {
+        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TValue>.Create(TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            return Spawn(p1, p2, p3);
+        }
+    }
+
+    // Four parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TValue>
+    {
+        public TValue Spawn(TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, param4, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TParam4, TValue>.Create(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            return Spawn(p1, p2, p3, p4);
+        }
+    }
+
+    // Five parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+    {
+        public TValue Spawn(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
+        {
+            var item = GetInternal();
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, param4, param5, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>.Create(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+            return Spawn(p1, p2, p3, p4, p5);
+        }
+    }
+
+    // Six parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>,
+        IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+    {
+        public TValue Spawn(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, param4, param5, param6, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>.Create(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6)
+        {
+            return Spawn(p1, p2, p3, p4, p5, p6);
+        }
+    }
+
+    // Seven parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>,
+        IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+    {
+        public TValue Spawn(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, param4, param5, param6, param7, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>.Create(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7)
+        {
+            return Spawn(p1, p2, p3, p4, p5, p6, p7);
+        }
+    }
+
+    // Eight parameters
+    public class MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+        : MemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>,
+        IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+    {
+        public TValue Spawn(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8)
+        {
+            var item = GetInternal();
+
+            if (!Container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.Reinitialize", GetType()))
+#endif
+                {
+                    Reinitialize(param1, param2, param3, param4, param5, param6, param7, param8, item);
+                }
+            }
+            return item;
+        }
+
+        protected virtual void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item)
+        {
+            // Optional
+        }
+
+        TValue IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>.Create(
+            TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8)
+        {
+            return Spawn(p1, p2, p3, p4, p5, p6, p7, p8);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs.meta
new file mode 100644
index 0000000..42e02ab
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MemoryPool.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 305d88c8b2af3f2479cb45ffb6f2923c
+timeCreated: 1485699960
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs b/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs
new file mode 100644
index 0000000..4d28d0a
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs
@@ -0,0 +1,303 @@
+﻿using System;
+using System.Collections.Generic;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PoolExceededFixedSizeException : Exception
+    {
+        public PoolExceededFixedSizeException(string errorMessage)
+            : base(errorMessage)
+        {
+        }
+    }
+
+    [Serializable]
+    public class MemoryPoolSettings
+    {
+        public int InitialSize;
+        public int MaxSize;
+        public PoolExpandMethods ExpandMethod;
+
+        public MemoryPoolSettings()
+        {
+            InitialSize = 0;
+            MaxSize = int.MaxValue;
+            ExpandMethod = PoolExpandMethods.OneAtATime;
+        }
+
+        public MemoryPoolSettings(int initialSize, int maxSize, PoolExpandMethods expandMethod)
+        {
+            InitialSize = initialSize;
+            MaxSize = maxSize;
+            ExpandMethod = expandMethod;
+        }
+
+        public static readonly MemoryPoolSettings Default = new MemoryPoolSettings();
+    }
+
+    [ZenjectAllowDuringValidation]
+    public class MemoryPoolBase<TContract> : IValidatable, IMemoryPool, IDisposable
+    {
+        Stack<TContract> _inactiveItems;
+        IFactory<TContract> _factory;
+        MemoryPoolSettings _settings;
+        DiContainer _container;
+
+        int _activeCount;
+
+        [Inject]
+        void Construct(
+            IFactory<TContract> factory,
+            DiContainer container,
+            [InjectOptional]
+            MemoryPoolSettings settings)
+        {
+            _settings = settings ?? MemoryPoolSettings.Default;
+            _factory = factory;
+            _container = container;
+
+            _inactiveItems = new Stack<TContract>(_settings.InitialSize);
+
+            if (!container.IsValidating)
+            {
+                for (int i = 0; i < _settings.InitialSize; i++)
+                {
+                    _inactiveItems.Push(AllocNew());
+                }
+            }
+
+#if UNITY_EDITOR
+            StaticMemoryPoolRegistry.Add(this);
+#endif
+        }
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public IEnumerable<TContract> InactiveItems
+        {
+            get { return _inactiveItems; }
+        }
+
+        public int NumTotal
+        {
+            get { return NumInactive + NumActive; }
+        }
+
+        public int NumInactive
+        {
+            get { return _inactiveItems.Count; }
+        }
+
+        public int NumActive
+        {
+            get { return _activeCount; }
+        }
+
+        public Type ItemType
+        {
+            get { return typeof(TContract); }
+        }
+
+        public void Dispose()
+        {
+#if UNITY_EDITOR
+            StaticMemoryPoolRegistry.Remove(this);
+#endif
+        }
+
+        void IMemoryPool.Despawn(object item)
+        {
+            Despawn((TContract)item);
+        }
+
+        public void Despawn(TContract item)
+        {
+            Assert.That(!_inactiveItems.Contains(item),
+                "Tried to return an item to pool {0} twice", GetType());
+
+            _activeCount--;
+
+            _inactiveItems.Push(item);
+
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("{0}.OnDespawned", GetType()))
+#endif
+            {
+                OnDespawned(item);
+            }
+
+            if (_inactiveItems.Count > _settings.MaxSize)
+            {
+                Resize(_settings.MaxSize);
+            }
+        }
+
+        TContract AllocNew()
+        {
+            try
+            {
+                var item = _factory.Create();
+
+                if (!_container.IsValidating)
+                {
+                    Assert.IsNotNull(item, "Factory '{0}' returned null value when creating via {1}!", _factory.GetType(), GetType());
+                    OnCreated(item);
+                }
+
+                return item;
+            }
+            catch (Exception e)
+            {
+                throw new ZenjectException(
+                    "Error during construction of type '{0}' via {1}.Create method!".Fmt(
+                        typeof(TContract), GetType()), e);
+            }
+        }
+
+        void IValidatable.Validate()
+        {
+            try
+            {
+                _factory.Create();
+            }
+            catch (Exception e)
+            {
+                throw new ZenjectException(
+                    "Validation for factory '{0}' failed".Fmt(GetType()), e);
+            }
+        }
+
+        public void Clear()
+        {
+            Resize(0);
+        }
+
+        public void ShrinkBy(int numToRemove)
+        {
+            Resize(_inactiveItems.Count - numToRemove);
+        }
+
+        public void ExpandBy(int numToAdd)
+        {
+            Resize(_inactiveItems.Count + numToAdd);
+        }
+
+        protected TContract GetInternal()
+        {
+            TContract item = default;
+            
+            // Make sure we don't ever try to spawn a null item.
+            // Most of the times this loop will only run once. 
+            // But sometimes the items in the pool get destroyed by the user or by Unity.
+            // In that case, our inactiveItems stack will contain invalid/null references.
+            // For example, during scene change, items are valid during OnDestroy call and can be returned to the pool,
+            // but the items will be destroyed by Unity right after the scene changes.
+            while (ZenUtilInternal.IsNull(item))
+            {
+                if (_inactiveItems.Count == 0)
+                {
+                    ExpandPool();
+                    Assert.That(!_inactiveItems.IsEmpty());
+                }
+
+                item = _inactiveItems.Pop();
+            }
+
+            _activeCount++;
+            OnSpawned(item);
+            return item;
+        }
+
+        public void Resize(int desiredPoolSize)
+        {
+            if (_inactiveItems.Count == desiredPoolSize)
+            {
+                return;
+            }
+
+            if (_settings.ExpandMethod == PoolExpandMethods.Disabled)
+            {
+                throw new PoolExceededFixedSizeException(
+                    "Pool factory '{0}' attempted resize but pool set to fixed size of '{1}'!"
+                    .Fmt(GetType(), _inactiveItems.Count));
+            }
+
+            Assert.That(desiredPoolSize >= 0, "Attempted to resize the pool to a negative amount");
+
+            while (_inactiveItems.Count > desiredPoolSize)
+            {
+                OnDestroyed(_inactiveItems.Pop());
+            }
+
+            while (desiredPoolSize > _inactiveItems.Count)
+            {
+                _inactiveItems.Push(AllocNew());
+            }
+
+            Assert.IsEqual(_inactiveItems.Count, desiredPoolSize);
+        }
+
+        void ExpandPool()
+        {
+            switch (_settings.ExpandMethod)
+            {
+                case PoolExpandMethods.Disabled:
+                {
+                    throw new PoolExceededFixedSizeException(
+                        "Pool factory '{0}' exceeded its fixed size of '{1}'!"
+                        .Fmt(GetType(), _inactiveItems.Count));
+                }
+                case PoolExpandMethods.OneAtATime:
+                {
+                    ExpandBy(1);
+                    break;
+                }
+                case PoolExpandMethods.Double:
+                {
+                    if (NumTotal == 0)
+                    {
+                        ExpandBy(1);
+                    }
+                    else
+                    {
+                        ExpandBy(NumTotal);
+                    }
+                    break;
+                }
+                default:
+                {
+                    throw Assert.CreateException();
+                }
+            }
+        }
+
+        protected virtual void OnDespawned(TContract item)
+        {
+            // Optional
+        }
+
+        protected virtual void OnSpawned(TContract item)
+        {
+            // Optional
+        }
+
+        protected virtual void OnCreated(TContract item)
+        {
+            // Optional
+        }
+
+        protected virtual void OnDestroyed(TContract item)
+        {
+            // Optional
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs.meta b/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs.meta
new file mode 100644
index 0000000..10b91a4
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MemoryPoolBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: ba9d727a5d866fb46a576ab76012b727
+timeCreated: 1485703991
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs
new file mode 100644
index 0000000..9428957
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs
@@ -0,0 +1,254 @@
+using UnityEngine;
+
+namespace Zenject
+{
+    // Zero parameters
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TValue> : MemoryPool<TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+
+    // One parameter
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TParam1, TValue> : MemoryPool<TParam1, TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+
+    // Two parameters
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TParam1, TParam2, TValue>
+        : MemoryPool<TParam1, TParam2, TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+
+    // Three parameters
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TParam1, TParam2, TParam3, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+
+    // Four parameters
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+
+    // Five parameters
+    // NOTE: For this to work, the given component must be at the root game object of the thing
+    // you want to use in a pool
+    public class MonoMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        where TValue : Component
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            // Record the original parent which will be set to whatever is used in the UnderTransform method
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnSpawned(TValue item)
+        {
+            item.gameObject.SetActive(true);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs.meta
new file mode 100644
index 0000000..3cbc571
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MonoMemoryPool.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1334aecb808e6c145a993cb441f43bdb
+timeCreated: 1485703991
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs
new file mode 100644
index 0000000..f9d1694
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs
@@ -0,0 +1,372 @@
+using UnityEngine;
+
+namespace Zenject
+{
+    // Zero parameters
+    public class MonoPoolableMemoryPool<TValue> : MemoryPool<TValue>
+        where TValue : Component, IPoolable
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned();
+        }
+    }
+
+    // One parameters
+    public class MonoPoolableMemoryPool<TParam1, TValue>
+        : MemoryPool<TParam1, TValue>
+        where TValue : Component, IPoolable<TParam1>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1);
+        }
+    }
+
+    // Two parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TValue>
+        : MemoryPool<TParam1, TParam2, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2);
+        }
+    }
+
+    // Three parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3);
+        }
+    }
+
+    // Four parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3, TParam4>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3, p4);
+        }
+    }
+
+    // Five parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3, p4, p5);
+        }
+    }
+
+    // Six parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3, p4, p5, p6);
+        }
+    }
+
+    // Seven parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3, p4, p5, p6, p7);
+        }
+    }
+
+    // Eight parameters
+    public class MonoPoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+        where TValue : Component, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
+    {
+        Transform _originalParent;
+
+        [Inject]
+        public MonoPoolableMemoryPool()
+        {
+        }
+
+        protected override void OnCreated(TValue item)
+        {
+            item.gameObject.SetActive(false);
+            _originalParent = item.transform.parent;
+        }
+
+        protected override void OnDestroyed(TValue item)
+        {
+            GameObject.Destroy(item.gameObject);
+        }
+
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+            item.gameObject.SetActive(false);
+
+            if (item.transform.parent != _originalParent)
+            {
+                item.transform.SetParent(_originalParent, false);
+            }
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item)
+        {
+            item.gameObject.SetActive(true);
+            item.OnSpawned(p1, p2, p3, p4, p5, p6, p7, p8);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs.meta
new file mode 100644
index 0000000..1790bc2
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/MonoPoolableMemoryPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5475433f41ca61c4a9095affbf60b848
+timeCreated: 1528535898
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs b/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs
new file mode 100644
index 0000000..541f293
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs
@@ -0,0 +1,38 @@
+using System;
+
+namespace Zenject
+{
+    // Here we assume that each spawned object does the work of returning itself to the pool
+    // in its own Dispose method
+    public class PoolWrapperFactory<T> : IFactory<T>
+        where T : IDisposable
+    {
+        readonly IMemoryPool<T> _pool;
+
+        public PoolWrapperFactory(IMemoryPool<T> pool)
+        {
+            _pool = pool;
+        }
+
+        public T Create()
+        {
+            return _pool.Spawn();
+        }
+    }
+
+    public class PoolWrapperFactory<TParam1, TValue> : IFactory<TParam1, TValue>
+        where TValue : IDisposable
+    {
+        readonly IMemoryPool<TParam1, TValue> _pool;
+
+        public PoolWrapperFactory(IMemoryPool<TParam1, TValue> pool)
+        {
+            _pool = pool;
+        }
+
+        public TValue Create(TParam1 arg)
+        {
+            return _pool.Spawn(arg);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs.meta b/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs.meta
new file mode 100644
index 0000000..0b382e3
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/PoolFactory.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 125bde4ab63a4984484c450640ee1702
+timeCreated: 1518946218
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs
new file mode 100644
index 0000000..febb762
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs
@@ -0,0 +1,147 @@
+namespace Zenject
+{
+    // Zero parameters
+    public class PoolableMemoryPool<TValue>
+        : MemoryPool<TValue>
+        where TValue : IPoolable
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TValue item)
+        {
+            item.OnSpawned();
+        }
+    }
+
+    // One parameters
+    public class PoolableMemoryPool<TParam1, TValue>
+        : MemoryPool<TParam1, TValue>
+        where TValue : IPoolable<TParam1>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TValue item)
+        {
+            item.OnSpawned(p1);
+        }
+    }
+
+    // Two parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TValue>
+        : MemoryPool<TParam1, TParam2, TValue>
+        where TValue : IPoolable<TParam1, TParam2>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TValue item)
+        {
+            item.OnSpawned(p1, p2);
+        }
+    }
+
+    // Three parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3);
+        }
+    }
+
+    // Four parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3, TParam4>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3, p4);
+        }
+    }
+
+    // Five parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3, p4, p5);
+        }
+    }
+
+    // Six parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3, p4, p5, p6);
+        }
+    }
+
+    // Seven parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3, p4, p5, p6, p7);
+        }
+    }
+
+    // Eight parameters
+    public class PoolableMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+        : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TValue>
+        where TValue : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8>
+    {
+        protected override void OnDespawned(TValue item)
+        {
+            item.OnDespawned();
+        }
+
+        protected override void Reinitialize(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TParam8 p8, TValue item)
+        {
+            item.OnSpawned(p1, p2, p3, p4, p5, p6, p7, p8);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs.meta
new file mode 100644
index 0000000..8a26b47
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/PoolableMemoryPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7fa0c435e1800a048ac5f7c53e03472d
+timeCreated: 1517205083
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Static.meta b/Assets/Source/Runtime/Factories/Pooling/Static.meta
new file mode 100644
index 0000000..36febe3
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Static.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 28d06bc0b4cdf374ca41d78b0ec5dc0a
+folderAsset: yes
+timeCreated: 1515014902
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs
new file mode 100644
index 0000000..3002390
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs
@@ -0,0 +1,154 @@
+namespace Zenject
+{
+    public class PoolableStaticMemoryPool<TValue> : StaticMemoryPool<TValue>
+        where TValue : class, IPoolable, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TValue value)
+        {
+            value.OnSpawned();
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TValue> : StaticMemoryPool<TParam1, TValue>
+        where TValue : class, IPoolable<TParam1>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TValue value)
+        {
+            value.OnSpawned(p1);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TValue> : StaticMemoryPool<TParam1, TParam2, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TValue value)
+        {
+            value.OnSpawned(p1, p2);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TValue> : StaticMemoryPool<TParam1, TParam2, TParam3, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2, TParam3>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TParam3 p3, TValue value)
+        {
+            value.OnSpawned(p1, p2, p3);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2, TParam3, TParam4>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TValue value)
+        {
+            value.OnSpawned(p1, p2, p3, p4);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TValue value)
+        {
+            value.OnSpawned(p1, p2, p3, p4, p5);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TValue value)
+        {
+            value.OnSpawned(p1, p2, p3, p4, p5, p6);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+
+    public class PoolableStaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        where TValue : class, IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>, new()
+    {
+        public PoolableStaticMemoryPool()
+            : base(OnSpawned, OnDespawned)
+        {
+        }
+
+        static void OnSpawned(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7, TValue value)
+        {
+            value.OnSpawned(p1, p2, p3, p4, p5, p6, p7);
+        }
+
+        static void OnDespawned(TValue value)
+        {
+            value.OnDespawned();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs.meta
new file mode 100644
index 0000000..62722a0
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Static/PoolableStaticMemoryPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 3bf78918a4d09d44695230ef305b6e1a
+timeCreated: 1528618262
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs b/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs
new file mode 100644
index 0000000..392de26
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs
@@ -0,0 +1,557 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class StaticMemoryPoolBaseBase<TValue> : IDespawnableMemoryPool<TValue>, IDisposable
+        where TValue : class
+    {
+        // I also tried using ConcurrentBag instead of Stack + lock here but that performed much much worse
+        readonly Stack<TValue> _stack = new Stack<TValue>();
+
+        Action<TValue> _onDespawnedMethod;
+        int _activeCount;
+
+#if ZEN_MULTITHREADING
+        protected readonly object _locker = new object();
+#endif
+
+        public StaticMemoryPoolBaseBase(Action<TValue> onDespawnedMethod)
+        {
+            _onDespawnedMethod = onDespawnedMethod;
+
+#if UNITY_EDITOR
+            StaticMemoryPoolRegistry.Add(this);
+#endif
+        }
+
+        public Action<TValue> OnDespawnedMethod
+        {
+            set { _onDespawnedMethod = value; }
+        }
+
+        public int NumTotal
+        {
+            get { return NumInactive + NumActive; }
+        }
+
+        public int NumActive
+        {
+            get
+            {
+#if ZEN_MULTITHREADING
+                lock (_locker)
+#endif
+                {
+                    return _activeCount;
+                }
+            }
+        }
+
+        public int NumInactive
+        {
+            get
+            {
+#if ZEN_MULTITHREADING
+                lock (_locker)
+#endif
+                {
+                    return _stack.Count;
+                }
+            }
+        }
+
+        public Type ItemType
+        {
+            get { return typeof(TValue); }
+        }
+
+        public void Resize(int desiredPoolSize)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                ResizeInternal(desiredPoolSize);
+            }
+        }
+
+        // We assume here that we're in a lock
+        void ResizeInternal(int desiredPoolSize)
+        {
+            Assert.That(desiredPoolSize >= 0, "Attempted to resize the pool to a negative amount");
+
+            while (_stack.Count > desiredPoolSize)
+            {
+                _stack.Pop();
+            }
+
+            while (desiredPoolSize > _stack.Count)
+            {
+                _stack.Push(Alloc());
+            }
+
+            Assert.IsEqual(_stack.Count, desiredPoolSize);
+        }
+
+        public void Dispose()
+        {
+#if UNITY_EDITOR
+            StaticMemoryPoolRegistry.Remove(this);
+#endif
+        }
+
+        public void ClearActiveCount()
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                _activeCount = 0;
+            }
+        }
+
+        public void Clear()
+        {
+            Resize(0);
+        }
+
+        public void ShrinkBy(int numToRemove)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                ResizeInternal(_stack.Count - numToRemove);
+            }
+        }
+
+        public void ExpandBy(int numToAdd)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                ResizeInternal(_stack.Count + numToAdd);
+            }
+        }
+
+        // We assume here that we're in a lock
+        protected TValue SpawnInternal()
+        {
+            TValue element;
+
+            if (_stack.Count == 0)
+            {
+                element = Alloc();
+            }
+            else
+            {
+                element = _stack.Pop();
+            }
+
+            _activeCount++;
+            return element;
+        }
+
+        void IMemoryPool.Despawn(object item)
+        {
+            Despawn((TValue)item);
+        }
+
+        public void Despawn(TValue element)
+        {
+            if (_onDespawnedMethod != null)
+            {
+                _onDespawnedMethod(element);
+            }
+
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                Assert.That(!_stack.Contains(element), "Attempted to despawn element twice!");
+
+                _activeCount--;
+                _stack.Push(element);
+            }
+        }
+
+        protected abstract TValue Alloc();
+    }
+
+    [NoReflectionBaking]
+    public abstract class StaticMemoryPoolBase<TValue> : StaticMemoryPoolBaseBase<TValue>
+        where TValue : class, new()
+    {
+        public StaticMemoryPoolBase(Action<TValue> onDespawnedMethod)
+            : base(onDespawnedMethod)
+        {
+        }
+
+        protected override TValue Alloc()
+        {
+            return new TValue();
+        }
+    }
+
+    // Zero parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TValue>
+        where TValue : class, new()
+    {
+        Action<TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+            Action<TValue> onSpawnMethod = null, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public Action<TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn()
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // One parameter
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TValue>
+        where TValue : class, new()
+    {
+        Action<TParam1, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+            Action<TParam1, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public Action<TParam1, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 param)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(param, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Two parameter
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TValue>
+        where TValue : class, new()
+    {
+        Action<TParam1, TParam2, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+            Action<TParam1, TParam2, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public Action<TParam1, TParam2, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Three parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TParam3, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TValue>
+        where TValue : class, new()
+    {
+        Action<TParam1, TParam2, TParam3, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+            Action<TParam1, TParam2, TParam3, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public Action<TParam1, TParam2, TParam3, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, p3, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Four parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue>
+        where TValue : class, new()
+    {
+#if !NET_4_6 && !NET_STANDARD_2_0
+        ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, p3, p4, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Five parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue>
+        where TValue : class, new()
+    {
+#if !NET_4_6 && !NET_STANDARD_2_0
+        ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, p3, p4, p5, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Six parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue>
+        where TValue : class, new()
+    {
+#if !NET_4_6 && !NET_STANDARD_2_0
+        ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, p3, p4, p5, p6, item);
+                }
+
+                return item;
+            }
+        }
+    }
+
+    // Seven parameters
+
+    [NoReflectionBaking]
+    public class StaticMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> : StaticMemoryPoolBase<TValue>, IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue>
+        where TValue : class, new()
+    {
+#if !NET_4_6 && !NET_STANDARD_2_0
+        ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> _onSpawnMethod;
+
+        public StaticMemoryPool(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> onSpawnMethod, Action<TValue> onDespawnedMethod = null)
+            : base(onDespawnedMethod)
+        {
+            // What's the point of having a param otherwise?
+            Assert.IsNotNull(onSpawnMethod);
+            _onSpawnMethod = onSpawnMethod;
+        }
+
+        public
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> OnSpawnMethod
+        {
+            set { _onSpawnMethod = value; }
+        }
+
+        public TValue Spawn(TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7)
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var item = SpawnInternal();
+
+                if (_onSpawnMethod != null)
+                {
+                    _onSpawnMethod(p1, p2, p3, p4, p5, p6, p7, item);
+                }
+
+                return item;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs.meta
new file mode 100644
index 0000000..01c22b5
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Static/StaticMemoryPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 56b2eb81b3385fd47a0500abeac7b60e
+timeCreated: 1528024394
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util.meta b/Assets/Source/Runtime/Factories/Pooling/Util.meta
new file mode 100644
index 0000000..e9d6e6e
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 6214acccd2e0c2044921cc068fb3d0a6
+folderAsset: yes
+timeCreated: 1520607639
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs b/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs
new file mode 100644
index 0000000..a5edb89
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs
@@ -0,0 +1,54 @@
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    public class ArrayPool<T> : StaticMemoryPoolBaseBase<T[]>
+    {
+        readonly int _length;
+
+        public ArrayPool(int length)
+            : base(OnDespawned)
+        {
+            _length = length;
+        }
+
+        static void OnDespawned(T[] arr)
+        {
+            for (int i = 0; i < arr.Length; i++)
+            {
+                arr[i] = default(T);
+            }
+        }
+
+        public T[] Spawn()
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                return SpawnInternal();
+            }
+        }
+
+        protected override T[] Alloc()
+        {
+            return new T[_length];
+        }
+
+        static readonly Dictionary<int, ArrayPool<T>> _pools =
+            new Dictionary<int, ArrayPool<T>>();
+
+        public static ArrayPool<T> GetPool(int length)
+        {
+            ArrayPool<T> pool;
+
+            if (!_pools.TryGetValue(length, out pool))
+            {
+                pool = new ArrayPool<T>(length);
+                _pools.Add(length, pool);
+            }
+
+            return pool;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs.meta
new file mode 100644
index 0000000..5d09609
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/ArrayPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 891d6e713fcfdfc4a95271fdee018e94
+timeCreated: 1537870146
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs b/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs
new file mode 100644
index 0000000..8ec6d37
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs
@@ -0,0 +1,32 @@
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    public class DictionaryPool<TKey, TValue> : StaticMemoryPool<Dictionary<TKey, TValue>>
+    {
+        static DictionaryPool<TKey, TValue> _instance = new DictionaryPool<TKey, TValue>();
+
+        public DictionaryPool()
+        {
+            OnSpawnMethod = OnSpawned;
+            OnDespawnedMethod = OnDespawned;
+        }
+
+        public static DictionaryPool<TKey, TValue> Instance
+        {
+            get { return _instance; }
+        }
+
+        static void OnSpawned(Dictionary<TKey, TValue> items)
+        {
+            Assert.That(items.IsEmpty());
+        }
+
+        static void OnDespawned(Dictionary<TKey, TValue> items)
+        {
+            items.Clear();
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs.meta
new file mode 100644
index 0000000..880894e
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/DictionaryPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 031a0490d1684424e9e33b22106cb178
+timeCreated: 1520670682
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs b/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs
new file mode 100644
index 0000000..5fb2950
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs
@@ -0,0 +1,31 @@
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    public class HashSetPool<T> : StaticMemoryPool<HashSet<T>>
+    {
+        static HashSetPool<T> _instance = new HashSetPool<T>();
+
+        public HashSetPool()
+        {
+            OnSpawnMethod = OnSpawned;
+            OnDespawnedMethod = OnDespawned;
+        }
+
+        public static HashSetPool<T> Instance
+        {
+            get { return _instance; }
+        }
+
+        static void OnSpawned(HashSet<T> items)
+        {
+            Assert.That(items.IsEmpty());
+        }
+
+        static void OnDespawned(HashSet<T> items)
+        {
+            items.Clear();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs.meta
new file mode 100644
index 0000000..ce0a3d9
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/HashSetPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 89c66035001289a4199cb04e17d0bc28
+timeCreated: 1520670682
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs b/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs
new file mode 100644
index 0000000..70b5c74
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs
@@ -0,0 +1,24 @@
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    public class ListPool<T> : StaticMemoryPool<List<T>>
+    {
+        static ListPool<T> _instance = new ListPool<T>();
+
+        public ListPool()
+        {
+            OnDespawnedMethod = OnDespawned;
+        }
+
+        public static ListPool<T> Instance
+        {
+            get { return _instance; }
+        }
+
+        void OnDespawned(List<T> list)
+        {
+            list.Clear();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs.meta
new file mode 100644
index 0000000..e46f4e5
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/ListPool.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: f30364d1ac067164ea56051cd000b49f
+timeCreated: 1520670682
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs b/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs
new file mode 100644
index 0000000..df27969
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs
@@ -0,0 +1,40 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    // If you want to ensure that all items are always returned to the pool, include the following
+    // in an installer
+    // Container.BindInterfacesTo<PoolCleanupChecker>().AsSingle()
+    public class PoolCleanupChecker : ILateDisposable
+    {
+        readonly List<IMemoryPool> _poolFactories;
+        readonly List<Type> _ignoredPools;
+
+        public PoolCleanupChecker(
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<IMemoryPool> poolFactories,
+            [Inject(Source = InjectSources.Local)]
+            List<Type> ignoredPools)
+        {
+            _poolFactories = poolFactories;
+            _ignoredPools = ignoredPools;
+
+            Assert.That(ignoredPools.All(x => x.DerivesFrom<IMemoryPool>()));
+        }
+
+        public void LateDispose()
+        {
+            foreach (var pool in _poolFactories)
+            {
+                if (!_ignoredPools.Contains(pool.GetType()))
+                {
+                    Assert.IsEqual(pool.NumActive, 0,
+                        "Found active objects in pool '{0}' during dispose.  Did you forget to despawn an object of type '{1}'?".Fmt(pool.GetType(), pool.ItemType));
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs.meta
new file mode 100644
index 0000000..75f6171
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/PoolCleanupChecker.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 69aee89274cd16b48aa790ddd5a061d2
+timeCreated: 1520670682
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs b/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs
new file mode 100644
index 0000000..d110001
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs
@@ -0,0 +1,33 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+#if UNITY_EDITOR
+    public static class StaticMemoryPoolRegistry
+    {
+        public static event Action<IMemoryPool> PoolAdded = delegate {};
+        public static event Action<IMemoryPool> PoolRemoved = delegate {};
+
+        readonly static List<IMemoryPool> _pools = new List<IMemoryPool>();
+
+        public static IEnumerable<IMemoryPool> Pools
+        {
+            get { return _pools; }
+        }
+
+        public static void Add(IMemoryPool memoryPool)
+        {
+            _pools.Add(memoryPool);
+            PoolAdded(memoryPool);
+        }
+
+        public static void Remove(IMemoryPool memoryPool)
+        {
+            _pools.RemoveWithConfirm(memoryPool);
+            PoolRemoved(memoryPool);
+        }
+    }
+#endif
+}
diff --git a/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs.meta b/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs.meta
new file mode 100644
index 0000000..5b67ebf
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/Pooling/Util/StaticMemoryPoolRegistry.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: cccc66ed95242b544bd7f501f0ecb89b
+timeCreated: 1521390236
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/PrefabFactory.cs b/Assets/Source/Runtime/Factories/PrefabFactory.cs
new file mode 100644
index 0000000..e149b3c
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PrefabFactory.cs
@@ -0,0 +1,127 @@
+﻿#if !NOT_UNITY3D
+
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    // This factory type can be useful if you want to control where the prefab comes from at runtime
+    // rather than from within the installers
+
+    //No parameters
+    public class PrefabFactory<T> : IFactory<UnityEngine.Object, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(UnityEngine.Object prefab)
+        {
+            Assert.That(prefab != null,
+               "Null prefab given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            return _container.InstantiatePrefabForComponent<T>(prefab);
+        }
+
+        // Note: We can't really validate here without access to the prefab
+        // We could validate the class directly with the current container but that fails when the
+        // class is inside a GameObjectContext
+    }
+
+    // One parameter
+    public class PrefabFactory<P1, T> : IFactory<UnityEngine.Object, P1, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(UnityEngine.Object prefab, P1 param)
+        {
+            Assert.That(prefab != null,
+               "Null prefab given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param));
+        }
+    }
+
+    // Two parameters
+    public class PrefabFactory<P1, P2, T> : IFactory<UnityEngine.Object, P1, P2, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2)
+        {
+            Assert.That(prefab != null,
+               "Null prefab given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2));
+        }
+    }
+
+    // Three parameters
+    public class PrefabFactory<P1, P2, P3, T> : IFactory<UnityEngine.Object, P1, P2, P3, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3)
+        {
+            Assert.That(prefab != null,
+               "Null prefab given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2, param3));
+        }
+    }
+
+    // Four parameters
+    public class PrefabFactory<P1, P2, P3, P4, T> : IFactory<UnityEngine.Object, P1, P2, P3, P4, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(UnityEngine.Object prefab, P1 param, P2 param2, P3 param3, P4 param4)
+        {
+            Assert.That(prefab != null,
+               "Null prefab given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2, param3, param4));
+        }
+    }
+}
+
+#endif
+
+
diff --git a/Assets/Source/Runtime/Factories/PrefabFactory.cs.meta b/Assets/Source/Runtime/Factories/PrefabFactory.cs.meta
new file mode 100644
index 0000000..9ac8145
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PrefabFactory.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 39782cb4430018d459f5707002dff73c
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs b/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs
new file mode 100644
index 0000000..8967e23
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs
@@ -0,0 +1,136 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    // This factory type can be useful if you want to control where the prefab comes from at runtime
+    // rather than from within the installers
+
+    //No parameters
+    public class PrefabResourceFactory<T> : IFactory<string, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(string prefabResourceName)
+        {
+            Assert.That(!string.IsNullOrEmpty(prefabResourceName),
+              "Null or empty prefab resource name given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            var prefab = (GameObject)Resources.Load(prefabResourceName);
+            return _container.InstantiatePrefabForComponent<T>(prefab);
+        }
+
+        // Note: We can't really validate here without access to the prefab
+        // We could validate the class directly with the current container but that fails when the
+        // class is inside a GameObjectContext
+    }
+
+    // One parameter
+    public class PrefabResourceFactory<P1, T> : IFactory<string, P1, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(string prefabResourceName, P1 param)
+        {
+            Assert.That(!string.IsNullOrEmpty(prefabResourceName),
+              "Null or empty prefab resource name given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            var prefab = (GameObject)Resources.Load(prefabResourceName);
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param));
+        }
+    }
+
+    // Two parameters
+    public class PrefabResourceFactory<P1, P2, T> : IFactory<string, P1, P2, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(string prefabResourceName, P1 param, P2 param2)
+        {
+            Assert.That(!string.IsNullOrEmpty(prefabResourceName),
+              "Null or empty prefab resource name given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            var prefab = (GameObject)Resources.Load(prefabResourceName);
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2));
+        }
+    }
+
+    // Three parameters
+    public class PrefabResourceFactory<P1, P2, P3, T> : IFactory<string, P1, P2, P3, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3)
+        {
+            Assert.That(!string.IsNullOrEmpty(prefabResourceName),
+              "Null or empty prefab resource name given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            var prefab = (GameObject)Resources.Load(prefabResourceName);
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2, param3));
+        }
+    }
+
+    // Four parameters
+    public class PrefabResourceFactory<P1, P2, P3, P4, T> : IFactory<string, P1, P2, P3, P4, T>
+        //where T : Component
+    {
+        [Inject]
+        readonly DiContainer _container = null;
+
+        public DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual T Create(string prefabResourceName, P1 param, P2 param2, P3 param3, P4 param4)
+        {
+            Assert.That(!string.IsNullOrEmpty(prefabResourceName),
+              "Null or empty prefab resource name given to factory create method when instantiating object with type '{0}'.", typeof(T));
+
+            var prefab = (GameObject)Resources.Load(prefabResourceName);
+
+            return (T)_container.InstantiatePrefabForComponentExplicit(
+                typeof(T), prefab, InjectUtil.CreateArgListExplicit(param, param2, param3, param4));
+        }
+    }
+}
+
+#endif
+
+
+
diff --git a/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs.meta b/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs.meta
new file mode 100644
index 0000000..bb73b86
--- /dev/null
+++ b/Assets/Source/Runtime/Factories/PrefabResourceFactory.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5fd50037209abd647b7ae7391717f015
+timeCreated: 1534319565
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Injection.meta b/Assets/Source/Runtime/Injection.meta
new file mode 100644
index 0000000..a927c30
--- /dev/null
+++ b/Assets/Source/Runtime/Injection.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: e36c66e30e287cf48b9bb264d4924562
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Runtime/Injection/InjectContext.cs b/Assets/Source/Runtime/Injection/InjectContext.cs
new file mode 100644
index 0000000..86d13be
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/InjectContext.cs
@@ -0,0 +1,274 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class InjectContext : IDisposable
+    {
+        BindingId _bindingId;
+        Type _objectType;
+        InjectContext _parentContext;
+        object _objectInstance;
+        string _memberName;
+        bool _optional;
+        InjectSources _sourceType;
+        object _fallBackValue;
+        object _concreteIdentifier;
+        DiContainer _container;
+
+        public InjectContext()
+        {
+            _bindingId = new BindingId();
+            Reset();
+        }
+
+        public InjectContext(DiContainer container, Type memberType)
+            : this()
+        {
+            Container = container;
+            MemberType = memberType;
+        }
+
+        public InjectContext(DiContainer container, Type memberType, object identifier)
+            : this(container, memberType)
+        {
+            Identifier = identifier;
+        }
+
+        public InjectContext(DiContainer container, Type memberType, object identifier, bool optional)
+            : this(container, memberType, identifier)
+        {
+            Optional = optional;
+        }
+
+        public void Dispose()
+        {
+            ZenPools.DespawnInjectContext(this);
+        }
+
+        public void Reset()
+        {
+            _objectType = null;
+            _parentContext = null;
+            _objectInstance = null;
+            _memberName = "";
+            _optional = false;
+            _sourceType = InjectSources.Any;
+            _fallBackValue = null;
+            _container = null;
+            _bindingId.Type = null;
+            _bindingId.Identifier = null;
+        }
+
+        public BindingId BindingId
+        {
+            get { return _bindingId; }
+        }
+
+        // The type of the object which is having its members injected
+        // NOTE: This is null for root calls to Resolve<> or Instantiate<>
+        public Type ObjectType
+        {
+            get { return _objectType; }
+            set { _objectType = value; }
+        }
+
+        // Parent context that triggered the creation of ObjectType
+        // This can be used for very complex conditions using parent info such as identifiers, types, etc.
+        // Note that ParentContext.MemberType is not necessarily the same as ObjectType,
+        // since the ObjectType could be a derived type from ParentContext.MemberType
+        public InjectContext ParentContext
+        {
+            get { return _parentContext; }
+            set { _parentContext = value; }
+        }
+
+        // The instance which is having its members injected
+        // Note that this is null when injecting into the constructor
+        public object ObjectInstance
+        {
+            get { return _objectInstance; }
+            set { _objectInstance = value; }
+        }
+
+        // Identifier - most of the time this is null
+        // It will match 'foo' in this example:
+        //      ... In an installer somewhere:
+        //          Container.Bind<Foo>("foo").AsSingle();
+        //      ...
+        //      ... In a constructor:
+        //          public Foo([Inject(Id = "foo") Foo foo)
+        public object Identifier
+        {
+            get { return _bindingId.Identifier; }
+            set { _bindingId.Identifier = value; }
+        }
+
+        // The constructor parameter name, or field name, or property name
+        public string MemberName
+        {
+            get { return _memberName; }
+            set { _memberName = value; }
+        }
+
+        // The type of the constructor parameter, field or property
+        public Type MemberType
+        {
+            get { return _bindingId.Type; }
+            set { _bindingId.Type = value; }
+        }
+
+        // When optional, null is a valid value to be returned
+        public bool Optional
+        {
+            get { return _optional; }
+            set { _optional = value; }
+        }
+
+        // When set to true, this will only look up dependencies in the local container and will not
+        // search in parent containers
+        public InjectSources SourceType
+        {
+            get { return _sourceType; }
+            set { _sourceType = value; }
+        }
+
+        public object ConcreteIdentifier
+        {
+            get { return _concreteIdentifier; }
+            set { _concreteIdentifier = value; }
+        }
+
+        // When optional, this is used to provide the value
+        public object FallBackValue
+        {
+            get { return _fallBackValue; }
+            set { _fallBackValue = value; }
+        }
+
+        // The container used for this injection
+        public DiContainer Container
+        {
+            get { return _container; }
+            set { _container = value; }
+        }
+
+        public IEnumerable<InjectContext> ParentContexts
+        {
+            get
+            {
+                if (ParentContext == null)
+                {
+                    yield break;
+                }
+
+                yield return ParentContext;
+
+                foreach (var context in ParentContext.ParentContexts)
+                {
+                    yield return context;
+                }
+            }
+        }
+
+        public IEnumerable<InjectContext> ParentContextsAndSelf
+        {
+            get
+            {
+                yield return this;
+
+                foreach (var context in ParentContexts)
+                {
+                    yield return context;
+                }
+            }
+        }
+
+        // This will return the types of all the objects that are being injected
+        // So if you have class Foo which has constructor parameter of type IBar,
+        // and IBar resolves to Bar, this will be equal to (Bar, Foo)
+        public IEnumerable<Type> AllObjectTypes
+        {
+            get
+            {
+                foreach (var context in ParentContextsAndSelf)
+                {
+                    if (context.ObjectType != null)
+                    {
+                        yield return context.ObjectType;
+                    }
+                }
+            }
+        }
+
+        public InjectContext CreateSubContext(Type memberType)
+        {
+            return CreateSubContext(memberType, null);
+        }
+
+        public InjectContext CreateSubContext(Type memberType, object identifier)
+        {
+            var subContext = new InjectContext();
+
+            subContext.ParentContext = this;
+            subContext.Identifier = identifier;
+            subContext.MemberType = memberType;
+
+            // Clear these
+            subContext.ConcreteIdentifier = null;
+            subContext.MemberName = "";
+            subContext.FallBackValue = null;
+
+            // Inherit these ones by default
+            subContext.ObjectType = ObjectType;
+            subContext.ObjectInstance = ObjectInstance;
+            subContext.Optional = Optional;
+            subContext.SourceType = SourceType;
+            subContext.Container = Container;
+
+            return subContext;
+        }
+
+        public InjectContext Clone()
+        {
+            var clone = new InjectContext();
+
+            clone.ObjectType = ObjectType;
+            clone.ParentContext = ParentContext;
+            clone.ConcreteIdentifier = ConcreteIdentifier;
+            clone.ObjectInstance = ObjectInstance;
+            clone.Identifier = Identifier;
+            clone.MemberType = MemberType;
+            clone.MemberName = MemberName;
+            clone.Optional = Optional;
+            clone.SourceType = SourceType;
+            clone.FallBackValue = FallBackValue;
+            clone.Container = Container;
+
+            return clone;
+        }
+
+        // This is very useful to print out for debugging purposes
+        public string GetObjectGraphString()
+        {
+            var result = new StringBuilder();
+
+            foreach (var context in ParentContextsAndSelf.Reverse())
+            {
+                if (context.ObjectType == null)
+                {
+                    continue;
+                }
+
+                result.AppendLine(context.ObjectType.PrettyName());
+            }
+
+            return result.ToString();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Injection/InjectContext.cs.meta b/Assets/Source/Runtime/Injection/InjectContext.cs.meta
new file mode 100644
index 0000000..c198cd7
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/InjectContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2005ce29739317b48bcc3c06695da848
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Injection/InjectUtil.cs b/Assets/Source/Runtime/Injection/InjectUtil.cs
new file mode 100644
index 0000000..430df54
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/InjectUtil.cs
@@ -0,0 +1,127 @@
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [DebuggerStepThrough]
+    public struct TypeValuePair
+    {
+        public Type Type;
+        public object Value;
+
+        public TypeValuePair(Type type, object value)
+        {
+            Type = type;
+            Value = value;
+        }
+    }
+
+    [DebuggerStepThrough]
+    public static class InjectUtil
+    {
+        public static List<TypeValuePair> CreateArgList(IEnumerable<object> args)
+        {
+            Assert.That(!args.ContainsItem(null),
+                "Cannot include null values when creating a zenject argument list because zenject has no way of deducing the type from a null value.  If you want to allow null, use the Explicit form.");
+            return args.Select(x => new TypeValuePair(x.GetType(), x)).ToList();
+        }
+
+        public static TypeValuePair CreateTypePair<T>(T param)
+        {
+            // Use the most derived type that we can find here
+            return new TypeValuePair(
+                param == null ? typeof(T) : param.GetType(), param);
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<T>(T param)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param)
+            };
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2>(TParam1 param1, TParam2 param2)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param1),
+                CreateTypePair(param2)
+            };
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3>(
+            TParam1 param1, TParam2 param2, TParam3 param3)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param1),
+                CreateTypePair(param2),
+                CreateTypePair(param3)
+            };
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param1),
+                CreateTypePair(param2),
+                CreateTypePair(param3),
+                CreateTypePair(param4)
+            };
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param1),
+                CreateTypePair(param2),
+                CreateTypePair(param3),
+                CreateTypePair(param4),
+                CreateTypePair(param5)
+            };
+        }
+
+        public static List<TypeValuePair> CreateArgListExplicit<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(
+            TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6)
+        {
+            return new List<TypeValuePair>
+            {
+                CreateTypePair(param1),
+                CreateTypePair(param2),
+                CreateTypePair(param3),
+                CreateTypePair(param4),
+                CreateTypePair(param5),
+                CreateTypePair(param6)
+            };
+        }
+
+        // Find the first match with the given type and remove it from the list
+        // Return true if it was removed
+        public static bool PopValueWithType(
+            List<TypeValuePair> extraArgMap, Type injectedFieldType, out object value)
+        {
+            for (int i = 0; i < extraArgMap.Count; i++)
+            {
+                var arg = extraArgMap[i];
+
+                if (arg.Type.DerivesFromOrEqual(injectedFieldType))
+                {
+                    value = arg.Value;
+                    extraArgMap.RemoveAt(i);
+                    return true;
+                }
+            }
+
+            value = injectedFieldType.GetDefaultValue();
+            return false;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Injection/InjectUtil.cs.meta b/Assets/Source/Runtime/Injection/InjectUtil.cs.meta
new file mode 100644
index 0000000..23bbaa8
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/InjectUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 0ebfddbd9452a9c4cb6c9dfe7a25ea53
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Injection/LazyInject.cs b/Assets/Source/Runtime/Injection/LazyInject.cs
new file mode 100644
index 0000000..9dd2cf5
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/LazyInject.cs
@@ -0,0 +1,42 @@
+using ModestTree;
+
+namespace Zenject
+{
+    [ZenjectAllowDuringValidation]
+    [NoReflectionBaking]
+    public class LazyInject<T> : IValidatable
+    {
+        readonly DiContainer _container;
+        readonly InjectContext _context;
+
+        bool _hasValue;
+        T _value;
+
+        public LazyInject(DiContainer container, InjectContext context)
+        {
+            Assert.DerivesFromOrEqual<T>(context.MemberType);
+
+            _container = container;
+            _context = context;
+        }
+
+        void IValidatable.Validate()
+        {
+            _container.Resolve(_context);
+        }
+
+        public T Value
+        {
+            get
+            {
+                if (!_hasValue)
+                {
+                    _value = (T)_container.Resolve(_context);
+                    _hasValue = true;
+                }
+
+                return _value;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Injection/LazyInject.cs.meta b/Assets/Source/Runtime/Injection/LazyInject.cs.meta
new file mode 100644
index 0000000..8f14789
--- /dev/null
+++ b/Assets/Source/Runtime/Injection/LazyInject.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 54883063c774a244c898edbc91b859a0
+timeCreated: 1529237555
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install.meta b/Assets/Source/Runtime/Install.meta
new file mode 100644
index 0000000..730d584
--- /dev/null
+++ b/Assets/Source/Runtime/Install.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 6a15b3ef3a9656b4f85216520ae9b180
+folderAsset: yes
+timeCreated: 1459463884
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs b/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs
new file mode 100644
index 0000000..4ab3585
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs
@@ -0,0 +1,226 @@
+using System.Collections.Generic;
+using System.Linq;
+using Zenject;
+
+namespace Zenject
+{
+    public static class CompositeInstallerExtensions
+    {
+        public static bool ValidateLeafInstallers<T>(this ICompositeInstaller<T> compositeInstaller)
+            where T : IInstaller
+        {
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsComposite(compositeInstaller);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        // Specify T if the installer is concrete composite installer so that T will not be infered as ICompositeInstaller.
+        public static bool ValidateAsComposite<T>(this T installer)
+            where T : IInstaller
+        {
+            var compositeInstaller = installer as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsComposite(compositeInstaller);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        public static bool ValidateAsComposite<T>(this T installer, ICompositeInstaller<T> parent1)
+            where T : IInstaller
+        {
+            var compositeInstaller = installer as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (compositeInstaller == parent1)
+            {
+                return false;
+            }
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsComposite(parent1, compositeInstaller);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        public static bool ValidateAsComposite<T>(this T installer, ICompositeInstaller<T> parent1, ICompositeInstaller<T> parent2)
+            where T : IInstaller
+        {
+            var compositeInstaller = installer as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (compositeInstaller == parent1 ||
+                compositeInstaller == parent2)
+            {
+                return false;
+            }
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsComposite(parent1, parent2, compositeInstaller);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        public static bool ValidateAsComposite<T>(this T installer, ICompositeInstaller<T> parent1, ICompositeInstaller<T> parent2, ICompositeInstaller<T> parent3)
+            where T : IInstaller
+        {
+            var compositeInstaller = installer as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (compositeInstaller == parent1 ||
+                compositeInstaller == parent2 ||
+                compositeInstaller == parent3)
+            {
+                return false;
+            }
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsComposite(parent1, parent2, parent3, compositeInstaller);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        public static bool ValidateAsComposite<T>(this T installer, ICompositeInstaller<T> parent1, ICompositeInstaller<T> parent2, ICompositeInstaller<T> parent3, ICompositeInstaller<T> parent4)
+            where T : IInstaller
+        {
+            var compositeInstaller = installer as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (compositeInstaller == parent1 ||
+                compositeInstaller == parent2 ||
+                compositeInstaller == parent3 ||
+                compositeInstaller == parent4)
+            {
+                return false;
+            }
+
+            var childParentInstallers = new List<ICompositeInstaller<T>>(8)
+            {
+                parent1,
+                parent2,
+                parent3,
+                parent4,
+                compositeInstaller,
+            };
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var leafInstaller = leafInstallers[i];
+                bool leafResult = leafInstaller.ValidateAsCompositeSavedAlloc(childParentInstallers);
+                if (!leafResult) { return false; }
+            }
+
+            return true;
+        }
+
+        public static bool ValidateAsComposite<T>(
+            this T leafInstaller,
+            IReadOnlyList<ICompositeInstaller<T>> parentInstallers)
+            where T : IInstaller
+        {
+            var compositeInstaller = leafInstaller as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (parentInstallers.Contains(compositeInstaller))
+            {
+                // Found a circular reference
+                return false;
+            }
+
+            var childParentInstallers = new List<ICompositeInstaller<T>>(parentInstallers)
+            {
+                compositeInstaller
+            };
+
+            bool result = compositeInstaller
+                .LeafInstallers
+                .All(installer => installer.ValidateAsCompositeSavedAlloc(childParentInstallers));
+            return result;
+        }
+
+        public static bool ValidateAsCompositeSavedAlloc<T>(
+            this T leafInstaller,
+            List<ICompositeInstaller<T>> reusableParentInstallers)
+            where T : IInstaller
+        {
+            var compositeInstaller = leafInstaller as ICompositeInstaller<T>;
+            if (compositeInstaller == null)
+            {
+                return true;
+            }
+
+            if (reusableParentInstallers.Contains(compositeInstaller))
+            {
+                // Found a circular reference
+                return false;
+            }
+
+            bool result = true;
+
+            int compositeInstallerIndex = reusableParentInstallers.Count;
+            reusableParentInstallers.Add(compositeInstaller);
+
+            var leafInstallers = compositeInstaller.LeafInstallers;
+            for (int i = 0; i < leafInstallers.Count; ++i)
+            {
+                var installer = leafInstallers[i];
+                result &= installer.ValidateAsCompositeSavedAlloc(reusableParentInstallers);
+
+                if (!result)
+                {
+                    break;
+                }
+            }
+
+            reusableParentInstallers.RemoveAt(compositeInstallerIndex);
+
+            return result;
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs.meta b/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs.meta
new file mode 100644
index 0000000..10ffe64
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeInstallerExtensions.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 1bd159b6715b8b147b5492c29ddf568e
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs b/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs
new file mode 100644
index 0000000..702c849
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs
@@ -0,0 +1,30 @@
+using System.Collections.Generic;
+using UnityEngine;
+using ModestTree;
+
+namespace Zenject
+{
+    public class CompositeMonoInstaller : MonoInstaller<CompositeMonoInstaller>, ICompositeInstaller<MonoInstallerBase>
+    {
+        [SerializeField]
+        List<MonoInstallerBase> _leafInstallers = new List<MonoInstallerBase>();
+        public IReadOnlyList<MonoInstallerBase> LeafInstallers => _leafInstallers;
+
+        public override void InstallBindings()
+        {
+            Assert.That(this.ValidateLeafInstallers(), "Found some circular references in {0}".Fmt(name));
+
+            foreach (var installer in _leafInstallers)
+            {
+                Container.Inject(installer);
+
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    installer.InstallBindings();
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs.meta b/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs.meta
new file mode 100644
index 0000000..1fe54bb
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeMonoInstaller.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 5c0b026e5523f9c44acfea241a4f5ad6
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs b/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs
new file mode 100644
index 0000000..32b1bb2
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs
@@ -0,0 +1,31 @@
+using System.Collections.Generic;
+using UnityEngine;
+using ModestTree;
+
+namespace Zenject
+{
+    // Use `Create -> Zenject -> Composite Scriptable Object Installer`
+    public class CompositeScriptableObjectInstaller : ScriptableObjectInstaller<CompositeScriptableObjectInstaller>, ICompositeInstaller<ScriptableObjectInstallerBase>
+    {
+        [SerializeField]
+        List<ScriptableObjectInstallerBase> _leafInstallers = new List<ScriptableObjectInstallerBase>();
+        public IReadOnlyList<ScriptableObjectInstallerBase> LeafInstallers => _leafInstallers;
+
+        public override void InstallBindings()
+        {
+            Assert.That(this.ValidateLeafInstallers(), "Found some circular references in {0}".Fmt(name));
+
+            foreach (var installer in _leafInstallers)
+            {
+                Container.Inject(installer);
+
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    installer.InstallBindings();
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs.meta b/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs.meta
new file mode 100644
index 0000000..bf66c6a
--- /dev/null
+++ b/Assets/Source/Runtime/Install/CompositeScriptableObjectInstaller.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 2f81b908d05150b4190f0ceb8456e280
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts.meta b/Assets/Source/Runtime/Install/Contexts.meta
new file mode 100644
index 0000000..29fbd1e
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: fc41c06067fc1d4479c3b85aa2707cfb
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/Context.cs b/Assets/Source/Runtime/Install/Contexts/Context.cs
new file mode 100644
index 0000000..3f47415
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/Context.cs
@@ -0,0 +1,386 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using UnityEngine.Serialization;
+using Zenject.Internal;
+#if UNITY_EDITOR
+using UnityEditor;
+
+#endif
+
+namespace Zenject
+{
+    public abstract class Context : MonoBehaviour
+    {
+        [SerializeField]
+        List<ScriptableObjectInstaller> _scriptableObjectInstallers = new List<ScriptableObjectInstaller>();
+
+        [FormerlySerializedAs("Installers")] [FormerlySerializedAs("_installers")] [SerializeField]
+        List<MonoInstaller> _monoInstallers = new List<MonoInstaller>();
+
+        [SerializeField] List<MonoInstaller> _installerPrefabs = new List<MonoInstaller>();
+
+        [Tooltip("If checked, this context will automatically get all MonoInstallers attached to the current gameObject by calling GetComponents. This is useful for when you are using Prefab Variants and you cannot easily modify the list of installers.")] [SerializeField]
+        bool _findSiblingMonoInstallers;
+
+        List<InstallerBase> _normalInstallers = new List<InstallerBase>();
+        List<Type> _normalInstallerTypes = new List<Type>();
+
+        public IEnumerable<MonoInstaller> Installers
+        {
+            get { return _monoInstallers; }
+            set
+            {
+                _monoInstallers.Clear();
+                _monoInstallers.AddRange(value);
+            }
+        }
+
+        public IEnumerable<MonoInstaller> InstallerPrefabs
+        {
+            get { return _installerPrefabs; }
+            set
+            {
+                _installerPrefabs.Clear();
+                _installerPrefabs.AddRange(value);
+            }
+        }
+
+        public IEnumerable<ScriptableObjectInstaller> ScriptableObjectInstallers
+        {
+            get { return _scriptableObjectInstallers; }
+            set
+            {
+                _scriptableObjectInstallers.Clear();
+                _scriptableObjectInstallers.AddRange(value);
+            }
+        }
+
+        // Unlike other installer types this has to be set through code
+        public IEnumerable<Type> NormalInstallerTypes
+        {
+            get { return _normalInstallerTypes; }
+            set
+            {
+                Assert.That(value.All(x => x != null && x.DerivesFrom<InstallerBase>()));
+
+                _normalInstallerTypes.Clear();
+                _normalInstallerTypes.AddRange(value);
+            }
+        }
+
+        // Unlike other installer types this has to be set through code
+        public IEnumerable<InstallerBase> NormalInstallers
+        {
+            get { return _normalInstallers; }
+            set
+            {
+                _normalInstallers.Clear();
+                _normalInstallers.AddRange(value);
+            }
+        }
+
+        public abstract DiContainer Container { get; }
+        public abstract IEnumerable<GameObject> GetRootGameObjects();
+
+        protected virtual void Awake()
+        {
+#if UNITY_EDITOR
+            // When Scene Reloading is disabled in Enter The Play Mode settings, we need to reset all non-serialized fields
+            // https://docs.unity3d.com/Manual/SceneReloading.html
+            EditorApplication.playModeStateChanged += OnEditorPlayModeChanged;
+#endif
+        }
+        
+#if UNITY_EDITOR
+        void OnEditorPlayModeChanged(PlayModeStateChange obj)
+        {
+            if (!EditorSettings.enterPlayModeOptionsEnabled)
+                return;
+
+            // If Scene Reload is enabled, we don't need to reset instance fields.
+            if ((EditorSettings.enterPlayModeOptions & EnterPlayModeOptions.DisableSceneReload) == 0)
+                return;
+
+            if (obj == PlayModeStateChange.EnteredEditMode)
+                ResetInstanceFields();
+        }
+
+        protected virtual void ResetInstanceFields()
+        {
+            _normalInstallers.Clear();
+            _normalInstallerTypes.Clear();
+        }
+#endif
+
+        public void AddNormalInstallerType(Type installerType)
+        {
+            Assert.IsNotNull(installerType);
+            Assert.That(installerType.DerivesFrom<InstallerBase>());
+
+            _normalInstallerTypes.Add(installerType);
+        }
+
+        public void AddNormalInstaller(InstallerBase installer)
+        {
+            _normalInstallers.Add(installer);
+        }
+
+        void CheckInstallerPrefabTypes(List<MonoInstaller> installers, List<MonoInstaller> installerPrefabs)
+        {
+            foreach (var installer in installers)
+            {
+                Assert.IsNotNull(installer, "Found null installer in Context '{0}'", name);
+
+#if UNITY_EDITOR
+#if UNITY_2018_3_OR_NEWER
+                Assert.That(!PrefabUtility.IsPartOfPrefabAsset(installer.gameObject),
+#else
+                Assert.That(PrefabUtility.GetPrefabType(installer.gameObject) != PrefabType.Prefab,
+#endif
+                    "Found prefab with name '{0}' in the Installer property of Context '{1}'.  You should use the property 'InstallerPrefabs' for this instead.",
+                    installer.name, name);
+#endif
+            }
+
+            foreach (var installerPrefab in installerPrefabs)
+            {
+                Assert.IsNotNull(installerPrefab, "Found null prefab in Context");
+
+                // We'd like to do this but this is actually a valid case sometimes
+                // (eg. loading an asset bundle with a scene containing a scene context when inside unity editor)
+//#if UNITY_EDITOR
+                //Assert.That(PrefabUtility.GetPrefabType(installerPrefab.gameObject) == PrefabType.Prefab,
+                //"Found non-prefab with name '{0}' in the InstallerPrefabs property of Context '{1}'.  You should use the property 'Installer' for this instead",
+                //installerPrefab.name, this.name);
+//#endif
+                Assert.That(installerPrefab.GetComponent<MonoInstaller>() != null,
+                    "Expected to find component with type 'MonoInstaller' on given installer prefab '{0}'",
+                    installerPrefab.name);
+            }
+        }
+
+        protected void InstallInstallers()
+        {
+            if (_findSiblingMonoInstallers)
+            {
+                List<MonoInstaller> siblingInstallers = ZenPools.SpawnList<MonoInstaller>();
+
+                try
+                {
+                    GetComponents(siblingInstallers);
+
+                    foreach (MonoInstaller m in siblingInstallers)
+                    {
+                        if (!_monoInstallers.Contains(m))
+                            _monoInstallers.Add(m);
+                    }
+                }
+                finally
+                {
+                    ZenPools.DespawnList(siblingInstallers);
+                }
+            }
+
+            InstallInstallers(
+                _normalInstallers, _normalInstallerTypes, _scriptableObjectInstallers, _monoInstallers,
+                _installerPrefabs);
+        }
+
+        protected void InstallInstallers(
+            List<InstallerBase> normalInstallers,
+            List<Type> normalInstallerTypes,
+            List<ScriptableObjectInstaller> scriptableObjectInstallers,
+            List<MonoInstaller> installers,
+            List<MonoInstaller> installerPrefabs)
+        {
+            CheckInstallerPrefabTypes(installers, installerPrefabs);
+
+            // Ideally we would just have one flat list of all the installers
+            // since that way the user has complete control over the order, but
+            // that's not possible since Unity does not allow serializing lists of interfaces
+            // (and it has to be an inteface since the scriptable object installers only share
+            // the interface)
+            //
+            // So the best we can do is have a hard-coded order in terms of the installer type
+            //
+            // The order is:
+            //      - Normal installers given directly via code
+            //      - ScriptableObject installers
+            //      - MonoInstallers in the scene
+            //      - Prefab Installers
+            //
+            // We put ScriptableObject installers before the MonoInstallers because
+            // ScriptableObjectInstallers are often used for settings (including settings
+            // that are injected into other installers like MonoInstallers)
+
+            var allInstallers = normalInstallers.Cast<IInstaller>()
+                .Concat(scriptableObjectInstallers.Cast<IInstaller>())
+                .Concat(installers.Cast<IInstaller>()).ToList();
+
+            foreach (var installerPrefab in installerPrefabs)
+            {
+                Assert.IsNotNull(installerPrefab, "Found null installer prefab in '{0}'", GetType());
+
+                GameObject installerGameObject;
+
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("GameObject.Instantiate"))
+#endif
+                {
+                    installerGameObject = GameObject.Instantiate(installerPrefab.gameObject);
+                }
+
+                installerGameObject.transform.SetParent(transform, false);
+                var installer = installerGameObject.GetComponent<MonoInstaller>();
+
+                Assert.IsNotNull(installer, "Could not find installer component on prefab '{0}'", installerPrefab.name);
+
+                allInstallers.Add(installer);
+            }
+
+            foreach (var installerType in normalInstallerTypes)
+            {
+                var installer = (InstallerBase) Container.Instantiate(installerType);
+
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    installer.InstallBindings();
+                }
+            }
+
+            foreach (var installer in allInstallers)
+            {
+                Assert.IsNotNull(installer,
+                    "Found null installer in '{0}'", GetType());
+
+                Container.Inject(installer);
+
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    installer.InstallBindings();
+                }
+            }
+        }
+
+        protected void InstallSceneBindings(List<MonoBehaviour> injectableMonoBehaviours)
+        {
+            foreach (var binding in injectableMonoBehaviours.OfType<ZenjectBinding>())
+            {
+                if (binding == null)
+                {
+                    continue;
+                }
+
+                if (binding.Context == null || (binding.UseSceneContext && this is SceneContext))
+                {
+                    binding.Context = this;
+                }
+            }
+
+            // We'd prefer to use GameObject.FindObjectsOfType<ZenjectBinding>() here
+            // instead but that doesn't find inactive gameobjects
+            // TODO: Consider changing this
+            // Maybe ZenjectBinding could add itself to a registry class on Awake/OnEnable
+            // then we could avoid calling the slow Resources.FindObjectsOfTypeAll here
+            foreach (var binding in Resources.FindObjectsOfTypeAll<ZenjectBinding>())
+            {
+                if (binding == null)
+                {
+                    continue;
+                }
+
+                // This is necessary for cases where the ZenjectBinding is inside a GameObjectContext
+                // since it won't be caught in the other loop above
+                if (this is SceneContext)
+                {
+                    if (binding.Context == null && binding.UseSceneContext
+                                                && binding.gameObject.scene == gameObject.scene)
+                    {
+                        binding.Context = this;
+                    }
+                }
+
+                if (binding.Context == this)
+                {
+                    InstallZenjectBinding(binding);
+                }
+            }
+        }
+
+        void InstallZenjectBinding(ZenjectBinding binding)
+        {
+            if (!binding.enabled)
+            {
+                return;
+            }
+
+            if (binding.Components == null || binding.Components.IsEmpty())
+            {
+                Log.Warn("Found empty list of components on ZenjectBinding on object '{0}'", binding.name);
+                return;
+            }
+
+            string identifier = null;
+
+            if (binding.Identifier.Trim().Length > 0)
+            {
+                identifier = binding.Identifier;
+            }
+
+            foreach (var component in binding.Components)
+            {
+                var bindType = binding.BindType;
+
+                if (component == null)
+                {
+                    Log.Warn("Found null component in ZenjectBinding on object '{0}'", binding.name);
+                    continue;
+                }
+
+                var componentType = component.GetType();
+
+                switch (bindType)
+                {
+                    case ZenjectBinding.BindTypes.Self:
+                    {
+                        Container.Bind(componentType).WithId(identifier).FromInstance(component);
+                        break;
+                    }
+                    case ZenjectBinding.BindTypes.BaseType:
+                    {
+                        Container.Bind(componentType.BaseType()).WithId(identifier).FromInstance(component);
+                        break;
+                    }
+                    case ZenjectBinding.BindTypes.AllInterfaces:
+                    {
+                        Container.Bind(componentType.Interfaces()).WithId(identifier).FromInstance(component);
+                        break;
+                    }
+                    case ZenjectBinding.BindTypes.AllInterfacesAndSelf:
+                    {
+                        Container.Bind(componentType.Interfaces().Concat(new[] {componentType}).ToArray())
+                            .WithId(identifier).FromInstance(component);
+                        break;
+                    }
+                    default:
+                    {
+                        throw Assert.CreateException();
+                    }
+                }
+            }
+        }
+
+        protected abstract void GetInjectableMonoBehaviours(List<MonoBehaviour> components);
+    }
+}
+
+#endif
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/Contexts/Context.cs.meta b/Assets/Source/Runtime/Install/Contexts/Context.cs.meta
new file mode 100644
index 0000000..167957b
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/Context.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: be0cf56827265f44bbdeba09329d66ab
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs b/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs
new file mode 100644
index 0000000..3130206
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs
@@ -0,0 +1,219 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+using UnityEngine.Serialization;
+using Zenject.Internal;
+
+#pragma warning disable 649
+
+namespace Zenject
+{
+    public class GameObjectContext : RunnableContext
+    {
+        public event Action PreInstall;
+        public event Action PostInstall;
+        public event Action PreResolve;
+        public event Action PostResolve;
+
+        [SerializeField]
+        [Tooltip("Note that this field is optional and can be ignored in most cases.  This is really only needed if you want to control the 'Script Execution Order' of your subcontainer.  In this case, define a new class that derives from MonoKernel, add it to this game object, then drag it into this field.  Then you can set a value for 'Script Execution Order' for this new class and this will control when all ITickable/IInitializable classes bound within this subcontainer get called.")]
+        [FormerlySerializedAs("_facade")]
+        MonoKernel _kernel;
+
+        DiContainer _container;
+
+        // Need to cache this when auto run is false
+        DiContainer _parentContainer;
+
+        bool _hasInstalled;
+
+        public override DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public override IEnumerable<GameObject> GetRootGameObjects()
+        {
+            return new[] { gameObject };
+        }
+
+        [Inject]
+        public void Construct(DiContainer parentContainer)
+        {
+            Assert.IsNull(_parentContainer);
+            _parentContainer = parentContainer;
+
+            Initialize();
+        }
+
+#if UNITY_EDITOR
+        protected override void ResetInstanceFields()
+        {
+            base.ResetInstanceFields();
+            
+            PreInstall = null;
+            PostInstall = null;
+            PreResolve = null;
+            PostResolve = null;
+            _hasInstalled = false;
+            _parentContainer = null;
+            _container = null;
+        }
+#endif
+
+        protected override void RunInternal()
+        {
+            Install(_parentContainer);
+            ResolveAndStart();
+        }
+
+        public void Install(DiContainer parentContainer) 
+        {
+            Assert.That(_parentContainer == null || _parentContainer == parentContainer);
+
+            // We allow calling this explicitly instead of relying on the [Inject] event above
+            // so that we can follow the two-pass construction-injection pattern in the providers
+            if (_hasInstalled) 
+            {
+                return;
+            }
+
+            _hasInstalled = true;
+
+            Assert.IsNull(_container);
+            _container = parentContainer.CreateSubContainer();
+
+            // Do this after creating DiContainer in case it's needed by the pre install logic
+            if (PreInstall != null)
+            {
+                PreInstall();
+            }
+
+            var injectableMonoBehaviours = new List<MonoBehaviour>();
+
+            GetInjectableMonoBehaviours(injectableMonoBehaviours);
+
+            foreach (var instance in injectableMonoBehaviours)
+            {
+                if (instance is MonoKernel)
+                {
+                    Assert.That(ReferenceEquals(instance, _kernel),
+                        "Found MonoKernel derived class that is not hooked up to GameObjectContext.  If you use MonoKernel, you must indicate this to GameObjectContext by dragging and dropping it to the Kernel field in the inspector");
+                }
+
+                _container.QueueForInject(instance);
+            }
+
+            _container.IsInstalling = true;
+
+            try
+            {
+                InstallBindings(injectableMonoBehaviours);
+            }
+            finally
+            {
+                _container.IsInstalling = false;
+            }
+
+            if (PostInstall != null)
+            {
+                PostInstall();
+            }
+        }
+
+        void ResolveAndStart() 
+        {
+            if (PreResolve != null)
+            {
+                PreResolve();
+            }
+
+            _container.ResolveRoots();
+
+            if (PostResolve != null)
+            {
+                PostResolve();
+            }
+
+            // Normally, the IInitializable.Initialize method would be called during MonoKernel.Start
+            // However, this behaviour is undesirable for dynamically created objects, since Unity
+            // has the strange behaviour of waiting until the end of the frame to call Start() on
+            // dynamically created objects, which means that any GameObjectContext that is created
+            // dynamically via a factory cannot be used immediately after calling Create(), since
+            // it will not have been initialized
+            // So we have chosen to diverge from Unity behaviour here and trigger IInitializable.Initialize
+            // immediately - but only when the GameObjectContext is created dynamically.  For any
+            // GameObjectContext's that are placed in the scene, we still want to execute
+            // IInitializable.Initialize during Start()
+            if (gameObject.scene.isLoaded && !_container.IsValidating)
+            {
+                _kernel = _container.Resolve<MonoKernel>();
+                _kernel.Initialize();
+            }
+        }
+
+        protected override void GetInjectableMonoBehaviours(List<MonoBehaviour> monoBehaviours)
+        {
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersUnderGameObject(gameObject);
+
+            // We inject on all components on the root except ourself
+            foreach (var monoBehaviour in GetComponents<MonoBehaviour>())
+            {
+                if (monoBehaviour == null)
+                {
+                    // Missing script
+                    continue;
+                }
+
+                if (!ZenUtilInternal.IsInjectableMonoBehaviourType(monoBehaviour.GetType()))
+                {
+                    continue;
+                }
+
+                if (monoBehaviour == this)
+                {
+                    continue;
+                }
+
+                monoBehaviours.Add(monoBehaviour);
+            }
+
+            for (int i = 0; i < transform.childCount; i++)
+            {
+                var child = transform.GetChild(i);
+
+                if (child != null)
+                {
+                    ZenUtilInternal.GetInjectableMonoBehavioursUnderGameObject(
+                        child.gameObject, monoBehaviours);
+                }
+            }
+        }
+
+        void InstallBindings(List<MonoBehaviour> injectableMonoBehaviours)
+        {
+            _container.DefaultParent = transform;
+
+            _container.Bind<Context>().FromInstance(this);
+            _container.Bind<GameObjectContext>().FromInstance(this);
+
+            if (_kernel == null)
+            {
+                _container.Bind<MonoKernel>()
+                    .To<DefaultGameObjectKernel>().FromNewComponentOn(gameObject).AsSingle().NonLazy();
+            }
+            else
+            {
+                _container.Bind<MonoKernel>().FromInstance(_kernel).AsSingle().NonLazy();
+            }
+
+            InstallSceneBindings(injectableMonoBehaviours);
+            InstallInstallers();
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs.meta
new file mode 100644
index 0000000..3a1218f
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/GameObjectContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 08eca9f7688a0a24685b89133b020c8e
+timeCreated: 1456086415
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs b/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs
new file mode 100644
index 0000000..4357536
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs
@@ -0,0 +1,338 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Threading;
+using ModestTree;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public class ProjectContext : Context
+    {
+        public static event Action PreInstall;
+        public static event Action PostInstall;
+        public static event Action PreResolve;
+        public static event Action PostResolve;
+
+        public const string ProjectContextResourcePath = "ProjectContext";
+        public const string ProjectContextResourcePathOld = "ProjectCompositionRoot";
+
+        static ProjectContext _instance;
+
+        // TODO: Set this to false the next time major version is incremented
+        [Tooltip("When true, objects that are created at runtime will be parented to the ProjectContext")]
+        [SerializeField]
+        bool _parentNewObjectsUnderContext = true;
+
+        [SerializeField]
+        ReflectionBakingCoverageModes _editorReflectionBakingCoverageMode = ReflectionBakingCoverageModes.FallbackToDirectReflection;
+
+        [SerializeField]
+        ReflectionBakingCoverageModes _buildsReflectionBakingCoverageMode = ReflectionBakingCoverageModes.FallbackToDirectReflection;
+
+        [SerializeField]
+        ZenjectSettings _settings = ZenjectSettings.Default;
+
+        DiContainer _container;
+
+        public override DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public static bool HasInstance
+        {
+            get { return _instance != null; }
+        }
+
+        public static ProjectContext Instance
+        {
+            get
+            {
+                if (_instance == null)
+                {
+                    InstantiateAndInitialize();
+                    Assert.IsNotNull(_instance);
+                }
+
+                return _instance;
+            }
+            set
+            {
+                Assert.IsNull(_instance, "ProjectContext already has an instance. Cannot replace ProjectContext after one is created.");
+                Assert.IsNotNull(value);
+                _instance = value;
+            }
+        }
+
+        public static bool ValidateOnNextRun
+        {
+            get;
+            set;
+        }
+        
+        public ZenjectSettings Settings
+        {
+            get => _settings;
+            set
+            {
+                Assert.IsNull(_container, "You cannot change settings after ProjectContext initialization.");
+                _settings = value;
+            }
+        }
+
+        public override IEnumerable<GameObject> GetRootGameObjects()
+        {
+            return new[] { gameObject };
+        }
+
+        public static GameObject TryGetPrefab()
+        {
+            var prefabs = Resources.LoadAll(ProjectContextResourcePath, typeof(GameObject));
+
+            if (prefabs.Length > 0)
+            {
+                Assert.That(prefabs.Length == 1,
+                    "Found multiple project context prefabs at resource path '{0}'", ProjectContextResourcePath);
+                return (GameObject)prefabs[0];
+            }
+
+            prefabs = Resources.LoadAll(ProjectContextResourcePathOld, typeof(GameObject));
+
+            if (prefabs.Length > 0)
+            {
+                Assert.That(prefabs.Length == 1,
+                    "Found multiple project context prefabs at resource path '{0}'", ProjectContextResourcePathOld);
+                return (GameObject)prefabs[0];
+            }
+
+            return null;
+        }
+
+        static void InstantiateAndInitialize()
+        {
+#if UNITY_EDITOR
+            ProfileBlock.UnityMainThread = Thread.CurrentThread;
+#endif
+
+            Assert.That(FindObjectsOfType<ProjectContext>().IsEmpty(),
+                "Tried to create multiple instances of ProjectContext!");
+
+            var prefab = TryGetPrefab();
+
+            var prefabWasActive = false;
+
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("GameObject.Instantiate"))
+#endif
+            {
+                if (prefab == null)
+                {
+                    _instance = new GameObject("ProjectContext")
+                        .AddComponent<ProjectContext>();
+                }
+                else
+                {
+                    prefabWasActive = prefab.activeSelf;
+
+                    GameObject gameObjectInstance;
+#if UNITY_EDITOR
+                    if(prefabWasActive)
+                    {
+                        // This ensures the prefab's Awake() methods don't fire (and, if in the editor, that the prefab file doesn't get modified)
+                        gameObjectInstance = GameObject.Instantiate(prefab, ZenUtilInternal.GetOrCreateInactivePrefabParent());
+                        gameObjectInstance.SetActive(false);
+                        gameObjectInstance.transform.SetParent(null, false);
+                    }
+                    else
+                    {
+                        gameObjectInstance = GameObject.Instantiate(prefab);
+                    }
+#else
+                    if(prefabWasActive)
+                    {
+                        prefab.SetActive(false);
+                        gameObjectInstance = GameObject.Instantiate(prefab);
+                        prefab.SetActive(true);
+                    }
+                    else
+                    {
+                        gameObjectInstance = GameObject.Instantiate(prefab);
+                    }
+#endif
+
+                    _instance = gameObjectInstance.GetComponent<ProjectContext>();
+
+                    Assert.IsNotNull(_instance,
+                        "Could not find ProjectContext component on prefab 'Resources/{0}.prefab'", ProjectContextResourcePath);
+                }
+            }
+
+            // Note: We use Initialize instead of awake here in case someone calls
+            // ProjectContext.Instance while ProjectContext is initializing
+            _instance.Initialize();
+
+            if (prefabWasActive)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    // We always instantiate it as disabled so that Awake and Start events are triggered after inject
+                    _instance.gameObject.SetActive(true);
+                }
+            }
+        }
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!UnityEditor.EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            PreInstall = null;
+            PostInstall = null;
+            PreResolve = null;
+            PostResolve = null;
+            _instance = null;
+        }
+#endif
+
+        public bool ParentNewObjectsUnderContext
+        {
+            get { return _parentNewObjectsUnderContext; }
+            set { _parentNewObjectsUnderContext = value; }
+        }
+
+        public void EnsureIsInitialized()
+        {
+            // Do nothing - Initialize occurs in Instance property
+        }
+
+        protected override void Awake()
+        {
+            // We don't call base.Awake here because ProjectContext gets instantiated every time. 
+            
+            
+            if (Application.isPlaying)
+                // DontDestroyOnLoad can only be called when in play mode and otherwise produces errors
+                // ProjectContext is created during design time (in an empty scene) when running validation
+                // and also when running unit tests
+                // In these cases we don't need DontDestroyOnLoad so just skip it
+            {
+                DontDestroyOnLoad(gameObject);
+            }
+        }
+
+        public void Initialize()
+        {
+            Assert.IsNull(_container);
+            
+            // Do this as early as possible before any type analysis occurs
+            ReflectionTypeAnalyzer.ConstructorChoiceStrategy = _settings.ConstructorChoiceStrategy;
+            
+            if (Application.isEditor)
+            {
+                TypeAnalyzer.ReflectionBakingCoverageMode = _editorReflectionBakingCoverageMode;
+            }
+            else
+            {
+                TypeAnalyzer.ReflectionBakingCoverageMode = _buildsReflectionBakingCoverageMode;
+            }
+
+            var isValidating = ValidateOnNextRun;
+
+            // Reset immediately to ensure it doesn't get used in another run
+            ValidateOnNextRun = false;
+
+            _container = new DiContainer(
+                new[] { StaticContext.Container }, isValidating);
+
+            // Do this after creating DiContainer in case it's needed by the pre install logic
+            if (PreInstall != null)
+            {
+                PreInstall();
+            }
+
+            var injectableMonoBehaviours = new List<MonoBehaviour>();
+            GetInjectableMonoBehaviours(injectableMonoBehaviours);
+
+            foreach (var instance in injectableMonoBehaviours)
+            {
+                _container.QueueForInject(instance);
+            }
+
+            _container.IsInstalling = true;
+
+            try
+            {
+                InstallBindings(injectableMonoBehaviours);
+            }
+            finally
+            {
+                _container.IsInstalling = false;
+            }
+
+            if (PostInstall != null)
+            {
+                PostInstall();
+            }
+
+            if (PreResolve != null)
+            {
+                PreResolve();
+            }
+
+            _container.ResolveRoots();
+
+            if (PostResolve != null)
+            {
+                PostResolve();
+            }
+        }
+
+        protected override void GetInjectableMonoBehaviours(List<MonoBehaviour> monoBehaviours)
+        {
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersUnderGameObject(gameObject);
+            ZenUtilInternal.GetInjectableMonoBehavioursUnderGameObject(gameObject, monoBehaviours);
+        }
+
+        void InstallBindings(List<MonoBehaviour> injectableMonoBehaviours)
+        {
+            if (_parentNewObjectsUnderContext)
+            {
+                _container.DefaultParent = transform;
+            }
+            else
+            {
+                _container.DefaultParent = null;
+            }
+
+            _container.Settings = _settings;
+
+            _container.Bind<ZenjectSceneLoader>().AsSingle();
+
+            ZenjectManagersInstaller.Install(_container);
+
+            _container.Bind<Context>().FromInstance(this);
+
+            _container.Bind(typeof(ProjectKernel), typeof(MonoKernel))
+                .To<ProjectKernel>().FromNewComponentOn(gameObject).AsSingle().NonLazy();
+
+            _container.Bind<SceneContextRegistry>().AsSingle();
+
+            InstallSceneBindings(injectableMonoBehaviours);
+
+            InstallInstallers();
+
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs.meta
new file mode 100644
index 0000000..9a6fad4
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/ProjectContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a4e6589720da476459dc6dd71624b071
+timeCreated: 1487808999
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs b/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs
new file mode 100644
index 0000000..e37e7a9
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs
@@ -0,0 +1,80 @@
+﻿using ModestTree;
+#if !NOT_UNITY3D
+using UnityEngine;
+
+#if UNITY_EDITOR
+using UnityEditor;
+#endif
+
+namespace Zenject
+{
+    public abstract class RunnableContext : Context
+    {
+        [Tooltip("When false, wait until run method is explicitly called. Otherwise run on initialize")]
+        [SerializeField]
+        bool _autoRun = true;
+
+        static bool _staticAutoRun = true;
+
+        public bool Initialized { get; private set; }
+        
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            _staticAutoRun = true;
+        }
+#endif
+
+#if UNITY_EDITOR
+        protected override void ResetInstanceFields()
+        {
+            base.ResetInstanceFields();
+            
+            Initialized = false;
+        }
+#endif
+
+        protected void Initialize()
+        {
+            if (_staticAutoRun && _autoRun)
+            {
+                Run();
+            }
+            else
+            {
+                // True should always be default
+                _staticAutoRun = true;
+            }
+        }
+
+        public void Run()
+        {
+            Assert.That(!Initialized,
+                "The context already has been initialized!");
+
+            RunInternal();
+
+            Initialized = true;
+        }
+
+        protected abstract void RunInternal();
+
+        public static T CreateComponent<T>(GameObject gameObject) where T : RunnableContext
+        {
+            _staticAutoRun = false;
+
+            var result = gameObject.AddComponent<T>();
+            Assert.That(_staticAutoRun); // Should be reset
+            return result;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs.meta
new file mode 100644
index 0000000..bbd17a0
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/RunnableContext.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: 13e9b26d23f6422cb282cc27631fc9e2
+timeCreated: 1494725784
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/Contexts/SceneContext.cs b/Assets/Source/Runtime/Install/Contexts/SceneContext.cs
new file mode 100644
index 0000000..714a64d
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/SceneContext.cs
@@ -0,0 +1,435 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+using UnityEngine;
+using UnityEngine.Serialization;
+using Zenject.Internal;
+using UnityEngine.Events;
+using UnityEngine.UIElements;
+
+#if UNITY_EDITOR
+using UnityEditor;
+#endif
+
+namespace Zenject
+{
+    public class SceneContext : RunnableContext
+    {
+        public event Action PreInstall;
+        public event Action PostInstall;
+        public event Action PreResolve;
+        public event Action PostResolve;
+
+        public UnityEvent OnPreInstall;
+        public UnityEvent OnPostInstall;
+        public UnityEvent OnPreResolve;
+        public UnityEvent OnPostResolve;
+
+        public static Action<DiContainer> ExtraBindingsInstallMethod;
+        public static Action<DiContainer> ExtraBindingsLateInstallMethod;
+
+        public static IEnumerable<DiContainer> ParentContainers;
+
+        [FormerlySerializedAs("ParentNewObjectsUnderRoot")]
+        [FormerlySerializedAs("_parentNewObjectsUnderRoot")]
+        [Tooltip("When true, objects that are created at runtime will be parented to the SceneContext")]
+        [SerializeField]
+        bool _parentNewObjectsUnderSceneContext;
+
+        [Tooltip("Optional contract names for this SceneContext, allowing contexts in subsequently loaded scenes to depend on it and be parented to it, and also for previously loaded decorators to be included")]
+        [SerializeField]
+        List<string> _contractNames = new List<string>();
+
+        [Tooltip("Optional contract names of SceneContexts in previously loaded scenes that this context depends on and to which it should be parented")]
+        [SerializeField]
+        List<string> _parentContractNames = new List<string>();
+
+        DiContainer _container;
+
+        readonly List<SceneDecoratorContext> _decoratorContexts = new List<SceneDecoratorContext>();
+
+        bool _hasInstalled;
+        bool _hasResolved;
+
+        public override DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public bool HasResolved
+        {
+            get { return _hasResolved; }
+        }
+
+        public bool HasInstalled
+        {
+            get { return _hasInstalled; }
+        }
+
+        public bool IsValidating
+        {
+            get
+            {
+                return ProjectContext.Instance.Container.IsValidating;
+            }
+        }
+
+        public IEnumerable<string> ContractNames
+        {
+            get { return _contractNames; }
+            set
+            {
+                _contractNames.Clear();
+                _contractNames.AddRange(value);
+            }
+        }
+
+        public IEnumerable<string> ParentContractNames
+        {
+            get
+            {
+                var result = new List<string>();
+                result.AddRange(_parentContractNames);
+                return result;
+            }
+            set
+            {
+                _parentContractNames = value.ToList();
+            }
+        }
+
+        public bool ParentNewObjectsUnderSceneContext
+        {
+            get { return _parentNewObjectsUnderSceneContext; }
+            set { _parentNewObjectsUnderSceneContext = value; }
+        }
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            ExtraBindingsInstallMethod = null;
+            ParentContainers = null;
+            ExtraBindingsLateInstallMethod = null;
+        }
+#endif
+        protected override void Awake()
+        {
+            base.Awake();
+
+#if ZEN_INTERNAL_PROFILING
+            ProfileTimers.ResetAll();
+            using (ProfileTimers.CreateTimedBlock("Other"))
+#endif
+            {
+                Initialize();
+            }
+        }
+
+#if UNITY_EDITOR
+        protected override void ResetInstanceFields()
+        {
+            base.ResetInstanceFields();
+            
+            _container = null;
+            _decoratorContexts.Clear();
+            _hasInstalled = false;
+            _hasResolved = false;
+            PreInstall = null;
+            PostInstall = null;
+            PreResolve = null;
+            PostResolve = null;
+        }
+#endif
+
+        public void Validate()
+        {
+            Assert.That(IsValidating);
+
+            Install();
+            Resolve();
+        }
+
+        protected override void RunInternal()
+        {
+            // We always want to initialize ProjectContext as early as possible
+            ProjectContext.Instance.EnsureIsInitialized();
+
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("Zenject.SceneContext.Install"))
+#endif
+            {
+                Install();
+            }
+
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("Zenject.SceneContext.Resolve"))
+#endif
+            {
+                Resolve();
+            }
+        }
+
+        public override IEnumerable<GameObject> GetRootGameObjects()
+        {
+            return ZenUtilInternal.GetRootGameObjects(gameObject.scene);
+        }
+
+        IEnumerable<DiContainer> GetParentContainers()
+        {
+            var parentContractNames = ParentContractNames;
+
+            if (parentContractNames.IsEmpty())
+            {
+                if (ParentContainers != null)
+                {
+                    var tempParentContainer = ParentContainers;
+
+                    // Always reset after using it - it is only used to pass the reference
+                    // between scenes via ZenjectSceneLoader
+                    ParentContainers = null;
+
+                    return tempParentContainer;
+                }
+
+                return new[] { ProjectContext.Instance.Container };
+            }
+
+            Assert.IsNull(ParentContainers,
+                "Scene cannot have both a parent scene context name set and also an explicit parent container given");
+
+            var parentContainers = UnityUtil.AllLoadedScenes
+                .Except(gameObject.scene)
+                .SelectMany(scene => scene.GetRootGameObjects())
+                .SelectMany(root => root.GetComponentsInChildren<SceneContext>())
+                .Where(sceneContext => sceneContext.ContractNames.Where(x => parentContractNames.Contains(x)).Any())
+                .Select(x => x.Container)
+                .ToList();
+
+            if (!parentContainers.Any())
+            {
+                throw Assert.CreateException(
+                    "SceneContext on object {0} of scene {1} requires at least one of contracts '{2}', but none of the loaded SceneContexts implements that contract.",
+                    gameObject.name,
+                    gameObject.scene.name,
+                    parentContractNames.Join(", "));
+            }
+
+            return parentContainers;
+        }
+
+        List<SceneDecoratorContext> LookupDecoratorContexts()
+        {
+            if (_contractNames.IsEmpty())
+            {
+                return new List<SceneDecoratorContext>();
+            }
+
+            return UnityUtil.AllLoadedScenes
+                .Except(gameObject.scene)
+                .SelectMany(scene => scene.GetRootGameObjects())
+                .SelectMany(root => root.GetComponentsInChildren<SceneDecoratorContext>())
+                .Where(decoratorContext => _contractNames.Contains(decoratorContext.DecoratedContractName))
+                .ToList();
+        }
+
+        public void Install()
+        {
+            Assert.That(!_hasInstalled);
+            _hasInstalled = true;
+
+            Assert.IsNull(_container);
+
+            var parents = GetParentContainers();
+            Assert.That(!parents.IsEmpty());
+            Assert.That(parents.All(x => x.IsValidating == parents.First().IsValidating));
+
+            _container = new DiContainer(parents, parents.First().IsValidating);
+
+            // Do this after creating DiContainer in case it's needed by the pre install logic
+            if (PreInstall != null)
+            {
+                PreInstall();
+            }
+
+            if (OnPreInstall != null)
+            {
+                OnPreInstall.Invoke();
+            }
+
+            Assert.That(_decoratorContexts.IsEmpty());
+            _decoratorContexts.AddRange(LookupDecoratorContexts());
+
+            if (_parentNewObjectsUnderSceneContext)
+            {
+                _container.DefaultParent = transform;
+            }
+            else
+            {
+                _container.DefaultParent = null;
+            }
+
+            // Record all the injectable components in the scene BEFORE installing the installers
+            // This is nice for cases where the user calls InstantiatePrefab<>, etc. in their installer
+            // so that it doesn't inject on the game object twice
+            // InitialComponentsInjecter will also guarantee that any component that is injected into
+            // another component has itself been injected
+            var injectableMonoBehaviours = new List<MonoBehaviour>();
+            GetInjectableMonoBehaviours(injectableMonoBehaviours);
+            foreach (var instance in injectableMonoBehaviours)
+            {
+                _container.QueueForInject(instance);
+            }
+
+            // UIDocument is defined in the UI Elements package. In Unity 2021.1 the package was deprecated
+            // in favor of including it in the UI Elements module. Earlier Unity versions already had that
+            // module, but it does not include UIDocument.
+#if USE_UI_ELEMENTS_PACKAGE || (USE_UI_ELEMENTS_MODULE && UNITY_2021_1_OR_NEWER)
+            List<GameObject> rootObjectsInScene = new List<GameObject>();
+            gameObject.scene.GetRootGameObjects(rootObjectsInScene);
+            for (int i = 0; i < rootObjectsInScene.Count; i++)
+            {
+                UIDocument[] uiDocuments = rootObjectsInScene[i].GetComponentsInChildren<UIDocument>(true);
+                for (int j = 0; j < uiDocuments.Length; j++)
+                {
+                    uiDocuments[j].rootVisualElement.Query().ForEach(x => _container.QueueForInject(x));
+                }
+            }
+#endif
+
+            foreach (var decoratorContext in _decoratorContexts)
+            {
+                decoratorContext.Initialize(_container);
+            }
+
+            _container.IsInstalling = true;
+
+            try
+            {
+                InstallBindings(injectableMonoBehaviours);
+            }
+            finally
+            {
+                _container.IsInstalling = false;
+            }
+
+            if (PostInstall != null)
+            {
+                PostInstall();
+            }
+
+            if (OnPostInstall != null)
+            {
+                OnPostInstall.Invoke();
+            }
+        }
+
+        public void Resolve()
+        {
+            if (PreResolve != null)
+            {
+                PreResolve();
+            }
+
+            if (OnPreResolve != null)
+            {
+                OnPreResolve.Invoke();
+            }
+
+            Assert.That(_hasInstalled);
+            Assert.That(!_hasResolved);
+            _hasResolved = true;
+
+            _container.ResolveRoots();
+
+            if (PostResolve != null)
+            {
+                PostResolve();
+            }
+
+            if (OnPostResolve != null)
+            {
+                OnPostResolve.Invoke();
+            }
+        }
+
+        void InstallBindings(List<MonoBehaviour> injectableMonoBehaviours)
+        {
+            _container.Bind(typeof(Context), typeof(SceneContext)).To<SceneContext>().FromInstance(this);
+            _container.BindInterfacesTo<SceneContextRegistryAdderAndRemover>().AsSingle();
+
+            // Add to registry first and remove from registry last
+            _container.BindExecutionOrder<SceneContextRegistryAdderAndRemover>(-1);
+
+            foreach (var decoratorContext in _decoratorContexts)
+            {
+                decoratorContext.InstallDecoratorSceneBindings();
+            }
+
+            InstallSceneBindings(injectableMonoBehaviours);
+
+            _container.Bind(typeof(SceneKernel), typeof(MonoKernel))
+                .To<SceneKernel>().FromNewComponentOn(gameObject).AsSingle().NonLazy();
+
+            _container.Bind<ZenjectSceneLoader>().AsSingle();
+
+            if (ExtraBindingsInstallMethod != null)
+            {
+                ExtraBindingsInstallMethod(_container);
+                // Reset extra bindings for next time we change scenes
+                ExtraBindingsInstallMethod = null;
+            }
+
+            // Always install the installers last so they can be injected with
+            // everything above
+            foreach (var decoratorContext in _decoratorContexts)
+            {
+                decoratorContext.InstallDecoratorInstallers();
+            }
+
+            InstallInstallers();
+
+            foreach (var decoratorContext in _decoratorContexts)
+            {
+                decoratorContext.InstallLateDecoratorInstallers();
+            }
+
+            if (ExtraBindingsLateInstallMethod != null)
+            {
+                ExtraBindingsLateInstallMethod(_container);
+                // Reset extra bindings for next time we change scenes
+                ExtraBindingsLateInstallMethod = null;
+            }
+        }
+
+        protected override void GetInjectableMonoBehaviours(List<MonoBehaviour> monoBehaviours)
+        {
+            var scene = gameObject.scene;
+
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersInScene(scene);
+            ZenUtilInternal.GetInjectableMonoBehavioursInScene(scene, monoBehaviours);
+        }
+
+        // These methods can be used for cases where you need to create the SceneContext entirely in code
+        // Note that if you use these methods that you have to call Run() yourself
+        // This is useful because it allows you to create a SceneContext and configure it how you want
+        // and add what installers you want before kicking off the Install/Resolve
+        public static SceneContext Create()
+        {
+            return CreateComponent<SceneContext>(
+                new GameObject("SceneContext"));
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/SceneContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/SceneContext.cs.meta
new file mode 100644
index 0000000..b7558c6
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/SceneContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 89715ad69b973a14899afa2c6730b30b
+timeCreated: 1435941958
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9999
+  icon: {instanceID: 0}
+  userData:
+  assetBundleName:
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs b/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs
new file mode 100644
index 0000000..f9537bc
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs
@@ -0,0 +1,132 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+using UnityEngine.Serialization;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public class SceneDecoratorContext : Context
+    {
+        [SerializeField]
+        List<MonoInstaller> _lateInstallers = new List<MonoInstaller>();
+
+        [SerializeField]
+        List<MonoInstaller> _lateInstallerPrefabs = new List<MonoInstaller>();
+
+        [SerializeField]
+        List<ScriptableObjectInstaller> _lateScriptableObjectInstallers = new List<ScriptableObjectInstaller>();
+
+        public IEnumerable<MonoInstaller> LateInstallers
+        {
+            get { return _lateInstallers; }
+            set
+            {
+                _lateInstallers.Clear();
+                _lateInstallers.AddRange(value);
+            }
+        }
+
+        public IEnumerable<MonoInstaller> LateInstallerPrefabs
+        {
+            get { return _lateInstallerPrefabs; }
+            set
+            {
+                _lateInstallerPrefabs.Clear();
+                _lateInstallerPrefabs.AddRange(value);
+            }
+        }
+
+        public IEnumerable<ScriptableObjectInstaller> LateScriptableObjectInstallers
+        {
+            get { return _lateScriptableObjectInstallers; }
+            set
+            {
+                _lateScriptableObjectInstallers.Clear();
+                _lateScriptableObjectInstallers.AddRange(value);
+            }
+        }
+
+        [FormerlySerializedAs("SceneName")]
+        [SerializeField]
+        string _decoratedContractName = null;
+
+        DiContainer _container;
+        readonly List<MonoBehaviour> _injectableMonoBehaviours = new List<MonoBehaviour>();
+
+        public string DecoratedContractName
+        {
+            get { return _decoratedContractName; }
+        }
+
+        public override DiContainer Container
+        {
+            get
+            {
+                Assert.IsNotNull(_container);
+                return _container;
+            }
+        }
+
+        public override IEnumerable<GameObject> GetRootGameObjects()
+        {
+            // This method should never be called because SceneDecoratorContext's are not bound
+            // to the container
+            throw Assert.CreateException();
+        }
+
+        public void Initialize(DiContainer container)
+        {
+            Assert.IsNull(_container);
+            Assert.That(_injectableMonoBehaviours.IsEmpty());
+
+            _container = container;
+
+            GetInjectableMonoBehaviours(_injectableMonoBehaviours);
+
+            foreach (var instance in _injectableMonoBehaviours)
+            {
+                container.QueueForInject(instance);
+            }
+        }
+
+#if UNITY_EDITOR
+        protected override void ResetInstanceFields()
+        {
+            base.ResetInstanceFields();
+            
+            _injectableMonoBehaviours.Clear();
+            _container = null;
+        }
+#endif
+
+        public void InstallDecoratorSceneBindings()
+        {
+            _container.Bind<SceneDecoratorContext>().FromInstance(this);
+            InstallSceneBindings(_injectableMonoBehaviours);
+        }
+
+        public void InstallDecoratorInstallers()
+        {
+            InstallInstallers();
+        }
+
+        protected override void GetInjectableMonoBehaviours(List<MonoBehaviour> monoBehaviours)
+        {
+            var scene = gameObject.scene;
+
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersInScene(scene);
+            ZenUtilInternal.GetInjectableMonoBehavioursInScene(scene, monoBehaviours);
+        }
+
+        public void InstallLateDecoratorInstallers()
+        {
+            InstallInstallers(new List<InstallerBase>(), new List<Type>(), _lateScriptableObjectInstallers, _lateInstallers, _lateInstallerPrefabs);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs.meta
new file mode 100644
index 0000000..3e0be92
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/SceneDecoratorContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: ed7323e8fdd8c26438c6485f2060dad0
+timeCreated: 1487808999
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Contexts/StaticContext.cs b/Assets/Source/Runtime/Install/Contexts/StaticContext.cs
new file mode 100644
index 0000000..2021291
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/StaticContext.cs
@@ -0,0 +1,43 @@
+#if !NOT_UNITY3D
+
+namespace Zenject
+{
+    // For some platforms, it's desirable to be able to add dependencies to Zenject before
+    // Unity even starts up (eg. WSA as described here https://github.com/svermeulen/Zenject/issues/118)
+    // In those cases you can call StaticContext.Container.BindX to add dependencies
+    // Anything you add there will then be injected everywhere, since all other contexts
+    // should be children of StaticContext
+    public static class StaticContext
+    {
+        static DiContainer _container;
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration)]
+#endif
+        public static void Clear()
+        {
+            _container = null;
+        }
+
+        public static bool HasContainer
+        {
+            get { return _container != null; }
+        }
+
+        public static DiContainer Container
+        {
+            get
+            {
+                if (_container == null)
+                {
+                    _container = new DiContainer();
+                }
+
+                return _container;
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/Contexts/StaticContext.cs.meta b/Assets/Source/Runtime/Install/Contexts/StaticContext.cs.meta
new file mode 100644
index 0000000..7df7deb
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Contexts/StaticContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 668a9feb769954340b35901a0c829397
+timeCreated: 1462834162
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/ICompositeInstaller.cs b/Assets/Source/Runtime/Install/ICompositeInstaller.cs
new file mode 100644
index 0000000..cee40c8
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ICompositeInstaller.cs
@@ -0,0 +1,10 @@
+using System.Collections.Generic;
+using Zenject;
+
+namespace Zenject
+{
+    public interface ICompositeInstaller<out T> : IInstaller where T : IInstaller
+    {
+        IReadOnlyList<T> LeafInstallers { get; }
+    }
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Install/ICompositeInstaller.cs.meta b/Assets/Source/Runtime/Install/ICompositeInstaller.cs.meta
new file mode 100644
index 0000000..b019f02
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ICompositeInstaller.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: fc1ff6e7e3ce01e4589e99b075e54869
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/IInstaller.cs b/Assets/Source/Runtime/Install/IInstaller.cs
new file mode 100644
index 0000000..c74a4ba
--- /dev/null
+++ b/Assets/Source/Runtime/Install/IInstaller.cs
@@ -0,0 +1,14 @@
+namespace Zenject
+{
+    // We extract the interface so that monobehaviours can be installers
+    public interface IInstaller
+    {
+        void InstallBindings();
+
+        bool IsEnabled
+        {
+            get;
+        }
+    }
+
+}
diff --git a/Assets/Source/Runtime/Install/IInstaller.cs.meta b/Assets/Source/Runtime/Install/IInstaller.cs.meta
new file mode 100644
index 0000000..2247406
--- /dev/null
+++ b/Assets/Source/Runtime/Install/IInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 65a9d43edcbe33640989f12f980de5d1
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/Installer.cs b/Assets/Source/Runtime/Install/Installer.cs
new file mode 100644
index 0000000..75e6fea
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Installer.cs
@@ -0,0 +1,77 @@
+namespace Zenject
+{
+    //
+    // I'd recommmend using Installer<> instead, and then always use the approach
+    // of calling `MyInstaller.Install(Container)`
+    // This way, if you want to add strongly typed parameters later you can do this
+    // by deriving from a different Installer<> base class
+    //
+    public abstract class Installer : InstallerBase
+    {
+    }
+
+    //
+    // Derive from this class then install like this:
+    //     FooInstaller.Install(Container);
+    //
+    public abstract class Installer<TDerived> : InstallerBase
+        where TDerived : Installer<TDerived>
+    {
+        public static void Install(DiContainer container)
+        {
+            container.Instantiate<TDerived>().InstallBindings();
+        }
+    }
+
+    // Use these versions to pass parameters to your installer
+
+    public abstract class Installer<TParam1, TDerived> : InstallerBase
+        where TDerived : Installer<TParam1, TDerived>
+    {
+        public static void Install(DiContainer container, TParam1 p1)
+        {
+            container.InstantiateExplicit<TDerived>(
+                InjectUtil.CreateArgListExplicit(p1)).InstallBindings();
+        }
+    }
+
+    public abstract class Installer<TParam1, TParam2, TDerived> : InstallerBase
+        where TDerived : Installer<TParam1, TParam2, TDerived>
+    {
+        public static void Install(DiContainer container, TParam1 p1, TParam2 p2)
+        {
+            container.InstantiateExplicit<TDerived>(
+                InjectUtil.CreateArgListExplicit(p1, p2)).InstallBindings();
+        }
+    }
+
+    public abstract class Installer<TParam1, TParam2, TParam3, TDerived> : InstallerBase
+        where TDerived : Installer<TParam1, TParam2, TParam3, TDerived>
+    {
+        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            container.InstantiateExplicit<TDerived>(
+                InjectUtil.CreateArgListExplicit(p1, p2, p3)).InstallBindings();
+        }
+    }
+
+    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TDerived> : InstallerBase
+        where TDerived : Installer<TParam1, TParam2, TParam3, TParam4, TDerived>
+    {
+        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            container.InstantiateExplicit<TDerived>(
+                InjectUtil.CreateArgListExplicit(p1, p2, p3, p4)).InstallBindings();
+        }
+    }
+
+    public abstract class Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : InstallerBase
+        where TDerived : Installer<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
+    {
+        public static void Install(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+            container.InstantiateExplicit<TDerived>(
+                InjectUtil.CreateArgListExplicit(p1, p2, p3, p4, p5)).InstallBindings();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Install/Installer.cs.meta b/Assets/Source/Runtime/Install/Installer.cs.meta
new file mode 100644
index 0000000..ef5ffbe
--- /dev/null
+++ b/Assets/Source/Runtime/Install/Installer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 743eef94d86c79e4189b311a7c7528ce
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/InstallerBase.cs b/Assets/Source/Runtime/Install/InstallerBase.cs
new file mode 100644
index 0000000..5dc96f0
--- /dev/null
+++ b/Assets/Source/Runtime/Install/InstallerBase.cs
@@ -0,0 +1,21 @@
+namespace Zenject
+{
+    public abstract class InstallerBase : IInstaller
+    {
+        [Inject]
+        DiContainer _container = null;
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public virtual bool IsEnabled
+        {
+            get { return true; }
+        }
+
+        public abstract void InstallBindings();
+    }
+}
+
diff --git a/Assets/Source/Runtime/Install/InstallerBase.cs.meta b/Assets/Source/Runtime/Install/InstallerBase.cs.meta
new file mode 100644
index 0000000..fd029dc
--- /dev/null
+++ b/Assets/Source/Runtime/Install/InstallerBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d908209e11d07744483c5fea3b406f33
+timeCreated: 1465520282
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/MonoInstaller.cs b/Assets/Source/Runtime/Install/MonoInstaller.cs
new file mode 100644
index 0000000..ce38296
--- /dev/null
+++ b/Assets/Source/Runtime/Install/MonoInstaller.cs
@@ -0,0 +1,171 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+
+namespace Zenject
+{
+    // We'd prefer to make this abstract but Unity 5.3.5 has a bug where references
+    // can get lost during compile errors for classes that are abstract
+    public class MonoInstaller : MonoInstallerBase
+    {
+    }
+
+    //
+    // Derive from this class instead to install like this:
+    //     FooInstaller.InstallFromResource(Container);
+    // Or
+    //     FooInstaller.InstallFromResource("My/Path/ToPrefab", Container);
+    //
+    // (Instead of needing to add the MonoInstaller via inspector)
+    //
+    // This approach is needed if you want to pass in strongly parameters to it from
+    // another installer
+    public class MonoInstaller<TDerived> : MonoInstaller
+        where TDerived : MonoInstaller<TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container)
+        {
+            return InstallFromResource(resourcePath, container, new object[0]);
+        }
+
+        public static TDerived InstallFromResource(DiContainer container, object[] extraArgs)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, extraArgs);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, object[] extraArgs)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.Inject(installer, extraArgs);
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class MonoInstaller<TParam1, TDerived> : MonoInstallerBase
+        where TDerived : MonoInstaller<TParam1, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class MonoInstaller<TParam1, TParam2, TDerived> : MonoInstallerBase
+        where TDerived : MonoInstaller<TParam1, TParam2, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class MonoInstaller<TParam1, TParam2, TParam3, TDerived> : MonoInstallerBase
+        where TDerived : MonoInstaller<TParam1, TParam2, TParam3, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2, p3);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2, p3));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : MonoInstallerBase
+        where TDerived : MonoInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2, p3, p4);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2, p3, p4));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived> : MonoInstallerBase
+        where TDerived : MonoInstaller<TParam1, TParam2, TParam3, TParam4, TParam5, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+            return InstallFromResource(MonoInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2, p3, p4, p5);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+            var installer = MonoInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2, p3, p4, p5));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public static class MonoInstallerUtil
+    {
+        public static string GetDefaultResourcePath<TInstaller>()
+            where TInstaller : MonoInstallerBase
+        {
+            return "Installers/" + typeof(TInstaller).PrettyName();
+        }
+
+        public static TInstaller CreateInstaller<TInstaller>(
+            string resourcePath, DiContainer container)
+            where TInstaller : MonoInstallerBase
+        {
+            bool shouldMakeActive;
+            var gameObj = container.CreateAndParentPrefabResource(
+                resourcePath, GameObjectCreationParameters.Default, null, out shouldMakeActive);
+
+            if (shouldMakeActive && !container.IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    gameObj.SetActive(true);
+                }
+            }
+
+            var installers = gameObj.GetComponentsInChildren<TInstaller>();
+
+            Assert.That(installers.Length == 1,
+                "Could not find unique MonoInstaller with type '{0}' on prefab '{1}'", typeof(TInstaller), gameObj.name);
+
+            return installers[0];
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/MonoInstaller.cs.meta b/Assets/Source/Runtime/Install/MonoInstaller.cs.meta
new file mode 100644
index 0000000..630ddb3
--- /dev/null
+++ b/Assets/Source/Runtime/Install/MonoInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 724ff9f6c80e0b044b7db58730dc6075
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/MonoInstallerBase.cs b/Assets/Source/Runtime/Install/MonoInstallerBase.cs
new file mode 100644
index 0000000..a2da881
--- /dev/null
+++ b/Assets/Source/Runtime/Install/MonoInstallerBase.cs
@@ -0,0 +1,38 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Diagnostics;
+using UnityEngine;
+
+namespace Zenject
+{
+    // We'd prefer to make this abstract but Unity 5.3.5 has a bug where references
+    // can get lost during compile errors for classes that are abstract
+    [DebuggerStepThrough]
+    public class MonoInstallerBase : MonoBehaviour, IInstaller
+    {
+        [Inject]
+        protected DiContainer Container
+        {
+            get; set;
+        }
+
+        public virtual bool IsEnabled
+        {
+            get { return enabled; }
+        }
+
+        public virtual void Start()
+        {
+            // Define this method so we expose the enabled check box
+        }
+
+        public virtual void InstallBindings()
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Install/MonoInstallerBase.cs.meta b/Assets/Source/Runtime/Install/MonoInstallerBase.cs.meta
new file mode 100644
index 0000000..77dfc90
--- /dev/null
+++ b/Assets/Source/Runtime/Install/MonoInstallerBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 93d53e91e1ef3484a99feb7aa58f2b63
+timeCreated: 1465520769
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs b/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs
new file mode 100644
index 0000000..d45c562
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs
@@ -0,0 +1,141 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    // We'd prefer to make this abstract but Unity 5.3.5 has a bug where references
+    // can get lost during compile errors for classes that are abstract
+    public class ScriptableObjectInstaller : ScriptableObjectInstallerBase
+    {
+    }
+
+    //
+    // Derive from this class instead to install like this:
+    //     FooInstaller.InstallFromResource(Container);
+    // Or
+    //     FooInstaller.InstallFromResource("My/Path/ToScriptableObjectInstance", Container);
+    //
+    // (Instead of needing to add the ScriptableObjectInstaller directly via inspector)
+    //
+    // This approach is needed if you want to pass in strongly typed runtime parameters too it
+    //
+    public class ScriptableObjectInstaller<TDerived> : ScriptableObjectInstaller
+        where TDerived : ScriptableObjectInstaller<TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container)
+        {
+            return InstallFromResource(
+                ScriptableObjectInstallerUtil.GetDefaultResourcePath<TDerived>(), container);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container)
+        {
+            var installer = ScriptableObjectInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.Inject(installer);
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class ScriptableObjectInstaller<TParam1, TDerived> : ScriptableObjectInstallerBase
+        where TDerived : ScriptableObjectInstaller<TParam1, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1)
+        {
+            return InstallFromResource(
+                ScriptableObjectInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1)
+        {
+            var installer = ScriptableObjectInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class ScriptableObjectInstaller<TParam1, TParam2, TDerived> : ScriptableObjectInstallerBase
+        where TDerived : ScriptableObjectInstaller<TParam1, TParam2, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2)
+        {
+            return InstallFromResource(
+                ScriptableObjectInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2)
+        {
+            var installer = ScriptableObjectInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived> : ScriptableObjectInstallerBase
+        where TDerived : ScriptableObjectInstaller<TParam1, TParam2, TParam3, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            return InstallFromResource(
+                ScriptableObjectInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2, p3);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            var installer = ScriptableObjectInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2, p3));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public class ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived> : ScriptableObjectInstallerBase
+        where TDerived : ScriptableObjectInstaller<TParam1, TParam2, TParam3, TParam4, TDerived>
+    {
+        public static TDerived InstallFromResource(DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            return InstallFromResource(
+                ScriptableObjectInstallerUtil.GetDefaultResourcePath<TDerived>(), container, p1, p2, p3, p4);
+        }
+
+        public static TDerived InstallFromResource(string resourcePath, DiContainer container, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            var installer = ScriptableObjectInstallerUtil.CreateInstaller<TDerived>(resourcePath, container);
+            container.InjectExplicit(installer, InjectUtil.CreateArgListExplicit(p1, p2, p3, p4));
+            installer.InstallBindings();
+            return installer;
+        }
+    }
+
+    public static class ScriptableObjectInstallerUtil
+    {
+        public static string GetDefaultResourcePath<TInstaller>()
+            where TInstaller : ScriptableObjectInstallerBase
+        {
+            return "Installers/" + typeof(TInstaller).PrettyName();
+        }
+
+        public static TInstaller CreateInstaller<TInstaller>(
+            string resourcePath, DiContainer container)
+            where TInstaller : ScriptableObjectInstallerBase
+        {
+            var installers = Resources.LoadAll(resourcePath);
+
+            Assert.That(installers.Length == 1,
+                "Could not find unique ScriptableObjectInstaller with type '{0}' at resource path '{1}'", typeof(TInstaller), resourcePath);
+
+            var installer = installers[0];
+
+            Assert.That(installer is TInstaller,
+                "Expected to find installer with type '{0}' at resource path '{1}'", typeof(TInstaller), resourcePath);
+
+            return (TInstaller)installer;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs.meta b/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs.meta
new file mode 100644
index 0000000..bcc4eb0
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ScriptableObjectInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 00b9d7602aaf02748aa93779bbf29799
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs b/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs
new file mode 100644
index 0000000..a38501f
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs
@@ -0,0 +1,33 @@
+#if !NOT_UNITY3D
+
+using System;
+using UnityEngine;
+
+namespace Zenject
+{
+    // We'd prefer to make this abstract but Unity 5.3.5 has a bug where references
+    // can get lost during compile errors for classes that are abstract
+    public class ScriptableObjectInstallerBase : ScriptableObject, IInstaller
+    {
+        [Inject]
+        DiContainer _container = null;
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        bool IInstaller.IsEnabled
+        {
+            get { return true; }
+        }
+
+        public virtual void InstallBindings()
+        {
+            throw new NotImplementedException();
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs.meta b/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs.meta
new file mode 100644
index 0000000..8eb6f30
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ScriptableObjectInstallerBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 97c39aeade32bd54c8754bc9d6da25ab
+timeCreated: 1465523215
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/ZenjectBinding.cs b/Assets/Source/Runtime/Install/ZenjectBinding.cs
new file mode 100644
index 0000000..fcdb386
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ZenjectBinding.cs
@@ -0,0 +1,72 @@
+#if !NOT_UNITY3D
+
+using UnityEngine;
+using UnityEngine.Serialization;
+
+namespace Zenject
+{
+    public class ZenjectBinding : MonoBehaviour
+    {
+        [Tooltip("The component to add to the Zenject container")]
+        [SerializeField]
+        Component[] _components = null;
+
+        [Tooltip("Note: This value is optional and can be ignored in most cases.  This can be useful to differentiate multiple bindings of the same type.  For example, if you have multiple cameras in your scene, you can 'name' them by giving each one a different identifier.  For your main camera you might call it 'Main' then any class can refer to it by using an attribute like [Inject(Id = 'Main')]")]
+        [SerializeField]
+        string _identifier = string.Empty;
+
+        [Tooltip("When set, this will bind the given components to the SceneContext.  It can be used as a shortcut to explicitly dragging the SceneContext into the Context field.  This is useful when using ZenjectBinding inside GameObjectContext.  If your ZenjectBinding is for a component that is not underneath GameObjectContext then it is not necessary to check this")]
+        [SerializeField]
+        bool _useSceneContext = false;
+
+        [Tooltip("Note: This value is optional and can be ignored in most cases.  This value will determine what container the component gets added to.  If unset, the component will be bound on the most 'local' context.  In most cases this will be the SceneContext, unless this component is underneath a GameObjectContext, or ProjectContext, in which case it will bind to that instead by default.  You can also override this default by providing the Context directly.  This can be useful if you want to bind something that is inside a GameObjectContext to the SceneContext container.")]
+        [SerializeField]
+        [FormerlySerializedAs("_compositionRoot")]
+        Context _context = null;
+
+        [Tooltip("This value is used to determine how to bind this component.  When set to 'Self' is equivalent to calling Container.FromInstance inside an installer. When set to 'AllInterfaces' this is equivalent to calling 'Container.BindInterfaces<MyMonoBehaviour>().ToInstance', and similarly for InterfacesAndSelf")]
+        [SerializeField]
+        BindTypes _bindType = BindTypes.Self;
+
+        public bool UseSceneContext
+        {
+            get { return _useSceneContext; }
+        }
+
+        public Context Context
+        {
+            get { return _context; }
+            set { _context = value; }
+        }
+
+        public Component[] Components
+        {
+            get { return _components; }
+        }
+
+        public string Identifier
+        {
+            get { return _identifier; }
+        }
+
+        public BindTypes BindType
+        {
+            get { return _bindType; }
+        }
+
+        public void Start()
+        {
+            // Define this method so we expose the enabled check box
+        }
+
+        public enum BindTypes
+        {
+            Self,
+            AllInterfaces,
+            AllInterfacesAndSelf,
+            BaseType
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Install/ZenjectBinding.cs.meta b/Assets/Source/Runtime/Install/ZenjectBinding.cs.meta
new file mode 100644
index 0000000..7d3ab80
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ZenjectBinding.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 0166d8ff8d905b048b2448179e1f5d11
+timeCreated: 1454288321
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData:
+  assetBundleName:
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs b/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs
new file mode 100644
index 0000000..5953816
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs
@@ -0,0 +1,26 @@
+
+namespace Zenject
+{
+    // This is installed by default in ProjectContext, however, if you are using Zenject outside
+    // of Unity then you might want to call this
+    //
+    // In this case though, you will have to manually call InitializableManager.Initialize,
+    // DisposableManager.Dispose, TickableManager.Tick, etc. when appropriate for the environment
+    // you are working in
+    //
+    // You might also want to use this installer in a ZenjectUnitTestFixture
+    public class ZenjectManagersInstaller : Installer<ZenjectManagersInstaller>
+    {
+        [Inject]
+        public ZenjectManagersInstaller()
+        {
+        }
+
+        public override void InstallBindings()
+        {
+            Container.Bind(typeof(TickableManager), typeof(InitializableManager), typeof(DisposableManager))
+                .ToSelf().AsSingle().CopyIntoAllSubContainers();
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs.meta b/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs.meta
new file mode 100644
index 0000000..15804c1
--- /dev/null
+++ b/Assets/Source/Runtime/Install/ZenjectManagersInstaller.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b05e95f8fed82b244b78a5e2df541713
+timeCreated: 1529046908
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal.meta b/Assets/Source/Runtime/Internal.meta
new file mode 100644
index 0000000..28f8f26
--- /dev/null
+++ b/Assets/Source/Runtime/Internal.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: dd4fbc001f8bada428bbe3af6b6b21e8
+folderAsset: yes
+timeCreated: 1452188408
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/Assert.cs b/Assets/Source/Runtime/Internal/Assert.cs
new file mode 100644
index 0000000..77d1f0e
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Assert.cs
@@ -0,0 +1,433 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using Zenject;
+
+namespace ModestTree
+{
+    public static class Assert
+    {
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void That(bool condition)
+        {
+            if (!condition)
+            {
+                throw CreateException("Assert hit!");
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotEmpty(string str)
+        {
+            if (String.IsNullOrEmpty(str))
+            {
+                throw CreateException("Unexpected null or empty string");
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        // This is better because IsEmpty with IEnumerable causes a memory alloc
+        public static void IsEmpty<T>(IList<T> list)
+        {
+            if (list.Count != 0)
+            {
+                throw CreateException(
+                    "Expected collection to be empty but instead found '{0}' elements", list.Count);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsEmpty<T>(IEnumerable<T> sequence)
+        {
+            if (!sequence.IsEmpty())
+            {
+                throw CreateException("Expected collection to be empty but instead found '{0}' elements",
+                    sequence.Count());
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsType<T>(object obj)
+        {
+            IsType<T>(obj, "");
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsType<T>(object obj, string message)
+        {
+            if (!(obj is T))
+            {
+                throw CreateException("Assert Hit! {0}\nWrong type found. Expected '{1}' (left) but found '{2}' (right). ", message, typeof(T).PrettyName(), obj.GetType().PrettyName());
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void DerivesFrom<T>(Type type)
+        {
+            if (!type.DerivesFrom<T>())
+            {
+                throw CreateException("Expected type '{0}' to derive from '{1}'", type.Name, typeof(T).Name);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void DerivesFromOrEqual<T>(Type type)
+        {
+            if (!type.DerivesFromOrEqual<T>())
+            {
+                throw CreateException("Expected type '{0}' to derive from or be equal to '{1}'", type.Name, typeof(T).Name);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void DerivesFrom(Type childType, Type parentType)
+        {
+            if (!childType.DerivesFrom(parentType))
+            {
+                throw CreateException("Expected type '{0}' to derive from '{1}'", childType.Name, parentType.Name);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void DerivesFromOrEqual(Type childType, Type parentType)
+        {
+            if (!childType.DerivesFromOrEqual(parentType))
+            {
+                throw CreateException("Expected type '{0}' to derive from or be equal to '{1}'", childType.Name, parentType.Name);
+            }
+        }
+
+        // Use AssertEquals to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsEqual(object left, object right)
+        {
+            IsEqual(left, right, "");
+        }
+
+        // Use AssertEquals to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsEqual(object left, object right, Func<string> messageGenerator)
+        {
+            if (!object.Equals(left, right))
+            {
+                left = left ?? "<NULL>";
+                right = right ?? "<NULL>";
+                throw CreateException("Assert Hit! {0}.  Expected '{1}' (left) but found '{2}' (right). ", messageGenerator(), left, right);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsApproximately(float left, float right, float epsilon = 0.00001f)
+        {
+            bool isEqual = Math.Abs(left - right) < epsilon;
+
+            if (!isEqual)
+            {
+                throw CreateException("Assert Hit! Expected '{0}' (left) but found '{1}' (right). ", left, right);
+            }
+        }
+
+        // Use AssertEquals to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsEqual(object left, object right, string message)
+        {
+            if (!object.Equals(left, right))
+            {
+                left = left ?? "<NULL>";
+                right = right ?? "<NULL>";
+                throw CreateException("Assert Hit! {0}\nExpected '{1}' (left) but found '{2}' (right). ", message, left, right);
+            }
+        }
+
+        // Use Assert.IsNotEqual to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotEqual(object left, object right)
+        {
+            IsNotEqual(left, right, "");
+        }
+
+        // Use Assert.IsNotEqual to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotEqual(object left, object right, Func<string> messageGenerator)
+        {
+            if(object.Equals(left, right))
+            {
+                left = left ?? "<NULL>";
+                right = right ?? "<NULL>";
+                throw CreateException("Assert Hit! {0}.  Expected '{1}' (left) to differ from '{2}' (right). ", messageGenerator(), left, right);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNull(object val)
+        {
+            if (val != null)
+            {
+                throw CreateException(
+                    "Assert Hit! Expected null pointer but instead found '{0}'", val);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNull(object val, string message)
+        {
+            if (val != null)
+            {
+                throw CreateException(
+                    "Assert Hit! {0}", message);
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNull(object val, string message, object p1)
+        {
+            if (val != null)
+            {
+                throw CreateException(
+                    "Assert Hit! {0}", message.Fmt(p1));
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotNull(object val)
+        {
+            if (val == null)
+            {
+                throw CreateException("Assert Hit! Found null pointer when value was expected");
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotNull(object val, string message)
+        {
+            if (val == null)
+            {
+                throw CreateException("Assert Hit! {0}", message);
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotNull(object val, string message, object p1)
+        {
+            if (val == null)
+            {
+                throw CreateException("Assert Hit! {0}", message.Fmt(p1));
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotNull(object val, string message, object p1, object p2)
+        {
+            if (val == null)
+            {
+                throw CreateException("Assert Hit! {0}", message.Fmt(p1, p2));
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotEmpty<T>(IEnumerable<T> val, string message = "")
+        {
+            if (!val.Any())
+            {
+                throw CreateException("Assert Hit! Expected empty collection but found {0} values. {1}", val.Count(), message);
+            }
+        }
+
+        // Use Assert.IsNotEqual to get better error output (with values)
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void IsNotEqual(object left, object right, string message)
+        {
+            if (object.Equals(left, right))
+            {
+                left = left ?? "<NULL>";
+                right = right ?? "<NULL>";
+                throw CreateException("Assert Hit! {0}. Unexpected value found '{1}'. ", message, left);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void Warn(bool condition)
+        {
+            if (!condition)
+            {
+                ModestTree.Log.Warn("Warning!  See call stack");
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void Warn(bool condition, Func<string> messageGenerator)
+        {
+            if (!condition)
+            {
+                ModestTree.Log.Warn("Warning Assert hit! " + messageGenerator());
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void That(
+            bool condition, string message)
+        {
+            if (!condition)
+            {
+                throw CreateException("Assert hit! " + message);
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void That(
+            bool condition, string message, object p1)
+        {
+            if (!condition)
+            {
+                throw CreateException("Assert hit! " + message.Fmt(p1));
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void That(
+            bool condition, string message, object p1, object p2)
+        {
+            if (!condition)
+            {
+                throw CreateException("Assert hit! " + message.Fmt(p1, p2));
+            }
+        }
+
+        // We don't use params here to avoid the memory alloc
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void That(
+            bool condition, string message, object p1, object p2, object p3)
+        {
+            if (!condition)
+            {
+                throw CreateException("Assert hit! " + message.Fmt(p1, p2, p3));
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void Warn(bool condition, string message)
+        {
+            if (!condition)
+            {
+                ModestTree.Log.Warn("Warning Assert hit! " + message);
+            }
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void Throws(Action action)
+        {
+            Throws<Exception>(action);
+        }
+
+#if ZEN_STRIP_ASSERTS_IN_BUILDS
+        [Conditional("UNITY_EDITOR")]
+#endif
+        public static void Throws<TException>(Action action)
+            where TException : Exception
+        {
+            try
+            {
+                action();
+            }
+            catch (TException)
+            {
+                return;
+            }
+
+            throw CreateException(
+                "Expected to receive exception of type '{0}' but nothing was thrown", typeof(TException).Name);
+        }
+
+        public static ZenjectException CreateException()
+        {
+            return new ZenjectException("Assert hit!");
+        }
+
+        public static ZenjectException CreateException(string message)
+        {
+            return new ZenjectException(message);
+        }
+
+        public static ZenjectException CreateException(string message, params object[] parameters)
+        {
+            return new ZenjectException(message.Fmt(parameters));
+        }
+
+        public static ZenjectException CreateException(Exception innerException, string message, params object[] parameters)
+        {
+            return new ZenjectException(message.Fmt(parameters), innerException);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Internal/Assert.cs.meta b/Assets/Source/Runtime/Internal/Assert.cs.meta
new file mode 100644
index 0000000..95292bd
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Assert.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2968c9f42475ea146aec3ced9cbd99ad
+timeCreated: 1427464253
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/Func.cs b/Assets/Source/Runtime/Internal/Func.cs
new file mode 100644
index 0000000..f4e243f
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Func.cs
@@ -0,0 +1,24 @@
+#if !NET_4_6 && !NET_STANDARD_2_0
+
+namespace ModestTree.Util
+{
+    // C# 3.5 only defines Func and Action to a maximum of 4 generic parameters
+    // Note that if you are using .NET framework > 3.5 you will have to comment these out to avoid ambiguous errors
+    public delegate TResult Func<T1, T2, T3, T4, T5, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
+    public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
+
+    public delegate void Action<T1, T2, T3, T4, T5>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
+    public delegate void Action<T1, T2, T3, T4, T5, T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
+    public delegate void Action<T1, T2, T3, T4, T5, T6, T7>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);
+    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
+    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9);
+    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10);
+    public delegate void Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11);
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Internal/Func.cs.meta b/Assets/Source/Runtime/Internal/Func.cs.meta
new file mode 100644
index 0000000..7adfbde
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Func.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: cf53ad544fd972d4eb4716fb02fb5e9e
+timeCreated: 1491195389
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/LinqExtensions.cs b/Assets/Source/Runtime/Internal/LinqExtensions.cs
new file mode 100644
index 0000000..c783095
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/LinqExtensions.cs
@@ -0,0 +1,83 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Collections;
+using ModestTree.Util;
+
+namespace ModestTree
+{
+    public static class LinqExtensions
+    {
+        public static IEnumerable<T> Yield<T>(this T item)
+        {
+            yield return item;
+        }
+
+        // Return the first item when the list is of length one and otherwise returns default
+        public static TSource OnlyOrDefault<TSource>(this IEnumerable<TSource> source)
+        {
+            Assert.IsNotNull(source);
+
+            if (source.Count() > 1)
+            {
+                return default(TSource);
+            }
+
+            return source.FirstOrDefault();
+        }
+
+        // These are more efficient than Count() in cases where the size of the collection is not known
+        public static bool HasAtLeast<T>(this IEnumerable<T> enumerable, int amount)
+        {
+            return enumerable.Take(amount).Count() == amount;
+        }
+
+        public static bool HasMoreThan<T>(this IEnumerable<T> enumerable, int amount)
+        {
+            return enumerable.HasAtLeast(amount+1);
+        }
+
+        public static bool HasLessThan<T>(this IEnumerable<T> enumerable, int amount)
+        {
+            return enumerable.HasAtMost(amount-1);
+        }
+
+        public static bool HasAtMost<T>(this IEnumerable<T> enumerable, int amount)
+        {
+            return enumerable.Take(amount + 1).Count() <= amount;
+        }
+
+        public static bool IsEmpty<T>(this IEnumerable<T> enumerable)
+        {
+            return !enumerable.Any();
+        }
+
+        public static IEnumerable<T> GetDuplicates<T>(this IEnumerable<T> list)
+        {
+            return list.GroupBy(x => x).Where(x => x.Skip(1).Any()).Select(x => x.Key);
+        }
+
+        public static IEnumerable<T> Except<T>(this IEnumerable<T> list, T item)
+        {
+            return list.Except(item.Yield());
+        }
+
+        // LINQ already has a method called "Contains" that does the same thing as this
+        // BUT it fails to work with Mono 3.5 in some cases.
+        // For example the following prints False, True in Mono 3.5 instead of True, True like it should:
+        //
+        // IEnumerable<string> args = new string[]
+        // {
+        //     "",
+        //     null,
+        // };
+
+        // Log.Info(args.ContainsItem(null));
+        // Log.Info(args.Where(x => x == null).Any());
+        public static bool ContainsItem<T>(this IEnumerable<T> list, T value)
+        {
+            // Use object.Equals to support null values
+            return list.Where(x => object.Equals(x, value)).Any();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Internal/LinqExtensions.cs.meta b/Assets/Source/Runtime/Internal/LinqExtensions.cs.meta
new file mode 100644
index 0000000..c0d5249
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/LinqExtensions.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 68fac2f8aa1edec4b9ef45794638a59c
+timeCreated: 1427464292
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/Log.cs b/Assets/Source/Runtime/Internal/Log.cs
new file mode 100644
index 0000000..a3d57f4
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Log.cs
@@ -0,0 +1,84 @@
+using System;
+using System.Diagnostics;
+
+namespace ModestTree
+{
+    // Simple wrapper around unity's logging system
+    public static class Log
+    {
+        // Strip out debug logs outside of unity
+        [Conditional("UNITY_EDITOR")]
+        public static void Debug(string message, params object[] args)
+        {
+#if NOT_UNITY3D
+            //Console.WriteLine(message.Fmt(args));
+#else
+            //UnityEngine.Debug.Log(message.Fmt(args));
+#endif
+        }
+
+        /////////////
+
+        public static void Info(string message, params object[] args)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(message.Fmt(args));
+#else
+            UnityEngine.Debug.Log(message.Fmt(args));
+#endif
+        }
+
+        /////////////
+
+        public static void Warn(string message, params object[] args)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(message.Fmt(args));
+#else
+            UnityEngine.Debug.LogWarning(message.Fmt(args));
+#endif
+        }
+
+        /////////////
+
+        public static void Trace(string message, params object[] args)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(message.Fmt(args));
+#else
+            UnityEngine.Debug.Log(message.Fmt(args));
+#endif
+        }
+
+        /////////////
+
+        public static void ErrorException(Exception e)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(e.ToString());
+#else
+            UnityEngine.Debug.LogException(e);
+#endif
+        }
+
+        public static void ErrorException(string message, Exception e)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(message);
+#else
+            UnityEngine.Debug.LogError(message);
+            UnityEngine.Debug.LogException(e);
+#endif
+        }
+
+        public static void Error(string message, params object[] args)
+        {
+#if NOT_UNITY3D
+            Console.WriteLine(message.Fmt(args));
+#else
+            UnityEngine.Debug.LogError(message.Fmt(args));
+#endif
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Internal/Log.cs.meta b/Assets/Source/Runtime/Internal/Log.cs.meta
new file mode 100644
index 0000000..21650bd
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/Log.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 622a24d4c6769414495ea1786bfee872
+timeCreated: 1427464253
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/MiscExtensions.cs b/Assets/Source/Runtime/Internal/MiscExtensions.cs
new file mode 100644
index 0000000..52f4b84
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/MiscExtensions.cs
@@ -0,0 +1,96 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+
+namespace ModestTree
+{
+    public static class MiscExtensions
+    {
+        // We'd prefer to use the name Format here but that conflicts with
+        // the existing string.Format method
+        public static string Fmt(this string s, params object[] args)
+        {
+            // Do in-place change to avoid the memory alloc
+            // This should be fine because the params is always used instead of directly
+            // passing an array
+            for (int i = 0; i < args.Length; i++)
+            {
+                var arg = args[i];
+
+                if (arg == null)
+                {
+                    // This is much more understandable than just the empty string
+                    args[i] = "NULL";
+                }
+                else if (arg is Type)
+                {
+                    // This often reads much better sometimes
+                    args[i] = ((Type)arg).PrettyName();
+                }
+            }
+
+            return String.Format(s, args);
+        }
+
+        public static int IndexOf<T>(this IList<T> list, T item)
+        {
+            for (int i = 0; i < list.Count; i++)
+            {
+                if (object.Equals(list[i], item))
+                {
+                    return i;
+                }
+            }
+
+            return -1;
+        }
+
+        public static string Join(this IEnumerable<string> values, string separator)
+        {
+            return string.Join(separator, values.ToArray());
+        }
+
+        // When using C# 4.6, for some reason the normal AddRange causes some allocations
+        // https://issuetracker.unity3d.com/issues/dot-net-4-dot-6-unexpected-gc-allocations-in-list-dot-addrange
+        public static void AllocFreeAddRange<T>(this IList<T> list, IList<T> items)
+        {
+            for (int i = 0; i < items.Count; i++)
+            {
+                list.Add(items[i]);
+            }
+        }
+
+        // Most of the time when you call remove you always intend on removing something
+        // so assert in that case
+        public static void RemoveWithConfirm<T>(this IList<T> list, T item)
+        {
+            bool removed = list.Remove(item);
+            Assert.That(removed);
+        }
+
+        public static void RemoveWithConfirm<T>(this LinkedList<T> list, T item)
+        {
+            bool removed = list.Remove(item);
+            Assert.That(removed);
+        }
+
+        public static void RemoveWithConfirm<TKey, TVal>(this IDictionary<TKey, TVal> dictionary, TKey key)
+        {
+            bool removed = dictionary.Remove(key);
+            Assert.That(removed);
+        }
+
+        public static void RemoveWithConfirm<T>(this HashSet<T> set, T item)
+        {
+            bool removed = set.Remove(item);
+            Assert.That(removed);
+        }
+
+        public static TVal GetValueAndRemove<TKey, TVal>(this IDictionary<TKey, TVal> dictionary, TKey key)
+        {
+            TVal val = dictionary[key];
+            dictionary.RemoveWithConfirm(key);
+            return val;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Internal/MiscExtensions.cs.meta b/Assets/Source/Runtime/Internal/MiscExtensions.cs.meta
new file mode 100644
index 0000000..2e90c10
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/MiscExtensions.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: da4e9bf39c1ac464d84d2f743a25f8d1
+timeCreated: 1427464359
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/PreserveAttribute.cs b/Assets/Source/Runtime/Internal/PreserveAttribute.cs
new file mode 100644
index 0000000..f1bc8bc
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/PreserveAttribute.cs
@@ -0,0 +1,9 @@
+using System;
+
+namespace ModestTree.Util
+{
+    [AttributeUsage(AttributeTargets.All, AllowMultiple = false)]
+    public class PreserveAttribute : Attribute
+    {
+    }
+}
diff --git a/Assets/Source/Runtime/Internal/PreserveAttribute.cs.meta b/Assets/Source/Runtime/Internal/PreserveAttribute.cs.meta
new file mode 100644
index 0000000..29c5681
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/PreserveAttribute.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: de17d24691e2bfd458a9d10cb1d49098
+timeCreated: 1453682156
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/TypeExtensions.cs b/Assets/Source/Runtime/Internal/TypeExtensions.cs
new file mode 100644
index 0000000..ca0ac00
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/TypeExtensions.cs
@@ -0,0 +1,391 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+
+namespace ModestTree
+{
+    public static class TypeExtensions
+    {
+        static readonly Dictionary<Type, bool> _isClosedGenericType = new Dictionary<Type, bool>();
+        static readonly Dictionary<Type, bool> _isOpenGenericType = new Dictionary<Type, bool>();
+        static readonly Dictionary<Type, bool> _isValueType = new Dictionary<Type, bool>();
+        static readonly Dictionary<Type, Type[]> _interfaces = new Dictionary<Type, Type[]>();
+
+        public static bool DerivesFrom<T>(this Type a)
+        {
+            return DerivesFrom(a, typeof(T));
+        }
+
+        // This seems easier to think about than IsAssignableFrom
+        public static bool DerivesFrom(this Type a, Type b)
+        {
+            return b != a && a.DerivesFromOrEqual(b);
+        }
+
+        public static bool DerivesFromOrEqual<T>(this Type a)
+        {
+            return DerivesFromOrEqual(a, typeof(T));
+        }
+
+        public static bool DerivesFromOrEqual(this Type a, Type b)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return b == a || b.GetTypeInfo().IsAssignableFrom(a.GetTypeInfo());
+#else
+            return b == a || b.IsAssignableFrom(a);
+#endif
+        }
+
+#if !(UNITY_WSA && ENABLE_DOTNET)
+        // TODO: Is it possible to do this on WSA?
+        public static bool IsAssignableToGenericType(Type givenType, Type genericType)
+        {
+            var interfaceTypes = givenType.Interfaces();
+
+            foreach (var it in interfaceTypes)
+            {
+                if (it.IsGenericType && it.GetGenericTypeDefinition() == genericType)
+                {
+                    return true;
+                }
+            }
+
+            if (givenType.IsGenericType && givenType.GetGenericTypeDefinition() == genericType)
+            {
+                return true;
+            }
+
+            Type baseType = givenType.BaseType;
+
+            if (baseType == null)
+            {
+                return false;
+            }
+
+            return IsAssignableToGenericType(baseType, genericType);
+        }
+#endif
+
+        public static bool IsEnum(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsEnum;
+#else
+            return type.IsEnum;
+#endif
+        }
+
+        public static bool IsValueType(this Type type)
+        {
+            bool result;
+            if (!_isValueType.TryGetValue(type, out result))
+            {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+                result = type.GetTypeInfo().IsValueType;
+#else
+                result = type.IsValueType;
+#endif
+                _isValueType[type] = result;
+            }
+            return result;
+        }
+
+        public static MethodInfo[] DeclaredInstanceMethods(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetRuntimeMethods()
+                .Where(x => x.DeclaringType == type).ToArray();
+#else
+            return type.GetMethods(
+                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly);
+#endif
+        }
+
+        public static PropertyInfo[] DeclaredInstanceProperties(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            // There doesn't appear to be an IsStatic member on PropertyInfo
+            return type.GetRuntimeProperties()
+                .Where(x => x.DeclaringType == type).ToArray();
+#else
+            return type.GetProperties(
+                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly);
+#endif
+        }
+
+        public static FieldInfo[] DeclaredInstanceFields(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetRuntimeFields()
+                .Where(x => x.DeclaringType == type && !x.IsStatic).ToArray();
+#else
+            return type.GetFields(
+                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly);
+#endif
+        }
+
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+        public static bool IsAssignableFrom(this Type a, Type b)
+        {
+            return a.GetTypeInfo().IsAssignableFrom(b.GetTypeInfo());
+        }
+#endif
+
+        public static Type BaseType(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().BaseType;
+#else
+            return type.BaseType;
+#endif
+        }
+
+        public static bool IsGenericType(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsGenericType;
+#else
+            return type.IsGenericType;
+#endif
+        }
+        public static bool IsGenericTypeDefinition(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsGenericTypeDefinition;
+#else
+            return type.IsGenericTypeDefinition;
+#endif
+        }
+
+        public static bool IsPrimitive(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsPrimitive;
+#else
+            return type.IsPrimitive;
+#endif
+        }
+
+        public static bool IsInterface(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsInterface;
+#else
+            return type.IsInterface;
+#endif
+        }
+
+        public static bool ContainsGenericParameters(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().ContainsGenericParameters;
+#else
+            return type.ContainsGenericParameters;
+#endif
+        }
+
+        public static bool IsAbstract(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsAbstract;
+#else
+            return type.IsAbstract;
+#endif
+        }
+
+        public static bool IsSealed(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().IsSealed;
+#else
+            return type.IsSealed;
+#endif
+        }
+
+        public static MethodInfo Method(this Delegate del)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return del.GetMethodInfo();
+#else
+            return del.Method;
+#endif
+        }
+
+        public static Type[] GenericArguments(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().GenericTypeArguments;
+#else
+            return type.GetGenericArguments();
+#endif
+        }
+
+        public static Type[] Interfaces(this Type type)
+        {
+            Type[] result;
+            if (!_interfaces.TryGetValue(type, out result))
+            {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+                result = type.GetTypeInfo().ImplementedInterfaces.ToArray();
+#else
+                result = type.GetInterfaces();
+#endif
+                _interfaces.Add(type, result);
+            }
+            return result;
+        }
+
+        public static ConstructorInfo[] Constructors(this Type type)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().DeclaredConstructors.ToArray();
+#else
+            return type.GetConstructors(
+                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
+#endif
+        }
+
+        public static object GetDefaultValue(this Type type)
+        {
+#if ENABLE_IL2CPP
+            // Workaround for IL2CPP returning default(T) for Activator.CreateInstance(typeof(T?))
+            if (type.IsGenericType() && type.GetGenericTypeDefinition() == typeof(Nullable<>))
+            {
+                return null;
+            }
+#endif
+
+            if (type.IsValueType())
+            {
+                return Activator.CreateInstance(type);
+            }
+
+            return null;
+        }
+
+        public static bool IsClosedGenericType(this Type type)
+        {
+            bool result;
+            if (!_isClosedGenericType.TryGetValue(type, out result))
+            {
+                result = type.IsGenericType() && type != type.GetGenericTypeDefinition();
+                _isClosedGenericType[type] = result;
+            }
+            return result;
+        }
+
+        public static IEnumerable<Type> GetParentTypes(this Type type)
+        {
+            if (type == null || type.BaseType() == null || type == typeof(object) || type.BaseType() == typeof(object))
+            {
+                yield break;
+            }
+
+            yield return type.BaseType();
+
+            foreach (var ancestor in type.BaseType().GetParentTypes())
+            {
+                yield return ancestor;
+            }
+        }
+
+        public static bool IsOpenGenericType(this Type type)
+        {
+            bool result;
+            if (!_isOpenGenericType.TryGetValue(type, out result))
+            {
+                result = type.IsGenericType() && type == type.GetGenericTypeDefinition();
+                _isOpenGenericType[type] = result;
+            }
+            return result;
+        }
+
+        public static T GetAttribute<T>(this MemberInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes<T>().Single();
+        }
+
+        public static T TryGetAttribute<T>(this MemberInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes<T>().OnlyOrDefault();
+        }
+
+        public static bool HasAttribute(
+            this MemberInfo provider, params Type[] attributeTypes)
+        {
+            return provider.AllAttributes(attributeTypes).Any();
+        }
+
+        public static bool HasAttribute<T>(this MemberInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes(typeof(T)).Any();
+        }
+
+        public static IEnumerable<T> AllAttributes<T>(
+            this MemberInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes(typeof(T)).Cast<T>();
+        }
+
+        public static IEnumerable<Attribute> AllAttributes(
+            this MemberInfo provider, params Type[] attributeTypes)
+        {
+            Attribute[] allAttributes;
+#if NETFX_CORE
+            allAttributes = provider.GetCustomAttributes<Attribute>(true).ToArray();
+#else
+            allAttributes = System.Attribute.GetCustomAttributes(provider, typeof(Attribute), true);
+#endif
+            if (attributeTypes.Length == 0)
+            {
+                return allAttributes;
+            }
+
+            return allAttributes.Where(a => attributeTypes.Any(x => a.GetType().DerivesFromOrEqual(x)));
+        }
+
+        // We could avoid this duplication here by using ICustomAttributeProvider but this class
+        // does not exist on the WP8 platform
+        public static bool HasAttribute(
+            this ParameterInfo provider, params Type[] attributeTypes)
+        {
+            return provider.AllAttributes(attributeTypes).Any();
+        }
+
+        public static bool HasAttribute<T>(this ParameterInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes(typeof(T)).Any();
+        }
+
+        public static IEnumerable<T> AllAttributes<T>(
+            this ParameterInfo provider)
+            where T : Attribute
+        {
+            return provider.AllAttributes(typeof(T)).Cast<T>();
+        }
+
+        public static IEnumerable<Attribute> AllAttributes(
+            this ParameterInfo provider, params Type[] attributeTypes)
+        {
+            Attribute[] allAttributes;
+#if NETFX_CORE
+            allAttributes = provider.GetCustomAttributes<Attribute>(true).ToArray();
+#else
+            allAttributes = System.Attribute.GetCustomAttributes(provider, typeof(Attribute), true);
+#endif
+            if (attributeTypes.Length == 0)
+            {
+                return allAttributes;
+            }
+
+            return allAttributes.Where(a => attributeTypes.Any(x => a.GetType().DerivesFromOrEqual(x)));
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Internal/TypeExtensions.cs.meta b/Assets/Source/Runtime/Internal/TypeExtensions.cs.meta
new file mode 100644
index 0000000..1eec9d8
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/TypeExtensions.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2697c251f47f2bc40b32922c5a796f65
+timeCreated: 1427464253
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/TypeStringFormatter.cs b/Assets/Source/Runtime/Internal/TypeStringFormatter.cs
new file mode 100644
index 0000000..56af29a
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/TypeStringFormatter.cs
@@ -0,0 +1,112 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Text;
+
+namespace ModestTree
+{
+    public static class TypeStringFormatter
+    {
+        static readonly Dictionary<Type, string> _prettyNameCache = new Dictionary<Type, string>();
+
+        public static string PrettyName(this Type type)
+        {
+            string prettyName;
+
+            if (!_prettyNameCache.TryGetValue(type, out prettyName))
+            {
+                prettyName = PrettyNameInternal(type);
+                _prettyNameCache.Add(type, prettyName);
+            }
+
+            return prettyName;
+        }
+
+        static string PrettyNameInternal(Type type)
+        {
+            var sb = new StringBuilder();
+
+            if (type.IsNested)
+            {
+                sb.Append(type.DeclaringType.PrettyName());
+                sb.Append(".");
+            }
+
+            if (type.IsArray)
+            {
+                sb.Append(type.GetElementType().PrettyName());
+                sb.Append("[]");
+            }
+            else
+            {
+                var name = GetCSharpTypeName(type.Name);
+
+                if (type.IsGenericType())
+                {
+                    var quoteIndex = name.IndexOf('`');
+
+                    if (quoteIndex != -1)
+                    {
+                        sb.Append(name.Substring(0, name.IndexOf('`')));
+                    }
+                    else
+                    {
+                        sb.Append(name);
+                    }
+
+                    sb.Append("<");
+
+                    if (type.IsGenericTypeDefinition())
+                    {
+                        var numArgs = type.GenericArguments().Count();
+
+                        if (numArgs > 0)
+                        {
+                            sb.Append(new String(',', numArgs - 1));
+                        }
+                    }
+                    else
+                    {
+                        sb.Append(string.Join(", ", type.GenericArguments().Select(t => t.PrettyName()).ToArray()));
+                    }
+
+                    sb.Append(">");
+                }
+                else
+                {
+                    sb.Append(name);
+                }
+            }
+
+            return sb.ToString();
+        }
+
+        static string GetCSharpTypeName(string typeName)
+        {
+            switch (typeName)
+            {
+                case "String":
+                case "Object":
+                case "Void":
+                case "Byte":
+                case "Double":
+                case "Decimal":
+                    return typeName.ToLower();
+                case "Int16":
+                    return "short";
+                case "Int32":
+                    return "int";
+                case "Int64":
+                    return "long";
+                case "Single":
+                    return "float";
+                case "Boolean":
+                    return "bool";
+                default:
+                    return typeName;
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Internal/TypeStringFormatter.cs.meta b/Assets/Source/Runtime/Internal/TypeStringFormatter.cs.meta
new file mode 100644
index 0000000..6738cf9
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/TypeStringFormatter.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 94a0a9a58e17e3d438c169678c9795f7
+timeCreated: 1538018650
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Internal/ValuePair.cs b/Assets/Source/Runtime/Internal/ValuePair.cs
new file mode 100644
index 0000000..78e386e
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/ValuePair.cs
@@ -0,0 +1,190 @@
+using System;
+using System.Collections.Generic;
+
+namespace ModestTree.Util
+{
+    public class ValuePair<T1, T2>
+    {
+        public readonly T1 First;
+        public readonly T2 Second;
+
+        public ValuePair()
+        {
+            First = default(T1);
+            Second = default(T2);
+        }
+
+        public ValuePair(T1 first, T2 second)
+        {
+            First = first;
+            Second = second;
+        }
+
+        public override bool Equals(Object obj)
+        {
+            var that = obj as ValuePair<T1, T2>;
+
+            if (that == null)
+            {
+                return false;
+            }
+
+            return Equals(that);
+        }
+
+        public bool Equals(ValuePair<T1, T2> that)
+        {
+            if (that == null)
+            {
+                return false;
+            }
+
+            return object.Equals(First, that.First) && object.Equals(Second, that.Second);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + (First == null ? 0 : First.GetHashCode());
+                hash = hash * 29 + (Second == null ? 0 : Second.GetHashCode());
+                return hash;
+            }
+        }
+    }
+
+    public class ValuePair<T1, T2, T3>
+    {
+        public readonly T1 First;
+        public readonly T2 Second;
+        public readonly T3 Third;
+
+        public ValuePair()
+        {
+            First = default(T1);
+            Second = default(T2);
+            Third = default(T3);
+        }
+
+        public ValuePair(T1 first, T2 second, T3 third)
+        {
+            First = first;
+            Second = second;
+            Third = third;
+        }
+
+        public override bool Equals(Object obj)
+        {
+            var that = obj as ValuePair<T1, T2, T3>;
+
+            if (that == null)
+            {
+                return false;
+            }
+
+            return Equals(that);
+        }
+
+        public bool Equals(ValuePair<T1, T2, T3> that)
+        {
+            if (that == null)
+            {
+                return false;
+            }
+
+            return object.Equals(First, that.First) && object.Equals(Second, that.Second) && object.Equals(Third, that.Third);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + (First == null ? 0 : First.GetHashCode());
+                hash = hash * 29 + (Second == null ? 0 : Second.GetHashCode());
+                hash = hash * 29 + (Third == null ? 0 : Third.GetHashCode());
+                return hash;
+            }
+        }
+    }
+
+    public class ValuePair<T1, T2, T3, T4>
+    {
+        public readonly T1 First;
+        public readonly T2 Second;
+        public readonly T3 Third;
+        public readonly T4 Fourth;
+
+        public ValuePair()
+        {
+            First = default(T1);
+            Second = default(T2);
+            Third = default(T3);
+            Fourth = default(T4);
+        }
+
+        public ValuePair(T1 first, T2 second, T3 third, T4 fourth)
+        {
+            First = first;
+            Second = second;
+            Third = third;
+            Fourth = fourth;
+        }
+
+        public override bool Equals(Object obj)
+        {
+            var that = obj as ValuePair<T1, T2, T3, T4>;
+
+            if (that == null)
+            {
+                return false;
+            }
+
+            return Equals(that);
+        }
+
+        public bool Equals(ValuePair<T1, T2, T3, T4> that)
+        {
+            if (that == null)
+            {
+                return false;
+            }
+
+            return object.Equals(First, that.First) && object.Equals(Second, that.Second)
+                && object.Equals(Third, that.Third) && object.Equals(Fourth, that.Fourth);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + (First == null ? 0 : First.GetHashCode());
+                hash = hash * 29 + (Second == null ? 0 : Second.GetHashCode());
+                hash = hash * 29 + (Third == null ? 0 : Third.GetHashCode());
+                hash = hash * 29 + (Fourth == null ? 0 : Fourth.GetHashCode());
+                return hash;
+            }
+        }
+    }
+
+    public static class ValuePair
+    {
+        public static ValuePair<T1, T2> New<T1, T2>(T1 first, T2 second)
+        {
+            return new ValuePair<T1, T2>(first, second);
+        }
+
+        public static ValuePair<T1, T2, T3> New<T1, T2, T3>(T1 first, T2 second, T3 third)
+        {
+            return new ValuePair<T1, T2, T3>(first, second, third);
+        }
+
+        public static ValuePair<T1, T2, T3, T4> New<T1, T2, T3, T4>(T1 first, T2 second, T3 third, T4 fourth)
+        {
+            return new ValuePair<T1, T2, T3, T4>(first, second, third, fourth);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Internal/ValuePair.cs.meta b/Assets/Source/Runtime/Internal/ValuePair.cs.meta
new file mode 100644
index 0000000..03fdea6
--- /dev/null
+++ b/Assets/Source/Runtime/Internal/ValuePair.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: a3c968adce0a9a24e949dc4eedb496e8
+timeCreated: 1478449513
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels.meta b/Assets/Source/Runtime/Kernels.meta
new file mode 100644
index 0000000..cd30caa
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 605550c45d7550e498dfe6968192459d
+folderAsset: yes
+timeCreated: 1462650136
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs b/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs
new file mode 100644
index 0000000..b96d050
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs
@@ -0,0 +1,73 @@
+﻿namespace Zenject
+{
+    public interface IDecoratableMonoKernel
+    {
+        bool ShouldInitializeOnStart();
+        void Initialize();
+        void Update();
+        void FixedUpdate();
+        void LateUpdate();
+        void Dispose();
+        void LateDispose();
+    }
+
+    public class DecoratableMonoKernel : IDecoratableMonoKernel
+    {
+        [InjectLocal] 
+        public TickableManager TickableManager { get; protected set; } = null;
+
+        [InjectLocal]
+        public InitializableManager InitializableManager { get; protected set; } = null;
+
+        [InjectLocal]
+        public DisposableManager DisposablesManager { get; protected set; } = null;
+        
+        
+        public virtual bool ShouldInitializeOnStart() => true;
+        
+        public virtual void Initialize()
+        {
+            InitializableManager.Initialize();
+        }
+
+        public void Update()
+        {
+            TickableManager.Update();
+        }
+
+        public void FixedUpdate()
+        {
+            TickableManager.FixedUpdate();
+        }
+
+        public void LateUpdate()
+        {
+            TickableManager.LateUpdate();
+        }
+
+        public void Dispose()
+        {
+            DisposablesManager.Dispose();
+        }
+
+        public void LateDispose()
+        {
+            DisposablesManager.LateDispose();
+        }
+    }
+
+    public abstract class BaseMonoKernelDecorator : IDecoratableMonoKernel
+    {
+        [Inject] 
+        protected IDecoratableMonoKernel DecoratedMonoKernel;
+
+        public virtual bool ShouldInitializeOnStart() => DecoratedMonoKernel.ShouldInitializeOnStart();
+        public virtual void Initialize() => DecoratedMonoKernel.Initialize();
+        public virtual void Update() => DecoratedMonoKernel.Update();
+        public virtual void FixedUpdate() => DecoratedMonoKernel.FixedUpdate();
+        public virtual void LateUpdate() => DecoratedMonoKernel.LateUpdate();
+        public virtual void Dispose() => DecoratedMonoKernel.Dispose();
+        public virtual void LateDispose() => DecoratedMonoKernel.LateDispose();
+    }
+    
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs.meta b/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs.meta
new file mode 100644
index 0000000..9045b03
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/DecoratableMonoKernel.cs.meta
@@ -0,0 +1,3 @@
+﻿fileFormatVersion: 2
+guid: f054684b4d0f44a1904823270ae3f137
+timeCreated: 1587868417
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs b/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs
new file mode 100644
index 0000000..f2f7863
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs
@@ -0,0 +1,10 @@
+#if !NOT_UNITY3D
+
+namespace Zenject
+{
+    public class DefaultGameObjectKernel : MonoKernel
+    {
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs.meta b/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs.meta
new file mode 100644
index 0000000..fe81503
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/DefaultGameObjectKernel.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1c47912ae4e51a84d92f1acf689997c8
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9996
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels/Kernel.cs b/Assets/Source/Runtime/Kernels/Kernel.cs
new file mode 100644
index 0000000..c1e305a
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/Kernel.cs
@@ -0,0 +1,48 @@
+using System;
+using System.Diagnostics;
+
+namespace Zenject
+{
+    [DebuggerStepThrough]
+    public class Kernel : IInitializable, IDisposable, ITickable, ILateTickable, IFixedTickable, ILateDisposable
+    {
+        [InjectLocal]
+        TickableManager _tickableManager = null;
+
+        [InjectLocal]
+        InitializableManager _initializableManager = null;
+
+        [InjectLocal]
+        DisposableManager _disposablesManager = null;
+
+        public virtual void Initialize()
+        {
+            _initializableManager.Initialize();
+        }
+
+        public virtual void Dispose()
+        {
+            _disposablesManager.Dispose();
+        }
+
+        public virtual void LateDispose()
+        {
+            _disposablesManager.LateDispose();
+        }
+
+        public virtual void Tick()
+        {
+            _tickableManager.Update();
+        }
+
+        public virtual void LateTick()
+        {
+            _tickableManager.LateUpdate();
+        }
+
+        public virtual void FixedTick()
+        {
+            _tickableManager.FixedUpdate();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Kernels/Kernel.cs.meta b/Assets/Source/Runtime/Kernels/Kernel.cs.meta
new file mode 100644
index 0000000..3640b18
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/Kernel.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 8a25347f1a9a6b544b4ef8b643824a6f
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels/MonoKernel.cs b/Assets/Source/Runtime/Kernels/MonoKernel.cs
new file mode 100644
index 0000000..d7eb8fc
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/MonoKernel.cs
@@ -0,0 +1,129 @@
+#if !NOT_UNITY3D
+
+#pragma warning disable 649
+
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    public abstract class MonoKernel : MonoBehaviour
+    {
+        [InjectLocal]
+        TickableManager _tickableManager = null;
+
+        [InjectLocal]
+        InitializableManager _initializableManager = null;
+
+        [InjectLocal]
+        DisposableManager _disposablesManager = null;
+
+        [InjectOptional] 
+        private IDecoratableMonoKernel decoratableMonoKernel;
+
+        bool _hasInitialized;
+        bool _isDestroyed;
+
+        protected bool IsDestroyed
+        {
+            get { return _isDestroyed; }
+        }
+
+        public virtual void Start()
+        {
+            if (decoratableMonoKernel?.ShouldInitializeOnStart()??true)
+            {
+                Initialize();
+            }
+        }
+
+        public void Initialize()
+        {
+            // We don't put this in start in case Start is overridden
+            if (!_hasInitialized)
+            {
+                _hasInitialized = true;
+
+                if (decoratableMonoKernel != null)
+                {
+                    decoratableMonoKernel.Initialize();
+                }
+                else
+                {
+                    _initializableManager.Initialize();
+                }
+            }
+        }
+
+        public virtual void Update()
+        {
+            // Don't spam the log every frame if initialization fails and leaves it as null
+            if (_tickableManager != null)
+            {
+                if (decoratableMonoKernel != null)
+                {
+                    decoratableMonoKernel.Update();
+                }
+                else
+                {
+                    _tickableManager.Update();
+                }
+            }
+        }
+
+        public virtual void FixedUpdate()
+        {
+            // Don't spam the log every frame if initialization fails and leaves it as null
+            if (_tickableManager != null)
+            {
+                if (decoratableMonoKernel != null)
+                {
+                    decoratableMonoKernel.FixedUpdate();
+                }
+                else
+                {
+                    _tickableManager.FixedUpdate();
+                }
+            }
+        }
+
+        public virtual void LateUpdate()
+        {
+            // Don't spam the log every frame if initialization fails and leaves it as null
+            if (_tickableManager != null)
+            {
+                if (decoratableMonoKernel != null)
+                {
+                    decoratableMonoKernel.LateUpdate();
+                }
+                else
+                {
+                    _tickableManager.LateUpdate();
+                }
+            }
+        }
+
+        public virtual void OnDestroy()
+        {
+            // _disposablesManager can be null if we get destroyed before the Start event
+            if (_disposablesManager != null)
+            {
+                Assert.That(!_isDestroyed);
+                _isDestroyed = true;
+
+                if (decoratableMonoKernel != null)
+                {
+                    decoratableMonoKernel.Dispose();
+                    decoratableMonoKernel.LateDispose();
+                }
+                else
+                {
+                    _disposablesManager.Dispose();
+                    _disposablesManager.LateDispose();
+                }
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Kernels/MonoKernel.cs.meta b/Assets/Source/Runtime/Kernels/MonoKernel.cs.meta
new file mode 100644
index 0000000..db35b95
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/MonoKernel.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 0ed09ac17d1c3ca44b8064ce22ebba27
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels/ProjectKernel.cs b/Assets/Source/Runtime/Kernels/ProjectKernel.cs
new file mode 100644
index 0000000..6db9c0b
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/ProjectKernel.cs
@@ -0,0 +1,87 @@
+#if !NOT_UNITY3D
+
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine.SceneManagement;
+
+namespace Zenject
+{
+    public class ProjectKernel : MonoKernel
+    {
+        [Inject]
+        ZenjectSettings _settings = null;
+
+        [Inject]
+        SceneContextRegistry _contextRegistry = null;
+
+        // One issue with relying on MonoKernel.OnDestroy to call IDisposable.Dispose
+        // is that the order that OnDestroy is called in is difficult to predict
+        // One good thing is that it does follow the heirarchy order (so root game objects
+        // will have thier OnDestroy called before child objects)
+        // However, the order that OnDestroy is called for the root game objects themselves
+        // is largely random
+        // Within an individual scene, this can be helped somewhat by placing all game objects
+        // underneath the SceneContext and then also checking the 'ParentNewObjectsUnderRoot'
+        // property to ensure any new game objects will also be parented underneath SceneContext
+        // By doing this, we can be guaranteed to have any bound IDisposable's have their
+        // Dispose called before any game object is destroyed in the scene
+        // However, when using multiple scenes (each with their own SceneContext) the order
+        // that these SceneContext game objects are destroyed is random
+        // So to address that, we explicitly call GameObject.DestroyImmediate for all
+        // SceneContext's in the reverse order that the scenes were loaded in below
+        // (this works because OnApplicationQuit is always called before OnDestroy)
+        // Note that this only works when stopping the app and not when changing scenes
+        // When changing scenes, if you have multiple scenes loaded at once, you will have to
+        // manually unload the scenes in the reverse order they were loaded before going to
+        // the new scene, if you require a predictable destruction order.  Or you can always use
+        // ZenjectSceneLoader which will do this for you
+        public void OnApplicationQuit()
+        {
+            if (_settings.EnsureDeterministicDestructionOrderOnApplicationQuit)
+            {
+                DestroyEverythingInOrder();
+            }
+        }
+
+        public void DestroyEverythingInOrder()
+        {
+            ForceUnloadAllScenes(true);
+
+            // Destroy project context after all scenes
+            Assert.That(!IsDestroyed);
+            DestroyImmediate(gameObject);
+            Assert.That(IsDestroyed);
+        }
+
+        public void ForceUnloadAllScenes(bool immediate = false)
+        {
+            // OnApplicationQuit should always be called before OnDestroy
+            // (Unless it is destroyed manually)
+            Assert.That(!IsDestroyed);
+
+            var sceneOrder = new List<Scene>();
+
+            for (int i = 0; i < SceneManager.sceneCount; i++)
+            {
+                sceneOrder.Add(SceneManager.GetSceneAt(i));
+            }
+
+            // Destroy the scene contexts from bottom to top
+            // Since this is the reverse order that they were loaded in
+            foreach (var sceneContext in _contextRegistry.SceneContexts.OrderByDescending(x => sceneOrder.IndexOf(x.gameObject.scene)).ToList())
+            {
+                if (immediate)
+                {
+                    DestroyImmediate(sceneContext.gameObject);
+                }
+                else
+                {
+                    Destroy(sceneContext.gameObject);
+                }
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Kernels/ProjectKernel.cs.meta b/Assets/Source/Runtime/Kernels/ProjectKernel.cs.meta
new file mode 100644
index 0000000..3477e18
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/ProjectKernel.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 374b2cd725ea28a46a6377959bb73c9c
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9998
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Kernels/SceneKernel.cs b/Assets/Source/Runtime/Kernels/SceneKernel.cs
new file mode 100644
index 0000000..19705b1
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/SceneKernel.cs
@@ -0,0 +1,21 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+
+namespace Zenject
+{
+    public class SceneKernel : MonoKernel
+    {
+        // Only needed to set "script execution order" in unity project settings
+
+#if ZEN_INTERNAL_PROFILING
+        public override void Start()
+        {
+            base.Start();
+            Log.Info("SceneContext.Awake detailed profiling: {0}", ProfileTimers.FormatResults());
+        }
+#endif
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Kernels/SceneKernel.cs.meta b/Assets/Source/Runtime/Kernels/SceneKernel.cs.meta
new file mode 100644
index 0000000..0a38154
--- /dev/null
+++ b/Assets/Source/Runtime/Kernels/SceneKernel.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: aff38aaefd39d0d41a92c2707718d15c
+timeCreated: 1461708052
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9997
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main.meta b/Assets/Source/Runtime/Main.meta
new file mode 100644
index 0000000..5bdc609
--- /dev/null
+++ b/Assets/Source/Runtime/Main.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: b5f870edd43b85f4dae7b77cc0d75b46
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Runtime/Main/BindingId.cs b/Assets/Source/Runtime/Main/BindingId.cs
new file mode 100644
index 0000000..2c21605
--- /dev/null
+++ b/Assets/Source/Runtime/Main/BindingId.cs
@@ -0,0 +1,78 @@
+using System;
+using System.Diagnostics;
+using ModestTree;
+
+namespace Zenject
+{
+    [DebuggerStepThrough]
+    public struct BindingId : IEquatable<BindingId>
+    {
+        Type _type;
+        object _identifier;
+
+        public BindingId(Type type, object identifier)
+        {
+            _type = type;
+            _identifier = identifier;
+        }
+
+        public Type Type
+        {
+            get { return _type; }
+            set { _type = value; }
+        }
+
+        public object Identifier
+        {
+            get { return _identifier; }
+            set { _identifier = value; }
+        }
+
+        public override string ToString()
+        {
+            if (_identifier == null)
+            {
+                return _type.PrettyName();
+            }
+
+            return "{0} (ID: {1})".Fmt(_type, _identifier);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + _type.GetHashCode();
+                hash = hash * 29 + (_identifier == null ? 0 : _identifier.GetHashCode());
+                return hash;
+            }
+        }
+
+        public override bool Equals(object other)
+        {
+            if (other is BindingId)
+            {
+                BindingId otherId = (BindingId)other;
+                return otherId == this;
+            }
+
+            return false;
+        }
+
+        public bool Equals(BindingId that)
+        {
+            return this == that;
+        }
+
+        public static bool operator ==(BindingId left, BindingId right)
+        {
+            return left.Type == right.Type && Equals(left.Identifier, right.Identifier);
+        }
+
+        public static bool operator !=(BindingId left, BindingId right)
+        {
+            return !left.Equals(right);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Main/BindingId.cs.meta b/Assets/Source/Runtime/Main/BindingId.cs.meta
new file mode 100644
index 0000000..b65c1eb
--- /dev/null
+++ b/Assets/Source/Runtime/Main/BindingId.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 05e8238358230bf4e9cbb692280d28f1
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/DiContainer.cs b/Assets/Source/Runtime/Main/DiContainer.cs
new file mode 100644
index 0000000..b1882f0
--- /dev/null
+++ b/Assets/Source/Runtime/Main/DiContainer.cs
@@ -0,0 +1,3579 @@
+﻿using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+using Zenject.Internal;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    public delegate bool BindingCondition(InjectContext c);
+
+    // Responsibilities:
+    // - Expose methods to configure object graph via BindX() methods
+    // - Look up bound values via Resolve() method
+    // - Instantiate new values via InstantiateX() methods
+    [NoReflectionBaking]
+    public class DiContainer : IInstantiator
+    {
+        readonly Dictionary<Type, IDecoratorProvider> _decorators = new Dictionary<Type, IDecoratorProvider>();
+        readonly Dictionary<BindingId, List<ProviderInfo>> _providers = new Dictionary<BindingId, List<ProviderInfo>>();
+
+        readonly DiContainer[][] _containerLookups = new DiContainer[4][];
+
+        readonly HashSet<LookupId> _resolvesInProgress = new HashSet<LookupId>();
+        readonly HashSet<LookupId> _resolvesTwiceInProgress = new HashSet<LookupId>();
+
+        readonly LazyInstanceInjector _lazyInjector;
+
+        readonly SingletonMarkRegistry _singletonMarkRegistry = new SingletonMarkRegistry();
+        readonly Queue<BindStatement> _currentBindings = new Queue<BindStatement>();
+        readonly List<BindStatement> _childBindings = new List<BindStatement>();
+
+        readonly HashSet<Type> _validatedTypes = new HashSet<Type>();
+        readonly List<IValidatable> _validationQueue = new List<IValidatable>();
+
+#if !NOT_UNITY3D
+        Transform _contextTransform;
+        bool _hasLookedUpContextTransform;
+        Transform _inheritedDefaultParent;
+        Transform _explicitDefaultParent;
+        bool _hasExplicitDefaultParent;
+#endif
+
+        ZenjectSettings _settings;
+
+        bool _hasResolvedRoots;
+        bool _isFinalizingBinding;
+        bool _isValidating;
+        bool _isInstalling;
+#if DEBUG || UNITY_EDITOR
+        bool _hasDisplayedInstallWarning;
+#endif
+
+        public DiContainer(
+            IEnumerable<DiContainer> parentContainersEnumerable, bool isValidating)
+        {
+            _isValidating = isValidating;
+
+            _lazyInjector = new LazyInstanceInjector(this);
+
+            InstallDefaultBindings();
+            FlushBindings();
+            Assert.That(_currentBindings.Count == 0);
+
+            _settings = ZenjectSettings.Default;
+
+            var selfLookup = new[] { this };
+            _containerLookups[(int)InjectSources.Local] = selfLookup;
+
+            var parentContainers = parentContainersEnumerable.ToArray();
+            _containerLookups[(int)InjectSources.Parent] = parentContainers;
+
+            var ancestorContainers = FlattenInheritanceChain().ToArray();
+
+            _containerLookups[(int)InjectSources.AnyParent] = ancestorContainers;
+            _containerLookups[(int)InjectSources.Any] = selfLookup.Concat(ancestorContainers).ToArray();
+
+            if (!parentContainers.IsEmpty())
+            {
+                for (int i = 0; i < parentContainers.Length; i++)
+                {
+                    parentContainers[i].FlushBindings();
+                }
+
+#if !NOT_UNITY3D
+                _inheritedDefaultParent = parentContainers.First().DefaultParent;
+#endif
+
+                // Make sure to avoid duplicates which could happen if a parent container
+                // appears multiple times in the inheritance chain
+                foreach (var ancestorContainer in ancestorContainers.Distinct())
+                {
+                    foreach (var binding in ancestorContainer._childBindings)
+                    {
+                        if (ShouldInheritBinding(binding, ancestorContainer))
+                        {
+                            FinalizeBinding(binding);
+                        }
+                    }
+                }
+
+                Assert.That(_currentBindings.Count == 0);
+                Assert.That(_childBindings.Count == 0);
+            }
+
+            // Assumed to be configured in a parent container
+            var settings = TryResolve<ZenjectSettings>();
+
+            if (settings != null)
+            {
+                _settings = settings;
+            }
+        }
+
+        public DiContainer(bool isValidating)
+            : this(Enumerable.Empty<DiContainer>(), isValidating)
+        {
+        }
+
+        public DiContainer()
+            : this(Enumerable.Empty<DiContainer>(), false)
+        {
+        }
+
+        public DiContainer(DiContainer parentContainer, bool isValidating)
+            : this(new [] { parentContainer }, isValidating)
+        {
+        }
+
+        public DiContainer(DiContainer parentContainer)
+            : this(new [] { parentContainer }, false)
+        {
+        }
+
+        public DiContainer(IEnumerable<DiContainer> parentContainers)
+            : this(parentContainers, false)
+        {
+        }
+
+        // By default the settings will be inherited from parent containers, but can be
+        // set explicitly here as well which is useful in particular in unit tests
+        // Note however that if you want child containers to use this same value you have
+        // to bind it as well
+        public ZenjectSettings Settings
+        {
+            get { return _settings; }
+            set
+            {
+                _settings = value;
+                Rebind<ZenjectSettings>().FromInstance(value);
+            }
+        }
+
+        internal SingletonMarkRegistry SingletonMarkRegistry
+        {
+            get { return _singletonMarkRegistry; }
+        }
+
+        public IEnumerable<IProvider> AllProviders
+        {
+            // Distinct is necessary since the same providers can be used with multiple contracts
+            get { return _providers.Values.SelectMany(x => x).Select(x => x.Provider).Distinct(); }
+        }
+
+        void InstallDefaultBindings()
+        {
+            Bind(typeof(DiContainer), typeof(IInstantiator)).FromInstance(this);
+            Bind(typeof(LazyInject<>)).FromMethodUntyped(CreateLazyBinding).Lazy();
+        }
+
+        object CreateLazyBinding(InjectContext context)
+        {
+            // By cloning it this also means that Ids, optional, etc. are forwarded properly
+            var newContext = context.Clone();
+            newContext.MemberType = context.MemberType.GenericArguments().Single();
+
+            var result = Activator.CreateInstance(
+                typeof(LazyInject<>)
+                .MakeGenericType(newContext.MemberType), this, newContext);
+
+            if (_isValidating)
+            {
+                QueueForValidate((IValidatable)result);
+            }
+
+            return result;
+        }
+
+        public void QueueForValidate(IValidatable validatable)
+        {
+            // Don't bother adding to queue if the initial resolve is already completed
+            if (!_hasResolvedRoots)
+            {
+                var concreteType = validatable.GetType();
+
+                if (!_validatedTypes.Contains(concreteType))
+                {
+                    _validatedTypes.Add(concreteType);
+                    _validationQueue.Add(validatable);
+                }
+            }
+        }
+
+        bool ShouldInheritBinding(BindStatement binding, DiContainer ancestorContainer)
+        {
+            if (binding.BindingInheritanceMethod == BindingInheritanceMethods.CopyIntoAll
+                || binding.BindingInheritanceMethod == BindingInheritanceMethods.MoveIntoAll)
+            {
+                return true;
+            }
+
+            if ((binding.BindingInheritanceMethod == BindingInheritanceMethods.CopyDirectOnly
+                    || binding.BindingInheritanceMethod == BindingInheritanceMethods.MoveDirectOnly)
+                && ParentContainers.Contains(ancestorContainer))
+            {
+                return true;
+            }
+
+            return false;
+        }
+
+#if !NOT_UNITY3D
+        // This might be null in some rare cases like when used in ZenjectUnitTestFixture
+        Transform ContextTransform
+        {
+            get
+            {
+                if (!_hasLookedUpContextTransform)
+                {
+                    _hasLookedUpContextTransform = true;
+
+                    var context = TryResolve<Context>();
+
+                    if (context != null)
+                    {
+                        _contextTransform = context.transform;
+                    }
+                }
+
+                return _contextTransform;
+            }
+        }
+#endif
+
+        // When true, this will throw exceptions whenever we create new game objects
+        // This is helpful when used in places like EditorWindowKernel where we can't
+        // assume that there is a "scene" to place objects
+        public bool AssertOnNewGameObjects
+        {
+            get;
+            set;
+        }
+
+#if !NOT_UNITY3D
+
+        public Transform InheritedDefaultParent
+        {
+            get { return _inheritedDefaultParent; }
+        }
+
+        public Transform DefaultParent
+        {
+            get { return _explicitDefaultParent; }
+            set
+            {
+                _explicitDefaultParent = value;
+                // Need to use a flag because null is a valid explicit default parent
+                _hasExplicitDefaultParent = true;
+            }
+        }
+#endif
+
+        public DiContainer[] ParentContainers
+        {
+            get { return _containerLookups[(int)InjectSources.Parent]; }
+        }
+
+        public DiContainer[] AncestorContainers
+        {
+            get { return _containerLookups[(int)InjectSources.AnyParent]; }
+        }
+
+        public bool ChecksForCircularDependencies
+        {
+            get
+            {
+#if ZEN_MULTITHREADING
+                // When multithreading is supported we can't use a static field to track the lookup
+                // TODO: We could look at the inject context though
+                return false;
+#else
+                return true;
+#endif
+            }
+        }
+
+        public bool IsValidating
+        {
+            get { return _isValidating; }
+        }
+
+        // When this is true, it will log warnings when Resolve or Instantiate
+        // methods are called
+        // Used to ensure that Resolve and Instantiate methods are not called
+        // during bind phase.  This is important since Resolve and Instantiate
+        // make use of the bindings, so if the bindings are not complete then
+        // unexpected behaviour can occur
+        public bool IsInstalling
+        {
+            get { return _isInstalling; }
+            set { _isInstalling = value; }
+        }
+
+        public IEnumerable<BindingId> AllContracts
+        {
+            get
+            {
+                FlushBindings();
+                return _providers.Keys;
+            }
+        }
+
+        public void ResolveRoots()
+        {
+            Assert.That(!_hasResolvedRoots);
+
+            FlushBindings();
+
+            ResolveDependencyRoots();
+#if DEBUG
+            if (IsValidating && _settings.ValidationRootResolveMethod == RootResolveMethods.All)
+            {
+                ValidateFullResolve();
+            }
+#endif
+
+            _lazyInjector.LazyInjectAll();
+
+            if (IsValidating)
+            {
+                FlushValidationQueue();
+            }
+
+            Assert.That(!_hasResolvedRoots);
+            _hasResolvedRoots = true;
+        }
+
+        void ResolveDependencyRoots()
+        {
+            var rootBindings = new List<BindingId>();
+            var rootProviders = new List<ProviderInfo>();
+
+            foreach (var bindingPair in _providers)
+            {
+                foreach (var provider in bindingPair.Value)
+                {
+                    if (provider.NonLazy)
+                    {
+                        // Save them to a list instead of resolving for them here to account
+                        // for the rare case where one of the resolves does another binding
+                        // and therefore changes _providers, causing an exception.
+                        rootBindings.Add(bindingPair.Key);
+                        rootProviders.Add(provider);
+                    }
+                }
+            }
+
+            Assert.IsEqual(rootProviders.Count, rootBindings.Count);
+
+            var instances = ZenPools.SpawnList<object>();
+
+            try
+            {
+                for (int i = 0; i < rootProviders.Count; i++)
+                {
+                    var bindId = rootBindings[i];
+                    var providerInfo = rootProviders[i];
+
+                    using (var context = ZenPools.SpawnInjectContext(this, bindId.Type))
+                    {
+                        context.Identifier = bindId.Identifier;
+                        context.SourceType = InjectSources.Local;
+
+                        // Should this be true?  Are there cases where you are ok that NonLazy matches
+                        // zero providers?
+                        // Probably better to be false to catch mistakes
+                        context.Optional = false;
+
+                        instances.Clear();
+
+#if ZEN_INTERNAL_PROFILING
+                        using (ProfileTimers.CreateTimedBlock("DiContainer.Resolve"))
+#endif
+                        {
+                            SafeGetInstances(providerInfo, context, instances);
+                        }
+
+                        // Zero matches might actually be valid in some cases
+                        //Assert.That(matches.Any());
+                    }
+                }
+            }
+            finally
+            {
+                ZenPools.DespawnList(instances);
+            }
+        }
+
+        void ValidateFullResolve()
+        {
+            Assert.That(!_hasResolvedRoots);
+            Assert.That(IsValidating);
+
+            foreach (var bindingId in _providers.Keys.ToList())
+            {
+                if (!bindingId.Type.IsOpenGenericType())
+                {
+                    using (var context = ZenPools.SpawnInjectContext(this, bindingId.Type))
+                    {
+                        context.Identifier = bindingId.Identifier;
+                        context.SourceType = InjectSources.Local;
+                        context.Optional = true;
+
+                        ResolveAll(context);
+                    }
+                }
+            }
+        }
+
+        void FlushValidationQueue()
+        {
+            Assert.That(!_hasResolvedRoots);
+            Assert.That(IsValidating);
+
+            var validatables = new List<IValidatable>();
+
+            // Repeatedly flush the validation queue until it's empty, to account for
+            // cases where calls to Validate() add more objects to the queue
+            while (_validationQueue.Any())
+            {
+                validatables.Clear();
+                validatables.AllocFreeAddRange(_validationQueue);
+                _validationQueue.Clear();
+
+                for (int i = 0; i < validatables.Count; i++)
+                {
+                    validatables[i].Validate();
+                }
+            }
+        }
+
+        public DiContainer CreateSubContainer()
+        {
+            return CreateSubContainer(_isValidating);
+        }
+
+        public void QueueForInject(object instance)
+        {
+            _lazyInjector.AddInstance(instance);
+        }
+
+        // Note: this only does anything useful during the injection phase
+        // It will inject on the given instance if it hasn't already been injected, but only
+        // if the given instance has been queued for inject already by calling QueueForInject
+        // In some rare cases this can be useful - for example if you want to add a binding in a
+        // a higher level container to a resolve inside a lower level game object context container
+        // since in this case you need the game object context to be injected so you can access its
+        // Container property
+        public T LazyInject<T>(T instance)
+        {
+            _lazyInjector.LazyInject(instance);
+            return instance;
+        }
+
+        DiContainer CreateSubContainer(bool isValidating)
+        {
+            return new DiContainer(new[] { this }, isValidating);
+        }
+
+        public void RegisterProvider(
+            BindingId bindingId, BindingCondition condition, IProvider provider, bool nonLazy)
+        {
+            var info = new ProviderInfo(provider, condition, nonLazy, this);
+
+            List<ProviderInfo> providerInfos;
+
+            if (!_providers.TryGetValue(bindingId, out providerInfos))
+            {
+                providerInfos = new List<ProviderInfo>();
+                _providers.Add(bindingId, providerInfos);
+            }
+
+            providerInfos.Add(info);
+        }
+
+        void GetProviderMatches(
+            InjectContext context, List<ProviderInfo> buffer)
+        {
+            Assert.IsNotNull(context);
+            Assert.That(buffer.Count == 0);
+
+            var allMatches = ZenPools.SpawnList<ProviderInfo>();
+
+            try
+            {
+                GetProvidersForContract(
+                    context.BindingId, context.SourceType, allMatches);
+
+                for (int i = 0; i < allMatches.Count; i++)
+                {
+                    var match = allMatches[i];
+
+                    if (match.Condition == null || match.Condition(context))
+                    {
+                        buffer.Add(match);
+                    }
+                }
+            }
+            finally
+            {
+                ZenPools.DespawnList(allMatches);
+            }
+        }
+
+        ProviderInfo TryGetUniqueProvider(InjectContext context)
+        {
+            Assert.IsNotNull(context);
+
+            var bindingId = context.BindingId;
+            var sourceType = context.SourceType;
+
+            var containerLookups = _containerLookups[(int)sourceType];
+
+            for (int i = 0; i < containerLookups.Length; i++)
+            {
+                containerLookups[i].FlushBindings();
+            }
+
+            var localProviders = ZenPools.SpawnList<ProviderInfo>();
+
+            try
+            {
+                ProviderInfo selected = null;
+                int selectedDistance = Int32.MaxValue;
+                bool selectedHasCondition = false;
+                bool ambiguousSelection = false;
+
+                for (int i = 0; i < containerLookups.Length; i++)
+                {
+                    var container = containerLookups[i];
+
+                    int curDistance = GetContainerHeirarchyDistance(container);
+
+                    if (curDistance > selectedDistance)
+                    {
+                        // If matching provider was already found lower in the hierarchy => don't search for a new one,
+                        // because there can't be a better or equal provider in this container.
+                        continue;
+                    }
+
+                    localProviders.Clear();
+                    container.GetLocalProviders(bindingId, localProviders);
+
+                    for (int k = 0; k < localProviders.Count; k++)
+                    {
+                        var provider = localProviders[k];
+
+                        bool curHasCondition = provider.Condition != null;
+
+                        if (curHasCondition && !provider.Condition(context))
+                        {
+                            // The condition is not satisfied.
+                            continue;
+                        }
+
+                        // The distance can't decrease becuase we are iterating over the containers with increasing distance.
+                        // The distance can't increase because  we skip the container if the distance is greater than selected.
+                        // So the distances are equal and only the condition can help resolving the amiguity.
+                        Assert.That(selected == null || selectedDistance == curDistance);
+
+                        if (curHasCondition)
+                        {
+                            if (selectedHasCondition)
+                            {
+                                // Both providers have condition and are on equal depth.
+                                ambiguousSelection = true;
+                            }
+                            else
+                            {
+                                // Ambiguity is resolved because a provider with condition was found.
+                                ambiguousSelection = false;
+                            }
+                        }
+                        else
+                        {
+                            if (selectedHasCondition)
+                            {
+                                // Selected provider is better because it has condition.
+                                continue;
+                            }
+                            if (selected != null)
+                            {
+                                // Both providers don't have a condition and are on equal depth.
+                                ambiguousSelection = true;
+                            }
+                        }
+
+                        if (ambiguousSelection)
+                        {
+                            continue;
+                        }
+
+                        selectedDistance = curDistance;
+                        selectedHasCondition = curHasCondition;
+                        selected = provider;
+                    }
+                }
+
+                if (ambiguousSelection)
+                {
+                    throw Assert.CreateException(
+                        "Found multiple matches when only one was expected for type '{0}'{1}. Object graph:\n {2}",
+                        context.MemberType,
+                        (context.ObjectType == null
+                            ? ""
+                            : " while building object with type '{0}'".Fmt(context.ObjectType)),
+                        context.GetObjectGraphString());
+                }
+
+                return selected;
+            }
+            finally
+            {
+                ZenPools.DespawnList(localProviders);
+            }
+        }
+
+        // Get the full list of ancestor Di Containers, making sure to avoid
+        // duplicates and also order them in a breadth-first way
+        List<DiContainer> FlattenInheritanceChain()
+        {
+            var processed = new List<DiContainer>();
+
+            var containerQueue = new Queue<DiContainer>();
+            containerQueue.Enqueue(this);
+
+            while (containerQueue.Count > 0)
+            {
+                var current = containerQueue.Dequeue();
+
+                foreach (var parent in current.ParentContainers)
+                {
+                    if (!processed.Contains(parent))
+                    {
+                        processed.Add(parent);
+                        containerQueue.Enqueue(parent);
+                    }
+                }
+            }
+
+            return processed;
+        }
+
+        void GetLocalProviders(BindingId bindingId, List<ProviderInfo> buffer)
+        {
+            List<ProviderInfo> localProviders;
+
+            if (_providers.TryGetValue(bindingId, out localProviders))
+            {
+                buffer.AllocFreeAddRange(localProviders);
+                return;
+            }
+
+            // If we are asking for a List<int>, we should also match for any localProviders that are bound to the open generic type List<>
+            // Currently it only matches one and not the other - not totally sure if this is better than returning both
+            if (bindingId.Type.IsGenericType() && _providers.TryGetValue(new BindingId(bindingId.Type.GetGenericTypeDefinition(), bindingId.Identifier), out localProviders))
+            {
+                buffer.AllocFreeAddRange(localProviders);
+            }
+
+            // None found
+        }
+
+        void GetProvidersForContract(
+            BindingId bindingId, InjectSources sourceType, List<ProviderInfo> buffer)
+        {
+            var containerLookups = _containerLookups[(int)sourceType];
+
+            for (int i = 0; i < containerLookups.Length; i++)
+            {
+                containerLookups[i].FlushBindings();
+            }
+
+            for (int i = 0; i < containerLookups.Length; i++)
+            {
+                containerLookups[i].GetLocalProviders(bindingId, buffer);
+            }
+        }
+
+        public void Install<TInstaller>()
+            where TInstaller : Installer
+        {
+            Instantiate<TInstaller>().InstallBindings();
+        }
+
+        // Note: You might want to use Installer<> as your base class instead to allow
+        // for strongly typed parameters
+        public void Install<TInstaller>(object[] extraArgs)
+            where TInstaller : Installer
+        {
+            Instantiate<TInstaller>(extraArgs).InstallBindings();
+        }
+
+        public IList ResolveAll(InjectContext context)
+        {
+            var buffer = ZenPools.SpawnList<object>();
+
+            try
+            {
+                ResolveAll(context, buffer);
+                return ReflectionUtil.CreateGenericList(context.MemberType, buffer);
+            }
+            finally
+            {
+                ZenPools.DespawnList(buffer);
+            }
+        }
+
+        public void ResolveAll(InjectContext context, List<object> buffer)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("DiContainer.Resolve"))
+#endif
+            {
+                Assert.IsNotNull(context);
+                // Note that different types can map to the same provider (eg. a base type to a concrete class and a concrete class to itself)
+
+                FlushBindings();
+                CheckForInstallWarning(context);
+
+                var matches = ZenPools.SpawnList<ProviderInfo>();
+
+                try
+                {
+                    GetProviderMatches(context, matches);
+
+                    if (matches.Count == 0)
+                    {
+                        if (!context.Optional)
+                        {
+                            throw Assert.CreateException(
+                                "Could not find required dependency with type '{0}' Object graph:\n {1}", context.MemberType, context.GetObjectGraphString());
+                        }
+
+                        return;
+                    }
+
+                    var instances = ZenPools.SpawnList<object>();
+                    var allInstances = ZenPools.SpawnList<object>();
+
+                    try
+                    {
+                        for (int i = 0; i < matches.Count; i++)
+                        {
+                            var match = matches[i];
+
+                            instances.Clear();
+                            SafeGetInstances(match, context, instances);
+
+                            for (int k = 0; k < instances.Count; k++)
+                            {
+                                allInstances.Add(instances[k]);
+                            }
+                        }
+
+                        if (allInstances.Count == 0 && !context.Optional)
+                        {
+                            throw Assert.CreateException(
+                                "Could not find required dependency with type '{0}'.  Found providers but they returned zero results!", context.MemberType);
+                        }
+
+                        if (IsValidating)
+                        {
+                            for (int i = 0; i < allInstances.Count; i++)
+                            {
+                                var instance = allInstances[i];
+
+                                if (instance is ValidationMarker)
+                                {
+                                    allInstances[i] = context.MemberType.GetDefaultValue();
+                                }
+                            }
+                        }
+
+                        buffer.AllocFreeAddRange(allInstances);
+                    }
+                    finally
+                    {
+                        ZenPools.DespawnList(instances);
+                        ZenPools.DespawnList(allInstances);
+                    }
+                }
+                finally
+                {
+                    ZenPools.DespawnList(matches);
+                }
+            }
+        }
+
+        void CheckForInstallWarning(InjectContext context)
+        {
+            if (!_settings.DisplayWarningWhenResolvingDuringInstall)
+            {
+                return;
+            }
+
+            Assert.IsNotNull(context);
+
+#if DEBUG || UNITY_EDITOR
+            if (!_isInstalling)
+            {
+                return;
+            }
+
+            if (_hasDisplayedInstallWarning)
+            {
+                return;
+            }
+
+            if (context == null)
+            {
+                // No way to tell whether this is ok or not so just assume ok
+                return;
+            }
+
+#if UNITY_EDITOR
+            if (context.MemberType.DerivesFromOrEqual<Context>())
+            {
+                // This happens when getting default transform parent so ok
+                return;
+            }
+#endif
+            if (IsValidating && TypeAnalyzer.ShouldAllowDuringValidation(context.MemberType))
+            {
+                return;
+            }
+
+            var rootContext = context.ParentContextsAndSelf.Last();
+
+            if (rootContext.MemberType.DerivesFrom<IInstaller>())
+            {
+                // Resolving/instantiating/injecting installers is valid during install phase
+                return;
+            }
+
+            _hasDisplayedInstallWarning = true;
+
+            // Feel free to comment this out if you are comfortable with this practice
+            Log.Warn("Zenject Warning: It is bad practice to call Inject/Resolve/Instantiate before all the Installers have completed!  This is important to ensure that all bindings have properly been installed in case they are needed when injecting/instantiating/resolving.  Detected when operating on type '{0}'.  If you don't care about this, you can disable this warning by setting flag 'ZenjectSettings.DisplayWarningWhenResolvingDuringInstall' to false (see docs for details on ZenjectSettings).", rootContext.MemberType);
+#endif
+        }
+
+        // Returns the concrete type that would be returned with Resolve<T>
+        // without actually instantiating it
+        // This is safe to use within installers
+        public Type ResolveType<T>()
+        {
+            return ResolveType(typeof(T));
+        }
+
+        // Returns the concrete type that would be returned with Resolve(type)
+        // without actually instantiating it
+        // This is safe to use within installers
+        public Type ResolveType(Type type)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, type))
+            {
+                return ResolveType(context);
+            }
+        }
+
+        // Returns the concrete type that would be returned with Resolve(context)
+        // without actually instantiating it
+        // This is safe to use within installers
+        public Type ResolveType(InjectContext context)
+        {
+            Assert.IsNotNull(context);
+
+            FlushBindings();
+
+            var providerInfo = TryGetUniqueProvider(context);
+
+            if (providerInfo == null)
+            {
+                throw Assert.CreateException(
+                    "Unable to resolve {0}{1}. Object graph:\n{2}", context.BindingId,
+                    (context.ObjectType == null ? "" : " while building object with type '{0}'".Fmt(context.ObjectType)),
+                    context.GetObjectGraphString());
+            }
+
+            return providerInfo.Provider.GetInstanceType(context);
+        }
+
+        public List<Type> ResolveTypeAll(Type type)
+        {
+            return ResolveTypeAll(type, null);
+        }
+
+        public List<Type> ResolveTypeAll(Type type, object identifier)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, type))
+            {
+                context.Identifier = identifier;
+                return ResolveTypeAll(context);
+            }
+        }
+
+        // Returns all the types that would be returned if ResolveAll was called with the given values
+        public List<Type> ResolveTypeAll(InjectContext context)
+        {
+            Assert.IsNotNull(context);
+
+            FlushBindings();
+
+            var matches = ZenPools.SpawnList<ProviderInfo>();
+
+            try
+            {
+                GetProviderMatches(context, matches);
+
+                if (matches.Count > 0 )
+                {
+                    return matches.Select(
+                        x => x.Provider.GetInstanceType(context))
+                        .Where(x => x != null).ToList();
+                }
+
+                return new List<Type>();
+            }
+            finally
+            {
+                ZenPools.DespawnList(matches);
+            }
+        }
+
+        public object Resolve(BindingId id)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, id.Type))
+            {
+                context.Identifier = id.Identifier;
+                return Resolve(context);
+            }
+        }
+
+        public object Resolve(InjectContext context)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("DiContainer.Resolve"))
+#endif
+            {
+                // Note: context.Container is not necessarily equal to this, since
+                // you can have some lookups recurse to parent containers
+                Assert.IsNotNull(context);
+
+                var memberType = context.MemberType;
+
+                FlushBindings();
+                CheckForInstallWarning(context);
+
+                var lookupContext = context;
+
+                // The context used for lookups is always the same as the given context EXCEPT for LazyInject<>
+                // In CreateLazyBinding above, we forward the context to a new instance of LazyInject<>
+                // The problem is, we want the binding for Bind(typeof(LazyInject<>)) to always match even
+                // for members that are marked for a specific ID, so we need to discard the identifier
+                // for this one particular case
+                if (memberType.IsGenericType() && memberType.GetGenericTypeDefinition() == typeof(LazyInject<>))
+                {
+                    lookupContext = context.Clone();
+                    lookupContext.Identifier = null;
+                    lookupContext.SourceType = InjectSources.Local;
+                    lookupContext.Optional = false;
+                }
+
+                var providerInfo = TryGetUniqueProvider(lookupContext);
+
+                if (providerInfo == null)
+                {
+                    // If it's an array try matching to multiple values using its array type
+                    if (memberType.IsArray && memberType.GetArrayRank() == 1)
+                    {
+                        var subType = memberType.GetElementType();
+
+                        var subContext = context.Clone();
+                        subContext.MemberType = subType;
+                        // By making this optional this means that all injected fields of type T[]
+                        // will pass validation, which could be error prone, but I think this is better
+                        // than always requiring that they explicitly mark their array types as optional
+                        subContext.Optional = true;
+
+                        var results = ZenPools.SpawnList<object>();
+
+                        try
+                        {
+                            ResolveAll(subContext, results);
+                            return ReflectionUtil.CreateArray(subContext.MemberType, results);
+                        }
+                        finally
+                        {
+                            ZenPools.DespawnList(results);
+                        }
+                    }
+
+                    // If it's a generic list then try matching multiple instances to its generic type
+                    if (memberType.IsGenericType()
+                        && (memberType.GetGenericTypeDefinition() == typeof(List<>)
+                            || memberType.GetGenericTypeDefinition() == typeof(IList<>)
+#if NET_4_6 || NET_STANDARD_2_0
+                            || memberType.GetGenericTypeDefinition() == typeof(IReadOnlyList<>)
+#endif
+                            || memberType.GetGenericTypeDefinition() == typeof(IEnumerable<>)))
+                    {
+                        var subType = memberType.GenericArguments().Single();
+
+                        var subContext = context.Clone();
+                        subContext.MemberType = subType;
+                        // By making this optional this means that all injected fields of type List<>
+                        // will pass validation, which could be error prone, but I think this is better
+                        // than always requiring that they explicitly mark their list types as optional
+                        subContext.Optional = true;
+
+                        return ResolveAll(subContext);
+                    }
+
+                    if (context.Optional)
+                    {
+                        return context.FallBackValue;
+                    }
+
+                    throw Assert.CreateException("Unable to resolve '{0}'{1}. Object graph:\n{2}", context.BindingId,
+                        (context.ObjectType == null ? "" : " while building object with type '{0}'".Fmt(context.ObjectType)),
+                        context.GetObjectGraphString());
+                }
+
+                var instances = ZenPools.SpawnList<object>();
+
+                try
+                {
+                    SafeGetInstances(providerInfo, context, instances);
+
+                    if (instances.Count == 0)
+                    {
+                        if (context.Optional)
+                        {
+                            return context.FallBackValue;
+                        }
+
+                        throw Assert.CreateException(
+                            "Unable to resolve '{0}'{1}. Object graph:\n{2}", context.BindingId,
+                            (context.ObjectType == null
+                             ? ""
+                             : " while building object with type '{0}'".Fmt(context.ObjectType)),
+                             context.GetObjectGraphString());
+                    }
+
+                    if (instances.Count() > 1)
+                    {
+                        throw Assert.CreateException(
+                            "Provider returned multiple instances when only one was expected!  While resolving '{0}'{1}. Object graph:\n{2}", context.BindingId,
+                            (context.ObjectType == null
+                             ? ""
+                             : " while building object with type '{0}'".Fmt(context.ObjectType)),
+                             context.GetObjectGraphString());
+                    }
+
+                    return instances.First();
+                }
+                finally
+                {
+                    ZenPools.DespawnList(instances);
+                }
+            }
+        }
+
+        void SafeGetInstances(ProviderInfo providerInfo, InjectContext context, List<object> instances)
+        {
+            Assert.IsNotNull(context);
+
+            var provider = providerInfo.Provider;
+
+            if (ChecksForCircularDependencies)
+            {
+                var lookupId = ZenPools.SpawnLookupId(provider, context.BindingId);
+
+                try
+                {
+                    // Use the container associated with the provider to address some rare cases
+                    // which would otherwise result in an infinite loop.  Like this:
+                    // Container.Bind<ICharacter>().FromComponentInNewPrefab(Prefab).AsTransient()
+                    // With the prefab being a GameObjectContext containing a script that has a
+                    // ICharacter dependency.  In this case, we would otherwise use the _resolvesInProgress
+                    // associated with the GameObjectContext container, which will allow the recursive
+                    // lookup, which will trigger another GameObjectContext and container (since it is
+                    // transient) and the process continues indefinitely
+                    var providerContainer = providerInfo.Container;
+
+                    if (providerContainer._resolvesTwiceInProgress.Contains(lookupId))
+                    {
+                        // Allow one before giving up so that you can do circular dependencies via postinject or fields
+                        throw Assert.CreateException(
+                            "Circular dependency detected! Object graph:\n {0}", context.GetObjectGraphString());
+                    }
+
+                    bool twice = false;
+                    if (!providerContainer._resolvesInProgress.Add(lookupId))
+                    {
+                        bool added = providerContainer._resolvesTwiceInProgress.Add(lookupId);
+                        Assert.That(added);
+                        twice = true;
+                    }
+
+                    try
+                    {
+                        GetDecoratedInstances(provider, context, instances);
+                    }
+                    finally
+                    {
+                        if (twice)
+                        {
+                            bool removed = providerContainer._resolvesTwiceInProgress.Remove(lookupId);
+                            Assert.That(removed);
+                        }
+                        else
+                        {
+                            bool removed = providerContainer._resolvesInProgress.Remove(lookupId);
+                            Assert.That(removed);
+                        }
+                    }
+                }
+                finally
+                {
+                    ZenPools.DespawnLookupId(lookupId);
+                }
+            }
+            else
+            {
+                GetDecoratedInstances(provider, context, instances);
+            }
+        }
+
+        public DecoratorToChoiceFromBinder<TContract> Decorate<TContract>()
+        {
+            var bindStatement = StartBinding();
+            var bindInfo = bindStatement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(IFactory<TContract, TContract>));
+
+            var factoryBindInfo = new FactoryBindInfo(
+                typeof(PlaceholderFactory<TContract, TContract>));
+
+            bindStatement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            var bindId = Guid.NewGuid();
+
+            bindInfo.Identifier = bindId;
+
+            IDecoratorProvider decoratorProvider;
+
+            if (!_decorators.TryGetValue(typeof(TContract), out decoratorProvider))
+            {
+                decoratorProvider = new DecoratorProvider<TContract>(this);
+                _decorators.Add(typeof(TContract), decoratorProvider);
+            }
+
+            ((DecoratorProvider<TContract>)decoratorProvider).AddFactoryId(bindId);
+
+            return new DecoratorToChoiceFromBinder<TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        void GetDecoratedInstances(
+            IProvider provider, InjectContext context, List<object> buffer)
+        {
+            // TODO:  This is flawed since it doesn't allow binding new decorators in subcontainers
+            var decoratorProvider = TryGetDecoratorProvider(context.BindingId.Type);
+
+            if (decoratorProvider != null)
+            {
+                decoratorProvider.GetAllInstances(provider, context, buffer);
+                return;
+            }
+
+            provider.GetAllInstances(context, buffer);
+        }
+
+        IDecoratorProvider TryGetDecoratorProvider(Type contractType)
+        {
+            IDecoratorProvider decoratorProvider;
+
+            if (_decorators.TryGetValue(contractType, out decoratorProvider))
+            {
+                return decoratorProvider;
+            }
+
+            var ancestorContainers = AncestorContainers;
+
+            for (int i = 0; i < ancestorContainers.Length; i++)
+            {
+                if (ancestorContainers[i]._decorators.TryGetValue(contractType, out decoratorProvider))
+                {
+                    return decoratorProvider;
+                }
+            }
+
+            return null;
+        }
+
+        int GetContainerHeirarchyDistance(DiContainer container)
+        {
+            return GetContainerHeirarchyDistance(container, 0).Value;
+        }
+
+        int? GetContainerHeirarchyDistance(DiContainer container, int depth)
+        {
+            if (container == this)
+            {
+                return depth;
+            }
+
+            int? result = null;
+
+            var parentContainers = ParentContainers;
+
+            for (int i = 0; i < parentContainers.Length; i++)
+            {
+                var parent = parentContainers[i];
+
+                var distance = parent.GetContainerHeirarchyDistance(container, depth + 1);
+
+                if (distance.HasValue && (!result.HasValue || distance.Value < result.Value))
+                {
+                    result = distance;
+                }
+            }
+
+            return result;
+        }
+
+        public IEnumerable<Type> GetDependencyContracts<TContract>()
+        {
+            return GetDependencyContracts(typeof(TContract));
+        }
+
+        public IEnumerable<Type> GetDependencyContracts(Type contract)
+        {
+            FlushBindings();
+
+            var info = TypeAnalyzer.TryGetInfo(contract);
+
+            if (info != null)
+            {
+                foreach (var injectMember in info.AllInjectables)
+                {
+                    yield return injectMember.MemberType;
+                }
+            }
+        }
+
+        object InstantiateInternal(
+            Type concreteType, bool autoInject, List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier)
+        {
+#if !NOT_UNITY3D
+            Assert.That(!concreteType.DerivesFrom<Component>(),
+                "Error occurred while instantiating object of type '{0}'. Instantiator should not be used to create new mono behaviours.  Must use InstantiatePrefabForComponent, InstantiatePrefab, or InstantiateComponent.", concreteType);
+#endif
+
+            Assert.That(!concreteType.IsAbstract(), "Expected type '{0}' to be non-abstract", concreteType);
+
+            FlushBindings();
+            CheckForInstallWarning(context);
+
+            var typeInfo = TypeAnalyzer.TryGetInfo(concreteType);
+
+            Assert.IsNotNull(typeInfo, "Tried to create type '{0}' but could not find type information", concreteType);
+
+            bool allowDuringValidation = IsValidating && TypeAnalyzer.ShouldAllowDuringValidation(concreteType);
+
+            object newObj;
+
+#if !NOT_UNITY3D
+            if (concreteType.DerivesFrom<ScriptableObject>())
+            {
+                Assert.That(typeInfo.InjectConstructor.Parameters.Length == 0,
+                    "Found constructor parameters on ScriptableObject type '{0}'.  This is not allowed.  Use an [Inject] method or fields instead.");
+
+                if (!IsValidating || allowDuringValidation)
+                {
+                    newObj = ScriptableObject.CreateInstance(concreteType);
+                }
+                else
+                {
+                    newObj = new ValidationMarker(concreteType);
+                }
+            }
+            else
+#endif
+            {
+                Assert.IsNotNull(typeInfo.InjectConstructor.Factory,
+                    "More than one (or zero) constructors found for type '{0}' when creating dependencies.  Use one [Inject] attribute to specify which to use.", concreteType);
+
+                // Make a copy since we remove from it below
+                var paramValues = ZenPools.SpawnArray<object>(typeInfo.InjectConstructor.Parameters.Length);
+
+                try
+                {
+                    for (int i = 0; i < typeInfo.InjectConstructor.Parameters.Length; i++)
+                    {
+                        var injectInfo = typeInfo.InjectConstructor.Parameters[i];
+
+                        object value;
+
+                        if (!InjectUtil.PopValueWithType(
+                            extraArgs, injectInfo.MemberType, out value))
+                        {
+                            using (var subContext = ZenPools.SpawnInjectContext(
+                                this, injectInfo, context, null, concreteType, concreteIdentifier))
+                            {
+                                value = Resolve(subContext);
+                            }
+                        }
+
+                        if (value == null || value is ValidationMarker)
+                        {
+                            paramValues[i] = injectInfo.MemberType.GetDefaultValue();
+                        }
+                        else
+                        {
+                            paramValues[i] = value;
+                        }
+                    }
+
+                    if (!IsValidating || allowDuringValidation)
+                    {
+                        //ModestTree.Log.Debug("Zenject: Instantiating type '{0}'", concreteType);
+                        try
+                        {
+#if ZEN_INTERNAL_PROFILING
+                            using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                            using (ProfileBlock.Start("{0}.{1}()", concreteType, concreteType.Name))
+#endif
+                            {
+                                newObj = typeInfo.InjectConstructor.Factory(paramValues);
+                            }
+                        }
+                        catch (Exception e)
+                        {
+                            throw Assert.CreateException(
+                                e, "Error occurred while instantiating object with type '{0}'", concreteType);
+                        }
+                    }
+                    else
+                    {
+                        newObj = new ValidationMarker(concreteType);
+                    }
+                }
+                finally
+                {
+                    ZenPools.DespawnArray(paramValues);
+                }
+            }
+
+            if (autoInject)
+            {
+                InjectExplicit(newObj, concreteType, extraArgs, context, concreteIdentifier);
+
+                if (extraArgs.Count > 0 && !(newObj is ValidationMarker))
+                {
+                    throw Assert.CreateException(
+                        "Passed unnecessary parameters when injecting into type '{0}'. \nExtra Parameters: {1}\nObject graph:\n{2}",
+                        newObj.GetType(), String.Join(",", extraArgs.Select(x => x.Type.PrettyName()).ToArray()), context.GetObjectGraphString());
+                }
+            }
+
+#if DEBUG
+            if (IsValidating && newObj is IValidatable)
+            {
+                QueueForValidate((IValidatable)newObj);
+            }
+#endif
+
+            return newObj;
+        }
+
+        // InjectExplicit is only necessary when you want to inject null values into your object
+        // otherwise you can just use Inject()
+        // Note: Any arguments that are used will be removed from extraArgMap
+        public void InjectExplicit(object injectable, List<TypeValuePair> extraArgs)
+        {
+            Type injectableType;
+
+            if (injectable is ValidationMarker)
+            {
+                injectableType = ((ValidationMarker)injectable).MarkedType;
+            }
+            else
+            {
+                injectableType = injectable.GetType();
+            }
+
+            InjectExplicit(
+                injectable,
+                injectableType,
+                extraArgs,
+                new InjectContext(this, injectableType, null),
+                null);
+        }
+
+        public void InjectExplicit(
+            object injectable, Type injectableType,
+            List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("DiContainer.Inject"))
+#endif
+            {
+                if (IsValidating)
+                {
+                    var marker = injectable as ValidationMarker;
+
+                    if (marker != null && marker.InstantiateFailed)
+                    {
+                        // Do nothing in this case because it already failed and so there
+                        // could be many knock-on errors that aren't related to the user
+                        return;
+                    }
+
+                    if (_settings.ValidationErrorResponse == ValidationErrorResponses.Throw)
+                    {
+                        InjectExplicitInternal(
+                            injectable, injectableType, extraArgs, context, concreteIdentifier);
+                    }
+                    else
+                    {
+                        // In this case, just log it and continue to print out multiple validation errors
+                        // at once
+                        try
+                        {
+                            InjectExplicitInternal(injectable, injectableType, extraArgs, context, concreteIdentifier);
+                        }
+                        catch (Exception e)
+                        {
+                            Log.ErrorException(e);
+                        }
+                    }
+                }
+                else
+                {
+                    InjectExplicitInternal(injectable, injectableType, extraArgs, context, concreteIdentifier);
+                }
+            }
+        }
+
+        void CallInjectMethodsTopDown(
+            object injectable, Type injectableType,
+            InjectTypeInfo typeInfo, List<TypeValuePair> extraArgs,
+            InjectContext context, object concreteIdentifier, bool isDryRun)
+        {
+            if (typeInfo.BaseTypeInfo != null)
+            {
+                CallInjectMethodsTopDown(
+                    injectable, injectableType, typeInfo.BaseTypeInfo, extraArgs,
+                    context, concreteIdentifier, isDryRun);
+            }
+
+            for (int i = 0; i < typeInfo.InjectMethods.Length; i++)
+            {
+                var method = typeInfo.InjectMethods[i];
+                var paramValues = ZenPools.SpawnArray<object>(method.Parameters.Length);
+
+                try
+                {
+                    for (int k = 0; k < method.Parameters.Length; k++)
+                    {
+                        var injectInfo = method.Parameters[k];
+
+                        object value;
+
+                        if (!InjectUtil.PopValueWithType(extraArgs, injectInfo.MemberType, out value))
+                        {
+                            using (var subContext = ZenPools.SpawnInjectContext(
+                                this, injectInfo, context, injectable, injectableType, concreteIdentifier))
+                            {
+                                value = Resolve(subContext);
+                            }
+                        }
+
+                        if (value is ValidationMarker)
+                        {
+                            Assert.That(IsValidating);
+
+                            paramValues[k] = injectInfo.MemberType.GetDefaultValue();
+                        }
+                        else
+                        {
+                            paramValues[k] = value;
+                        }
+                    }
+
+                    if (!isDryRun)
+                    {
+#if ZEN_INTERNAL_PROFILING
+                        using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                        using (ProfileBlock.Start("{0}.{1}()", typeInfo.Type, method.Name))
+#endif
+                        {
+                            method.Action(injectable, paramValues);
+                        }
+                    }
+                }
+                finally
+                {
+                    ZenPools.DespawnArray(paramValues);
+                }
+            }
+        }
+
+        void InjectMembersTopDown(
+            object injectable, Type injectableType,
+            InjectTypeInfo typeInfo, List<TypeValuePair> extraArgs,
+            InjectContext context, object concreteIdentifier, bool isDryRun)
+        {
+            if (typeInfo.BaseTypeInfo != null)
+            {
+                InjectMembersTopDown(
+                    injectable, injectableType, typeInfo.BaseTypeInfo, extraArgs,
+                    context, concreteIdentifier, isDryRun);
+            }
+
+            for (int i = 0; i < typeInfo.InjectMembers.Length; i++)
+            {
+                var injectInfo = typeInfo.InjectMembers[i].Info;
+                var setterMethod = typeInfo.InjectMembers[i].Setter;
+
+                object value;
+
+                if (InjectUtil.PopValueWithType(extraArgs, injectInfo.MemberType, out value))
+                {
+                    if (!isDryRun)
+                    {
+                        if (value is ValidationMarker)
+                        {
+                            Assert.That(IsValidating);
+                        }
+                        else
+                        {
+                            setterMethod(injectable, value);
+                        }
+                    }
+                }
+                else
+                {
+                    using (var subContext = ZenPools.SpawnInjectContext(
+                        this, injectInfo, context, injectable, injectableType, concreteIdentifier))
+                    {
+                        value = Resolve(subContext);
+                    }
+
+                    if (injectInfo.Optional && value == null)
+                    {
+                        // Do not override in this case so it retains the hard-coded value
+                    }
+                    else
+                    {
+                        if (!isDryRun)
+                        {
+                            if (value is ValidationMarker)
+                            {
+                                Assert.That(IsValidating);
+                            }
+                            else
+                            {
+                                setterMethod(injectable, value);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        void InjectExplicitInternal(
+            object injectable, Type injectableType, List<TypeValuePair> extraArgs,
+            InjectContext context, object concreteIdentifier)
+        {
+            Assert.That(injectable != null);
+
+            var typeInfo = TypeAnalyzer.TryGetInfo(injectableType);
+
+            if (typeInfo == null)
+            {
+                Assert.That(extraArgs.IsEmpty());
+                return;
+            }
+
+            var allowDuringValidation = IsValidating && TypeAnalyzer.ShouldAllowDuringValidation(injectableType);
+
+            // Installers are the only things that we instantiate/inject on during validation
+            var isDryRun = IsValidating && !allowDuringValidation;
+
+            if (!isDryRun)
+            {
+                Assert.IsEqual(injectable.GetType(), injectableType);
+            }
+
+#if !NOT_UNITY3D
+            if (injectableType == typeof(GameObject))
+            {
+                Assert.CreateException(
+                    "Use InjectGameObject to Inject game objects instead of Inject method. Object graph: {0}", context.GetObjectGraphString());
+            }
+#endif
+
+            FlushBindings();
+            CheckForInstallWarning(context);
+
+            InjectMembersTopDown(
+                injectable, injectableType, typeInfo, extraArgs, context, concreteIdentifier, isDryRun);
+
+            CallInjectMethodsTopDown(
+                injectable, injectableType, typeInfo, extraArgs, context, concreteIdentifier, isDryRun);
+
+            if (extraArgs.Count > 0)
+            {
+                throw Assert.CreateException(
+                    "Passed unnecessary parameters when injecting into type '{0}'. \nExtra Parameters: {1}\nObject graph:\n{2}",
+                    injectableType, String.Join(",", extraArgs.Select(x => x.Type.PrettyName()).ToArray()), context.GetObjectGraphString());
+            }
+        }
+
+#if !NOT_UNITY3D
+
+        // Don't use this unless you know what you're doing
+        // You probably want to use InstantiatePrefab instead
+        // This one will only create the prefab and will not inject into it
+        // Also, this will always return the new game object as disabled, so that injection can occur before Awake / OnEnable / Start
+        internal GameObject CreateAndParentPrefabResource(
+            string resourcePath, GameObjectCreationParameters gameObjectBindInfo, InjectContext context, out bool shouldMakeActive)
+        {
+            var prefab = (GameObject)Resources.Load(resourcePath);
+
+            Assert.IsNotNull(prefab,
+                "Could not find prefab at resource location '{0}'".Fmt(resourcePath));
+
+            return CreateAndParentPrefab(prefab, gameObjectBindInfo, context, out shouldMakeActive);
+        }
+
+        GameObject GetPrefabAsGameObject(UnityEngine.Object prefab)
+        {
+            if (prefab is GameObject)
+            {
+                return (GameObject)prefab;
+            }
+
+            Assert.That(prefab is Component, "Invalid type given for prefab. Given object name: '{0}'", prefab.name);
+            return ((Component)prefab).gameObject;
+        }
+
+        // Don't use this unless you know what you're doing
+        // You probably want to use InstantiatePrefab instead
+        // This one will only create the prefab and will not inject into it
+        internal GameObject CreateAndParentPrefab(
+            UnityEngine.Object prefab, GameObjectCreationParameters gameObjectBindInfo,
+            InjectContext context, out bool shouldMakeActive)
+        {
+            Assert.That(prefab != null, "Null prefab found when instantiating game object");
+
+            Assert.That(!AssertOnNewGameObjects,
+                "Given DiContainer does not support creating new game objects");
+
+            FlushBindings();
+
+            var prefabAsGameObject = GetPrefabAsGameObject(prefab);
+
+            var prefabWasActive = prefabAsGameObject.activeSelf;
+
+            shouldMakeActive = prefabWasActive;
+
+            var parent = GetTransformGroup(gameObjectBindInfo, context);
+
+            Transform initialParent;
+#if !UNITY_EDITOR
+            if (prefabWasActive)
+            {
+                prefabAsGameObject.SetActive(false);
+            }
+#else
+            if (prefabWasActive)
+            {
+                initialParent = ZenUtilInternal.GetOrCreateInactivePrefabParent();
+            }
+            else
+#endif
+            {
+                if (parent != null)
+                {
+                    initialParent = parent;
+                }
+                else
+                {
+                    // This ensures it gets added to the right scene instead of just the active scene
+                    initialParent = ContextTransform;
+                }
+            }
+
+            bool positionAndRotationWereSet;
+            GameObject gameObj;
+
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("GameObject.Instantiate"))
+#endif
+            {
+                if (gameObjectBindInfo.Position.HasValue && gameObjectBindInfo.Rotation.HasValue)
+                {
+                    gameObj = GameObject.Instantiate(
+                        prefabAsGameObject, gameObjectBindInfo.Position.Value, gameObjectBindInfo.Rotation.Value, initialParent);
+                    positionAndRotationWereSet = true;
+                }
+                else if (gameObjectBindInfo.Position.HasValue)
+                {
+                    gameObj = GameObject.Instantiate(
+                        prefabAsGameObject, gameObjectBindInfo.Position.Value, prefabAsGameObject.transform.rotation, initialParent);
+                    positionAndRotationWereSet = true;
+                }
+                else if (gameObjectBindInfo.Rotation.HasValue)
+                {
+                    gameObj = GameObject.Instantiate(
+                        prefabAsGameObject, prefabAsGameObject.transform.position, gameObjectBindInfo.Rotation.Value, initialParent);
+                    positionAndRotationWereSet = true;
+                }
+                else
+                {
+                    gameObj = GameObject.Instantiate(prefabAsGameObject, initialParent);
+                    positionAndRotationWereSet = false;
+                }
+            }
+
+#if !UNITY_EDITOR
+            if (prefabWasActive)
+            {
+                prefabAsGameObject.SetActive(true);
+            }
+#else
+            if (prefabWasActive)
+            {
+                gameObj.SetActive(false);
+
+                if (parent == null)
+                {
+                    gameObj.transform.SetParent(ContextTransform, positionAndRotationWereSet);
+                }
+            }
+#endif
+
+            if (gameObj.transform.parent != parent)
+            {
+                gameObj.transform.SetParent(parent, positionAndRotationWereSet);
+            }
+
+            if (gameObjectBindInfo.Name != null)
+            {
+                gameObj.name = gameObjectBindInfo.Name;
+            }
+
+            return gameObj;
+        }
+
+        public GameObject CreateEmptyGameObject(string name)
+        {
+            return CreateEmptyGameObject(new GameObjectCreationParameters { Name = name }, null);
+        }
+
+        public GameObject CreateEmptyGameObject(
+            GameObjectCreationParameters gameObjectBindInfo, InjectContext context)
+        {
+            Assert.That(!AssertOnNewGameObjects,
+                "Given DiContainer does not support creating new game objects");
+
+            FlushBindings();
+
+            var gameObj = new GameObject(gameObjectBindInfo.Name ?? "GameObject");
+            var parent = GetTransformGroup(gameObjectBindInfo, context);
+
+            if (parent == null)
+            {
+                // This ensures it gets added to the right scene instead of just the active scene
+                gameObj.transform.SetParent(ContextTransform, false);
+                gameObj.transform.SetParent(null, false);
+            }
+            else
+            {
+                gameObj.transform.SetParent(parent, false);
+            }
+
+            return gameObj;
+        }
+
+        Transform GetTransformGroup(
+            GameObjectCreationParameters gameObjectBindInfo, InjectContext context)
+        {
+            Assert.That(!AssertOnNewGameObjects,
+                "Given DiContainer does not support creating new game objects");
+
+            if (gameObjectBindInfo.ParentTransform != null)
+            {
+                Assert.IsNull(gameObjectBindInfo.GroupName);
+                Assert.IsNull(gameObjectBindInfo.ParentTransformGetter);
+
+                return gameObjectBindInfo.ParentTransform;
+            }
+
+            // Don't execute the ParentTransformGetter method during validation
+            // since it might do a resolve etc.
+            if (gameObjectBindInfo.ParentTransformGetter != null && !IsValidating)
+            {
+                Assert.IsNull(gameObjectBindInfo.GroupName);
+
+                if (context == null)
+                {
+                    context = new InjectContext
+                    {
+                        // This is the only information we can supply in this case
+                        Container = this
+                    };
+                }
+
+                // NOTE: Null is fine here, will just be a root game object in that case
+                return gameObjectBindInfo.ParentTransformGetter(context);
+            }
+
+            var groupName = gameObjectBindInfo.GroupName;
+
+            // Only use the inherited parent if is not set locally
+            var defaultParent = _hasExplicitDefaultParent ? _explicitDefaultParent : _inheritedDefaultParent;
+
+            if (defaultParent == null)
+            {
+                if (groupName == null)
+                {
+                    return null;
+                }
+
+                return (GameObject.Find("/" + groupName) ?? CreateTransformGroup(groupName)).transform;
+            }
+
+            if (groupName == null)
+            {
+                return defaultParent;
+            }
+
+            foreach (Transform child in defaultParent)
+            {
+                if (child.name == groupName)
+                {
+                    return child;
+                }
+            }
+
+            var group = new GameObject(groupName).transform;
+            group.SetParent(defaultParent, false);
+            return group;
+        }
+
+        GameObject CreateTransformGroup(string groupName)
+        {
+            var gameObj = new GameObject(groupName);
+            gameObj.transform.SetParent(ContextTransform, false);
+            gameObj.transform.SetParent(null, false);
+            return gameObj;
+        }
+
+#endif
+
+        // Use this method to create any non-monobehaviour
+        // Any fields marked [Inject] will be set using the bindings on the container
+        // Any methods marked with a [Inject] will be called
+        // Any constructor parameters will be filled in with values from the container
+        public T Instantiate<T>()
+        {
+            return Instantiate<T>(new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T Instantiate<T>(IEnumerable<object> extraArgs)
+        {
+            var result = Instantiate(typeof(T), extraArgs);
+
+            if (IsValidating && !(result is T))
+            {
+                Assert.That(result is ValidationMarker);
+                return default(T);
+            }
+
+            return (T)result;
+        }
+
+        public object Instantiate(Type concreteType)
+        {
+            return Instantiate(concreteType, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object Instantiate(
+            Type concreteType, IEnumerable<object> extraArgs)
+        {
+            Assert.That(!extraArgs.ContainsItem(null),
+                "Null value given to factory constructor arguments when instantiating object with type '{0}'. In order to use null use InstantiateExplicit", concreteType);
+
+            return InstantiateExplicit(
+                concreteType, InjectUtil.CreateArgList(extraArgs));
+        }
+
+#if !NOT_UNITY3D
+        // Add new component to existing game object and fill in its dependencies
+        // This is the same as AddComponent except the [Inject] fields will be filled in
+        // NOTE: Gameobject here is not a prefab prototype, it is an instance
+        public TContract InstantiateComponent<TContract>(GameObject gameObject)
+            where TContract : Component
+        {
+            return InstantiateComponent<TContract>(gameObject, new object[0]);
+        }
+
+        // Add new component to existing game object and fill in its dependencies
+        // This is the same as AddComponent except the [Inject] fields will be filled in
+        // NOTE: Gameobject here is not a prefab prototype, it is an instance
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public TContract InstantiateComponent<TContract>(
+            GameObject gameObject, IEnumerable<object> extraArgs)
+            where TContract : Component
+        {
+            return (TContract)InstantiateComponent(typeof(TContract), gameObject, extraArgs);
+        }
+
+        // Add new component to existing game object and fill in its dependencies
+        // This is the same as AddComponent except the [Inject] fields will be filled in
+        // NOTE: Gameobject here is not a prefab prototype, it is an instance
+        public Component InstantiateComponent(
+            Type componentType, GameObject gameObject)
+        {
+            return InstantiateComponent(componentType, gameObject, new object[0]);
+        }
+
+        // Add new component to existing game object and fill in its dependencies
+        // This is the same as AddComponent except the [Inject] fields will be filled in
+        // NOTE: Gameobject here is not a prefab prototype, it is an instance
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public Component InstantiateComponent(
+            Type componentType, GameObject gameObject, IEnumerable<object> extraArgs)
+        {
+            return InstantiateComponentExplicit(
+                componentType, gameObject, InjectUtil.CreateArgList(extraArgs));
+        }
+
+        public T InstantiateComponentOnNewGameObject<T>()
+            where T : Component
+        {
+            return InstantiateComponentOnNewGameObject<T>(typeof(T).Name);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiateComponentOnNewGameObject<T>(IEnumerable<object> extraArgs)
+            where T : Component
+        {
+            return InstantiateComponentOnNewGameObject<T>(typeof(T).Name, extraArgs);
+        }
+
+        public T InstantiateComponentOnNewGameObject<T>(string gameObjectName)
+            where T : Component
+        {
+            return InstantiateComponentOnNewGameObject<T>(gameObjectName, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiateComponentOnNewGameObject<T>(
+            string gameObjectName, IEnumerable<object> extraArgs)
+            where T : Component
+        {
+            return InstantiateComponent<T>(
+                CreateEmptyGameObject(gameObjectName),
+                extraArgs);
+        }
+
+        // Create a new game object from a prefab and fill in dependencies for all children
+        public GameObject InstantiatePrefab(UnityEngine.Object prefab)
+        {
+            return InstantiatePrefab(
+                prefab, GameObjectCreationParameters.Default);
+        }
+
+        // Create a new game object from a prefab and fill in dependencies for all children
+        public GameObject InstantiatePrefab(UnityEngine.Object prefab, Transform parentTransform)
+        {
+            return InstantiatePrefab(
+                prefab, new GameObjectCreationParameters { ParentTransform = parentTransform });
+        }
+
+        // Create a new game object from a prefab and fill in dependencies for all children
+        public GameObject InstantiatePrefab(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform)
+        {
+            return InstantiatePrefab(
+                prefab, new GameObjectCreationParameters
+                {
+                    ParentTransform = parentTransform,
+                    Position = position,
+                    Rotation = rotation
+                });
+        }
+
+        // Create a new game object from a prefab and fill in dependencies for all children
+        public GameObject InstantiatePrefab(
+            UnityEngine.Object prefab, GameObjectCreationParameters gameObjectBindInfo)
+        {
+            FlushBindings();
+
+            bool shouldMakeActive;
+            var gameObj = CreateAndParentPrefab(
+                prefab, gameObjectBindInfo, null, out shouldMakeActive);
+
+            InjectGameObject(gameObj);
+
+            if (shouldMakeActive && !IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    gameObj.SetActive(true);
+                }
+            }
+
+            return gameObj;
+        }
+
+        // Create a new game object from a resource path and fill in dependencies for all children
+        public GameObject InstantiatePrefabResource(string resourcePath)
+        {
+            return InstantiatePrefabResource(resourcePath, GameObjectCreationParameters.Default);
+        }
+
+        // Create a new game object from a resource path and fill in dependencies for all children
+        public GameObject InstantiatePrefabResource(string resourcePath, Transform parentTransform)
+        {
+            return InstantiatePrefabResource(resourcePath, new GameObjectCreationParameters { ParentTransform = parentTransform });
+        }
+
+        public GameObject InstantiatePrefabResource(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform)
+        {
+            return InstantiatePrefabResource(
+                resourcePath, new GameObjectCreationParameters
+                {
+                    ParentTransform = parentTransform,
+                    Position = position,
+                    Rotation = rotation
+                });
+        }
+
+        // Create a new game object from a resource path and fill in dependencies for all children
+        public GameObject InstantiatePrefabResource(
+            string resourcePath, GameObjectCreationParameters creationInfo)
+        {
+            var prefab = (GameObject)Resources.Load(resourcePath);
+
+            Assert.IsNotNull(prefab,
+                "Could not find prefab at resource location '{0}'".Fmt(resourcePath));
+
+            return InstantiatePrefab(prefab, creationInfo);
+        }
+
+        // Same as InstantiatePrefab but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        public T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, null, new object[0]);
+        }
+
+        // Same as InstantiatePrefab but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, IEnumerable<object> extraArgs)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, null, extraArgs);
+        }
+
+        public T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Transform parentTransform)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, parentTransform, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Transform parentTransform, IEnumerable<object> extraArgs)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, parentTransform, extraArgs);
+        }
+
+        public T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, new object[0], new GameObjectCreationParameters
+                {
+                    ParentTransform = parentTransform,
+                    Position = position,
+                    Rotation = rotation
+                });
+        }
+
+        public T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform, IEnumerable<object> extraArgs)
+        {
+            return (T)InstantiatePrefabForComponent(
+                typeof(T), prefab, extraArgs, new GameObjectCreationParameters
+                {
+                    ParentTransform = parentTransform,
+                    Position = position,
+                    Rotation = rotation
+                });
+        }
+
+        // Same as InstantiatePrefab but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object InstantiatePrefabForComponent(
+            Type concreteType, UnityEngine.Object prefab,
+            Transform parentTransform, IEnumerable<object> extraArgs)
+        {
+            return InstantiatePrefabForComponent(
+                concreteType, prefab, extraArgs,
+                new GameObjectCreationParameters { ParentTransform = parentTransform });
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object InstantiatePrefabForComponent(
+            Type concreteType, UnityEngine.Object prefab,
+            IEnumerable<object> extraArgs, GameObjectCreationParameters creationInfo)
+        {
+            return InstantiatePrefabForComponentExplicit(
+                concreteType, prefab,
+                InjectUtil.CreateArgList(extraArgs), creationInfo);
+        }
+
+        // Same as InstantiatePrefabResource but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        public T InstantiatePrefabResourceForComponent<T>(string resourcePath)
+        {
+            return (T)InstantiatePrefabResourceForComponent(
+                typeof(T), resourcePath, null, new object[0]);
+        }
+
+        // Same as InstantiatePrefabResource but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, IEnumerable<object> extraArgs)
+        {
+            return (T)InstantiatePrefabResourceForComponent(
+                typeof(T), resourcePath, null, extraArgs);
+        }
+
+        public T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Transform parentTransform)
+        {
+            return (T)InstantiatePrefabResourceForComponent(
+                typeof(T), resourcePath, parentTransform, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Transform parentTransform, IEnumerable<object> extraArgs)
+        {
+            return (T)InstantiatePrefabResourceForComponent(
+                typeof(T), resourcePath, parentTransform, extraArgs);
+        }
+
+        public T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform)
+        {
+            return InstantiatePrefabResourceForComponent<T>(resourcePath, position, rotation, parentTransform, new object[0]);
+        }
+
+        public T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform, IEnumerable<object> extraArgs)
+        {
+            var argsList = InjectUtil.CreateArgList(extraArgs);
+            var creationParameters = new GameObjectCreationParameters
+            {
+                ParentTransform = parentTransform,
+                Position = position,
+                Rotation = rotation
+            };
+            return (T)InstantiatePrefabResourceForComponentExplicit(
+                typeof(T), resourcePath, argsList, creationParameters);
+        }
+
+        // Same as InstantiatePrefabResource but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object InstantiatePrefabResourceForComponent(
+            Type concreteType, string resourcePath, Transform parentTransform,
+            IEnumerable<object> extraArgs)
+        {
+            Assert.That(!extraArgs.ContainsItem(null),
+                "Null value given to factory constructor arguments when instantiating object with type '{0}'. In order to use null use InstantiatePrefabForComponentExplicit", concreteType);
+
+            return InstantiatePrefabResourceForComponentExplicit(
+                concreteType, resourcePath,
+                InjectUtil.CreateArgList(extraArgs),
+                new GameObjectCreationParameters { ParentTransform = parentTransform });
+        }
+
+        public T InstantiateScriptableObjectResource<T>(string resourcePath)
+            where T : ScriptableObject
+        {
+            return InstantiateScriptableObjectResource<T>(resourcePath, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InstantiateScriptableObjectResource<T>(
+            string resourcePath, IEnumerable<object> extraArgs)
+            where T : ScriptableObject
+        {
+            return (T)InstantiateScriptableObjectResource(
+                typeof(T), resourcePath, extraArgs);
+        }
+
+        public object InstantiateScriptableObjectResource(
+            Type scriptableObjectType, string resourcePath)
+        {
+            return InstantiateScriptableObjectResource(
+                scriptableObjectType, resourcePath, new object[0]);
+        }
+
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object InstantiateScriptableObjectResource(
+            Type scriptableObjectType, string resourcePath, IEnumerable<object> extraArgs)
+        {
+            Assert.DerivesFromOrEqual<ScriptableObject>(scriptableObjectType);
+            return InstantiateScriptableObjectResourceExplicit(
+                scriptableObjectType, resourcePath, InjectUtil.CreateArgList(extraArgs));
+        }
+
+        // Inject dependencies into any and all child components on the given game object
+        public void InjectGameObject(GameObject gameObject)
+        {
+            FlushBindings();
+
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersUnderGameObject(gameObject);
+
+            var monoBehaviours = ZenPools.SpawnList<MonoBehaviour>();
+            try
+            {
+                ZenUtilInternal.GetInjectableMonoBehavioursUnderGameObject(gameObject, monoBehaviours);
+
+                for (int i = 0; i < monoBehaviours.Count; i++)
+                {
+                    Inject(monoBehaviours[i]);
+                }
+            }
+            finally
+            {
+                ZenPools.DespawnList(monoBehaviours);
+            }
+        }
+
+        // Same as InjectGameObject except it will also search the game object for the
+        // given component, and also optionally allow passing extra inject arguments into the
+        // given component
+        public T InjectGameObjectForComponent<T>(GameObject gameObject)
+            where T : Component
+        {
+            return InjectGameObjectForComponent<T>(gameObject, new object[0]);
+        }
+
+        // Same as InjectGameObject except it will also search the game object for the
+        // given component, and also optionally allow passing extra inject arguments into the
+        // given component
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public T InjectGameObjectForComponent<T>(
+            GameObject gameObject, IEnumerable<object> extraArgs)
+            where T : Component
+        {
+            return (T)InjectGameObjectForComponent(gameObject, typeof(T), extraArgs);
+        }
+
+        // Same as InjectGameObject except it will also search the game object for the
+        // given component, and also optionally allow passing extra inject arguments into the
+        // given component
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public object InjectGameObjectForComponent(
+            GameObject gameObject, Type componentType, IEnumerable<object> extraArgs)
+        {
+            return InjectGameObjectForComponentExplicit(
+                gameObject, componentType, InjectUtil.CreateArgList(extraArgs), new InjectContext(this, componentType, null), null);
+        }
+
+        // Same as InjectGameObjectForComponent except allows null values
+        // to be included in the argument list.  Also see InjectUtil.CreateArgList
+        public Component InjectGameObjectForComponentExplicit(
+            GameObject gameObject, Type componentType, List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier)
+        {
+            if (!componentType.DerivesFrom<MonoBehaviour>() && extraArgs.Count > 0)
+            {
+                throw Assert.CreateException(
+                    "Cannot inject into non-monobehaviours!  Argument list must be zero length");
+            }
+
+            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersUnderGameObject(gameObject);
+
+            var injectableMonoBehaviours = ZenPools.SpawnList<MonoBehaviour>();
+            try
+            {
+
+                ZenUtilInternal.GetInjectableMonoBehavioursUnderGameObject(gameObject, injectableMonoBehaviours);
+
+                for (int i = 0; i < injectableMonoBehaviours.Count; i++)
+                {
+                    var monoBehaviour = injectableMonoBehaviours[i];
+                    if (monoBehaviour.GetType().DerivesFromOrEqual(componentType))
+                    {
+                        InjectExplicit(monoBehaviour, monoBehaviour.GetType(), extraArgs, context, concreteIdentifier);
+                    }
+                    else
+                    {
+                        Inject(monoBehaviour);
+                    }
+                }
+            }
+            finally
+            {
+                ZenPools.DespawnList(injectableMonoBehaviours);
+            }
+
+            var matches = gameObject.GetComponentsInChildren(componentType, true);
+
+            Assert.That(matches.Length > 0,
+                "Expected to find component with type '{0}' when injecting into game object '{1}'", componentType, gameObject.name);
+
+            Assert.That(matches.Length == 1,
+                "Found multiple component with type '{0}' when injecting into game object '{1}'", componentType, gameObject.name);
+
+            return matches[0];
+        }
+#endif
+
+        // When you call any of these Inject methods
+        //    Any fields marked [Inject] will be set using the bindings on the container
+        //    Any methods marked with a [Inject] will be called
+        //    Any constructor parameters will be filled in with values from the container
+        public void Inject(object injectable)
+        {
+            Inject(injectable, new object[0]);
+        }
+
+        // Same as Inject(injectable) except allows adding extra values to be injected
+        // Note: For IL2CPP platforms make sure to use new object[] instead of new [] when creating
+        // the argument list to avoid errors converting to IEnumerable<object>
+        public void Inject(object injectable, IEnumerable<object> extraArgs)
+        {
+            InjectExplicit(
+                injectable, InjectUtil.CreateArgList(extraArgs));
+        }
+
+        // Resolve<> - Lookup a value in the container.
+        //
+        // Note that this may result in a new object being created (for transient bindings) or it
+        // may return an already created object (for FromInstance or ToSingle, etc. bindings)
+        //
+        // If a single unique value for the given type cannot be found, an exception is thrown.
+        //
+        public TContract Resolve<TContract>()
+        {
+            return (TContract)Resolve(typeof(TContract));
+        }
+
+        public object Resolve(Type contractType)
+        {
+            return ResolveId(contractType, null);
+        }
+
+        public TContract ResolveId<TContract>(object identifier)
+        {
+            return (TContract)ResolveId(typeof(TContract), identifier);
+        }
+
+        public object ResolveId(Type contractType, object identifier)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, contractType))
+            {
+                context.Identifier = identifier;
+                return Resolve(context);
+            }
+        }
+
+        // Same as Resolve<> except it will return null if a value for the given type cannot
+        // be found.
+        public TContract TryResolve<TContract>()
+            where TContract : class
+        {
+            return (TContract)TryResolve(typeof(TContract));
+        }
+
+        public object TryResolve(Type contractType)
+        {
+            return TryResolveId(contractType, null);
+        }
+
+        public TContract TryResolveId<TContract>(object identifier)
+            where TContract : class
+        {
+            return (TContract)TryResolveId(
+                typeof(TContract), identifier);
+        }
+
+        public object TryResolveId(Type contractType, object identifier)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, contractType))
+            {
+                context.Identifier = identifier;
+                context.Optional = true;
+                return Resolve(context);
+            }
+        }
+
+        // Same as Resolve<> except it will return all bindings that are associated with the given type
+        public List<TContract> ResolveAll<TContract>()
+        {
+            return (List<TContract>)ResolveAll(typeof(TContract));
+        }
+
+        public IList ResolveAll(Type contractType)
+        {
+            return ResolveIdAll(contractType, null);
+        }
+
+        public List<TContract> ResolveIdAll<TContract>(object identifier)
+        {
+            return (List<TContract>)ResolveIdAll(typeof(TContract), identifier);
+        }
+
+        public IList ResolveIdAll(Type contractType, object identifier)
+        {
+            using (var context = ZenPools.SpawnInjectContext(this, contractType))
+            {
+                context.Identifier = identifier;
+                context.Optional = true;
+                return ResolveAll(context);
+            }
+        }
+
+        // Removes all bindings
+        public void UnbindAll()
+        {
+            FlushBindings();
+            _providers.Clear();
+        }
+
+        // Remove all bindings bound to the given contract type
+        public bool Unbind<TContract>()
+        {
+            return Unbind(typeof(TContract));
+        }
+
+        public bool Unbind(Type contractType)
+        {
+            return UnbindId(contractType, null);
+        }
+
+        public bool UnbindId<TContract>(object identifier)
+        {
+            return UnbindId(typeof(TContract), identifier);
+        }
+
+        public bool UnbindId(Type contractType, object identifier)
+        {
+            FlushBindings();
+
+            var bindingId = new BindingId(contractType, identifier);
+
+            return _providers.Remove(bindingId);
+        }
+
+        public void UnbindInterfacesTo<TConcrete>()
+        {
+            UnbindInterfacesTo(typeof(TConcrete));
+        }
+
+        public void UnbindInterfacesTo(Type concreteType)
+        {
+            foreach (var i in concreteType.Interfaces())
+            {
+                Unbind(i, concreteType);
+            }
+        }
+
+        public bool Unbind<TContract, TConcrete>()
+        {
+            return Unbind(typeof(TContract), typeof(TConcrete));
+        }
+
+        public bool Unbind(Type contractType, Type concreteType)
+        {
+            return UnbindId(contractType, concreteType, null);
+        }
+
+        public bool UnbindId<TContract, TConcrete>(object identifier)
+        {
+            return UnbindId(typeof(TContract), typeof(TConcrete), identifier);
+        }
+
+        public bool UnbindId(Type contractType, Type concreteType, object identifier)
+        {
+            FlushBindings();
+
+            var bindingId = new BindingId(contractType, identifier);
+
+            List<ProviderInfo> providers;
+
+            if (!_providers.TryGetValue(bindingId, out providers))
+            {
+                return false;
+            }
+
+            var matches = providers.Where(x => x.Provider.GetInstanceType(new InjectContext(this, contractType, identifier)).DerivesFromOrEqual(concreteType)).ToList();
+
+            if (matches.Count == 0)
+            {
+                return false;
+            }
+
+            foreach (var info in matches)
+            {
+                bool success = providers.Remove(info);
+                Assert.That(success);
+            }
+
+            return true;
+        }
+
+        // Returns true if the given type is bound to something in the container
+        public bool HasBinding<TContract>()
+        {
+            return HasBinding(typeof(TContract));
+        }
+
+        public bool HasBinding(Type contractType)
+        {
+            return HasBindingId(contractType, null);
+        }
+
+        public bool HasBindingId<TContract>(object identifier)
+        {
+            return HasBindingId(typeof(TContract), identifier);
+        }
+
+        public bool HasBindingId(Type contractType, object identifier)
+        {
+            return HasBindingId(contractType, identifier, InjectSources.Any);
+        }
+
+        public bool HasBindingId(Type contractType, object identifier, InjectSources sourceType)
+        {
+            using (var ctx = ZenPools.SpawnInjectContext(this, contractType))
+            {
+                ctx.Identifier = identifier;
+                ctx.SourceType = sourceType;
+                return HasBinding(ctx);
+            }
+        }
+
+        // You shouldn't need to use this
+        public bool HasBinding(InjectContext context)
+        {
+            Assert.IsNotNull(context);
+
+            FlushBindings();
+
+            var matches = ZenPools.SpawnList<ProviderInfo>();
+
+            try
+            {
+                GetProviderMatches(context, matches);
+                return matches.Count > 0;
+            }
+            finally
+            {
+                ZenPools.DespawnList(matches);
+            }
+        }
+
+        // You shouldn't need to use this
+        public void FlushBindings()
+        {
+            while (_currentBindings.Count > 0)
+            {
+                var binding = _currentBindings.Dequeue();
+
+                if (binding.BindingInheritanceMethod != BindingInheritanceMethods.MoveDirectOnly
+                    && binding.BindingInheritanceMethod != BindingInheritanceMethods.MoveIntoAll)
+                {
+                    FinalizeBinding(binding);
+                }
+
+                if (binding.BindingInheritanceMethod != BindingInheritanceMethods.None)
+                {
+                    _childBindings.Add(binding);
+                }
+                else
+                {
+                    binding.Dispose();
+                }
+            }
+        }
+
+        void FinalizeBinding(BindStatement binding)
+        {
+            _isFinalizingBinding = true;
+
+            try
+            {
+                binding.FinalizeBinding(this);
+            }
+            finally
+            {
+                _isFinalizingBinding = false;
+            }
+        }
+
+        // Don't use this method
+        public BindStatement StartBinding(bool flush = true)
+        {
+            Assert.That(!_isFinalizingBinding,
+                "Attempted to start a binding during a binding finalizer.  This is not allowed, since binding finalizers should directly use AddProvider instead, to allow for bindings to be inherited properly without duplicates");
+
+            if (flush)
+            {
+                FlushBindings();
+            }
+
+            var bindStatement = ZenPools.SpawnStatement();
+            _currentBindings.Enqueue(bindStatement);
+            return bindStatement;
+        }
+
+        public ConcreteBinderGeneric<TContract> Rebind<TContract>()
+        {
+            return RebindId<TContract>(null);
+        }
+
+        public ConcreteBinderGeneric<TContract> RebindId<TContract>(object identifier)
+        {
+            UnbindId<TContract>(identifier);
+            return Bind<TContract>().WithId(identifier);
+        }
+
+        public ConcreteBinderNonGeneric Rebind(Type contractType)
+        {
+            return RebindId(contractType, null);
+        }
+
+        public ConcreteBinderNonGeneric RebindId(Type contractType, object identifier)
+        {
+            UnbindId(contractType, identifier);
+            return Bind(contractType).WithId(identifier);
+        }
+
+        // Map the given type to a way of obtaining it
+        // Note that this can include open generic types as well such as List<>
+        public ConcreteIdBinderGeneric<TContract> Bind<TContract>()
+        {
+            return Bind<TContract>(StartBinding());
+        }
+
+        // This is only useful for complex cases where you want to add multiple bindings
+        // at the same time and can be ignored by 99% of users
+        public ConcreteIdBinderGeneric<TContract> BindNoFlush<TContract>()
+        {
+            return Bind<TContract>(StartBinding(false));
+        }
+
+        ConcreteIdBinderGeneric<TContract> Bind<TContract>(
+            BindStatement bindStatement)
+        {
+            var bindInfo = bindStatement.SpawnBindInfo();
+
+            Assert.That(!typeof(TContract).DerivesFrom<IPlaceholderFactory>(),
+                "You should not use Container.Bind for factory classes.  Use Container.BindFactory instead.");
+
+            Assert.That(!bindInfo.ContractTypes.Contains(typeof(TContract)));
+            bindInfo.ContractTypes.Add(typeof(TContract));
+
+            return new ConcreteIdBinderGeneric<TContract>(
+                this, bindInfo, bindStatement);
+        }
+
+        // Non-generic version of Bind<> for cases where you only have the runtime type
+        // Note that this can include open generic types as well such as List<>
+        public ConcreteIdBinderNonGeneric Bind(params Type[] contractTypes)
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+            bindInfo.ContractTypes.AllocFreeAddRange(contractTypes);
+            return BindInternal(bindInfo, statement);
+        }
+
+        public ConcreteIdBinderNonGeneric Bind(IEnumerable<Type> contractTypes)
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+            bindInfo.ContractTypes.AddRange(contractTypes);
+            return BindInternal(bindInfo, statement);
+        }
+
+        ConcreteIdBinderNonGeneric BindInternal(
+            BindInfo bindInfo, BindStatement bindingFinalizer)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("DiContainer.Bind"))
+#endif
+            {
+                Assert.That(bindInfo.ContractTypes.All(x => !x.DerivesFrom<IPlaceholderFactory>()),
+                    "You should not use Container.Bind for factory classes.  Use Container.BindFactory instead.");
+
+                return new ConcreteIdBinderNonGeneric(this, bindInfo, bindingFinalizer);
+            }
+        }
+
+#if !(UNITY_WSA && ENABLE_DOTNET)
+        public ConcreteIdBinderNonGeneric Bind(
+            Action<ConventionSelectTypesBinder> generator)
+        {
+            var conventionBindInfo = new ConventionBindInfo();
+            generator(new ConventionSelectTypesBinder(conventionBindInfo));
+
+            var contractTypesList = conventionBindInfo.ResolveTypes();
+
+            Assert.That(contractTypesList.All(x => !x.DerivesFrom<IPlaceholderFactory>()),
+                "You should not use Container.Bind for factory classes.  Use Container.BindFactory instead.");
+
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+            bindInfo.ContractTypes.AllocFreeAddRange(contractTypesList);
+
+            // This is nice because it allows us to do things like Bind(all interfaces).To<Foo>()
+            // (though of course it would be more efficient to use BindInterfacesTo in this case)
+            bindInfo.InvalidBindResponse = InvalidBindResponses.Skip;
+
+            return new ConcreteIdBinderNonGeneric(this, bindInfo, statement);
+        }
+#endif
+
+        // Bind all the interfaces for the given type to the same thing.
+        //
+        // Example:
+        //
+        //    public class Foo : ITickable, IInitializable
+        //    {
+        //    }
+        //
+        //    Container.BindInterfacesTo<Foo>().AsSingle();
+        //
+        //  This line above is equivalent to the following:
+        //
+        //    Container.Bind<ITickable>().ToSingle<Foo>();
+        //    Container.Bind<IInitializable>().ToSingle<Foo>();
+        //
+        // Note here that we do not bind Foo to itself.  For that, use BindInterfacesAndSelfTo
+        public FromBinderNonGeneric BindInterfacesTo<T>()
+        {
+            return BindInterfacesTo(typeof(T));
+        }
+
+        public FromBinderNonGeneric BindInterfacesTo(Type type)
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            var interfaces = type.Interfaces();
+
+            if (interfaces.Length == 0)
+            {
+                Log.Warn("Called BindInterfacesTo for type {0} but no interfaces were found", type);
+            }
+
+            bindInfo.ContractTypes.AllocFreeAddRange(interfaces);
+            bindInfo.SetContextInfo("BindInterfacesTo({0})".Fmt(type));
+
+            // Almost always, you don't want to use the default AsTransient so make them type it
+            bindInfo.RequireExplicitScope = true;
+            return BindInternal(bindInfo, statement).To(type);
+        }
+
+        // Same as BindInterfaces except also binds to self
+        public FromBinderNonGeneric BindInterfacesAndSelfTo<T>()
+        {
+            return BindInterfacesAndSelfTo(typeof(T));
+        }
+
+        public FromBinderNonGeneric BindInterfacesAndSelfTo(Type type)
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.AllocFreeAddRange(type.Interfaces());
+            bindInfo.ContractTypes.Add(type);
+
+            bindInfo.SetContextInfo("BindInterfacesAndSelfTo({0})".Fmt(type));
+
+            // Almost always, you don't want to use the default AsTransient so make them type it
+            bindInfo.RequireExplicitScope = true;
+            return BindInternal(bindInfo, statement).To(type);
+        }
+
+        //  This is simply a shortcut to using the FromInstance method.
+        //
+        //  Example:
+        //      Container.BindInstance(new Foo());
+        //
+        //  This line above is equivalent to the following:
+        //
+        //      Container.Bind<Foo>().FromInstance(new Foo());
+        //
+        public IdScopeConcreteIdArgConditionCopyNonLazyBinder BindInstance<TContract>(TContract instance)
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+            bindInfo.ContractTypes.Add(typeof(TContract));
+
+            statement.SetFinalizer(
+                new ScopableBindingFinalizer(
+                    bindInfo,
+                    (container, type) => new InstanceProvider(type, instance, container, bindInfo.InstantiatedCallback)));
+
+            return new IdScopeConcreteIdArgConditionCopyNonLazyBinder(bindInfo);
+        }
+
+        // Unfortunately we can't support setting scope / condition / etc. here since all the
+        // bindings are finalized one at a time
+        public void BindInstances(params object[] instances)
+        {
+            for (int i = 0; i < instances.Length; i++)
+            {
+                var instance = instances[i];
+
+                Assert.That(!ZenUtilInternal.IsNull(instance),
+                    "Found null instance provided to BindInstances method");
+
+                Bind(instance.GetType()).FromInstance(instance);
+            }
+        }
+
+        FactoryToChoiceIdBinder<TContract> BindFactoryInternal<TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TContract> BindIFactory<TContract>()
+        {
+            return BindFactoryInternal<TContract, IFactory<TContract>, PlaceholderFactory<TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TContract> BindFactory<TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TContract>
+        {
+            return BindFactoryInternal<TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TContract> BindFactoryCustomInterface<TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        public MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract>()
+        {
+            return BindMemoryPool<TItemContract, MemoryPool<TItemContract>>();
+        }
+
+        public MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPool<TItemContract, TPool>()
+            where TPool : IMemoryPool
+        {
+            return BindMemoryPoolCustomInterface<TItemContract, TPool, TPool>();
+        }
+
+        public MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPoolCustomInterface<TItemContract, TPoolConcrete, TPoolContract>(bool includeConcreteType = false)
+            where TPoolConcrete : TPoolContract, IMemoryPool
+            where TPoolContract : IMemoryPool
+        {
+            return BindMemoryPoolCustomInterfaceInternal<TItemContract, TPoolConcrete, TPoolContract>(includeConcreteType, StartBinding());
+        }
+
+        internal MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPoolCustomInterfaceNoFlush<TItemContract, TPoolConcrete, TPoolContract>(bool includeConcreteType = false)
+            where TPoolConcrete : TPoolContract, IMemoryPool
+            where TPoolContract : IMemoryPool
+        {
+            return BindMemoryPoolCustomInterfaceInternal<TItemContract, TPoolConcrete, TPoolContract>(includeConcreteType, StartBinding(false));
+        }
+
+        MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract> BindMemoryPoolCustomInterfaceInternal<TItemContract, TPoolConcrete, TPoolContract>(
+            bool includeConcreteType, BindStatement statement)
+            where TPoolConcrete : TPoolContract, IMemoryPool
+            where TPoolContract : IMemoryPool
+        {
+            var contractTypes = new List<Type> { typeof(IDisposable), typeof(TPoolContract) };
+
+            if (includeConcreteType)
+            {
+                contractTypes.Add(typeof(TPoolConcrete));
+            }
+
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.AllocFreeAddRange(contractTypes);
+
+            // This interface is used in the optional class PoolCleanupChecker
+            // And also allow people to manually call DespawnAll() for all IMemoryPool
+            // if they want
+            bindInfo.ContractTypes.Add(typeof(IMemoryPool));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TPoolConcrete));
+            var poolBindInfo = new MemoryPoolBindInfo();
+
+            statement.SetFinalizer(
+                new MemoryPoolBindingFinalizer<TItemContract>(
+                    bindInfo, factoryBindInfo, poolBindInfo));
+
+            return new MemoryPoolIdInitialSizeMaxSizeBinder<TItemContract>(
+                this, bindInfo, factoryBindInfo, poolBindInfo);
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TContract> BindFactoryInternal<TParam1, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TContract> BindIFactory<TParam1, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TContract, IFactory<TParam1, TContract>, PlaceholderFactory<TParam1, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TContract> BindFactory<TParam1, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TContract> BindFactoryCustomInterface<TParam1, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactoryInternal<TParam1, TParam2, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindIFactory<TParam1, TParam2, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TContract, IFactory<TParam1, TParam2, TContract>, PlaceholderFactory<TParam1, TParam2, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactory<TParam1, TParam2, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TContract> BindFactoryCustomInterface<TParam1, TParam2, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactoryInternal<TParam1, TParam2, TParam3, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindIFactory<TParam1, TParam2, TParam3, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TContract, IFactory<TParam1, TParam2, TParam3, TContract>, PlaceholderFactory<TParam1, TParam2, TParam3, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactory<TParam1, TParam2, TParam3, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TParam3, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TParam3, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TParam3, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TContract, IFactory<TParam1, TParam2, TParam3, TParam4, TContract>, PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TContract, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>, PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>, PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactoryContract, TFactoryConcrete>()
+            where TFactoryConcrete : TFactoryContract, IFactory
+            where TFactoryContract : IFactory
+        {
+            var statement = StartBinding();
+            var bindInfo = statement.SpawnBindInfo();
+
+            bindInfo.ContractTypes.Add(typeof(TFactoryContract));
+
+            var factoryBindInfo = new FactoryBindInfo(typeof(TFactoryConcrete));
+
+            statement.SetFinalizer(
+                new PlaceholderFactoryBindingFinalizer<TContract>(
+                    bindInfo, factoryBindInfo));
+
+            return new FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>(
+                this, bindInfo, factoryBindInfo);
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindIFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>()
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>, PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactory>()
+            where TFactory : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
+        {
+            return BindFactoryInternal<
+                TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactory, TFactory>();
+        }
+
+        public FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> BindFactoryCustomInterface<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactoryConcrete, TFactoryContract>()
+            where TFactoryConcrete : PlaceholderFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>, TFactoryContract
+            where TFactoryContract : IFactory
+        {
+            return BindFactoryInternal<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract, TFactoryContract, TFactoryConcrete>();
+        }
+
+        public T InstantiateExplicit<T>(List<TypeValuePair> extraArgs)
+        {
+            return (T)InstantiateExplicit(typeof(T), extraArgs);
+        }
+
+        public object InstantiateExplicit(Type concreteType, List<TypeValuePair> extraArgs)
+        {
+            bool autoInject = true;
+
+            return InstantiateExplicit(
+                concreteType,
+                autoInject,
+                extraArgs,
+                new InjectContext(this, concreteType, null),
+                null);
+        }
+
+        public object InstantiateExplicit(Type concreteType, bool autoInject, List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("DiContainer.Instantiate"))
+#endif
+            {
+                if (IsValidating)
+                {
+                    if (_settings.ValidationErrorResponse == ValidationErrorResponses.Throw)
+                    {
+                        return InstantiateInternal(concreteType, autoInject, extraArgs, context, concreteIdentifier);
+                    }
+
+                    // In this case, just log it and continue to print out multiple validation errors
+                    // at once
+                    try
+                    {
+                        return InstantiateInternal(concreteType, autoInject, extraArgs, context, concreteIdentifier);
+                    }
+                    catch (Exception e)
+                    {
+                        Log.ErrorException(e);
+                        return new ValidationMarker(concreteType, true);
+                    }
+                }
+
+                return InstantiateInternal(concreteType, autoInject, extraArgs, context, concreteIdentifier);
+            }
+        }
+
+#if !NOT_UNITY3D
+        public Component InstantiateComponentExplicit(
+            Type componentType, GameObject gameObject, List<TypeValuePair> extraArgs)
+        {
+            Assert.That(componentType.DerivesFrom<Component>());
+
+            FlushBindings();
+
+            var monoBehaviour = gameObject.AddComponent(componentType);
+            InjectExplicit(monoBehaviour, extraArgs);
+            return monoBehaviour;
+        }
+
+        public object InstantiateScriptableObjectResourceExplicit(
+            Type scriptableObjectType, string resourcePath, List<TypeValuePair> extraArgs)
+        {
+            var objects = Resources.LoadAll(resourcePath, scriptableObjectType);
+
+            Assert.That(objects.Length > 0,
+                "Could not find resource at path '{0}' with type '{1}'", resourcePath, scriptableObjectType);
+
+            Assert.That(objects.Length == 1,
+                "Found multiple scriptable objects at path '{0}' when only 1 was expected with type '{1}'", resourcePath, scriptableObjectType);
+
+            var newObj = ScriptableObject.Instantiate(objects.Single());
+
+            InjectExplicit(newObj, extraArgs);
+
+            return newObj;
+        }
+
+        // Same as InstantiatePrefabResourceForComponent except allows null values
+        // to be included in the argument list.  Also see InjectUtil.CreateArgList
+        public object InstantiatePrefabResourceForComponentExplicit(
+            Type componentType, string resourcePath, List<TypeValuePair> extraArgs,
+            GameObjectCreationParameters creationInfo)
+        {
+            return InstantiatePrefabResourceForComponentExplicit(
+                componentType, resourcePath, extraArgs, new InjectContext(this, componentType, null), null, creationInfo);
+        }
+
+        public object InstantiatePrefabResourceForComponentExplicit(
+            Type componentType, string resourcePath, List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier,
+            GameObjectCreationParameters creationInfo)
+        {
+            var prefab = (GameObject)Resources.Load(resourcePath);
+            Assert.IsNotNull(prefab,
+                "Could not find prefab at resource location '{0}'".Fmt(resourcePath));
+            return InstantiatePrefabForComponentExplicit(
+                componentType, prefab, extraArgs, context, concreteIdentifier, creationInfo);
+        }
+
+        public object InstantiatePrefabForComponentExplicit(
+            Type componentType, UnityEngine.Object prefab,
+            List<TypeValuePair> extraArgs)
+        {
+            return InstantiatePrefabForComponentExplicit(
+                componentType, prefab, extraArgs, GameObjectCreationParameters.Default);
+        }
+
+        public object InstantiatePrefabForComponentExplicit(
+            Type componentType, UnityEngine.Object prefab,
+            List<TypeValuePair> extraArgs, GameObjectCreationParameters gameObjectBindInfo)
+        {
+            return InstantiatePrefabForComponentExplicit(
+                componentType, prefab, extraArgs, new InjectContext(this, componentType, null), null, gameObjectBindInfo);
+        }
+
+        // Same as InstantiatePrefabForComponent except allows null values
+        // to be included in the argument list.  Also see InjectUtil.CreateArgList
+        public object InstantiatePrefabForComponentExplicit(
+            Type componentType, UnityEngine.Object prefab,
+            List<TypeValuePair> extraArgs, InjectContext context, object concreteIdentifier, GameObjectCreationParameters gameObjectBindInfo)
+        {
+            Assert.That(!AssertOnNewGameObjects,
+                "Given DiContainer does not support creating new game objects");
+
+            FlushBindings();
+
+            Assert.That(componentType.IsInterface() || componentType.DerivesFrom<Component>(),
+                "Expected type '{0}' to derive from UnityEngine.Component", componentType);
+
+            bool shouldMakeActive;
+            var gameObj = CreateAndParentPrefab(prefab, gameObjectBindInfo, context, out shouldMakeActive);
+
+            var component = InjectGameObjectForComponentExplicit(
+                gameObj, componentType, extraArgs, context, concreteIdentifier);
+
+            if (shouldMakeActive && !IsValidating)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                {
+                    gameObj.SetActive(true);
+                }
+            }
+
+            return component;
+        }
+#endif
+
+        ////////////// Execution order ////////////////
+
+        public void BindExecutionOrder<T>(int order)
+        {
+            BindExecutionOrder(typeof(T), order);
+        }
+
+        public void BindExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<ITickable>() || type.DerivesFrom<IInitializable>() || type.DerivesFrom<IDisposable>() || type.DerivesFrom<ILateDisposable>() || type.DerivesFrom<IFixedTickable>() || type.DerivesFrom<ILateTickable>() || type.DerivesFrom<IPoolable>(),
+                "Expected type '{0}' to derive from one or more of the following interfaces: ITickable, IInitializable, ILateTickable, IFixedTickable, IDisposable, ILateDisposable", type);
+
+            if (type.DerivesFrom<ITickable>())
+            {
+                BindTickableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<IInitializable>())
+            {
+                BindInitializableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<IDisposable>())
+            {
+                BindDisposableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<ILateDisposable>())
+            {
+                BindLateDisposableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<IFixedTickable>())
+            {
+                BindFixedTickableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<ILateTickable>())
+            {
+                BindLateTickableExecutionOrder(type, order);
+            }
+
+            if (type.DerivesFrom<IPoolable>())
+            {
+                BindPoolableExecutionOrder(type, order);
+            }
+        }
+
+        public CopyNonLazyBinder BindTickableExecutionOrder<T>(int order)
+            where T : ITickable
+        {
+            return BindTickableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindTickableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<ITickable>(),
+                "Expected type '{0}' to derive from ITickable", type);
+
+            return BindInstance(
+                ValuePair.New(type, order)).WhenInjectedInto<TickableManager>();
+        }
+
+        public CopyNonLazyBinder BindInitializableExecutionOrder<T>(int order)
+            where T : IInitializable
+        {
+            return BindInitializableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindInitializableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<IInitializable>(),
+                "Expected type '{0}' to derive from IInitializable", type);
+
+            return BindInstance(
+                ValuePair.New(type, order)).WhenInjectedInto<InitializableManager>();
+        }
+
+        public CopyNonLazyBinder BindDisposableExecutionOrder<T>(int order)
+            where T : IDisposable
+        {
+            return BindDisposableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindLateDisposableExecutionOrder<T>(int order)
+            where T : ILateDisposable
+        {
+            return BindLateDisposableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindDisposableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<IDisposable>(),
+                "Expected type '{0}' to derive from IDisposable", type);
+
+            return BindInstance(
+                ValuePair.New(type, order)).WhenInjectedInto<DisposableManager>();
+        }
+
+        public CopyNonLazyBinder BindLateDisposableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<ILateDisposable>(),
+            "Expected type '{0}' to derive from ILateDisposable", type);
+
+            return BindInstance(
+                ValuePair.New(type, order)).WithId("Late").WhenInjectedInto<DisposableManager>();
+        }
+
+        public CopyNonLazyBinder BindFixedTickableExecutionOrder<T>(int order)
+            where T : IFixedTickable
+        {
+            return BindFixedTickableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindFixedTickableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<IFixedTickable>(),
+                "Expected type '{0}' to derive from IFixedTickable", type);
+
+            return Bind<ValuePair<Type, int>>().WithId("Fixed")
+                .FromInstance(ValuePair.New(type, order)).WhenInjectedInto<TickableManager>();
+        }
+
+        public CopyNonLazyBinder BindLateTickableExecutionOrder<T>(int order)
+            where T : ILateTickable
+        {
+            return BindLateTickableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindLateTickableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<ILateTickable>(),
+                "Expected type '{0}' to derive from ILateTickable", type);
+
+            return Bind<ValuePair<Type, int>>().WithId("Late")
+                .FromInstance(ValuePair.New(type, order)).WhenInjectedInto<TickableManager>();
+        }
+
+        public CopyNonLazyBinder BindPoolableExecutionOrder<T>(int order)
+            where T : IPoolable
+        {
+            return BindPoolableExecutionOrder(typeof(T), order);
+        }
+
+        public CopyNonLazyBinder BindPoolableExecutionOrder(Type type, int order)
+        {
+            Assert.That(type.DerivesFrom<IPoolable>(),
+                "Expected type '{0}' to derive from IPoolable", type);
+
+            return Bind<ValuePair<Type, int>>()
+                .FromInstance(ValuePair.New(type, order)).WhenInjectedInto<PoolableManager>();
+        }
+
+        class ProviderInfo
+        {
+            public ProviderInfo(
+                IProvider provider, BindingCondition condition, bool nonLazy, DiContainer container)
+            {
+                Provider = provider;
+                Condition = condition;
+                NonLazy = nonLazy;
+                Container = container;
+            }
+
+            public readonly DiContainer Container;
+            public readonly bool NonLazy;
+            public readonly IProvider Provider;
+            public readonly BindingCondition Condition;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Main/DiContainer.cs.meta b/Assets/Source/Runtime/Main/DiContainer.cs.meta
new file mode 100644
index 0000000..065592b
--- /dev/null
+++ b/Assets/Source/Runtime/Main/DiContainer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: de4283f91e0232a4897afd2a0af141bc
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/IInstantiator.cs b/Assets/Source/Runtime/Main/IInstantiator.cs
new file mode 100644
index 0000000..ba58b56
--- /dev/null
+++ b/Assets/Source/Runtime/Main/IInstantiator.cs
@@ -0,0 +1,107 @@
+using System;
+using System.Collections.Generic;
+
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    // You can optionally inject this interface into your classes/factories
+    // rather than using DiContainer which contains many methods you might not need
+    public interface IInstantiator
+    {
+        // Use this method to create any non-monobehaviour
+        // Any fields marked [Inject] will be set using the bindings on the container
+        // Any methods marked with a [Inject] will be called
+        // Any constructor parameters will be filled in with values from the container
+        T Instantiate<T>();
+        T Instantiate<T>(IEnumerable<object> extraArgs);
+
+        object Instantiate(Type concreteType);
+        object Instantiate(Type concreteType, IEnumerable<object> extraArgs);
+
+#if !NOT_UNITY3D
+
+        // Add new component to existing game object and fill in its dependencies
+        // NOTE: Gameobject here is not a prefab prototype, it is an instance
+        TContract InstantiateComponent<TContract>(GameObject gameObject)
+            where TContract : Component;
+        TContract InstantiateComponent<TContract>(
+            GameObject gameObject, IEnumerable<object> extraArgs)
+            where TContract : Component;
+        Component InstantiateComponent(
+            Type componentType, GameObject gameObject);
+        Component InstantiateComponent(
+            Type componentType, GameObject gameObject, IEnumerable<object> extraArgs);
+
+        T InstantiateComponentOnNewGameObject<T>()
+            where T : Component;
+        T InstantiateComponentOnNewGameObject<T>(string gameObjectName)
+            where T : Component;
+        T InstantiateComponentOnNewGameObject<T>(IEnumerable<object> extraArgs)
+            where T : Component;
+        T InstantiateComponentOnNewGameObject<T>(string gameObjectName, IEnumerable<object> extraArgs)
+            where T : Component;
+
+        // Create a new game object from a prefab and fill in dependencies for all children
+        GameObject InstantiatePrefab(UnityEngine.Object prefab);
+        GameObject InstantiatePrefab(
+            UnityEngine.Object prefab, Transform parentTransform);
+        GameObject InstantiatePrefab(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform);
+
+        // Create a new game object from a resource path and fill in dependencies for all children
+        GameObject InstantiatePrefabResource(string resourcePath);
+        GameObject InstantiatePrefabResource(
+            string resourcePath, Transform parentTransform);
+        GameObject InstantiatePrefabResource(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform);
+
+        // Same as InstantiatePrefab but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        T InstantiatePrefabForComponent<T>(UnityEngine.Object prefab);
+        T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, IEnumerable<object> extraArgs);
+        T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Transform parentTransform);
+        T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Transform parentTransform, IEnumerable<object> extraArgs);
+        T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform);
+        T InstantiatePrefabForComponent<T>(
+            UnityEngine.Object prefab, Vector3 position, Quaternion rotation, Transform parentTransform, IEnumerable<object> extraArgs);
+        object InstantiatePrefabForComponent(
+            Type concreteType, UnityEngine.Object prefab, Transform parentTransform, IEnumerable<object> extraArgs);
+
+        // Same as InstantiatePrefabResource but returns a component after it's initialized
+        // and optionally allows extra arguments for the given component type
+        T InstantiatePrefabResourceForComponent<T>(string resourcePath);
+        T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, IEnumerable<object> extraArgs);
+        T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Transform parentTransform);
+        T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Transform parentTransform, IEnumerable<object> extraArgs);
+        T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform);
+        T InstantiatePrefabResourceForComponent<T>(
+            string resourcePath, Vector3 position, Quaternion rotation, Transform parentTransform, IEnumerable<object> extraArgs);
+        object InstantiatePrefabResourceForComponent(
+            Type concreteType, string resourcePath, Transform parentTransform, IEnumerable<object> extraArgs);
+
+        T InstantiateScriptableObjectResource<T>(string resourcePath)
+            where T : ScriptableObject;
+        T InstantiateScriptableObjectResource<T>(
+            string resourcePath, IEnumerable<object> extraArgs)
+            where T : ScriptableObject;
+        object InstantiateScriptableObjectResource(
+            Type scriptableObjectType, string resourcePath);
+        object InstantiateScriptableObjectResource(
+            Type scriptableObjectType, string resourcePath, IEnumerable<object> extraArgs);
+
+        GameObject CreateEmptyGameObject(string name);
+#endif
+    }
+}
+
diff --git a/Assets/Source/Runtime/Main/IInstantiator.cs.meta b/Assets/Source/Runtime/Main/IInstantiator.cs.meta
new file mode 100644
index 0000000..b9726c3
--- /dev/null
+++ b/Assets/Source/Runtime/Main/IInstantiator.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 27acc83df7708be4185afec9bd506165
+timeCreated: 1523188912
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/LazyInstanceInjector.cs b/Assets/Source/Runtime/Main/LazyInstanceInjector.cs
new file mode 100644
index 0000000..6d061bb
--- /dev/null
+++ b/Assets/Source/Runtime/Main/LazyInstanceInjector.cs
@@ -0,0 +1,76 @@
+
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    // When the app starts up, typically there is a list of instances that need to be injected
+    // The question is, what is the order that they should be injected?  Originally we would
+    // just iterate over the list and inject in whatever order they were in
+    // What is better than that though, is to inject based on their dependency order
+    // So if A depends on B then it would be nice if B was always injected before A
+    // That way, in [Inject] methods for A, A can access members on B knowing that it's
+    // already been initialized.
+    // So in order to do this, we add the initial pool of instances to this class then
+    // notify this class whenever an instance is resolved via a FromInstance binding
+    // That way we can lazily call inject on-demand whenever the instance is requested
+    [NoReflectionBaking]
+    public class LazyInstanceInjector
+    {
+        readonly DiContainer _container;
+        readonly HashSet<object> _instancesToInject = new HashSet<object>();
+
+        public LazyInstanceInjector(DiContainer container)
+        {
+            _container = container;
+        }
+
+        public IEnumerable<object> Instances
+        {
+            get { return _instancesToInject; }
+        }
+
+        public void AddInstance(object instance)
+        {
+            _instancesToInject.Add(instance);
+        }
+
+        public void AddInstances(IEnumerable<object> instances)
+        {
+            _instancesToInject.UnionWith(instances);
+        }
+
+        public void LazyInject(object instance)
+        {
+            if (_instancesToInject.Remove(instance))
+            {
+                _container.Inject(instance);
+            }
+        }
+
+        public void LazyInjectAll()
+        {
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("Zenject.LazyInstanceInjector.LazyInjectAll"))
+#endif
+            {
+                var tempList = new List<object>();
+
+                while (!_instancesToInject.IsEmpty())
+                {
+                    tempList.Clear();
+                    tempList.AddRange(_instancesToInject);
+
+                    foreach (var instance in tempList)
+                    {
+                        // We use LazyInject instead of calling _container.inject directly
+                        // Because it might have already been lazily injected
+                        // as a result of a previous call to inject
+                        LazyInject(instance);
+                    }
+                }
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Main/LazyInstanceInjector.cs.meta b/Assets/Source/Runtime/Main/LazyInstanceInjector.cs.meta
new file mode 100644
index 0000000..5267d8b
--- /dev/null
+++ b/Assets/Source/Runtime/Main/LazyInstanceInjector.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: c7bd2a03033e83a4c9dab4d27166b412
+timeCreated: 1476651829
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/LookupId.cs b/Assets/Source/Runtime/Main/LookupId.cs
new file mode 100644
index 0000000..77c340d
--- /dev/null
+++ b/Assets/Source/Runtime/Main/LookupId.cs
@@ -0,0 +1,39 @@
+using ModestTree;
+
+namespace Zenject.Internal
+{
+    [NoReflectionBaking]
+    public class LookupId
+    {
+        public IProvider Provider;
+        public BindingId BindingId;
+
+        public LookupId()
+        {
+        }
+
+        public LookupId(IProvider provider, BindingId bindingId)
+        {
+            Assert.IsNotNull(provider);
+            Assert.IsNotNull(bindingId);
+
+            Provider = provider;
+            BindingId = bindingId;
+        }
+
+        public override int GetHashCode()
+        {
+            int hash = 17;
+            hash = hash * 23 + Provider.GetHashCode();
+            hash = hash * 23 + BindingId.GetHashCode();
+            return hash;
+        }
+
+        public void Reset()
+        {
+            Provider = null;
+            BindingId.Type = null;
+            BindingId.Identifier = null;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Main/LookupId.cs.meta b/Assets/Source/Runtime/Main/LookupId.cs.meta
new file mode 100644
index 0000000..8328dac
--- /dev/null
+++ b/Assets/Source/Runtime/Main/LookupId.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 75d6ff51a82574249bd77fb5fd40d948
+timeCreated: 1535860932
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs b/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs
new file mode 100644
index 0000000..ac627f4
--- /dev/null
+++ b/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs
@@ -0,0 +1,30 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject.Internal
+{
+    [NoReflectionBaking]
+    public class SingletonMarkRegistry
+    {
+        readonly HashSet<Type> _boundSingletons = new HashSet<Type>();
+        readonly HashSet<Type> _boundNonSingletons = new HashSet<Type>();
+
+        public void MarkNonSingleton(Type type)
+        {
+            Assert.That(!_boundSingletons.Contains(type),
+                "Found multiple creation bindings for type '{0}' in addition to AsSingle.  The AsSingle binding must be the definitive creation binding.  If this is intentional, use AsCached instead of AsSingle.", type);
+            _boundNonSingletons.Add(type);
+        }
+
+        public void MarkSingleton(Type type)
+        {
+            bool added = _boundSingletons.Add(type);
+            Assert.That(added, "Attempted to use AsSingle multiple times for type '{0}'.  As of Zenject 6+, AsSingle as can no longer be used for the same type across different bindings.  See the upgrade guide for details.", type);
+
+            Assert.That(!_boundNonSingletons.Contains(type),
+                "Found multiple creation bindings for type '{0}' in addition to AsSingle.  The AsSingle binding must be the definitive creation binding.  If this is intentional, use AsCached instead of AsSingle.", type);
+        }
+
+    }
+}
diff --git a/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs.meta b/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs.meta
new file mode 100644
index 0000000..03f7766
--- /dev/null
+++ b/Assets/Source/Runtime/Main/SingletonMarkRegistry.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 3844511961cf2ee40948fbe1569a2f31
+timeCreated: 1520759760
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Main/ZenjectSettings.cs b/Assets/Source/Runtime/Main/ZenjectSettings.cs
new file mode 100644
index 0000000..d1d48ea
--- /dev/null
+++ b/Assets/Source/Runtime/Main/ZenjectSettings.cs
@@ -0,0 +1,202 @@
+using System;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    public enum ValidationErrorResponses
+    {
+        Log,
+        Throw
+    }
+
+    public enum RootResolveMethods
+    {
+        NonLazyOnly,
+        All
+    }
+
+    public enum SignalDefaultSyncModes
+    {
+        Synchronous,
+        Asynchronous
+    }
+
+    public enum SignalMissingHandlerResponses
+    {
+        Ignore,
+        Throw,
+        Warn
+    }
+
+    [Serializable]
+    [ZenjectAllowDuringValidation]
+    [NoReflectionBaking]
+    public class ZenjectSettings
+    {
+        public static ZenjectSettings Default = new ZenjectSettings();
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        bool _ensureDeterministicDestructionOrderOnApplicationQuit;
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        bool _displayWarningWhenResolvingDuringInstall;
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        RootResolveMethods _validationRootResolveMethod;
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        ValidationErrorResponses _validationErrorResponse;
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        ConstructorChoiceStrategy _constructorChoiceStrategy;
+
+#if !NOT_UNITY3D
+        [SerializeField]
+#endif
+        SignalSettings _signalSettings;
+
+        public ZenjectSettings(
+            ValidationErrorResponses validationErrorResponse,
+            RootResolveMethods validationRootResolveMethod = RootResolveMethods.NonLazyOnly,
+            bool displayWarningWhenResolvingDuringInstall = true,
+            bool ensureDeterministicDestructionOrderOnApplicationQuit = false,
+            SignalSettings signalSettings = null,
+            ConstructorChoiceStrategy constructorChoiceStrategy = ConstructorChoiceStrategy.InjectAttributeThenLeastArguments)
+        {
+            _validationErrorResponse = validationErrorResponse;
+            _validationRootResolveMethod = validationRootResolveMethod;
+            _displayWarningWhenResolvingDuringInstall = displayWarningWhenResolvingDuringInstall;
+            _ensureDeterministicDestructionOrderOnApplicationQuit =ensureDeterministicDestructionOrderOnApplicationQuit;
+            _signalSettings = signalSettings ?? SignalSettings.Default;
+            _constructorChoiceStrategy = constructorChoiceStrategy;
+        }
+
+        // Need to define an emtpy constructor since this is created by unity serialization
+        // even if the above constructor has defaults for all
+        public ZenjectSettings()
+            : this(ValidationErrorResponses.Log)
+        {
+        }
+
+        public ConstructorChoiceStrategy ConstructorChoiceStrategy
+        {
+            get { return _constructorChoiceStrategy; }
+        }
+
+        public SignalSettings Signals
+        {
+            get { return _signalSettings; }
+        }
+
+        // Setting this to Log can be more useful because it will print out
+        // multiple validation errors at once so you can fix multiple problems before
+        // attempting validation again
+        public ValidationErrorResponses ValidationErrorResponse
+        {
+            get { return _validationErrorResponse; }
+        }
+
+        // Settings this to true will ensure that every binding in the container can be
+        // instantiated with all its dependencies, and not just those bindings that will be
+        // constructed as part of the object graph generated from the nonlazy bindings
+        public RootResolveMethods ValidationRootResolveMethod
+        {
+            get { return _validationRootResolveMethod; }
+        }
+
+        public bool DisplayWarningWhenResolvingDuringInstall
+        {
+            get { return _displayWarningWhenResolvingDuringInstall; }
+        }
+
+        // When this is set to true and the application is exitted, all the scenes will be
+        // destroyed in the reverse order in which they were loaded, and then the project context
+        // will be destroyed last
+        // When this is set to false (the default) the order that this occurs in is not predictable
+        // It is set to false by default because manually destroying objects during OnApplicationQuit
+        // event can cause crashes on android (see github issue #468)
+        public bool EnsureDeterministicDestructionOrderOnApplicationQuit
+        {
+            get { return _ensureDeterministicDestructionOrderOnApplicationQuit; }
+        }
+
+        [Serializable]
+        public class SignalSettings
+        {
+            public static SignalSettings Default = new SignalSettings();
+
+#if !NOT_UNITY3D
+            [SerializeField]
+#endif
+            SignalDefaultSyncModes _defaultSyncMode;
+
+#if !NOT_UNITY3D
+            [SerializeField]
+#endif
+            SignalMissingHandlerResponses _missingHandlerDefaultResponse;
+
+#if !NOT_UNITY3D
+            [SerializeField]
+#endif
+            bool _requireStrictUnsubscribe;
+
+#if !NOT_UNITY3D
+            [SerializeField]
+#endif
+            int _defaultAsyncTickPriority;
+
+            public SignalSettings(
+                SignalDefaultSyncModes defaultSyncMode,
+                SignalMissingHandlerResponses missingHandlerDefaultResponse = SignalMissingHandlerResponses.Warn,
+                bool requireStrictUnsubscribe = false,
+                // Run right after all the unspecified tick priorities so that the effects of the
+                // signal are handled during the same frame when they are triggered
+                int defaultAsyncTickPriority = 1)
+            {
+                _defaultSyncMode = defaultSyncMode;
+                _missingHandlerDefaultResponse = missingHandlerDefaultResponse;
+                _requireStrictUnsubscribe = requireStrictUnsubscribe;
+                _defaultAsyncTickPriority = defaultAsyncTickPriority;
+            }
+
+            // Need to define an emtpy constructor since this is created by unity serialization
+            // even if the above constructor has defaults for all
+            public SignalSettings()
+                : this(SignalDefaultSyncModes.Synchronous)
+            {
+            }
+
+            public int DefaultAsyncTickPriority
+            {
+                get { return _defaultAsyncTickPriority; }
+            }
+
+            public SignalDefaultSyncModes DefaultSyncMode
+            {
+                get { return _defaultSyncMode; }
+            }
+
+            public SignalMissingHandlerResponses MissingHandlerDefaultResponse
+            {
+                get { return _missingHandlerDefaultResponse; }
+            }
+
+            public bool RequireStrictUnsubscribe
+            {
+                get { return _requireStrictUnsubscribe; }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Main/ZenjectSettings.cs.meta b/Assets/Source/Runtime/Main/ZenjectSettings.cs.meta
new file mode 100644
index 0000000..7d36565
--- /dev/null
+++ b/Assets/Source/Runtime/Main/ZenjectSettings.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1581703805dca9046a9197095cbbf3d1
+timeCreated: 1527493251
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers.meta b/Assets/Source/Runtime/Managers.meta
new file mode 100644
index 0000000..aa3844d
--- /dev/null
+++ b/Assets/Source/Runtime/Managers.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: cbedb622e47c5b748908fa504e7f3a83
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/DisposableManager.cs b/Assets/Source/Runtime/Managers/DisposableManager.cs
new file mode 100644
index 0000000..b561e73
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/DisposableManager.cs
@@ -0,0 +1,156 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+
+namespace Zenject
+{
+    public class DisposableManager : IDisposable
+    {
+        readonly List<DisposableInfo> _disposables = new List<DisposableInfo>();
+        readonly List<LateDisposableInfo> _lateDisposables = new List<LateDisposableInfo>();
+        bool _disposed;
+        bool _lateDisposed;
+
+        [Inject]
+        public DisposableManager(
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<IDisposable> disposables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ILateDisposable> lateDisposables,
+            [Inject(Id = "Late", Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> latePriorities)
+        {
+            foreach (var disposable in disposables)
+            {
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var match = priorities.Where(x => disposable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)x.Second).SingleOrDefault();
+                int priority = match.HasValue ? match.Value : 0;
+
+                _disposables.Add(new DisposableInfo(disposable, priority));
+            }
+
+            foreach (var lateDisposable in lateDisposables)
+            {
+                var match = latePriorities.Where(x => lateDisposable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)x.Second).SingleOrDefault();
+                int priority = match.HasValue ? match.Value : 0;
+
+                _lateDisposables.Add(new LateDisposableInfo(lateDisposable, priority));
+            }
+        }
+
+        public void Add(IDisposable disposable)
+        {
+            Add(disposable, 0);
+        }
+
+        public void Add(IDisposable disposable, int priority)
+        {
+            _disposables.Add(
+                new DisposableInfo(disposable, priority));
+        }
+
+        public void AddLate(ILateDisposable disposable)
+        {
+            AddLate(disposable, 0);
+        }
+
+        public void AddLate(ILateDisposable disposable, int priority)
+        {
+            _lateDisposables.Add(
+                new LateDisposableInfo(disposable, priority));
+        }
+
+        public void Remove(IDisposable disposable)
+        {
+            _disposables.RemoveWithConfirm(
+                _disposables.Where(x => ReferenceEquals(x.Disposable, disposable)).Single());
+        }
+
+        public void LateDispose()
+        {
+            Assert.That(!_lateDisposed, "Tried to late dispose DisposableManager twice!");
+            _lateDisposed = true;
+
+            // Dispose in the reverse order that they are initialized in
+            var disposablesOrdered = _lateDisposables.OrderBy(x => x.Priority).Reverse().ToList();
+
+#if UNITY_EDITOR
+            foreach (var disposable in disposablesOrdered.Select(x => x.LateDisposable).GetDuplicates())
+            {
+                Assert.That(false, "Found duplicate ILateDisposable with type '{0}'".Fmt(disposable.GetType()));
+            }
+#endif
+
+            foreach (var disposable in disposablesOrdered)
+            {
+                try
+                {
+                    disposable.LateDisposable.LateDispose();
+                }
+                catch (Exception e)
+                {
+                    throw Assert.CreateException(
+                        e, "Error occurred while late disposing ILateDisposable with type '{0}'", disposable.LateDisposable.GetType());
+                }
+            }
+        }
+
+        public void Dispose()
+        {
+            Assert.That(!_disposed, "Tried to dispose DisposableManager twice!");
+            _disposed = true;
+
+            // Dispose in the reverse order that they are initialized in
+            var disposablesOrdered = _disposables.OrderBy(x => x.Priority).Reverse().ToList();
+
+#if UNITY_EDITOR
+            foreach (var disposable in disposablesOrdered.Select(x => x.Disposable).GetDuplicates())
+            {
+                Assert.That(false, "Found duplicate IDisposable with type '{0}'".Fmt(disposable.GetType()));
+            }
+#endif
+
+            foreach (var disposable in disposablesOrdered)
+            {
+                try
+                {
+                    disposable.Disposable.Dispose();
+                }
+                catch (Exception e)
+                {
+                    throw Assert.CreateException(
+                        e, "Error occurred while disposing IDisposable with type '{0}'", disposable.Disposable.GetType());
+                }
+            }
+        }
+
+        struct DisposableInfo
+        {
+            public IDisposable Disposable;
+            public int Priority;
+
+            public DisposableInfo(IDisposable disposable, int priority)
+            {
+                Disposable = disposable;
+                Priority = priority;
+            }
+        }
+
+        class LateDisposableInfo
+        {
+            public ILateDisposable LateDisposable;
+            public int Priority;
+
+            public LateDisposableInfo(ILateDisposable lateDisposable, int priority)
+            {
+                LateDisposable = lateDisposable;
+                Priority = priority;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/DisposableManager.cs.meta b/Assets/Source/Runtime/Managers/DisposableManager.cs.meta
new file mode 100644
index 0000000..9637ede
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/DisposableManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e62fabfe4695e4a439003c1c1fd5d008
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/GuiRenderableManager.cs b/Assets/Source/Runtime/Managers/GuiRenderableManager.cs
new file mode 100644
index 0000000..71e13ea
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/GuiRenderableManager.cs
@@ -0,0 +1,82 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+
+namespace Zenject
+{
+    // See comment in IGuiRenderable.cs for usage
+    public class GuiRenderableManager
+    {
+        List<RenderableInfo> _renderables;
+
+        public GuiRenderableManager(
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<IGuiRenderable> renderables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _renderables = new List<RenderableInfo>();
+
+            foreach (var renderable in renderables)
+            {
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var matches = priorities
+                    .Where(x => renderable.GetType().DerivesFromOrEqual(x.First))
+                    .Select(x => x.Second).ToList();
+
+                int priority = matches.IsEmpty() ? 0 : matches.Distinct().Single();
+
+                _renderables.Add(
+                    new RenderableInfo(renderable, priority));
+            }
+
+            _renderables = _renderables.OrderBy(x => x.Priority).ToList();
+
+#if UNITY_EDITOR
+            foreach (var renderable in _renderables.Select(x => x.Renderable).GetDuplicates())
+            {
+                Assert.That(false, "Found duplicate IGuiRenderable with type '{0}'".Fmt(renderable.GetType()));
+            }
+#endif
+        }
+
+        public void OnGui()
+        {
+            foreach (var renderable in _renderables)
+            {
+                try
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                    using (ProfileBlock.Start("{0}.GuiRender()", renderable.Renderable.GetType()))
+#endif
+                    {
+                        renderable.Renderable.GuiRender();
+                    }
+                }
+                catch (Exception e)
+                {
+                    throw Assert.CreateException(
+                        e, "Error occurred while calling {0}.GuiRender", renderable.Renderable.GetType());
+                }
+            }
+        }
+
+        class RenderableInfo
+        {
+            public IGuiRenderable Renderable;
+            public int Priority;
+
+            public RenderableInfo(IGuiRenderable renderable, int priority)
+            {
+                Renderable = renderable;
+                Priority = priority;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/GuiRenderableManager.cs.meta b/Assets/Source/Runtime/Managers/GuiRenderableManager.cs.meta
new file mode 100644
index 0000000..cd04998
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/GuiRenderableManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5ca4a43d84d9d554080d313280363783
+timeCreated: 1484528928
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/GuiRenderer.cs b/Assets/Source/Runtime/Managers/GuiRenderer.cs
new file mode 100644
index 0000000..3e86cff
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/GuiRenderer.cs
@@ -0,0 +1,20 @@
+using UnityEngine;
+
+namespace Zenject
+{
+    public class GuiRenderer : MonoBehaviour
+    {
+        GuiRenderableManager _renderableManager;
+
+        [Inject]
+        void Construct(GuiRenderableManager renderableManager)
+        {
+            _renderableManager = renderableManager;
+        }
+
+        public void OnGUI()
+        {
+            _renderableManager.OnGui();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/GuiRenderer.cs.meta b/Assets/Source/Runtime/Managers/GuiRenderer.cs.meta
new file mode 100644
index 0000000..31ac0d7
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/GuiRenderer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d6ee197c5aed3b048b76b82a9be3d094
+timeCreated: 1484530704
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9995
+  icon: {instanceID: 0}
+  userData:
+  assetBundleName:
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/InitializableManager.cs b/Assets/Source/Runtime/Managers/InitializableManager.cs
new file mode 100644
index 0000000..680b2c7
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/InitializableManager.cs
@@ -0,0 +1,99 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+
+namespace Zenject
+{
+    // Responsibilities:
+    // - Run Initialize() on all Iinitializable's, in the order specified by InitPriority
+    public class InitializableManager
+    {
+        List<InitializableInfo> _initializables;
+
+        protected bool _hasInitialized;
+
+        [Inject]
+        public InitializableManager(
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<IInitializable> initializables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _initializables = new List<InitializableInfo>();
+
+            for (int i = 0; i < initializables.Count; i++)
+            {
+                var initializable = initializables[i];
+
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var matches = priorities.Where(x => initializable.GetType().DerivesFromOrEqual(x.First)).Select(x => x.Second).ToList();
+                int priority = matches.IsEmpty() ? 0 : matches.Distinct().Single();
+
+                _initializables.Add(new InitializableInfo(initializable, priority));
+            }
+        }
+
+        public void Add(IInitializable initializable)
+        {
+            Add(initializable, 0);
+        }
+
+        public void Add(IInitializable initializable, int priority)
+        {
+            Assert.That(!_hasInitialized);
+            _initializables.Add(
+                new InitializableInfo(initializable, priority));
+        }
+
+        public void Initialize()
+        {
+            Assert.That(!_hasInitialized);
+            _hasInitialized = true;
+
+            _initializables = _initializables.OrderBy(x => x.Priority).ToList();
+
+#if UNITY_EDITOR
+            foreach (var initializable in _initializables.Select(x => x.Initializable).GetDuplicates())
+            {
+                Assert.That(false, "Found duplicate IInitializable with type '{0}'".Fmt(initializable.GetType()));
+            }
+#endif
+
+            foreach (var initializable in _initializables)
+            {
+                try
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                    using (ProfileBlock.Start("{0}.Initialize()", initializable.Initializable.GetType()))
+#endif
+                    {
+                        initializable.Initializable.Initialize();
+                    }
+                }
+                catch (Exception e)
+                {
+                    throw Assert.CreateException(
+                        e, "Error occurred while initializing IInitializable with type '{0}'", initializable.Initializable.GetType());
+                }
+            }
+        }
+
+        class InitializableInfo
+        {
+            public IInitializable Initializable;
+            public int Priority;
+
+            public InitializableInfo(IInitializable initializable, int priority)
+            {
+                Initializable = initializable;
+                Priority = priority;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/InitializableManager.cs.meta b/Assets/Source/Runtime/Managers/InitializableManager.cs.meta
new file mode 100644
index 0000000..609426a
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/InitializableManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 8e5838132ef34e14ea93d2e3b30b7140
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/PoolableManager.cs b/Assets/Source/Runtime/Managers/PoolableManager.cs
new file mode 100644
index 0000000..ea8a169
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/PoolableManager.cs
@@ -0,0 +1,485 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+
+namespace Zenject
+{
+    public class PoolableManager
+    {
+        readonly List<IPoolable> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned()
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned();
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+
+    /// <summary>
+    /// A modified version of PoolableManager that adds a generic argument, allowing
+    /// the passing of a parameter to all IPoolable<T> objects in the container.
+    /// </summary>
+    public class PoolableManager<T>
+    {
+        readonly List<IPoolable<T>> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable<T>> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable<T> poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned(T param)
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned(param);
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable<T> Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable<T> poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+
+    /// <summary>
+    /// A modified version of PoolableManager that adds a generic argument, allowing
+    /// the passing of a parameter to all IPoolable<T1, T2> objects in the container.
+    /// </summary>
+    public class PoolableManager<T1, T2>
+    {
+        readonly List<IPoolable<T1, T2>> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable<T1, T2>> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable<T1, T2> poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned(T1 p1, T2 p2)
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned(p1, p2);
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable<T1, T2> Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable<T1, T2> poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+
+    /// <summary>
+    /// A modified version of PoolableManager that adds a generic argument, allowing
+    /// the passing of a parameter to all IPoolable<T1, T2> objects in the container.
+    /// </summary>
+    public class PoolableManager<T1, T2, T3>
+    {
+        readonly List<IPoolable<T1, T2, T3>> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable<T1, T2, T3>> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable<T1, T2, T3> poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3)
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned(p1, p2, p3);
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable<T1, T2, T3> Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable<T1, T2, T3> poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+
+    /// <summary>
+    /// A modified version of PoolableManager that adds a generic argument, allowing
+    /// the passing of a parameter to all IPoolable<T1, T2> objects in the container.
+    /// </summary>
+    public class PoolableManager<T1, T2, T3, T4>
+    {
+        readonly List<IPoolable<T1, T2, T3, T4>> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable<T1, T2, T3, T4>> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable<T1, T2, T3, T4> poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4)
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned(p1, p2, p3, p4);
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable<T1, T2, T3, T4> Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable<T1, T2, T3, T4> poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+
+
+    /// <summary>
+    /// A modified version of PoolableManager that adds a generic argument, allowing
+    /// the passing of a parameter to all IPoolable<T1, T2> objects in the container.
+    /// </summary>
+    public class PoolableManager<T1, T2, T3, T4, T5>
+    {
+        readonly List<IPoolable<T1, T2, T3, T4, T5>> _poolables;
+
+        bool _isSpawned;
+
+        public PoolableManager(
+            [InjectLocal]
+            List<IPoolable<T1, T2, T3, T4, T5>> poolables,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            List<ValuePair<Type, int>> priorities)
+        {
+            _poolables = poolables.Select(x => CreatePoolableInfo(x, priorities))
+                .OrderBy(x => x.Priority).Select(x => x.Poolable).ToList();
+        }
+
+        PoolableInfo CreatePoolableInfo(IPoolable<T1, T2, T3, T4, T5> poolable, List<ValuePair<Type, int>> priorities)
+        {
+            var match = priorities.Where(x => poolable.GetType().DerivesFromOrEqual(x.First)).Select(x => (int?)(x.Second)).SingleOrDefault();
+            int priority = match.HasValue ? match.Value : 0;
+
+            return new PoolableInfo(poolable, priority);
+        }
+
+        public void TriggerOnSpawned(T1 p1, T2 p2, T3 p3, T4 p4, T5 p5)
+        {
+            Assert.That(!_isSpawned);
+            _isSpawned = true;
+
+            for (int i = 0; i < _poolables.Count; i++)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnSpawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnSpawned(p1, p2, p3, p4, p5);
+                }
+            }
+        }
+
+        public void TriggerOnDespawned()
+        {
+            Assert.That(_isSpawned);
+            _isSpawned = false;
+
+            // Call OnDespawned in the reverse order just like how dispose works
+            for (int i = _poolables.Count - 1; i >= 0; i--)
+            {
+#if ZEN_INTERNAL_PROFILING
+                using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+                using (ProfileBlock.Start("{0}.OnDespawned", _poolables[i].GetType()))
+#endif
+                {
+                    _poolables[i].OnDespawned();
+                }
+            }
+        }
+
+        struct PoolableInfo
+        {
+            public IPoolable<T1, T2, T3, T4, T5> Poolable;
+            public int Priority;
+
+            public PoolableInfo(IPoolable<T1, T2, T3, T4, T5> poolable, int priority)
+            {
+                Poolable = poolable;
+                Priority = priority;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/PoolableManager.cs.meta b/Assets/Source/Runtime/Managers/PoolableManager.cs.meta
new file mode 100644
index 0000000..79bc0c3
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/PoolableManager.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: aef2cb2ede47a96439cbb34a8935111a
+timeCreated: 1528650779
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/SceneContextRegistry.cs b/Assets/Source/Runtime/Managers/SceneContextRegistry.cs
new file mode 100644
index 0000000..cc64986
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/SceneContextRegistry.cs
@@ -0,0 +1,99 @@
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine.SceneManagement;
+
+namespace Zenject
+{
+    public class SceneContextRegistry
+    {
+        readonly Dictionary<Scene, SceneContext> _map = new Dictionary<Scene, SceneContext>();
+
+        [Inject]
+        public SceneContextRegistry()
+        {
+        }
+
+        public IEnumerable<SceneContext> SceneContexts
+        {
+            get { return _map.Values; }
+        }
+
+        public void Add(SceneContext context)
+        {
+            Assert.That(!_map.ContainsKey(context.gameObject.scene));
+            _map.Add(context.gameObject.scene, context);
+        }
+
+        public SceneContext GetSceneContextForScene(string name)
+        {
+            var scene = SceneManager.GetSceneByName(name);
+            Assert.That(scene.IsValid(), "Could not find scene with name '{0}'", name);
+            return GetSceneContextForScene(scene);
+        }
+
+        public SceneContext GetSceneContextForScene(Scene scene)
+        {
+            return _map[scene];
+        }
+
+        public SceneContext TryGetSceneContextForScene(string name)
+        {
+            var scene = SceneManager.GetSceneByName(name);
+            Assert.That(scene.IsValid(), "Could not find scene with name '{0}'", name);
+            return TryGetSceneContextForScene(scene);
+        }
+
+        public SceneContext TryGetSceneContextForScene(Scene scene)
+        {
+            SceneContext context;
+
+            if (_map.TryGetValue(scene, out context))
+            {
+                return context;
+            }
+
+            return null;
+        }
+
+        public DiContainer GetContainerForScene(Scene scene)
+        {
+            var container = TryGetContainerForScene(scene);
+
+            if (container != null)
+            {
+                return container;
+            }
+
+            throw Assert.CreateException(
+                "Unable to find DiContainer for scene '{0}'", scene.name);
+        }
+
+        public DiContainer TryGetContainerForScene(Scene scene)
+        {
+            if (scene == ProjectContext.Instance.gameObject.scene)
+            {
+                return ProjectContext.Instance.Container;
+            }
+
+            var sceneContext = TryGetSceneContextForScene(scene);
+
+            if (sceneContext != null)
+            {
+                return sceneContext.Container;
+            }
+
+            return null;
+        }
+
+        public void Remove(SceneContext context)
+        {
+            bool removed = _map.Remove(context.gameObject.scene);
+
+            if (!removed)
+            {
+                Log.Warn("Failed to remove SceneContext from SceneContextRegistry");
+            }
+        }
+    }
+
+}
diff --git a/Assets/Source/Runtime/Managers/SceneContextRegistry.cs.meta b/Assets/Source/Runtime/Managers/SceneContextRegistry.cs.meta
new file mode 100644
index 0000000..ac3449d
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/SceneContextRegistry.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 11e438b2dc7552349949f24c14de14be
+timeCreated: 1510660712
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs b/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs
new file mode 100644
index 0000000..e798190
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs
@@ -0,0 +1,30 @@
+using System;
+
+namespace Zenject
+{
+    public class SceneContextRegistryAdderAndRemover : IInitializable, IDisposable
+    {
+        readonly SceneContextRegistry _registry;
+        readonly SceneContext _sceneContext;
+
+        [Inject]
+        public SceneContextRegistryAdderAndRemover(
+            SceneContext sceneContext,
+            SceneContextRegistry registry)
+        {
+            _registry = registry;
+            _sceneContext = sceneContext;
+        }
+
+        public void Initialize()
+        {
+            _registry.Add(_sceneContext);
+        }
+
+        public void Dispose()
+        {
+            _registry.Remove(_sceneContext);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs.meta b/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs.meta
new file mode 100644
index 0000000..85a3dc2
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/SceneContextRegistryAdderAndRemover.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b13656f05675c384181e749264e6bcf9
+timeCreated: 1510660712
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/TaskUpdater.cs b/Assets/Source/Runtime/Managers/TaskUpdater.cs
new file mode 100644
index 0000000..cfb7f53
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/TaskUpdater.cs
@@ -0,0 +1,194 @@
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    // Update tasks once per frame based on a priority
+    [DebuggerStepThrough]
+    public abstract class TaskUpdater<TTask>
+    {
+        readonly LinkedList<TaskInfo> _tasks = new LinkedList<TaskInfo>();
+        readonly List<TaskInfo> _queuedTasks = new List<TaskInfo>();
+
+        IEnumerable<TaskInfo> AllTasks
+        {
+            get { return ActiveTasks.Concat(_queuedTasks); }
+        }
+
+        IEnumerable<TaskInfo> ActiveTasks
+        {
+            get { return _tasks; }
+        }
+
+        public void AddTask(TTask task, int priority)
+        {
+            AddTaskInternal(task, priority);
+        }
+
+        void AddTaskInternal(TTask task, int priority)
+        {
+            Assert.That(!AllTasks.Select(x => x.Task).ContainsItem(task),
+                "Duplicate task added to DependencyRoot with name '" + task.GetType().FullName + "'");
+
+            // Wait until next frame to add the task, otherwise whether it gets updated
+            // on the current frame depends on where in the update order it was added
+            // from, so you might get off by one frame issues
+            _queuedTasks.Add(new TaskInfo(task, priority));
+        }
+
+        public void RemoveTask(TTask task)
+        {
+            var info = AllTasks.Where(x => ReferenceEquals(x.Task, task)).SingleOrDefault();
+
+            Assert.IsNotNull(info, "Tried to remove a task not added to DependencyRoot, task = " + task.GetType().Name);
+
+            Assert.That(!info.IsRemoved, "Tried to remove task twice, task = " + task.GetType().Name);
+            info.IsRemoved = true;
+        }
+
+        public void OnFrameStart()
+        {
+            // See above comment
+            AddQueuedTasks();
+        }
+
+        public void UpdateAll()
+        {
+            UpdateRange(int.MinValue, int.MaxValue);
+        }
+
+        public void UpdateRange(int minPriority, int maxPriority)
+        {
+            var node = _tasks.First;
+
+            while (node != null)
+            {
+                var next = node.Next;
+                var taskInfo = node.Value;
+
+                // Make sure that tasks with priority of int.MaxValue are updated when maxPriority is int.MaxValue
+                if (!taskInfo.IsRemoved && taskInfo.Priority >= minPriority
+                    && (maxPriority == int.MaxValue || taskInfo.Priority < maxPriority))
+                {
+                    UpdateItem(taskInfo.Task);
+                }
+
+                node = next;
+            }
+
+            ClearRemovedTasks(_tasks);
+        }
+
+        void ClearRemovedTasks(LinkedList<TaskInfo> tasks)
+        {
+            var node = tasks.First;
+
+            while (node != null)
+            {
+                var next = node.Next;
+                var info = node.Value;
+
+                if (info.IsRemoved)
+                {
+                    //ModestTree.Log.Debug("Removed task '" + info.Task.GetType().ToString() + "'");
+                    tasks.Remove(node);
+                }
+
+                node = next;
+            }
+        }
+
+        void AddQueuedTasks()
+        {
+            for (int i = 0; i < _queuedTasks.Count; i++)
+            {
+                var task = _queuedTasks[i];
+
+                if (!task.IsRemoved)
+                {
+                    InsertTaskSorted(task);
+                }
+            }
+            _queuedTasks.Clear();
+        }
+
+        void InsertTaskSorted(TaskInfo task)
+        {
+            for (var current = _tasks.First; current != null; current = current.Next)
+            {
+                if (current.Value.Priority > task.Priority)
+                {
+                    _tasks.AddBefore(current, task);
+                    return;
+                }
+            }
+
+            _tasks.AddLast(task);
+        }
+
+        protected abstract void UpdateItem(TTask task);
+
+        class TaskInfo
+        {
+            public TTask Task;
+            public int Priority;
+            public bool IsRemoved;
+
+            public TaskInfo(TTask task, int priority)
+            {
+                Task = task;
+                Priority = priority;
+            }
+        }
+    }
+
+    public class TickablesTaskUpdater : TaskUpdater<ITickable>
+    {
+        protected override void UpdateItem(ITickable task)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("{0}.Tick()", task.GetType()))
+#endif
+            {
+                task.Tick();
+            }
+        }
+    }
+
+    public class LateTickablesTaskUpdater : TaskUpdater<ILateTickable>
+    {
+        protected override void UpdateItem(ILateTickable task)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("{0}.LateTick()", task.GetType()))
+#endif
+            {
+                task.LateTick();
+            }
+        }
+    }
+
+    public class FixedTickablesTaskUpdater : TaskUpdater<IFixedTickable>
+    {
+        protected override void UpdateItem(IFixedTickable task)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("{0}.FixedTick()", task.GetType()))
+#endif
+            {
+                task.FixedTick();
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/TaskUpdater.cs.meta b/Assets/Source/Runtime/Managers/TaskUpdater.cs.meta
new file mode 100644
index 0000000..d0aea7c
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/TaskUpdater.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 4e52124c243adb44aaf26eed3a8413c8
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Managers/TickableManager.cs b/Assets/Source/Runtime/Managers/TickableManager.cs
new file mode 100644
index 0000000..72474d7
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/TickableManager.cs
@@ -0,0 +1,232 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+#if ZEN_SIGNALS_ADD_UNIRX
+using UniRx;
+#endif
+
+namespace Zenject
+{
+    public class TickableManager
+    {
+        [Inject(Optional = true, Source = InjectSources.Local)]
+        readonly List<ITickable> _tickables = null;
+
+        [Inject(Optional = true, Source = InjectSources.Local)]
+        readonly List<IFixedTickable> _fixedTickables = null;
+
+        [Inject(Optional = true, Source = InjectSources.Local)]
+        readonly List<ILateTickable> _lateTickables = null;
+
+        [Inject(Optional = true, Source = InjectSources.Local)]
+        readonly List<ValuePair<Type, int>> _priorities = null;
+
+        [Inject(Optional = true, Id = "Fixed", Source = InjectSources.Local)]
+        readonly List<ValuePair<Type, int>> _fixedPriorities = null;
+
+        [Inject(Optional = true, Id = "Late", Source = InjectSources.Local)]
+        readonly List<ValuePair<Type, int>> _latePriorities = null;
+
+#if ZEN_SIGNALS_ADD_UNIRX
+        readonly Subject<Unit> _tickStream = new Subject<Unit>();
+        readonly Subject<Unit> _lateTickStream = new Subject<Unit>();
+        readonly Subject<Unit> _fixedTickStream = new Subject<Unit>();
+#endif
+
+        readonly TickablesTaskUpdater _updater = new TickablesTaskUpdater();
+        readonly FixedTickablesTaskUpdater _fixedUpdater = new FixedTickablesTaskUpdater();
+        readonly LateTickablesTaskUpdater _lateUpdater = new LateTickablesTaskUpdater();
+
+        bool _isPaused;
+
+        [Inject]
+        public TickableManager()
+        {
+        }
+
+#if ZEN_SIGNALS_ADD_UNIRX
+        public IObservable<Unit> TickStream
+        {
+            get { return _tickStream; }
+        }
+
+        public IObservable<Unit> LateTickStream
+        {
+            get { return _lateTickStream; }
+        }
+
+        public IObservable<Unit> FixedTickStream
+        {
+            get { return _fixedTickStream; }
+        }
+#endif
+
+        public IEnumerable<ITickable> Tickables
+        {
+            get { return _tickables; }
+        }
+
+        public bool IsPaused
+        {
+            get { return _isPaused; }
+            set { _isPaused = value; }
+        }
+
+        [Inject]
+        public void Initialize()
+        {
+            InitTickables();
+            InitFixedTickables();
+            InitLateTickables();
+        }
+
+        void InitFixedTickables()
+        {
+            foreach (var type in _fixedPriorities.Select(x => x.First))
+            {
+                Assert.That(type.DerivesFrom<IFixedTickable>(),
+                    "Expected type '{0}' to drive from IFixedTickable while checking priorities in TickableHandler", type);
+            }
+
+            foreach (var tickable in _fixedTickables)
+            {
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var matches = _fixedPriorities.Where(x => tickable.GetType().DerivesFromOrEqual(x.First)).Select(x => x.Second).ToList();
+                int priority = matches.IsEmpty() ? 0 : matches.Distinct().Single();
+
+                _fixedUpdater.AddTask(tickable, priority);
+            }
+        }
+
+        void InitTickables()
+        {
+            foreach (var type in _priorities.Select(x => x.First))
+            {
+                Assert.That(type.DerivesFrom<ITickable>(),
+                    "Expected type '{0}' to drive from ITickable while checking priorities in TickableHandler", type);
+            }
+
+            foreach (var tickable in _tickables)
+            {
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var matches = _priorities.Where(x => tickable.GetType().DerivesFromOrEqual(x.First)).Select(x => x.Second).ToList();
+                int priority = matches.IsEmpty() ? 0 : matches.Distinct().Single();
+
+                _updater.AddTask(tickable, priority);
+            }
+        }
+
+        void InitLateTickables()
+        {
+            foreach (var type in _latePriorities.Select(x => x.First))
+            {
+                Assert.That(type.DerivesFrom<ILateTickable>(),
+                    "Expected type '{0}' to drive from ILateTickable while checking priorities in TickableHandler", type);
+            }
+
+            foreach (var tickable in _lateTickables)
+            {
+                // Note that we use zero for unspecified priority
+                // This is nice because you can use negative or positive for before/after unspecified
+                var matches = _latePriorities.Where(x => tickable.GetType().DerivesFromOrEqual(x.First)).Select(x => x.Second).ToList();
+                int priority = matches.IsEmpty() ? 0 : matches.Distinct().Single();
+
+                _lateUpdater.AddTask(tickable, priority);
+            }
+        }
+
+        public void Add(ITickable tickable, int priority)
+        {
+            _updater.AddTask(tickable, priority);
+        }
+
+        public void Add(ITickable tickable)
+        {
+            Add(tickable, 0);
+        }
+
+        public void AddLate(ILateTickable tickable, int priority)
+        {
+            _lateUpdater.AddTask(tickable, priority);
+        }
+
+        public void AddLate(ILateTickable tickable)
+        {
+            AddLate(tickable, 0);
+        }
+
+        public void AddFixed(IFixedTickable tickable, int priority)
+        {
+            _fixedUpdater.AddTask(tickable, priority);
+        }
+
+        public void AddFixed(IFixedTickable tickable)
+        {
+            _fixedUpdater.AddTask(tickable, 0);
+        }
+
+        public void Remove(ITickable tickable)
+        {
+            _updater.RemoveTask(tickable);
+        }
+
+        public void RemoveLate(ILateTickable tickable)
+        {
+            _lateUpdater.RemoveTask(tickable);
+        }
+
+        public void RemoveFixed(IFixedTickable tickable)
+        {
+            _fixedUpdater.RemoveTask(tickable);
+        }
+
+        public void Update()
+        {
+            if(IsPaused)
+            {
+                return;
+            }
+
+            _updater.OnFrameStart();
+            _updater.UpdateAll();
+
+#if ZEN_SIGNALS_ADD_UNIRX
+            _tickStream.OnNext(Unit.Default);
+#endif
+        }
+
+        public void FixedUpdate()
+        {
+            if(IsPaused)
+            {
+                return;
+            }
+
+            _fixedUpdater.OnFrameStart();
+            _fixedUpdater.UpdateAll();
+
+#if ZEN_SIGNALS_ADD_UNIRX
+            _fixedTickStream.OnNext(Unit.Default);
+#endif
+        }
+
+        public void LateUpdate()
+        {
+            if(IsPaused)
+            {
+                return;
+            }
+
+            _lateUpdater.OnFrameStart();
+            _lateUpdater.UpdateAll();
+
+#if ZEN_SIGNALS_ADD_UNIRX
+            _lateTickStream.OnNext(Unit.Default);
+#endif
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Managers/TickableManager.cs.meta b/Assets/Source/Runtime/Managers/TickableManager.cs.meta
new file mode 100644
index 0000000..19bb9c5
--- /dev/null
+++ b/Assets/Source/Runtime/Managers/TickableManager.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2fa54cf0e36bd194faa8f877e9f699a4
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers.meta b/Assets/Source/Runtime/Providers.meta
new file mode 100644
index 0000000..3315ee1
--- /dev/null
+++ b/Assets/Source/Runtime/Providers.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: bd5ba0ff0ad7f874f8938a3266c21d4f
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs b/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs
new file mode 100644
index 0000000..bf4244b
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs
@@ -0,0 +1,158 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class CachedOpenTypeProvider : IProvider
+    {
+        readonly IProvider _creator;
+        readonly List<List<object>> _cachedInstances = new List<List<object>>();
+
+#if ZEN_MULTITHREADING
+        readonly object _locker = new object();
+#else
+        bool _isCreatingInstance;
+#endif
+
+        public CachedOpenTypeProvider(IProvider creator)
+        {
+            Assert.That(creator.TypeVariesBasedOnMemberType);
+            _creator = creator;
+        }
+
+        public bool IsCached
+        {
+            get { return true; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get
+            {
+                // Should not call this
+                throw Assert.CreateException();
+            }
+        }
+
+        public int NumInstances
+        {
+            get
+            {
+#if ZEN_MULTITHREADING
+                lock (_locker)
+#endif
+                {
+                    return _cachedInstances.Select(x => x.Count).Sum();
+                }
+            }
+        }
+
+        // This method can be called if you want to clear the memory for an AsSingle instance,
+        // See isssue https://github.com/svermeulen/Zenject/issues/441
+        public void ClearCache()
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                _cachedInstances.Clear();
+            }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _creator.GetInstanceType(context);
+        }
+
+        List<object> TryGetMatchFromCache(Type memberType)
+        {
+            List<object> result = null;
+
+            for (int i = 0; i < _cachedInstances.Count; i++) 
+            {
+                var instanceList = _cachedInstances[i];
+
+                bool matchesAll = true;
+
+                for (int k = 0; k < instanceList.Count; k++) 
+                {
+                    var instance = instanceList[k];
+
+                    if (instance == null) 
+                    {
+                        if (memberType.IsValueType()) 
+                        {
+                            matchesAll = false;
+                            break;
+                        }
+
+                        continue;
+                    }
+
+                    if (!instance.GetType().DerivesFromOrEqual(memberType)) 
+                    {
+                        matchesAll = false;
+                        break;
+                    }
+                }
+
+                if (matchesAll) 
+                {
+                    Assert.IsNull(result); // Is there any case where this is hit?
+                    result = instanceList;
+                }
+            }
+
+            return result;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                var instances = TryGetMatchFromCache(context.MemberType);
+
+                if (instances != null)
+                {
+                    injectAction = null;
+                    buffer.AllocFreeAddRange(instances);
+                    return;
+                }
+
+#if !ZEN_MULTITHREADING
+                // This should only happen with constructor injection
+                // Field or property injection should allow circular dependencies
+                if (_isCreatingInstance)
+                {
+                    var instanceType = _creator.GetInstanceType(context);
+                    throw Assert.CreateException(
+                        "Found circular dependency when creating type '{0}'. Object graph:\n {1}{2}\n",
+                        instanceType, context.GetObjectGraphString(), instanceType);
+                }
+
+                _isCreatingInstance = true;
+#endif
+
+                instances = new List<object>();
+                _creator.GetAllInstancesWithInjectSplit(
+                    context, args, out injectAction, instances);
+                Assert.IsNotNull(instances);
+
+                _cachedInstances.Add(instances);
+#if !ZEN_MULTITHREADING
+                _isCreatingInstance = false;
+#endif
+                buffer.AllocFreeAddRange(instances);
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs.meta b/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs.meta
new file mode 100644
index 0000000..2001569
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/CachedOpenTypeProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 4a09a4770eaace44a84d9d627f0bd161
+timeCreated: 1528211680
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/CachedProvider.cs b/Assets/Source/Runtime/Providers/CachedProvider.cs
new file mode 100644
index 0000000..f883a44
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/CachedProvider.cs
@@ -0,0 +1,111 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class CachedProvider : IProvider
+    {
+        readonly IProvider _creator;
+
+        List<object> _instances;
+
+#if ZEN_MULTITHREADING
+        readonly object _locker = new object();
+#else
+        bool _isCreatingInstance;
+#endif
+
+        public CachedProvider(IProvider creator)
+        {
+            _creator = creator;
+        }
+
+        public bool IsCached
+        {
+            get { return true; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get
+            {
+                // Should not call this
+                throw Assert.CreateException();
+            }
+        }
+
+        public int NumInstances
+        {
+            get
+            {
+#if ZEN_MULTITHREADING
+                lock (_locker)
+#endif
+                {
+                    return _instances == null ? 0 : _instances.Count;
+                }
+            }
+        }
+
+        // This method can be called if you want to clear the memory for an AsSingle instance,
+        // See isssue https://github.com/svermeulen/Zenject/issues/441
+        public void ClearCache()
+        {
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                _instances = null;
+            }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _creator.GetInstanceType(context);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                if (_instances != null)
+                {
+                    injectAction = null;
+                    buffer.AllocFreeAddRange(_instances);
+                    return;
+                }
+
+#if !ZEN_MULTITHREADING
+                // This should only happen with constructor injection
+                // Field or property injection should allow circular dependencies
+                if (_isCreatingInstance)
+                {
+                    var instanceType = _creator.GetInstanceType(context);
+                    throw Assert.CreateException(
+                        "Found circular dependency when creating type '{0}'. Object graph:\n {1}{2}\n",
+                        instanceType, context.GetObjectGraphString(), instanceType);
+                }
+
+                _isCreatingInstance = true;
+#endif
+
+                var instances = new List<object>();
+                _creator.GetAllInstancesWithInjectSplit(context, args, out injectAction, instances);
+                Assert.IsNotNull(instances);
+
+                _instances = instances;
+#if !ZEN_MULTITHREADING
+                _isCreatingInstance = false;
+#endif
+                buffer.AllocFreeAddRange(instances);
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/CachedProvider.cs.meta b/Assets/Source/Runtime/Providers/CachedProvider.cs.meta
new file mode 100644
index 0000000..fb61ad6
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/CachedProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e6e16beb21a2f0d4db901700c6ed3099
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders.meta b/Assets/Source/Runtime/Providers/ComponentProviders.meta
new file mode 100644
index 0000000..a80c2db
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: d80a7db637267834388a31f2b7ddcf36
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders.meta b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders.meta
new file mode 100644
index 0000000..185e41a
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 5a0ec9eb479742940a10701ec8a1d087
+folderAsset: yes
+timeCreated: 1461708047
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs
new file mode 100644
index 0000000..d12444f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs
@@ -0,0 +1,121 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AddToCurrentGameObjectComponentProvider : IProvider
+    {
+        readonly Type _componentType;
+        readonly DiContainer _container;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly object _concreteIdentifier;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public AddToCurrentGameObjectComponentProvider(
+            DiContainer container, Type componentType,
+            IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            Assert.That(componentType.DerivesFrom<Component>());
+
+            _extraArguments = extraArguments.ToList();
+            _componentType = componentType;
+            _container = container;
+            _concreteIdentifier = concreteIdentifier;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        protected Type ComponentType
+        {
+            get { return _componentType; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            Assert.That(context.ObjectType.DerivesFrom<Component>(),
+                "Object '{0}' can only be injected into MonoBehaviour's since it was bound with 'FromNewComponentSibling'. Attempted to inject into non-MonoBehaviour '{1}'",
+                context.MemberType, context.ObjectType);
+
+            object instance;
+
+            if (!_container.IsValidating || TypeAnalyzer.ShouldAllowDuringValidation(_componentType))
+            {
+                var gameObj = ((Component)context.ObjectInstance).gameObject;
+
+                var componentInstance = gameObj.GetComponent(_componentType);
+                instance = componentInstance;
+
+                // Use componentInstance so that it triggers unity's overloaded comparison operator
+                // So if the component is there but missing then it returns null
+                // (https://github.com/svermeulen/Zenject/issues/582)
+                if (componentInstance != null)
+                {
+                    injectAction = null;
+                    buffer.Add(instance);
+                    return;
+                }
+
+                instance = gameObj.AddComponent(_componentType);
+            }
+            else
+            {
+                instance = new ValidationMarker(_componentType);
+            }
+
+            // Note that we don't just use InstantiateComponentOnNewGameObjectExplicit here
+            // because then circular references don't work
+
+            injectAction = () =>
+            {
+                var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                extraArgs.AllocFreeAddRange(_extraArguments);
+                extraArgs.AllocFreeAddRange(args);
+
+                _container.InjectExplicit(instance, _componentType, extraArgs, context, _concreteIdentifier);
+
+                Assert.That(extraArgs.IsEmpty());
+                ZenPools.DespawnList(extraArgs);
+
+                if (_instantiateCallback != null)
+                {
+                    _instantiateCallback(context, instance);
+                }
+            };
+
+            buffer.Add(instance);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs.meta
new file mode 100644
index 0000000..1ff8f07
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToCurrentGameObjectComponentProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3b0521d85aeb9ee479dcb29ef4d88547
+timeCreated: 1465651364
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs
new file mode 100644
index 0000000..a57e3f9
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs
@@ -0,0 +1,69 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AddToExistingGameObjectComponentProvider : AddToGameObjectComponentProviderBase
+    {
+        readonly GameObject _gameObject;
+
+        public AddToExistingGameObjectComponentProvider(
+            GameObject gameObject, DiContainer container, Type componentType,
+            IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+            : base(container, componentType, extraArguments, concreteIdentifier, instantiateCallback)
+        {
+            _gameObject = gameObject;
+        }
+
+        // This will cause [Inject] to be triggered after awake / start
+        // We could return true, but what if toggling active has other negative repercussions?
+        // For now let's just not do anything
+        protected override bool ShouldToggleActive
+        {
+            get { return false; }
+        }
+
+        protected override GameObject GetGameObject(InjectContext context)
+        {
+            return _gameObject;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class AddToExistingGameObjectComponentProviderGetter : AddToGameObjectComponentProviderBase
+    {
+        readonly Func<InjectContext, GameObject> _gameObjectGetter;
+
+        public AddToExistingGameObjectComponentProviderGetter(
+            Func<InjectContext, GameObject> gameObjectGetter, DiContainer container, Type componentType,
+            List<TypeValuePair> extraArguments, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+            : base(container, componentType, extraArguments, concreteIdentifier, instantiateCallback)
+        {
+            _gameObjectGetter = gameObjectGetter;
+        }
+
+        // This will cause [Inject] to be triggered after awake / start
+        // We could return true, but what if toggling active has other negative repercussions?
+        // For now let's just not do anything
+        protected override bool ShouldToggleActive
+        {
+            get { return false; }
+        }
+
+        protected override GameObject GetGameObject(InjectContext context)
+        {
+            var gameObj = _gameObjectGetter(context);
+            Assert.IsNotNull(gameObj, "Provided Func<InjectContext, GameObject> returned null value for game object when using FromComponentOn");
+            return gameObj;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs.meta
new file mode 100644
index 0000000..bcb1930
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToExistingGameObjectComponentProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 669e8af5b17774d45acea73d348e6dca
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs
new file mode 100644
index 0000000..3ab95aa
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs
@@ -0,0 +1,142 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class AddToGameObjectComponentProviderBase : IProvider
+    {
+        readonly Type _componentType;
+        readonly DiContainer _container;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly object _concreteIdentifier;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public AddToGameObjectComponentProviderBase(
+            DiContainer container, Type componentType,
+            IEnumerable<TypeValuePair> extraArguments, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            Assert.That(componentType.DerivesFrom<Component>());
+
+            _extraArguments = extraArguments.ToList();
+            _componentType = componentType;
+            _container = container;
+            _concreteIdentifier = concreteIdentifier;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        protected Type ComponentType
+        {
+            get { return _componentType; }
+        }
+
+        protected abstract bool ShouldToggleActive
+        {
+            get;
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            object instance;
+
+            // We still want to make sure we can get the game object during validation
+            var gameObj = GetGameObject(context);
+
+            var wasActive = gameObj.activeSelf;
+
+            if (wasActive && ShouldToggleActive)
+            {
+                // We need to do this in some cases to ensure that [Inject] always gets
+                // called before awake / start
+                gameObj.SetActive(false);
+            }
+
+            if (!_container.IsValidating || TypeAnalyzer.ShouldAllowDuringValidation(_componentType))
+            {
+                if (_componentType == typeof(Transform))
+                    // Treat transform as a special case because it's the one component that's always automatically added
+                    // Otherwise, calling AddComponent below will fail and return null
+                    // This is nice to allow doing things like
+                    //      Container.Bind<Transform>().FromNewComponentOnNewGameObject();
+                {
+                    instance = gameObj.transform;
+                }
+                else
+                {
+                    instance = gameObj.AddComponent(_componentType);
+                }
+
+                Assert.IsNotNull(instance);
+            }
+            else
+            {
+                instance = new ValidationMarker(_componentType);
+            }
+
+            injectAction = () =>
+            {
+                try
+                {
+                    var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                    extraArgs.AllocFreeAddRange(_extraArguments);
+                    extraArgs.AllocFreeAddRange(args);
+
+                    _container.InjectExplicit(instance, _componentType, extraArgs, context, _concreteIdentifier);
+
+                    Assert.That(extraArgs.Count == 0);
+
+                    ZenPools.DespawnList(extraArgs);
+
+                    if (_instantiateCallback != null)
+                    {
+                        _instantiateCallback(context, instance);
+                    }
+                }
+                finally
+                {
+                    if (wasActive && ShouldToggleActive)
+                    {
+                        gameObj.SetActive(true);
+                    }
+                }
+            };
+
+            buffer.Add(instance);
+        }
+
+        protected abstract GameObject GetGameObject(InjectContext context);
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs.meta
new file mode 100644
index 0000000..afc3fde
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToGameObjectComponentProviderBase.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d818f8110e5b31d4eb27001e5c5b3eb9
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs
new file mode 100644
index 0000000..099f17a
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs
@@ -0,0 +1,41 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class AddToNewGameObjectComponentProvider : AddToGameObjectComponentProviderBase
+    {
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+
+        public AddToNewGameObjectComponentProvider(
+            DiContainer container, Type componentType,
+            IEnumerable<TypeValuePair> extraArguments, GameObjectCreationParameters gameObjectBindInfo,
+            object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+            : base(container, componentType, extraArguments, concreteIdentifier, instantiateCallback)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+        }
+
+        protected override bool ShouldToggleActive
+        {
+            get { return true; }
+        }
+
+        protected override GameObject GetGameObject(InjectContext context)
+        {
+            if (_gameObjectBindInfo.Name == null)
+            {
+                _gameObjectBindInfo.Name = ComponentType.Name;
+            }
+
+            return Container.CreateEmptyGameObject(_gameObjectBindInfo, context);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs.meta
new file mode 100644
index 0000000..213de8d
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/AddToGameObjectComponentProviders/AddToNewGameObjectComponentProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 6e1085d337c03dd42a1d5493c11d9d23
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs
new file mode 100644
index 0000000..c9ba453
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs
@@ -0,0 +1,71 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class GetFromGameObjectComponentProvider : IProvider
+    {
+        readonly GameObject _gameObject;
+        readonly Type _componentType;
+        readonly bool _matchSingle;
+
+        // if concreteType is null we use the contract type from inject context
+        public GetFromGameObjectComponentProvider(
+            Type componentType, GameObject gameObject, bool matchSingle)
+        {
+            _componentType = componentType;
+            _matchSingle = matchSingle;
+            _gameObject = gameObject;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            injectAction = null;
+
+            if (_matchSingle)
+            {
+                var match = _gameObject.GetComponent(_componentType);
+
+                Assert.IsNotNull(match, "Could not find component with type '{0}' on prefab '{1}'",
+                _componentType, _gameObject.name);
+
+                buffer.Add(match);
+                return;
+            }
+
+            var allComponents = _gameObject.GetComponents(_componentType);
+
+            Assert.That(allComponents.Length >= 1,
+            "Expected to find at least one component with type '{0}' on prefab '{1}'",
+            _componentType, _gameObject.name);
+
+            buffer.AllocFreeAddRange(allComponents);
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs.meta
new file mode 100644
index 0000000..8cebf61
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectComponentProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 8d5cdba9f2e79364dbf4f3d242fd22da
+timeCreated: 1529229722
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs
new file mode 100644
index 0000000..7d9bbc7
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs
@@ -0,0 +1,81 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class GetFromGameObjectGetterComponentProvider : IProvider
+    {
+        readonly Func<InjectContext, GameObject> _gameObjectGetter;
+        readonly Type _componentType;
+        readonly bool _matchSingle;
+
+        // if concreteType is null we use the contract type from inject context
+        public GetFromGameObjectGetterComponentProvider(
+            Type componentType, Func<InjectContext, GameObject> gameObjectGetter, bool matchSingle)
+        {
+            _componentType = componentType;
+            _matchSingle = matchSingle;
+            _gameObjectGetter = gameObjectGetter;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            injectAction = null;
+
+            if (context.Container.IsValidating)
+            {
+                buffer.Add(new ValidationMarker(_componentType));
+            }
+            else
+            {
+                var gameObject = _gameObjectGetter(context);
+
+                if (_matchSingle)
+                {
+                    var match = gameObject.GetComponent(_componentType);
+
+                    Assert.IsNotNull(match, "Could not find component with type '{0}' on game object '{1}'",
+                    _componentType, gameObject.name);
+
+                    buffer.Add(match);
+                    return;
+                }
+
+                var allComponents = gameObject.GetComponents(_componentType);
+
+                Assert.That(allComponents.Length >= 1,
+                "Expected to find at least one component with type '{0}' on prefab '{1}'",
+                _componentType, gameObject.name);
+
+                buffer.AllocFreeAddRange(allComponents);
+            }
+        }
+    }
+}
+
+#endif
+
+
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs.meta
new file mode 100644
index 0000000..2b30399
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromGameObjectGetterComponentProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 766643a5935eb704a929da28681bf70e
+timeCreated: 1529230207
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs
new file mode 100644
index 0000000..ff16b47
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs
@@ -0,0 +1,74 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class GetFromPrefabComponentProvider : IProvider
+    {
+        readonly IPrefabInstantiator _prefabInstantiator;
+        readonly Type _componentType;
+        readonly bool _matchSingle;
+
+        // if concreteType is null we use the contract type from inject context
+        public GetFromPrefabComponentProvider(
+            Type componentType,
+            IPrefabInstantiator prefabInstantiator, bool matchSingle)
+        {
+            _prefabInstantiator = prefabInstantiator;
+            _componentType = componentType;
+            _matchSingle = matchSingle;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            var gameObject = _prefabInstantiator.Instantiate(context, args, out injectAction);
+
+            // NOTE: Need to set includeInactive to true here, because prefabs are always
+            // instantiated as disabled until injection occurs, so that Awake / OnEnabled is executed
+            // after injection has occurred
+
+            if (_matchSingle)
+            {
+                var match = gameObject.GetComponentInChildren(_componentType, true);
+
+                Assert.IsNotNull(match, "Could not find component with type '{0}' on prefab '{1}'",
+                _componentType, _prefabInstantiator.GetPrefab(context).name);
+
+                buffer.Add(match);
+                return;
+            }
+
+            var allComponents = gameObject.GetComponentsInChildren(_componentType, true);
+
+            Assert.That(allComponents.Length >= 1,
+                "Expected to find at least one component with type '{0}' on prefab '{1}'",
+                _componentType, _prefabInstantiator.GetPrefab(context).name);
+
+            buffer.AllocFreeAddRange(allComponents);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs.meta
new file mode 100644
index 0000000..b31aeff
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/GetFromPrefabComponentProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e6a49432e004bd8409d3ddea6a45a3f8
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs b/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs
new file mode 100644
index 0000000..dd691f2
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs
@@ -0,0 +1,54 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class InstantiateOnPrefabComponentProvider : IProvider
+    {
+        readonly IPrefabInstantiator _prefabInstantiator;
+        readonly Type _componentType;
+
+        // if concreteType is null we use the contract type from inject context
+        public InstantiateOnPrefabComponentProvider(
+            Type componentType,
+            IPrefabInstantiator prefabInstantiator)
+        {
+            _prefabInstantiator = prefabInstantiator;
+            _componentType = componentType;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _componentType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            var gameObject = _prefabInstantiator.Instantiate(context, args, out injectAction);
+
+            var component = gameObject.AddComponent(_componentType);
+
+            buffer.Add(component);
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs.meta b/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs.meta
new file mode 100644
index 0000000..4cac4db
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ComponentProviders/InstantiateOnPrefabComponentProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e6836adf19243a045ba39e67ade6dd59
+timeCreated: 1505729206
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/Decorator.meta b/Assets/Source/Runtime/Providers/Decorator.meta
new file mode 100644
index 0000000..d890fc3
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/Decorator.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 88c8658f07bf600408a596245682c306
+folderAsset: yes
+timeCreated: 1528368268
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs b/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs
new file mode 100644
index 0000000..c3e7b2f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs
@@ -0,0 +1,103 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject.Internal
+{
+    public interface IDecoratorProvider
+    {
+        void GetAllInstances(
+            IProvider provider, InjectContext context, List<object> buffer);
+    }
+
+    [NoReflectionBaking]
+    public class DecoratorProvider<TContract> : IDecoratorProvider
+    {
+        readonly Dictionary<IProvider, List<object>> _cachedInstances =
+            new Dictionary<IProvider, List<object>>();
+
+        readonly DiContainer _container;
+        readonly List<Guid> _factoryBindIds = new List<Guid>();
+
+        List<IFactory<TContract, TContract>> _decoratorFactories;
+
+#if ZEN_MULTITHREADING
+        readonly object _locker = new object();
+#endif
+
+        public DecoratorProvider(DiContainer container)
+        {
+            _container = container;
+        }
+
+        public void AddFactoryId(Guid factoryBindId)
+        {
+            _factoryBindIds.Add(factoryBindId);
+        }
+
+        void LazyInitializeDecoratorFactories()
+        {
+            if (_decoratorFactories == null)
+            {
+                _decoratorFactories = new List<IFactory<TContract, TContract>>();
+
+                for (int i = 0; i < _factoryBindIds.Count; i++)
+                {
+                    var bindId = _factoryBindIds[i];
+                    var factory = _container.ResolveId<IFactory<TContract, TContract>>(bindId);
+                    _decoratorFactories.Add(factory);
+                }
+            }
+        }
+
+        public void GetAllInstances(
+            IProvider provider, InjectContext context, List<object> buffer)
+        {
+            if (provider.IsCached)
+            {
+                List<object> instances;
+
+#if ZEN_MULTITHREADING
+                lock (_locker)
+#endif
+                {
+                    if (!_cachedInstances.TryGetValue(provider, out instances))
+                    {
+                        instances = new List<object>();
+                        WrapProviderInstances(provider, context, instances);
+                        _cachedInstances.Add(provider, instances);
+                    }
+                }
+
+                buffer.AllocFreeAddRange(instances);
+            }
+            else
+            {
+                WrapProviderInstances(provider, context, buffer);
+            }
+        }
+
+        void WrapProviderInstances(IProvider provider, InjectContext context, List<object> buffer)
+        {
+            LazyInitializeDecoratorFactories();
+
+            provider.GetAllInstances(context, buffer);
+
+            for (int i = 0; i < buffer.Count; i++)
+            {
+                buffer[i] = DecorateInstance(buffer[i], context);
+            }
+        }
+
+        object DecorateInstance(object instance, InjectContext context)
+        {
+            for (int i = 0; i < _decoratorFactories.Count; i++)
+            {
+                instance = _decoratorFactories[i].Create(
+                    context.Container.IsValidating ? default(TContract) : (TContract)instance);
+            }
+
+            return instance;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs.meta b/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs.meta
new file mode 100644
index 0000000..097a3b0
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/Decorator/DecoratorProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7a9aaabef2c47874a8b557ade27987eb
+timeCreated: 1528368269
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/GameObjectProviders.meta b/Assets/Source/Runtime/Providers/GameObjectProviders.meta
new file mode 100644
index 0000000..d78c355
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GameObjectProviders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 5c4a4be4639cdfc4c8d00456887fefb6
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs b/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs
new file mode 100644
index 0000000..81e303e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs
@@ -0,0 +1,52 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class EmptyGameObjectProvider : IProvider
+    {
+        readonly DiContainer _container;
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+
+        public EmptyGameObjectProvider(
+            DiContainer container, GameObjectCreationParameters gameObjectBindInfo)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _container = container;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(GameObject);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+
+            injectAction = null;
+
+            var gameObj = _container.CreateEmptyGameObject(_gameObjectBindInfo, context);
+            buffer.Add(gameObj);
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs.meta b/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs.meta
new file mode 100644
index 0000000..4d0f959
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GameObjectProviders/EmptyGameObjectProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f8f4db421196f5849b2139200fdea1a3
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs b/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs
new file mode 100644
index 0000000..4b8687a
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs
@@ -0,0 +1,45 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabGameObjectProvider : IProvider
+    {
+        readonly IPrefabInstantiator _prefabCreator;
+
+        public PrefabGameObjectProvider(
+            IPrefabInstantiator prefabCreator)
+        {
+            _prefabCreator = prefabCreator;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(GameObject);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            var instance = _prefabCreator.Instantiate(context, args, out injectAction);
+
+            buffer.Add(instance);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs.meta b/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs.meta
new file mode 100644
index 0000000..1020383
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GameObjectProviders/PrefabGameObjectProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d776b7406750d7f4c816cd0c03e4e254
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/GetterProvider.cs b/Assets/Source/Runtime/Providers/GetterProvider.cs
new file mode 100644
index 0000000..23fd5dc
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GetterProvider.cs
@@ -0,0 +1,96 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class GetterProvider<TObj, TResult> : IProvider
+    {
+        readonly DiContainer _container;
+        readonly object _identifier;
+        readonly Func<TObj, TResult> _method;
+        readonly bool _matchAll;
+        readonly InjectSources _sourceType;
+
+        public GetterProvider(
+            object identifier, Func<TObj, TResult> method,
+            DiContainer container, InjectSources sourceType, bool matchAll)
+        {
+            _container = container;
+            _identifier = identifier;
+            _method = method;
+            _matchAll = matchAll;
+            _sourceType = sourceType;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TResult);
+        }
+
+        InjectContext GetSubContext(InjectContext parent)
+        {
+            var subContext = parent.CreateSubContext(
+                typeof(TObj), _identifier);
+
+            subContext.Optional = false;
+            subContext.SourceType = _sourceType;
+
+            return subContext;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TResult).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+
+            if (_container.IsValidating)
+            {
+                // All we can do is validate that the getter object can be resolved
+                if (_matchAll)
+                {
+                    _container.ResolveAll(GetSubContext(context));
+                }
+                else
+                {
+                    _container.Resolve(GetSubContext(context));
+                }
+
+                buffer.Add(new ValidationMarker(typeof(TResult)));
+                return;
+            }
+
+            if (_matchAll)
+            {
+                Assert.That(buffer.Count == 0);
+                _container.ResolveAll(GetSubContext(context), buffer);
+
+                for (int i = 0; i < buffer.Count; i++)
+                {
+                    buffer[i] = _method((TObj)buffer[i]);
+                }
+            }
+            else
+            {
+                buffer.Add(_method(
+                    (TObj)_container.Resolve(GetSubContext(context))));
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/GetterProvider.cs.meta b/Assets/Source/Runtime/Providers/GetterProvider.cs.meta
new file mode 100644
index 0000000..4d231ad
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/GetterProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: ce3e2ecdd52e4db469d9bc497ff5e5f5
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/IFactoryProvider.cs b/Assets/Source/Runtime/Providers/IFactoryProvider.cs
new file mode 100644
index 0000000..517ccca
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IFactoryProvider.cs
@@ -0,0 +1,396 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    public abstract class IFactoryProviderBase<TContract> : IProvider
+    {
+        public IFactoryProviderBase(
+            DiContainer container, Guid factoryId)
+        {
+            Container = container;
+            FactoryId = factoryId;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        protected Guid FactoryId
+        {
+            get;
+            private set;
+        }
+
+        protected DiContainer Container
+        {
+            get;
+            private set;
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TContract);
+        }
+
+        public abstract void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer);
+    }
+
+    // Zero parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(
+            DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.That(args.IsEmpty());
+
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(((IFactory<TContract>)factory).Create());
+            }
+        }
+    }
+
+    // One parameter
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(((IFactory<TParam1, TContract>)factory).Create((TParam1)args[0].Value));
+            }
+        }
+    }
+
+    // Two parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value));
+            }
+        }
+    }
+
+    // Three parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TParam3, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TParam3, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TParam3, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value));
+            }
+        }
+    }
+
+    // Four parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TParam3, TParam4, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TParam3, TParam4, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value));
+            }
+        }
+    }
+
+    // Five parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value));
+            }
+        }
+    }
+
+    // Six parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 6);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value,
+                        (TParam6)args[5].Value));
+            }
+        }
+    }
+
+    // Ten parameters
+
+    [NoReflectionBaking]
+    public class IFactoryProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract> : IFactoryProviderBase<TContract>
+    {
+        public IFactoryProvider(DiContainer container, Guid factoryId)
+            : base(container, factoryId)
+        {
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 10);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+            Assert.That(args[6].Type.DerivesFromOrEqual<TParam7>());
+            Assert.That(args[7].Type.DerivesFromOrEqual<TParam8>());
+            Assert.That(args[8].Type.DerivesFromOrEqual<TParam9>());
+            Assert.That(args[9].Type.DerivesFromOrEqual<TParam10>());
+
+            // Do this even when validating in case it has its own dependencies
+            var factory = Container.ResolveId(typeof(IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>), FactoryId);
+
+            injectAction = null;
+            if (Container.IsValidating)
+            {
+                // We assume here that we are creating a user-defined factory so there's
+                // nothing else we can validate here
+                buffer.Add(new ValidationMarker(typeof(TContract)));
+            }
+            else
+            {
+                buffer.Add(
+                    ((IFactory<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>)factory).Create(
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value,
+                        (TParam6)args[5].Value,
+                        (TParam7)args[6].Value,
+                        (TParam8)args[7].Value,
+                        (TParam9)args[8].Value,
+                        (TParam10)args[9].Value));
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/IFactoryProvider.cs.meta b/Assets/Source/Runtime/Providers/IFactoryProvider.cs.meta
new file mode 100644
index 0000000..9391463
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IFactoryProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: eaf07c2b7ad9f684dac7f1da2ee67f5c
+timeCreated: 1520700396
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/IProvider.cs b/Assets/Source/Runtime/Providers/IProvider.cs
new file mode 100644
index 0000000..7e0b2a7
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IProvider.cs
@@ -0,0 +1,29 @@
+using System;
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    // The given InjectContext values here should always be non-null
+    public interface IProvider
+    {
+        bool TypeVariesBasedOnMemberType
+        {
+            get;
+        }
+
+        bool IsCached
+        {
+            get;
+        }
+
+        Type GetInstanceType(InjectContext context);
+
+        // Return an instance which might be not yet injected to.
+        // injectAction should handle the actual injection
+        // This way, providers that call CreateInstance() can store the instance immediately,
+        // and then return that if something gets created during injection that refers back
+        // to the newly created instance
+        void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> instances);
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/IProvider.cs.meta b/Assets/Source/Runtime/Providers/IProvider.cs.meta
new file mode 100644
index 0000000..7ae39bb
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 438b6366f2f1221448e9a71e09ac0329
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/IProviderExtensions.cs b/Assets/Source/Runtime/Providers/IProviderExtensions.cs
new file mode 100644
index 0000000..67a1a60
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IProviderExtensions.cs
@@ -0,0 +1,99 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public static class IProviderExtensions
+    {
+        static readonly List<TypeValuePair> EmptyArgList = new List<TypeValuePair>();
+
+        public static void GetAllInstancesWithInjectSplit(
+            this IProvider creator, InjectContext context, out Action injectAction, List<object> buffer)
+        {
+            creator.GetAllInstancesWithInjectSplit(
+                context, EmptyArgList, out injectAction, buffer);
+        }
+
+        public static void GetAllInstances(
+            this IProvider creator, InjectContext context, List<object> buffer)
+        {
+            creator.GetAllInstances(context, EmptyArgList, buffer);
+        }
+
+        public static void GetAllInstances(
+            this IProvider creator, InjectContext context, List<TypeValuePair> args, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            Action injectAction;
+            creator.GetAllInstancesWithInjectSplit(context, args, out injectAction, buffer);
+
+            if (injectAction != null)
+            {
+                injectAction.Invoke();
+            }
+        }
+
+        public static object TryGetInstance(
+            this IProvider creator, InjectContext context)
+        {
+            return creator.TryGetInstance(context, EmptyArgList);
+        }
+
+        public static object TryGetInstance(
+            this IProvider creator, InjectContext context, List<TypeValuePair> args)
+        {
+            var allInstances = ZenPools.SpawnList<object>();
+
+            try
+            {
+                creator.GetAllInstances(context, args, allInstances);
+
+                if (allInstances.Count == 0)
+                {
+                    return null;
+                }
+
+                Assert.That(allInstances.Count == 1,
+                    "Provider returned multiple instances when one or zero was expected");
+
+                return allInstances[0];
+            }
+            finally
+            {
+                ZenPools.DespawnList(allInstances);
+            }
+        }
+
+        public static object GetInstance(
+            this IProvider creator, InjectContext context)
+        {
+            return creator.GetInstance(context, EmptyArgList);
+        }
+
+        public static object GetInstance(
+            this IProvider creator, InjectContext context, List<TypeValuePair> args)
+        {
+            var allInstances = ZenPools.SpawnList<object>();
+
+            try
+            {
+                creator.GetAllInstances(context, args, allInstances);
+
+                Assert.That(allInstances.Count > 0,
+                    "Provider returned zero instances when one was expected when looking up type '{0}'", context.MemberType);
+
+                Assert.That(allInstances.Count == 1,
+                    "Provider returned multiple instances when only one was expected when looking up type '{0}'", context.MemberType);
+
+                return allInstances[0];
+            }
+            finally
+            {
+                ZenPools.DespawnList(allInstances);
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/IProviderExtensions.cs.meta b/Assets/Source/Runtime/Providers/IProviderExtensions.cs.meta
new file mode 100644
index 0000000..14d8a70
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/IProviderExtensions.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 2377e3000d1616e4d8cb29c183f216b4
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/InstanceProvider.cs b/Assets/Source/Runtime/Providers/InstanceProvider.cs
new file mode 100644
index 0000000..a29f15e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/InstanceProvider.cs
@@ -0,0 +1,60 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class InstanceProvider : IProvider
+    {
+        readonly object _instance;
+        readonly Type _instanceType;
+        readonly DiContainer _container;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public InstanceProvider(
+            Type instanceType, object instance, DiContainer container, Action<InjectContext, object> instantiateCallback)
+        {
+            _instanceType = instanceType;
+            _instance = instance;
+            _container = container;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return true; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _instanceType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.That(args.Count == 0);
+            Assert.IsNotNull(context);
+
+            Assert.That(_instanceType.DerivesFromOrEqual(context.MemberType));
+
+            injectAction = () =>
+            {
+                object instance = _container.LazyInject(_instance);
+
+                if (_instantiateCallback != null)
+                {
+                    _instantiateCallback(context, instance);
+                }
+            };
+
+            buffer.Add(_instance);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/InstanceProvider.cs.meta b/Assets/Source/Runtime/Providers/InstanceProvider.cs.meta
new file mode 100644
index 0000000..70c7c1d
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/InstanceProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 1d3d5b3bdf966444099f2dfdf3a313fd
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs b/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs
new file mode 100644
index 0000000..39385eb
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs
@@ -0,0 +1,66 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MethodMultipleProviderUntyped : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Func<InjectContext, IEnumerable<object>> _method;
+
+        public MethodMultipleProviderUntyped(
+            Func<InjectContext, IEnumerable<object>> method,
+            DiContainer container)
+        {
+            _container = container;
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return context.MemberType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            injectAction = null;
+            if (_container.IsValidating && !TypeAnalyzer.ShouldAllowDuringValidation(context.MemberType))
+            {
+                buffer.Add(new ValidationMarker(context.MemberType));
+            }
+            else
+            {
+                var result = _method(context);
+
+                if (result == null)
+                {
+                    throw Assert.CreateException(
+                        "Method '{0}' returned null when list was expected. Object graph:\n {1}",
+                        _method.ToDebugString(), context.GetObjectGraphString());
+                }
+
+                foreach (var obj in result)
+                {
+                    buffer.Add(obj);
+                }
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs.meta b/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs.meta
new file mode 100644
index 0000000..4c3c64f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodMultipleProviderUntyped.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: dd9674ffe36a06141afeab1ebbc399f0
+timeCreated: 1529046908
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodProvider.cs b/Assets/Source/Runtime/Providers/MethodProvider.cs
new file mode 100644
index 0000000..609350b
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProvider.cs
@@ -0,0 +1,57 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MethodProvider<TReturn> : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Func<InjectContext, TReturn> _method;
+
+        public MethodProvider(
+            Func<InjectContext, TReturn> method,
+            DiContainer container)
+        {
+            _container = container;
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TReturn);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TReturn).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+            if (_container.IsValidating && !TypeAnalyzer.ShouldAllowDuringValidation(context.MemberType))
+            {
+                buffer.Add(new ValidationMarker(typeof(TReturn)));
+            }
+            else
+            {
+                // We cannot do a null assert here because in some cases they might intentionally
+                // return null
+                buffer.Add(_method(context));
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/MethodProvider.cs.meta b/Assets/Source/Runtime/Providers/MethodProvider.cs.meta
new file mode 100644
index 0000000..0c118da
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 22a7321581383d141b4c11983b83e67b
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs b/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs
new file mode 100644
index 0000000..cf68515
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs
@@ -0,0 +1,67 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MethodProviderMultiple<TReturn> : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Func<InjectContext, IEnumerable<TReturn>> _method;
+
+        public MethodProviderMultiple(
+            Func<InjectContext, IEnumerable<TReturn>> method,
+            DiContainer container)
+        {
+            _container = container;
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TReturn);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TReturn).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+            if (_container.IsValidating && !TypeAnalyzer.ShouldAllowDuringValidation(context.MemberType))
+            {
+                buffer.Add(new ValidationMarker(typeof(TReturn)));
+            }
+            else
+            {
+                var result = _method(context);
+
+                if (result == null)
+                {
+                    throw Assert.CreateException(
+                        "Method '{0}' returned null when list was expected. Object graph:\n {1}",
+                        _method.ToDebugString(), context.GetObjectGraphString());
+                }
+
+                foreach (var obj in result)
+                {
+                    buffer.Add(obj);
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs.meta b/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs.meta
new file mode 100644
index 0000000..0b4e3d1
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderMultiple.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 0e5a590d4406d6e46ba319046057db53
+timeCreated: 1485738781
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodProviderSimple.cs b/Assets/Source/Runtime/Providers/MethodProviderSimple.cs
new file mode 100644
index 0000000..db4d767
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderSimple.cs
@@ -0,0 +1,44 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MethodProviderSimple<TReturn> : IProvider
+    {
+        readonly Func<TReturn> _method;
+
+        public MethodProviderSimple(Func<TReturn> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TReturn);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TReturn).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+            buffer.Add(_method());
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/MethodProviderSimple.cs.meta b/Assets/Source/Runtime/Providers/MethodProviderSimple.cs.meta
new file mode 100644
index 0000000..c931a37
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderSimple.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: eee2b774c35c53641b09b0c1e9620e03
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs b/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs
new file mode 100644
index 0000000..76a286b
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs
@@ -0,0 +1,66 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class MethodProviderUntyped : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Func<InjectContext, object> _method;
+
+        public MethodProviderUntyped(
+            Func<InjectContext, object> method,
+            DiContainer container)
+        {
+            _container = container;
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return context.MemberType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            injectAction = null;
+            if (_container.IsValidating && !TypeAnalyzer.ShouldAllowDuringValidation(context.MemberType))
+            {
+                buffer.Add(new ValidationMarker(context.MemberType));
+            }
+            else
+            {
+                var result = _method(context);
+
+                if (result == null)
+                {
+                    Assert.That(!context.MemberType.IsPrimitive(),
+                        "Invalid value returned from FromMethod.  Expected non-null.");
+                }
+                else
+                {
+                    Assert.That(result.GetType().DerivesFromOrEqual(context.MemberType));
+                }
+
+                buffer.Add(result);
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs.meta b/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs.meta
new file mode 100644
index 0000000..6e5594d
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderUntyped.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: bddc7ee81ed8fd84cbf60eebf5cb3e41
+timeCreated: 1465495310
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs b/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs
new file mode 100644
index 0000000..2f25109
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs
@@ -0,0 +1,499 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    // Zero params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TValue> : IProvider
+    {
+        readonly Func<DiContainer, TValue> _method;
+
+        public MethodProviderWithContainer(Func<DiContainer, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(_method(context.Container));
+            }
+        }
+    }
+
+    // One params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TValue> : IProvider
+    {
+        readonly Func<DiContainer, TParam1, TValue> _method;
+
+        public MethodProviderWithContainer(Func<DiContainer, TParam1, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value));
+            }
+        }
+    }
+
+    // Two params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TValue> : IProvider
+    {
+        readonly Func<DiContainer, TParam1, TParam2, TValue> _method;
+
+        public MethodProviderWithContainer(Func<DiContainer, TParam1, TParam2, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value));
+            }
+        }
+    }
+
+    // Three params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TValue> : IProvider
+    {
+        readonly Func<DiContainer, TParam1, TParam2, TParam3, TValue> _method;
+
+        public MethodProviderWithContainer(Func<DiContainer, TParam1, TParam2, TParam3, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+            Assert.That(args[2].Type.DerivesFromOrEqual(typeof(TParam3)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value));
+            }
+        }
+    }
+
+    // Four params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TValue> : IProvider
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TValue> _method;
+
+        public MethodProviderWithContainer(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+            Assert.That(args[2].Type.DerivesFromOrEqual(typeof(TParam3)));
+            Assert.That(args[3].Type.DerivesFromOrEqual(typeof(TParam4)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value));
+            }
+        }
+    }
+
+    // Five params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> : IProvider
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TValue> _method;
+
+        public MethodProviderWithContainer(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+            Assert.That(args[2].Type.DerivesFromOrEqual(typeof(TParam3)));
+            Assert.That(args[3].Type.DerivesFromOrEqual(typeof(TParam4)));
+            Assert.That(args[4].Type.DerivesFromOrEqual(typeof(TParam5)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value));
+            }
+        }
+    }
+
+    // Six params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> : IProvider
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> _method;
+
+        public MethodProviderWithContainer(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+            Assert.That(args[2].Type.DerivesFromOrEqual(typeof(TParam3)));
+            Assert.That(args[3].Type.DerivesFromOrEqual(typeof(TParam4)));
+            Assert.That(args[4].Type.DerivesFromOrEqual(typeof(TParam5)));
+            Assert.That(args[5].Type.DerivesFromOrEqual(typeof(TParam6)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value,
+                        (TParam6)args[5].Value));
+            }
+        }
+    }
+
+    // Ten params
+
+    [NoReflectionBaking]
+    public class MethodProviderWithContainer<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> : IProvider
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> _method;
+
+        public MethodProviderWithContainer(
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Func<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TValue> method)
+        {
+            _method = method;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TValue);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 10);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TValue).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual(typeof(TParam1)));
+            Assert.That(args[1].Type.DerivesFromOrEqual(typeof(TParam2)));
+            Assert.That(args[2].Type.DerivesFromOrEqual(typeof(TParam3)));
+            Assert.That(args[3].Type.DerivesFromOrEqual(typeof(TParam4)));
+            Assert.That(args[4].Type.DerivesFromOrEqual(typeof(TParam5)));
+            Assert.That(args[5].Type.DerivesFromOrEqual(typeof(TParam6)));
+            Assert.That(args[6].Type.DerivesFromOrEqual(typeof(TParam7)));
+            Assert.That(args[7].Type.DerivesFromOrEqual(typeof(TParam8)));
+            Assert.That(args[8].Type.DerivesFromOrEqual(typeof(TParam9)));
+            Assert.That(args[9].Type.DerivesFromOrEqual(typeof(TParam10)));
+
+            injectAction = null;
+            if (context.Container.IsValidating)
+            {
+                // Don't do anything when validating, we can't make any assumptions on the given method
+                buffer.Add(new ValidationMarker(typeof(TValue)));
+            }
+            else
+            {
+                buffer.Add(
+                    _method(
+                        context.Container,
+                        (TParam1)args[0].Value,
+                        (TParam2)args[1].Value,
+                        (TParam3)args[2].Value,
+                        (TParam4)args[3].Value,
+                        (TParam5)args[4].Value,
+                        (TParam6)args[5].Value,
+                        (TParam7)args[6].Value,
+                        (TParam8)args[7].Value,
+                        (TParam9)args[8].Value,
+                        (TParam10)args[9].Value));
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs.meta b/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs.meta
new file mode 100644
index 0000000..1257ac5
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/MethodProviderWithContainer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: eb5886f51fc492043bf8d0cc8f4daa2e
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs b/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs
new file mode 100644
index 0000000..0b04139
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs
@@ -0,0 +1,367 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    public abstract class PoolableMemoryPoolProviderBase<TContract> : IProvider
+    {
+        public PoolableMemoryPoolProviderBase(
+            DiContainer container, Guid poolId)
+        {
+            Container = container;
+            PoolId = poolId;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        protected Guid PoolId
+        {
+            get;
+            private set;
+        }
+
+        protected DiContainer Container
+        {
+            get;
+            private set;
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return typeof(TContract);
+        }
+
+        public abstract void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer);
+    }
+
+    // Zero parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<IMemoryPool>
+        where TMemoryPool : MemoryPool<IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.That(args.IsEmpty());
+
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(_pool));
+        }
+    }
+
+    // One parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn((TParam1)args[0].Value, _pool));
+        }
+    }
+
+    // Two parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TParam2, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, TParam2, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, TParam2, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                _pool));
+        }
+    }
+
+    // Three parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, TParam2, TParam3, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                _pool));
+        }
+    }
+
+    // Four parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                _pool));
+        }
+    }
+
+    // Five parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                (TParam5)args[4].Value,
+                _pool));
+        }
+    }
+
+    // Six parameters
+
+    [NoReflectionBaking]
+    public class PoolableMemoryPoolProvider<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract, TMemoryPool> : PoolableMemoryPoolProviderBase<TContract>, IValidatable
+        where TContract : IPoolable<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool>
+        where TMemoryPool : MemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IMemoryPool, TContract>
+    {
+        TMemoryPool _pool;
+
+        public PoolableMemoryPoolProvider(
+            DiContainer container, Guid poolId)
+            : base(container, poolId)
+        {
+        }
+
+        public void Validate()
+        {
+            Container.ResolveId<TMemoryPool>(PoolId);
+        }
+
+        public override void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEqual(args.Count, 6);
+            Assert.IsNotNull(context);
+
+            Assert.That(typeof(TContract).DerivesFromOrEqual(context.MemberType));
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+
+            injectAction = null;
+
+            if (_pool == null)
+            {
+                _pool = Container.ResolveId<TMemoryPool>(PoolId);
+            }
+
+            buffer.Add(_pool.Spawn(
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                (TParam5)args[4].Value,
+                (TParam6)args[5].Value,
+                _pool));
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs.meta b/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs.meta
new file mode 100644
index 0000000..e3f7315
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PoolableMemoryPoolProvider.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 6857585e55699ab4da01454c662e0e3b
+timeCreated: 1528529860
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators.meta b/Assets/Source/Runtime/Providers/PrefabCreators.meta
new file mode 100644
index 0000000..db2bad3
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 4a029f9358245bf4e99fcb7fcc19ba28
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs b/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs
new file mode 100644
index 0000000..55964c5
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs
@@ -0,0 +1,32 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+
+namespace Zenject
+{
+    public interface IPrefabInstantiator
+    {
+        Type ArgumentTarget
+        {
+            get;
+        }
+
+        List<TypeValuePair> ExtraArguments
+        {
+            get;
+        }
+
+        GameObjectCreationParameters GameObjectCreationParameters
+        {
+            get;
+        }
+
+        GameObject Instantiate(InjectContext context, List<TypeValuePair> args, out Action injectAction);
+
+        UnityEngine.Object GetPrefab(InjectContext context);
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs.meta b/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs.meta
new file mode 100644
index 0000000..96ca289
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/IPrefabInstantiator.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 45b8fa051fd4fb84b94f6384e6dbe092
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs
new file mode 100644
index 0000000..f4c9094
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs
@@ -0,0 +1,136 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using Zenject.Internal;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabInstantiator : IPrefabInstantiator
+    {
+        readonly IPrefabProvider _prefabProvider;
+        readonly DiContainer _container;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+        readonly Type _argumentTarget;
+        readonly List<Type> _instantiateCallbackTypes;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public PrefabInstantiator(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Type argumentTarget,
+            IEnumerable<Type> instantiateCallbackTypes,
+            IEnumerable<TypeValuePair> extraArguments,
+            IPrefabProvider prefabProvider,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            _prefabProvider = prefabProvider;
+            _extraArguments = extraArguments.ToList();
+            _container = container;
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _argumentTarget = argumentTarget;
+            _instantiateCallbackTypes = instantiateCallbackTypes.ToList();
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public GameObjectCreationParameters GameObjectCreationParameters
+        {
+            get { return _gameObjectBindInfo; }
+        }
+
+        public Type ArgumentTarget
+        {
+            get { return _argumentTarget; }
+        }
+
+        public List<TypeValuePair> ExtraArguments
+        {
+            get { return _extraArguments; }
+        }
+
+        public UnityEngine.Object GetPrefab(InjectContext context)
+        {
+            return _prefabProvider.GetPrefab(context);
+        }
+
+        public GameObject Instantiate(InjectContext context, List<TypeValuePair> args, out Action injectAction)
+        {
+            Assert.That(_argumentTarget == null || _argumentTarget.DerivesFromOrEqual(context.MemberType));
+
+            bool shouldMakeActive;
+            var gameObject = _container.CreateAndParentPrefab(
+                GetPrefab(context), _gameObjectBindInfo, context, out shouldMakeActive);
+            Assert.IsNotNull(gameObject);
+
+            injectAction = () =>
+            {
+                var allArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                allArgs.AllocFreeAddRange(_extraArguments);
+                allArgs.AllocFreeAddRange(args);
+
+                if (_argumentTarget == null)
+                {
+                    Assert.That(
+                        allArgs.IsEmpty(),
+                        "Unexpected arguments provided to prefab instantiator.  Arguments are not allowed if binding multiple components in the same binding");
+                }
+
+                if (_argumentTarget == null || allArgs.IsEmpty())
+                {
+                    _container.InjectGameObject(gameObject);
+                }
+                else
+                {
+                    _container.InjectGameObjectForComponentExplicit(
+                        gameObject, _argumentTarget, allArgs, context, null);
+
+                    Assert.That(allArgs.Count == 0);
+                }
+
+                ZenPools.DespawnList<TypeValuePair>(allArgs);
+
+                if (shouldMakeActive && !_container.IsValidating)
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                    {
+                        gameObject.SetActive(true);
+                    }
+                }
+
+                if (_instantiateCallback != null)
+                {
+                    var callbackObjects = ZenPools.SpawnHashSet<object>();
+
+                    foreach (var type in _instantiateCallbackTypes)
+                    {
+                        var obj = gameObject.GetComponentInChildren(type);
+
+                        if (obj != null)
+                        {
+                            callbackObjects.Add(obj);
+                        }
+                    }
+
+                    foreach (var obj in callbackObjects)
+                    {
+                        _instantiateCallback(context, obj);
+                    }
+
+                    ZenPools.DespawnHashSet(callbackObjects);
+                }
+            };
+
+            return gameObject;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs.meta b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs.meta
new file mode 100644
index 0000000..c8be04d
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiator.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 7dfc3341d0446554996b2969abf2d1ff
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs
new file mode 100644
index 0000000..d3adb2f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs
@@ -0,0 +1,60 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabInstantiatorCached : IPrefabInstantiator
+    {
+        readonly IPrefabInstantiator _subInstantiator;
+
+        GameObject _gameObject;
+
+        public PrefabInstantiatorCached(IPrefabInstantiator subInstantiator)
+        {
+            _subInstantiator = subInstantiator;
+        }
+
+        public List<TypeValuePair> ExtraArguments
+        {
+            get { return _subInstantiator.ExtraArguments; }
+        }
+
+        public Type ArgumentTarget
+        {
+            get { return _subInstantiator.ArgumentTarget; }
+        }
+
+        public GameObjectCreationParameters GameObjectCreationParameters
+        {
+            get { return _subInstantiator.GameObjectCreationParameters; }
+        }
+
+        public UnityEngine.Object GetPrefab(InjectContext context)
+        {
+            return _subInstantiator.GetPrefab(context);
+        }
+
+        public GameObject Instantiate(InjectContext context, List<TypeValuePair> args, out Action injectAction)
+        {
+            // We can't really support arguments if we are using the cached value since
+            // the arguments might change when called after the first time
+            Assert.IsEmpty(args);
+
+            if (_gameObject != null)
+            {
+                injectAction = null;
+                return _gameObject;
+            }
+
+            _gameObject = _subInstantiator.Instantiate(context, new List<TypeValuePair>(), out injectAction);
+            return _gameObject;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs.meta b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs.meta
new file mode 100644
index 0000000..74c4cef
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabCreators/PrefabInstantiatorCached.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 293ee607ccfdf63458a26d0e6bdebaaa
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders.meta b/Assets/Source/Runtime/Providers/PrefabProviders.meta
new file mode 100644
index 0000000..963b2d8
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 4248afcd0d89aa54da8d2c34a41c5712
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs b/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs
new file mode 100644
index 0000000..13ff896
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs
@@ -0,0 +1,12 @@
+#if !NOT_UNITY3D
+
+namespace Zenject
+{
+    public interface IPrefabProvider
+    {
+        UnityEngine.Object GetPrefab(InjectContext context);
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs.meta b/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs.meta
new file mode 100644
index 0000000..e7a9295
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/IPrefabProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3b63b8088376c9a499e7f506a237392d
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs
new file mode 100644
index 0000000..f60828e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs
@@ -0,0 +1,27 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabProvider : IPrefabProvider
+    {
+        readonly UnityEngine.Object _prefab;
+
+        public PrefabProvider(UnityEngine.Object prefab)
+        {
+            Assert.IsNotNull(prefab);
+            _prefab = prefab;
+        }
+
+        public UnityEngine.Object GetPrefab(InjectContext _)
+        {
+            return _prefab;
+        }
+    }
+}
+
+#endif
+
+
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs.meta b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs.meta
new file mode 100644
index 0000000..52ecaac
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 3628433a045792f4297abd34b5a1a34c
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs
new file mode 100644
index 0000000..1e4ee13
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs
@@ -0,0 +1,29 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+using UnityEngine;
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabProviderCustom : IPrefabProvider
+    {
+        readonly Func<InjectContext, UnityEngine.Object> _getter;
+
+        public PrefabProviderCustom(Func<InjectContext, UnityEngine.Object> getter)
+        {
+            _getter = getter;
+        }
+
+        public UnityEngine.Object GetPrefab(InjectContext context)
+        {
+            var prefab = _getter(context);
+            Assert.That(prefab != null, "Custom prefab provider returned null");
+            return prefab;
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs.meta b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs.meta
new file mode 100644
index 0000000..2217837
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderCustom.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: f6f578cfe9da346348878e4a26617ee0
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs
new file mode 100644
index 0000000..35faaa8
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs
@@ -0,0 +1,31 @@
+#if !NOT_UNITY3D
+
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class PrefabProviderResource : IPrefabProvider
+    {
+        readonly string _resourcePath;
+
+        public PrefabProviderResource(string resourcePath)
+        {
+            _resourcePath = resourcePath;
+        }
+
+        public UnityEngine.Object GetPrefab(InjectContext context)
+        {
+            var prefab = (GameObject)Resources.Load(_resourcePath);
+
+            Assert.That(prefab != null,
+                "Expected to find prefab at resource path '{0}'", _resourcePath);
+
+            return prefab;
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs.meta b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs.meta
new file mode 100644
index 0000000..efece85
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/PrefabProviders/PrefabProviderResource.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 6fa6b8670ec5932489c4102d45d987ff
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ProviderUtil.cs b/Assets/Source/Runtime/Providers/ProviderUtil.cs
new file mode 100644
index 0000000..bee9115
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ProviderUtil.cs
@@ -0,0 +1,24 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    public static class ProviderUtil
+    {
+        public static Type GetTypeToInstantiate(Type contractType, Type concreteType)
+        {
+#if !(UNITY_WSA && ENABLE_DOTNET)
+            // TODO: Is it possible to do this on WSA?
+
+            if (concreteType.IsOpenGenericType())
+            {
+                return concreteType.MakeGenericType(contractType.GetGenericArguments());
+            }
+#endif
+
+            Assert.DerivesFromOrEqual(concreteType, contractType);
+            return concreteType;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/ProviderUtil.cs.meta b/Assets/Source/Runtime/Providers/ProviderUtil.cs.meta
new file mode 100644
index 0000000..f35ede6
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ProviderUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 278c72df466e8b049bc7ce6feb535cb1
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ResolveProvider.cs b/Assets/Source/Runtime/Providers/ResolveProvider.cs
new file mode 100644
index 0000000..4945734
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ResolveProvider.cs
@@ -0,0 +1,73 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ResolveProvider : IProvider
+    {
+        readonly object _identifier;
+        readonly DiContainer _container;
+        readonly Type _contractType;
+        readonly bool _isOptional;
+        readonly InjectSources _source;
+        readonly bool _matchAll;
+
+        public ResolveProvider(
+            Type contractType, DiContainer container, object identifier,
+            bool isOptional, InjectSources source, bool matchAll)
+        {
+            _contractType = contractType;
+            _identifier = identifier;
+            _container = container;
+            _isOptional = isOptional;
+            _source = source;
+            _matchAll = matchAll;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _contractType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+            Assert.IsNotNull(context);
+
+            Assert.That(_contractType.DerivesFromOrEqual(context.MemberType));
+
+            injectAction = null;
+            if (_matchAll)
+            {
+                _container.ResolveAll(GetSubContext(context), buffer);
+            }
+            else
+            {
+                buffer.Add(_container.Resolve(GetSubContext(context)));
+            }
+        }
+
+        InjectContext GetSubContext(InjectContext parent)
+        {
+            var subContext = parent.CreateSubContext(_contractType, _identifier);
+
+            subContext.SourceType = _source;
+            subContext.Optional = _isOptional;
+
+            return subContext;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/ResolveProvider.cs.meta b/Assets/Source/Runtime/Providers/ResolveProvider.cs.meta
new file mode 100644
index 0000000..e00f78e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ResolveProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 35df94e99ddd0c04c86cf0bcefa85ad8
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ResourceProvider.cs b/Assets/Source/Runtime/Providers/ResourceProvider.cs
new file mode 100644
index 0000000..6c604ba
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ResourceProvider.cs
@@ -0,0 +1,75 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ResourceProvider : IProvider
+    {
+        readonly Type _resourceType;
+        readonly string _resourcePath;
+        readonly bool _matchSingle;
+
+        public ResourceProvider(
+            string resourcePath, Type resourceType, bool matchSingle)
+        {
+            _resourceType = resourceType;
+            _resourcePath = resourcePath;
+            _matchSingle = matchSingle;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _resourceType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsEmpty(args);
+
+            Assert.IsNotNull(context);
+
+            if (_matchSingle)
+            {
+                var obj = Resources.Load(_resourcePath, _resourceType);
+
+                Assert.That(obj != null,
+                "Could not find resource at path '{0}' with type '{1}'", _resourcePath, _resourceType);
+
+                // Are there any resource types which can be injected?
+                injectAction = null;
+                buffer.Add(obj);
+                return;
+            }
+
+            var objects = Resources.LoadAll(_resourcePath, _resourceType);
+
+            Assert.That(objects.Length > 0,
+            "Could not find resource at path '{0}' with type '{1}'", _resourcePath, _resourceType);
+
+            // Are there any resource types which can be injected?
+            injectAction = null;
+
+            buffer.AllocFreeAddRange(objects);
+        }
+    }
+}
+
+#endif
+
+
diff --git a/Assets/Source/Runtime/Providers/ResourceProvider.cs.meta b/Assets/Source/Runtime/Providers/ResourceProvider.cs.meta
new file mode 100644
index 0000000..c8d4f8f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ResourceProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: f16c8e5eed02ac8478e8c236c1677db3
+timeCreated: 1461708055
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs b/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs
new file mode 100644
index 0000000..a0c58c5
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs
@@ -0,0 +1,96 @@
+﻿#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ScriptableObjectInstanceProvider : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Type _resourceType;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly bool _createNew;
+        readonly object _concreteIdentifier;
+        readonly Action<InjectContext, object> _instantiateCallback;
+        readonly UnityEngine.Object _resource;
+
+        public ScriptableObjectInstanceProvider(
+            UnityEngine.Object resource, Type resourceType,
+            DiContainer container, IEnumerable<TypeValuePair> extraArguments,
+            bool createNew, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            _container = container;
+            Assert.DerivesFromOrEqual<ScriptableObject>(resourceType);
+
+            _resource = resource;
+            _extraArguments = extraArguments.ToList();
+            _resourceType = resourceType;
+            _createNew = createNew;
+            _concreteIdentifier = concreteIdentifier;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _resourceType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            if (_createNew)
+            {
+                buffer.Add(UnityEngine.ScriptableObject.Instantiate(_resource));
+            }
+            else
+            {
+                buffer.Add(_resource);
+            }
+
+            injectAction = () =>
+            {
+                for (int i = 0; i < buffer.Count; i++)
+                {
+                    var obj = buffer[i];
+
+                    var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                    extraArgs.AllocFreeAddRange(_extraArguments);
+                    extraArgs.AllocFreeAddRange(args);
+
+                    _container.InjectExplicit(
+                        obj, _resourceType, extraArgs, context, _concreteIdentifier);
+
+                    ZenPools.DespawnList(extraArgs);
+
+                    if (_instantiateCallback != null)
+                    {
+                        _instantiateCallback(context, obj);
+                    }
+                }
+            };
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs.meta b/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs.meta
new file mode 100644
index 0000000..be7550e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ScriptableObjectInstanceProvider.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: dd4cee241217b5947b3a223dabefec0a
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs b/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs
new file mode 100644
index 0000000..5244152
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs
@@ -0,0 +1,104 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ScriptableObjectResourceProvider : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Type _resourceType;
+        readonly string _resourcePath;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly bool _createNew;
+        readonly object _concreteIdentifier;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public ScriptableObjectResourceProvider(
+            string resourcePath, Type resourceType,
+            DiContainer container, IEnumerable<TypeValuePair> extraArguments,
+            bool createNew, object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            _container = container;
+            Assert.DerivesFromOrEqual<ScriptableObject>(resourceType);
+
+            _extraArguments = extraArguments.ToList();
+            _resourceType = resourceType;
+            _resourcePath = resourcePath;
+            _createNew = createNew;
+            _concreteIdentifier = concreteIdentifier;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _resourceType;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            if (_createNew)
+            {
+                var objects = Resources.LoadAll(_resourcePath, _resourceType);
+
+                for (int i = 0; i < objects.Length; i++)
+                {
+                    buffer.Add(ScriptableObject.Instantiate(objects[i]));
+                }
+            }
+            else
+            {
+                buffer.AllocFreeAddRange(
+                    Resources.LoadAll(_resourcePath, _resourceType));
+            }
+
+            Assert.That(buffer.Count > 0,
+            "Could not find resource at path '{0}' with type '{1}'", _resourcePath, _resourceType);
+
+            injectAction = () =>
+            {
+                for (int i = 0; i < buffer.Count; i++)
+                {
+                    var obj = buffer[i];
+
+                    var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                    extraArgs.AllocFreeAddRange(_extraArguments);
+                    extraArgs.AllocFreeAddRange(args);
+
+                    _container.InjectExplicit(
+                        obj, _resourceType, extraArgs, context, _concreteIdentifier);
+
+                    ZenPools.DespawnList(extraArgs);
+
+                    if (_instantiateCallback != null)
+                    {
+                        _instantiateCallback(context, obj);
+                    }
+                }
+            };
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs.meta b/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs.meta
new file mode 100644
index 0000000..7399c11
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/ScriptableObjectResourceProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5753f1f4d468e7649b017dee98c6301d
+timeCreated: 1486668547
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators.meta b/Assets/Source/Runtime/Providers/SubContainerCreators.meta
new file mode 100644
index 0000000..b8b571f
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 60492d3348bd7624a9f7f00d1e20ae8e
+folderAsset: yes
+timeCreated: 1461708046
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs
new file mode 100644
index 0000000..c7195e3
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs
@@ -0,0 +1,10 @@
+using System.Collections.Generic;
+using System;
+
+namespace Zenject
+{
+    public interface ISubContainerCreator
+    {
+        DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction);
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs.meta
new file mode 100644
index 0000000..b42d716
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/ISubContainerCreator.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 83273a08f84aa9a48b37fe0b1bae0958
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs
new file mode 100644
index 0000000..de51934
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs
@@ -0,0 +1,24 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorBindInfo
+    {
+        // Null = means no custom default parent
+        public string DefaultParentName
+        {
+            get; set;
+        }
+
+        public bool CreateKernel
+        {
+            get; set;
+        }
+
+        public Type KernelType
+        {
+            get; set;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs.meta
new file mode 100644
index 0000000..cffda9e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorBindInfo.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 2d894c838f0dcc34bb38d1311af9ea56
+timeCreated: 1534923025
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs
new file mode 100644
index 0000000..acd18bd
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs
@@ -0,0 +1,66 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorByInstaller : ISubContainerCreator
+    {
+        readonly Type _installerType;
+        readonly DiContainer _container;
+        readonly List<TypeValuePair> _extraArgs;
+        readonly SubContainerCreatorBindInfo _containerBindInfo;
+
+        public SubContainerCreatorByInstaller(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Type installerType,
+            IEnumerable<TypeValuePair> extraArgs)
+        {
+            _installerType = installerType;
+            _container = container;
+            _extraArgs = extraArgs.ToList();
+            _containerBindInfo = containerBindInfo;
+
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+        }
+
+        public SubContainerCreatorByInstaller(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Type installerType)
+            : this(container, containerBindInfo, installerType, new List<TypeValuePair>())
+        {
+        }
+
+        public DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            var subContainer = _container.CreateSubContainer();
+
+            SubContainerCreatorUtil.ApplyBindSettings(_containerBindInfo, subContainer);
+
+            var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+            extraArgs.AllocFreeAddRange(_extraArgs);
+            extraArgs.AllocFreeAddRange(args);
+
+            var installer = (InstallerBase)subContainer.InstantiateExplicit(
+                _installerType, extraArgs);
+
+            ZenPools.DespawnList(extraArgs);
+
+            installer.InstallBindings();
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs.meta
new file mode 100644
index 0000000..2b64790
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d932bdf1cc240394a94c9fd81dfa9218
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs
new file mode 100644
index 0000000..6203e58
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs
@@ -0,0 +1,30 @@
+using System.Collections.Generic;
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorByInstance : ISubContainerCreator
+    {
+        readonly DiContainer _subcontainer;
+
+        public SubContainerCreatorByInstance(DiContainer subcontainer)
+        {
+            _subcontainer = subcontainer;
+        }
+
+        public DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.That(args.IsEmpty());
+
+            injectAction = null;
+
+            // It is assumed here that the subcontainer has already had ResolveRoots called elsewhere
+            // Since most likely you are adding a subcontainer that is already in a context or
+            // something rather than directly using DiContainer.CreateSubContainer
+            return _subcontainer;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs.meta
new file mode 100644
index 0000000..7ac421e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstance.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1ea58c024bbd4e846be07059bf23c524
+timeCreated: 1535189469
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs
new file mode 100644
index 0000000..8bad289
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs
@@ -0,0 +1,31 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorByInstanceGetter : ISubContainerCreator
+    {
+        readonly Func<InjectContext, DiContainer> _subcontainerGetter;
+
+        public SubContainerCreatorByInstanceGetter(
+            Func<InjectContext, DiContainer> subcontainerGetter)
+        {
+            _subcontainerGetter = subcontainerGetter;
+        }
+
+        public DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.That(args.IsEmpty());
+
+            injectAction = null;
+
+            // It is assumed here that the subcontainer has already had ResolveRoots called elsewhere
+            // Since most likely you are adding a subcontainer that is already in a context or
+            // something rather than directly using DiContainer.CreateSubContainer
+            return _subcontainerGetter(context);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs.meta
new file mode 100644
index 0000000..4c952e2
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByInstanceGetter.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 164cf97cfe8f32441beb85b9b3c05868
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs
new file mode 100644
index 0000000..9eef511
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs
@@ -0,0 +1,390 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    // Zero parameters
+
+    [NoReflectionBaking]
+    public abstract class SubContainerCreatorByMethodBase : ISubContainerCreator
+    {
+        readonly DiContainer _container;
+        readonly SubContainerCreatorBindInfo _containerBindInfo;
+
+        public SubContainerCreatorByMethodBase(
+            DiContainer container, SubContainerCreatorBindInfo containerBindInfo)
+        {
+            _container = container;
+            _containerBindInfo = containerBindInfo;
+        }
+
+        public abstract DiContainer CreateSubContainer(
+            List<TypeValuePair> args, InjectContext context, out Action injectAction);
+
+        protected DiContainer CreateEmptySubContainer()
+        {
+            var subContainer = _container.CreateSubContainer();
+            SubContainerCreatorUtil.ApplyBindSettings(_containerBindInfo, subContainer);
+            return subContainer;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod : SubContainerCreatorByMethodBase
+    {
+        readonly Action<DiContainer> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Action<DiContainer> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEmpty(args);
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(subContainer);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // One parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1> : SubContainerCreatorByMethodBase
+    {
+        readonly Action<DiContainer, TParam1> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Action<DiContainer, TParam1> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(subContainer, (TParam1)args[0].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // Two parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2> : SubContainerCreatorByMethodBase
+    {
+        readonly Action<DiContainer, TParam1, TParam2> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Action<DiContainer, TParam1, TParam2> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // Three parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByMethodBase
+    {
+        readonly Action<DiContainer, TParam1, TParam2, TParam3> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+            Action<DiContainer, TParam1, TParam2, TParam3> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // Four parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByMethodBase
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // Five parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByMethodBase
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                (TParam5)args[4].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // Six parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByMethodBase
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                (TParam5)args[4].Value,
+                (TParam6)args[5].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+
+    // 10 parameters
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByMethodBase
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> _installMethod;
+
+        public SubContainerCreatorByMethod(
+            DiContainer container,
+            SubContainerCreatorBindInfo containerBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installMethod)
+            : base(container, containerBindInfo)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            Assert.IsEqual(args.Count, 10);
+
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+            Assert.That(args[6].Type.DerivesFromOrEqual<TParam7>());
+            Assert.That(args[7].Type.DerivesFromOrEqual<TParam8>());
+            Assert.That(args[8].Type.DerivesFromOrEqual<TParam9>());
+            Assert.That(args[9].Type.DerivesFromOrEqual<TParam10>());
+
+            var subContainer = CreateEmptySubContainer();
+
+            _installMethod(
+                subContainer,
+                (TParam1)args[0].Value,
+                (TParam2)args[1].Value,
+                (TParam3)args[2].Value,
+                (TParam4)args[3].Value,
+                (TParam5)args[4].Value,
+                (TParam6)args[5].Value,
+                (TParam7)args[6].Value,
+                (TParam8)args[7].Value,
+                (TParam9)args[8].Value,
+                (TParam10)args[9].Value);
+
+            injectAction = () => 
+            {
+                subContainer.ResolveRoots();
+            };
+
+            return subContainer;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs.meta
new file mode 100644
index 0000000..5ebb266
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByMethod.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5f4bb37c4e2a5bf44865ed1ab3bef21e
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs
new file mode 100644
index 0000000..ccd2cdc
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs
@@ -0,0 +1,366 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class SubContainerCreatorByNewGameObjectDynamicContext : SubContainerCreatorDynamicContext
+    {
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+
+        public SubContainerCreatorByNewGameObjectDynamicContext(
+            DiContainer container, GameObjectCreationParameters gameObjectBindInfo)
+            : base(container)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+        }
+
+        protected override GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive)
+        {
+            shouldMakeActive = true;
+            var gameObject = Container.CreateEmptyGameObject(_gameObjectBindInfo, null);
+            gameObject.SetActive(false);
+            return gameObject;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectInstaller : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly Type _installerType;
+        readonly List<TypeValuePair> _extraArgs;
+
+        public SubContainerCreatorByNewGameObjectInstaller(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Type installerType, List<TypeValuePair> extraArgs)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerType = installerType;
+            _extraArgs = extraArgs;
+
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                        extraArgs.AllocFreeAddRange(_extraArgs);
+                        extraArgs.AllocFreeAddRange(args);
+
+                        var installer = (InstallerBase)subContainer.InstantiateExplicit(
+                            _installerType, extraArgs);
+
+                        ZenPools.DespawnList(extraArgs);
+
+                        installer.InstallBindings();
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly Action<DiContainer> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.That(args.IsEmpty());
+            context.AddNormalInstaller(
+                new ActionInstaller(_installerMethod));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly Action<DiContainer, TParam1> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer, (TParam1)args[0].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly Action<DiContainer, TParam1, TParam2> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1, TParam2> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly Action<DiContainer, TParam1, TParam2, TParam3> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value,
+                            (TParam6)args[5].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByNewGameObjectDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> _installerMethod;
+
+        public SubContainerCreatorByNewGameObjectMethod(
+            DiContainer container,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+            : base(container, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 10);
+
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+            Assert.That(args[6].Type.DerivesFromOrEqual<TParam7>());
+            Assert.That(args[7].Type.DerivesFromOrEqual<TParam8>());
+            Assert.That(args[8].Type.DerivesFromOrEqual<TParam9>());
+            Assert.That(args[9].Type.DerivesFromOrEqual<TParam10>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value,
+                            (TParam6)args[5].Value,
+                            (TParam7)args[6].Value,
+                            (TParam8)args[7].Value,
+                            (TParam9)args[8].Value,
+                            (TParam10)args[9].Value);
+                    }));
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs.meta
new file mode 100644
index 0000000..5db7457
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewGameObjectDynamicContext.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7c2c6880c82d78140818fe3204a0279b
+timeCreated: 1538467080
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs
new file mode 100644
index 0000000..3108ad6
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs
@@ -0,0 +1,64 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefab : ISubContainerCreator
+    {
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+        readonly IPrefabProvider _prefabProvider;
+        readonly DiContainer _container;
+
+        public SubContainerCreatorByNewPrefab(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _prefabProvider = prefabProvider;
+            _container = container;
+        }
+
+        public DiContainer CreateSubContainer(
+            List<TypeValuePair> args, InjectContext parentContext, out Action injectAction)
+        {
+            Assert.That(args.IsEmpty());
+
+            var prefab = _prefabProvider.GetPrefab(parentContext);
+
+            bool shouldMakeActive;
+            var gameObject = _container.CreateAndParentPrefab(
+                prefab, _gameObjectBindInfo, null, out shouldMakeActive);
+
+            var context = gameObject.GetComponent<GameObjectContext>();
+
+            Assert.That(context != null,
+                "Expected prefab with name '{0}' to contain a component of type 'GameObjectContext' on the root", prefab.name);
+
+            context.Install(_container);
+
+            injectAction = () =>
+            {
+                // Note: We don't need to call ResolveRoots here because GameObjectContext does this for us
+                _container.Inject(context);
+
+                if (shouldMakeActive && !_container.IsValidating)
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                    {
+                        gameObject.SetActive(true);
+                    }
+                }
+            };
+
+            return context.Container;
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs.meta
new file mode 100644
index 0000000..4e2b7e0
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefab.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 17fc7cad09fe4e94f939551c85abf6d9
+timeCreated: 1486859770
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs
new file mode 100644
index 0000000..b3fcdd4
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs
@@ -0,0 +1,377 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class SubContainerCreatorByNewPrefabDynamicContext : SubContainerCreatorDynamicContext
+    {
+        readonly IPrefabProvider _prefabProvider;
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+
+        public SubContainerCreatorByNewPrefabDynamicContext(
+            DiContainer container,
+            IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo)
+            : base(container)
+        {
+            _prefabProvider = prefabProvider;
+            _gameObjectBindInfo = gameObjectBindInfo;
+        }
+
+        protected override GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive)
+        {
+            var prefab = _prefabProvider.GetPrefab(context);
+
+            var gameObj = Container.CreateAndParentPrefab(
+                prefab, _gameObjectBindInfo, null, out shouldMakeActive);
+
+            if (gameObj.GetComponent<GameObjectContext>() != null)
+            {
+                throw Assert.CreateException(
+                    "Found GameObjectContext already attached to prefab with name '{0}'!  When using ByNewPrefabMethod or ByNewPrefabInstaller, the GameObjectContext is added to the prefab dynamically", prefab.name);
+            }
+
+            return gameObj;
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabInstaller : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly Type _installerType;
+        readonly List<TypeValuePair> _extraArgs;
+
+        public SubContainerCreatorByNewPrefabInstaller(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Type installerType, List<TypeValuePair> extraArgs)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerType = installerType;
+            _extraArgs = extraArgs;
+
+            Assert.That(installerType.DerivesFrom<InstallerBase>(),
+                "Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'", installerType);
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+                        extraArgs.AllocFreeAddRange(_extraArgs);
+                        extraArgs.AllocFreeAddRange(args);
+
+                        var installer = (InstallerBase)subContainer.InstantiateExplicit(
+                            _installerType, extraArgs);
+
+                        ZenPools.DespawnList(extraArgs);
+
+                        installer.InstallBindings();
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly Action<DiContainer> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.That(args.IsEmpty());
+            context.AddNormalInstaller(
+                new ActionInstaller(_installerMethod));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly Action<DiContainer, TParam1> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 1);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer, (TParam1)args[0].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly Action<DiContainer, TParam1, TParam2> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1, TParam2> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 2);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly Action<DiContainer, TParam1, TParam2, TParam3> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+            Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 3);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 4);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 5);
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value,
+                            (TParam6)args[5].Value);
+                    }));
+        }
+    }
+
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByNewPrefabDynamicContext
+    {
+        readonly
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> _installerMethod;
+
+        public SubContainerCreatorByNewPrefabMethod(
+            DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo,
+#if !NET_4_6 && !NET_STANDARD_2_0
+            ModestTree.Util.
+#endif
+            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)
+            : base(container, prefabProvider, gameObjectBindInfo)
+        {
+            _installerMethod = installerMethod;
+        }
+
+        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)
+        {
+            Assert.IsEqual(args.Count, 10);
+
+            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());
+            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());
+            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());
+            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());
+            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());
+            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());
+            Assert.That(args[6].Type.DerivesFromOrEqual<TParam7>());
+            Assert.That(args[7].Type.DerivesFromOrEqual<TParam8>());
+            Assert.That(args[8].Type.DerivesFromOrEqual<TParam9>());
+            Assert.That(args[9].Type.DerivesFromOrEqual<TParam10>());
+
+            context.AddNormalInstaller(
+                new ActionInstaller(subContainer =>
+                    {
+                        _installerMethod(subContainer,
+                            (TParam1)args[0].Value,
+                            (TParam2)args[1].Value,
+                            (TParam3)args[2].Value,
+                            (TParam4)args[3].Value,
+                            (TParam5)args[4].Value,
+                            (TParam6)args[5].Value,
+                            (TParam7)args[6].Value,
+                            (TParam8)args[7].Value,
+                            (TParam9)args[8].Value,
+                            (TParam10)args[9].Value);
+                    }));
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs.meta
new file mode 100644
index 0000000..368dcab
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 53f151c86cd3c4c46ada71b737004d36
+timeCreated: 1505722322
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs
new file mode 100644
index 0000000..c8ca81e
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs
@@ -0,0 +1,114 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorByNewPrefabWithParams : ISubContainerCreator
+    {
+        readonly DiContainer _container;
+        readonly IPrefabProvider _prefabProvider;
+        readonly Type _installerType;
+        readonly GameObjectCreationParameters _gameObjectBindInfo;
+
+        public SubContainerCreatorByNewPrefabWithParams(
+            Type installerType, DiContainer container, IPrefabProvider prefabProvider,
+            GameObjectCreationParameters gameObjectBindInfo)
+        {
+            _gameObjectBindInfo = gameObjectBindInfo;
+            _prefabProvider = prefabProvider;
+            _container = container;
+            _installerType = installerType;
+        }
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        IEnumerable<InjectableInfo> GetAllInjectableIncludingBaseTypes() 
+        {
+            var info = TypeAnalyzer.GetInfo(_installerType);
+
+            while (info != null) 
+            {
+                foreach (var injectable in info.AllInjectables) 
+                {
+                    yield return injectable;
+                }
+
+                info = info.BaseTypeInfo;
+            }
+        }
+
+        DiContainer CreateTempContainer(List<TypeValuePair> args)
+        {
+            var tempSubContainer = Container.CreateSubContainer();
+
+            var allInjectables = GetAllInjectableIncludingBaseTypes();
+
+            foreach (var argPair in args)
+            {
+                // We need to intelligently match on the exact parameters here to avoid the issue
+                // brought up in github issue #217
+                var match = allInjectables
+                    .Where(x => argPair.Type.DerivesFromOrEqual(x.MemberType))
+                    .OrderBy(x => ZenUtilInternal.GetInheritanceDelta(argPair.Type, x.MemberType)).FirstOrDefault();
+
+                Assert.That(match != null,
+                    "Could not find match for argument type '{0}' when injecting into sub container installer '{1}'",
+                    argPair.Type, _installerType);
+
+                tempSubContainer.Bind(match.MemberType)
+                    .FromInstance(argPair.Value).WhenInjectedInto(_installerType);
+            }
+
+            return tempSubContainer;
+        }
+
+        public DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext parentContext, out Action injectAction)
+        {
+            Assert.That(!args.IsEmpty());
+
+            var prefab = _prefabProvider.GetPrefab(parentContext);
+            var tempContainer = CreateTempContainer(args);
+
+            bool shouldMakeActive;
+            var gameObject = tempContainer.CreateAndParentPrefab(
+                prefab, _gameObjectBindInfo, null, out shouldMakeActive);
+
+            var context = gameObject.GetComponent<GameObjectContext>();
+
+            Assert.That(context != null,
+                "Expected prefab with name '{0}' to container a component of type 'GameObjectContext'", prefab.name);
+
+            context.Install(tempContainer);
+
+            injectAction = () => 
+            {
+                // Note: We don't need to call ResolveRoots here because GameObjectContext does this for us
+                tempContainer.Inject(context);
+
+                if (shouldMakeActive && !_container.IsValidating)
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                    {
+                        gameObject.SetActive(true);
+                    }
+                }
+            };
+
+            return context.Container;
+        }
+    }
+}
+
+#endif
+
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs.meta
new file mode 100644
index 0000000..b683f7d
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabWithParams.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 07cb33e44f032a840a46b8b699927d0a
+timeCreated: 1486859770
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs
new file mode 100644
index 0000000..b099aae
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs
@@ -0,0 +1,60 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerCreatorCached : ISubContainerCreator
+    {
+        readonly ISubContainerCreator _subCreator;
+
+#if ZEN_MULTITHREADING
+        readonly object _locker = new object();
+#else
+        bool _isLookingUp;
+#endif
+        DiContainer _subContainer;
+
+        public SubContainerCreatorCached(ISubContainerCreator subCreator)
+        {
+            _subCreator = subCreator;
+        }
+
+        public DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction)
+        {
+            // We can't really support arguments if we are using the cached value since
+            // the arguments might change when called after the first time
+            Assert.IsEmpty(args);
+
+#if ZEN_MULTITHREADING
+            lock (_locker)
+#endif
+            {
+                if (_subContainer == null)
+                {
+#if !ZEN_MULTITHREADING
+                    Assert.That(!_isLookingUp,
+                        "Found unresolvable circular dependency when looking up sub container!  Object graph:\n {0}", context.GetObjectGraphString());
+                    _isLookingUp = true;
+#endif
+
+                    _subContainer = _subCreator.CreateSubContainer(
+                            new List<TypeValuePair>(), context, out injectAction);
+
+#if !ZEN_MULTITHREADING
+                    _isLookingUp = false;
+#endif
+
+                    Assert.IsNotNull(_subContainer);
+                }
+                else 
+                {
+                    injectAction = null;
+                }
+
+                return _subContainer;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs.meta
new file mode 100644
index 0000000..947925c
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorCached.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 64db75da3b9de56409556af4513979c2
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs
new file mode 100644
index 0000000..bc21317
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs
@@ -0,0 +1,62 @@
+#if !NOT_UNITY3D
+
+using System;
+using System.Collections.Generic;
+using UnityEngine;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public abstract class SubContainerCreatorDynamicContext : ISubContainerCreator
+    {
+        readonly DiContainer _container;
+
+        public SubContainerCreatorDynamicContext(DiContainer container)
+        {
+            _container = container;
+        }
+
+        protected DiContainer Container
+        {
+            get { return _container; }
+        }
+
+        public DiContainer CreateSubContainer(
+            List<TypeValuePair> args, InjectContext parentContext, out Action injectAction)
+        {
+            bool shouldMakeActive;
+            var gameObj = CreateGameObject(parentContext, out shouldMakeActive);
+
+            var context = gameObj.AddComponent<GameObjectContext>();
+
+            AddInstallers(args, context);
+
+            context.Install(_container);
+
+            injectAction = () => 
+            {
+                // Note: We don't need to call ResolveRoots here because GameObjectContext does this for us
+                _container.Inject(context);
+
+                if (shouldMakeActive && !_container.IsValidating)
+                {
+#if ZEN_INTERNAL_PROFILING
+                    using (ProfileTimers.CreateTimedBlock("User Code"))
+#endif
+                    {
+                        gameObj.SetActive(true);
+                    }
+                }
+            };
+
+            return context.Container;
+        }
+
+        protected abstract void AddInstallers(List<TypeValuePair> args, GameObjectContext context);
+        protected abstract GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive);
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs.meta
new file mode 100644
index 0000000..7caa4d6
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorDynamicContext.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ba4736ebcee13cb4b9feca861072c740
+timeCreated: 1538467080
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs
new file mode 100644
index 0000000..2e20a6a
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs
@@ -0,0 +1,43 @@
+using System;
+using ModestTree;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject
+{
+    public static class SubContainerCreatorUtil
+    {
+        public static void ApplyBindSettings(
+            SubContainerCreatorBindInfo subContainerBindInfo, DiContainer subContainer)
+        {
+            if (subContainerBindInfo.CreateKernel)
+            {
+                var parentContainer = subContainer.ParentContainers.OnlyOrDefault();
+                Assert.IsNotNull(parentContainer, "Could not find unique container when using WithKernel!");
+
+                if (subContainerBindInfo.KernelType != null)
+                {
+                    parentContainer.Bind(typeof(Kernel).Interfaces()).To(subContainerBindInfo.KernelType)
+                        .FromSubContainerResolve()
+                        .ByInstance(subContainer).AsCached();
+                    subContainer.Bind(subContainerBindInfo.KernelType).AsCached();
+                }
+                else
+                {
+                    parentContainer.BindInterfacesTo<Kernel>().FromSubContainerResolve()
+                        .ByInstance(subContainer).AsCached();
+                    subContainer.Bind<Kernel>().AsCached();
+                }
+
+#if !NOT_UNITY3D
+                if (subContainerBindInfo.DefaultParentName != null)
+                {
+                    DefaultGameObjectParentInstaller.Install(
+                        subContainer, subContainerBindInfo.DefaultParentName);
+                }
+#endif
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs.meta b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs.meta
new file mode 100644
index 0000000..ebcec02
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerCreators/SubContainerCreatorUtil.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: c07a01bd5fbd00d43a50854896a92472
+timeCreated: 1534923026
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs b/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs
new file mode 100644
index 0000000..f55d6e8
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs
@@ -0,0 +1,73 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SubContainerDependencyProvider : IProvider
+    {
+        readonly ISubContainerCreator _subContainerCreator;
+        readonly Type _dependencyType;
+        readonly object _identifier;
+        readonly bool _resolveAll;
+
+        // if concreteType is null we use the contract type from inject context
+        public SubContainerDependencyProvider(
+            Type dependencyType,
+            object identifier,
+            ISubContainerCreator subContainerCreator, bool resolveAll)
+        {
+            _subContainerCreator = subContainerCreator;
+            _dependencyType = dependencyType;
+            _identifier = identifier;
+            _resolveAll = resolveAll;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return false; }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            return _dependencyType;
+        }
+
+        InjectContext CreateSubContext(
+            InjectContext parent, DiContainer subContainer)
+        {
+            var subContext = parent.CreateSubContext(_dependencyType, _identifier);
+
+            subContext.Container = subContainer;
+
+            // This is important to avoid infinite loops
+            subContext.SourceType = InjectSources.Local;
+
+            return subContext;
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            var subContainer = _subContainerCreator.CreateSubContainer(args, context, out injectAction);
+
+            var subContext = CreateSubContext(context, subContainer);
+
+            if (_resolveAll)
+            {
+                subContainer.ResolveAll(subContext, buffer);
+                return;
+            }
+
+            buffer.Add(subContainer.Resolve(subContext));
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs.meta b/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs.meta
new file mode 100644
index 0000000..282b2e3
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/SubContainerDependencyProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: d569147915c61b64f9841ca4948f7d3f
+timeCreated: 1461708054
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Providers/TransientProvider.cs b/Assets/Source/Runtime/Providers/TransientProvider.cs
new file mode 100644
index 0000000..998cbc6
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/TransientProvider.cs
@@ -0,0 +1,91 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class TransientProvider : IProvider
+    {
+        readonly DiContainer _container;
+        readonly Type _concreteType;
+        readonly List<TypeValuePair> _extraArguments;
+        readonly object _concreteIdentifier;
+        readonly Action<InjectContext, object> _instantiateCallback;
+
+        public TransientProvider(
+            Type concreteType, DiContainer container,
+            IEnumerable<TypeValuePair> extraArguments, string bindingContext,
+            object concreteIdentifier,
+            Action<InjectContext, object> instantiateCallback)
+        {
+            Assert.That(!concreteType.IsAbstract(),
+                "Expected non-abstract type for given binding but instead found type '{0}'{1}",
+                concreteType, bindingContext == null ? "" : " when binding '{0}'".Fmt(bindingContext));
+
+            _container = container;
+            _concreteType = concreteType;
+            _extraArguments = extraArguments.ToList();
+            _concreteIdentifier = concreteIdentifier;
+            _instantiateCallback = instantiateCallback;
+        }
+
+        public bool IsCached
+        {
+            get { return false; }
+        }
+
+        public bool TypeVariesBasedOnMemberType
+        {
+            get { return _concreteType.IsOpenGenericType(); }
+        }
+
+        public Type GetInstanceType(InjectContext context)
+        {
+            if (!_concreteType.DerivesFromOrEqual(context.MemberType))
+            {
+                return null;
+            }
+
+            return GetTypeToCreate(context.MemberType);
+        }
+
+        public void GetAllInstancesWithInjectSplit(
+            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)
+        {
+            Assert.IsNotNull(context);
+
+            var instanceType = GetTypeToCreate(context.MemberType);
+
+            var extraArgs = ZenPools.SpawnList<TypeValuePair>();
+
+            extraArgs.AllocFreeAddRange(_extraArguments);
+            extraArgs.AllocFreeAddRange(args);
+
+            var instance = _container.InstantiateExplicit(instanceType, false, extraArgs, context, _concreteIdentifier);
+
+            injectAction = () =>
+            {
+                _container.InjectExplicit(
+                    instance, instanceType, extraArgs, context, _concreteIdentifier);
+
+                Assert.That(extraArgs.Count == 0);
+                ZenPools.DespawnList(extraArgs);
+
+                if (_instantiateCallback != null)
+                {
+                    _instantiateCallback(context, instance);
+                }
+            };
+
+            buffer.Add(instance);
+        }
+
+        Type GetTypeToCreate(Type contractType)
+        {
+            return ProviderUtil.GetTypeToInstantiate(contractType, _concreteType);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Providers/TransientProvider.cs.meta b/Assets/Source/Runtime/Providers/TransientProvider.cs.meta
new file mode 100644
index 0000000..d8ba255
--- /dev/null
+++ b/Assets/Source/Runtime/Providers/TransientProvider.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 84c5bc61bc03f17468a1953edb7dcd42
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals.meta b/Assets/Source/Runtime/Signals.meta
new file mode 100644
index 0000000..5e438f4
--- /dev/null
+++ b/Assets/Source/Runtime/Signals.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 3b5451f8192289f4d91b4764b30bf5e4
+folderAsset: yes
+timeCreated: 1521300601
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal.meta b/Assets/Source/Runtime/Signals/Internal.meta
new file mode 100644
index 0000000..a25c595
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: ab31f5a16678ab042ae89fdbb0efec56
+folderAsset: yes
+timeCreated: 1521266917
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders.meta b/Assets/Source/Runtime/Signals/Internal/Binders.meta
new file mode 100644
index 0000000..48ff9a2
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: cc112bf254895114bb60868a302a3cf7
+folderAsset: yes
+timeCreated: 1521266917
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal.meta
new file mode 100644
index 0000000..f120234
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 610ec45090eac884ba824be81ada42fb
+folderAsset: yes
+timeCreated: 1521277428
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
new file mode 100644
index 0000000..31fa9ca
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs
@@ -0,0 +1,67 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    public class BindSignalFromBinder<TObject, TSignal>
+    {
+        readonly BindStatement _bindStatement;
+        readonly Func<TObject, Action<TSignal>> _methodGetter;
+        readonly DiContainer _container;
+        readonly SignalBindingBindInfo _signalBindInfo;
+
+        public BindSignalFromBinder(
+            SignalBindingBindInfo signalBindInfo, BindStatement bindStatement, Func<TObject, Action<TSignal>> methodGetter,
+            DiContainer container)
+        {
+            _signalBindInfo = signalBindInfo;
+            _bindStatement = bindStatement;
+            _methodGetter = methodGetter;
+            _container = container;
+        }
+
+        public SignalCopyBinder FromResolve()
+        {
+            return From(x => x.FromResolve().AsCached());
+        }
+
+        public SignalCopyBinder FromResolveAll()
+        {
+            return From(x => x.FromResolveAll().AsCached());
+        }
+
+        public SignalCopyBinder FromNew()
+        {
+            return From(x => x.FromNew().AsCached());
+        }
+
+        public SignalCopyBinder From(Action<ConcreteBinderGeneric<TObject>> objectBindCallback)
+        {
+            Assert.That(!_bindStatement.HasFinalizer);
+            _bindStatement.SetFinalizer(new NullBindingFinalizer());
+
+            var objectLookupId = Guid.NewGuid();
+
+            // Very important here that we use NoFlush otherwise the main binding will be finalized early
+            var objectBinder = _container.BindNoFlush<TObject>().WithId(objectLookupId);
+
+            objectBindCallback(objectBinder);
+
+            // We need to do this to make sure SignalCallbackWithLookupWrapper does not have
+            // generic types to avoid AOT issues
+            Func<object, Action<object>> methodGetterMapper =
+                obj => s => _methodGetter((TObject)obj)((TSignal)s);
+
+            var wrapperBinder = _container.Bind<IDisposable>()
+                .To<SignalCallbackWithLookupWrapper>()
+                .AsCached()
+                .WithArguments(_signalBindInfo, typeof(TObject), objectLookupId, methodGetterMapper)
+                .NonLazy();
+
+            var copyBinder = new SignalCopyBinder( wrapperBinder.BindInfo);
+            // Make sure if they use one of the Copy/Move methods that it applies to both bindings
+            copyBinder.AddCopyBindInfo(objectBinder.BindInfo);
+            return copyBinder;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs.meta
new file mode 100644
index 0000000..7fd0cf9
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalFromBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: c779f758eaadfd54fb9c66f7acc75716
+timeCreated: 1521288279
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
new file mode 100644
index 0000000..01568a4
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs
@@ -0,0 +1,20 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    public class BindSignalIdToBinder<TSignal> : BindSignalToBinder<TSignal>
+    {
+        public BindSignalIdToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo)
+            : base(container, signalBindInfo)
+        {
+        }
+
+        public BindSignalToBinder<TSignal> WithId(object identifier)
+        {
+            SignalBindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs.meta
new file mode 100644
index 0000000..9e6e2ce
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalIdToBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ecce6d44c178e564c8937125741f3c8c
+timeCreated: 1538401230
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
new file mode 100644
index 0000000..76ba5db
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs
@@ -0,0 +1,64 @@
+using System;
+using ModestTree;
+
+namespace Zenject
+{
+    public class BindSignalToBinder<TSignal>
+    {
+        DiContainer _container;
+        BindStatement _bindStatement;
+        SignalBindingBindInfo _signalBindInfo;
+
+        public BindSignalToBinder(DiContainer container, SignalBindingBindInfo signalBindInfo)
+        {
+            _container = container;
+
+            _signalBindInfo = signalBindInfo;
+            // This will ensure that they finish the binding
+            _bindStatement = container.StartBinding();
+        }
+
+        protected SignalBindingBindInfo SignalBindInfo
+        {
+            get { return _signalBindInfo; }
+        }
+
+        public SignalCopyBinder ToMethod(Action<TSignal> callback)
+        {
+            Assert.That(!_bindStatement.HasFinalizer);
+            _bindStatement.SetFinalizer(new NullBindingFinalizer());
+
+            var bindInfo = _container.Bind<IDisposable>()
+                .To<SignalCallbackWrapper>()
+                .AsCached()
+                // Note that there's a reason we don't just make SignalCallbackWrapper have a generic
+                // argument for signal type - because when using struct type signals it throws
+                // exceptions on AOT platforms
+                .WithArguments(_signalBindInfo, (Action<object>)(o => callback((TSignal)o)))
+                .NonLazy().BindInfo;
+
+            return new SignalCopyBinder(bindInfo);
+        }
+
+        public SignalCopyBinder ToMethod(Action callback)
+        {
+            return ToMethod(signal => callback());
+        }
+
+        public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Action<TObject, TSignal> handler)
+        {
+            return ToMethod<TObject>(x => (Action<TSignal>)(s => handler(x, s)));
+        }
+
+        public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Func<TObject, Action> handlerGetter)
+        {
+            return ToMethod<TObject>(x => (Action<TSignal>)(s => handlerGetter(x)()));
+        }
+
+        public BindSignalFromBinder<TObject, TSignal> ToMethod<TObject>(Func<TObject, Action<TSignal>> handlerGetter)
+        {
+            return new BindSignalFromBinder<TObject, TSignal>(
+                _signalBindInfo, _bindStatement, handlerGetter, _container);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs.meta
new file mode 100644
index 0000000..067de36
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/BindSignalToBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 6df1bca64a984074fb4af41dc1d42a07
+timeCreated: 1521288279
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
new file mode 100644
index 0000000..7911ec7
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs
@@ -0,0 +1,54 @@
+using System;
+
+namespace Zenject
+{
+    // Note that there's a reason we don't just have a generic
+    // argument for signal type - because when using struct type signals it throws
+    // exceptions on AOT platforms
+    public class SignalCallbackWithLookupWrapper : IDisposable
+    {
+        readonly DiContainer _container;
+        readonly SignalBus _signalBus;
+        readonly Guid _lookupId;
+        readonly Func<object, Action<object>> _methodGetter;
+        readonly Type _objectType;
+        readonly Type _signalType;
+        readonly object _identifier;
+
+        [Inject]
+        public SignalCallbackWithLookupWrapper(
+            SignalBindingBindInfo signalBindInfo,
+            Type objectType,
+            Guid lookupId,
+            Func<object, Action<object>> methodGetter,
+            SignalBus signalBus,
+            DiContainer container)
+        {
+            _objectType = objectType;
+            _signalType = signalBindInfo.SignalType;
+            _identifier = signalBindInfo.Identifier;
+            _container = container;
+            _methodGetter = methodGetter;
+            _signalBus = signalBus;
+            _lookupId = lookupId;
+
+            signalBus.SubscribeId(signalBindInfo.SignalType, _identifier, OnSignalFired);
+        }
+
+        void OnSignalFired(object signal)
+        {
+            var objects = _container.ResolveIdAll(_objectType, _lookupId);
+
+            for (int i = 0; i < objects.Count; i++)
+            {
+                _methodGetter(objects[i])(signal);
+            }
+        }
+
+        public void Dispose()
+        {
+            _signalBus.UnsubscribeId(_signalType, _identifier, OnSignalFired);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs.meta
new file mode 100644
index 0000000..ef7e9a7
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWithLookupWrapper.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 2b11a635fa1263c4f9a9a0d70d7efcf2
+timeCreated: 1521293791
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
new file mode 100644
index 0000000..1e0fdf1
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs
@@ -0,0 +1,39 @@
+using System;
+
+namespace Zenject
+{
+    // Note that there's a reason we don't just have a generic
+    // argument for signal type - because when using struct type signals it throws
+    // exceptions on AOT platforms
+    public class SignalCallbackWrapper : IDisposable
+    {
+        readonly SignalBus _signalBus;
+        readonly Action<object> _action;
+        readonly Type _signalType;
+        readonly object _identifier;
+
+        [Inject]
+        public SignalCallbackWrapper(
+            SignalBindingBindInfo bindInfo,
+            Action<object> action,
+            SignalBus signalBus)
+        {
+            _signalType = bindInfo.SignalType;
+            _identifier = bindInfo.Identifier;
+            _signalBus = signalBus;
+            _action = action;
+
+            signalBus.SubscribeId(bindInfo.SignalType, _identifier, OnSignalFired);
+        }
+
+        void OnSignalFired(object signal)
+        {
+            _action(signal);
+        }
+
+        public void Dispose()
+        {
+            _signalBus.UnsubscribeId(_signalType, _identifier, OnSignalFired);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs.meta
new file mode 100644
index 0000000..7b17d81
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/BindSignal/SignalCallbackWrapper.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 9a8599dbdf9033e468671e40de134ccf
+timeCreated: 1521289018
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal.meta
new file mode 100644
index 0000000..c8477c1
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: 7fe74811bfda2ef4ca9791eab479b27a
+folderAsset: yes
+timeCreated: 1521277428
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
new file mode 100644
index 0000000..4e1a79e
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs
@@ -0,0 +1,24 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DeclareSignalAsyncTickPriorityCopyBinder : SignalTickPriorityCopyBinder
+    {
+        public DeclareSignalAsyncTickPriorityCopyBinder(SignalDeclarationBindInfo signalBindInfo)
+            : base(signalBindInfo)
+        {
+        }
+
+        public SignalTickPriorityCopyBinder RunAsync()
+        {
+            SignalBindInfo.RunAsync = true;
+            return this;
+        }
+
+        public SignalCopyBinder RunSync()
+        {
+            SignalBindInfo.RunAsync = false;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs.meta
new file mode 100644
index 0000000..c312e3d
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalAsyncTickPriorityCopyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: b81f91889a4f58f45a186d306ec19a76
+timeCreated: 1529046908
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
new file mode 100644
index 0000000..189015b
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs
@@ -0,0 +1,20 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder
+    {
+        public DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(
+            SignalDeclarationBindInfo signalBindInfo)
+            : base(signalBindInfo)
+        {
+        }
+
+        public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder WithId(object identifier)
+        {
+            SignalBindInfo.Identifier = identifier;
+            return this;
+        }
+    }
+}
+
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
new file mode 100644
index 0000000..c4aa2f8
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 183994f131b561a43a9967cceb7c949d
+timeCreated: 1538037476
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
new file mode 100644
index 0000000..7fd4ed1
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs
@@ -0,0 +1,31 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder : DeclareSignalAsyncTickPriorityCopyBinder
+    {
+        public DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder(
+            SignalDeclarationBindInfo signalBindInfo)
+            : base(signalBindInfo)
+        {
+        }
+
+        public DeclareSignalAsyncTickPriorityCopyBinder RequireSubscriber()
+        {
+            SignalBindInfo.MissingHandlerResponse = SignalMissingHandlerResponses.Throw;
+            return this;
+        }
+
+        public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriber()
+        {
+            SignalBindInfo.MissingHandlerResponse = SignalMissingHandlerResponses.Ignore;
+            return this;
+        }
+
+        public DeclareSignalAsyncTickPriorityCopyBinder OptionalSubscriberWithWarning()
+        {
+            SignalBindInfo.MissingHandlerResponse = SignalMissingHandlerResponses.Warn;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
new file mode 100644
index 0000000..e2f747d
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/DeclareSignalRequireHandlerAsyncTickPriorityCopyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7cc67ec88be096e4a89e01987d671cb9
+timeCreated: 1529046908
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
new file mode 100644
index 0000000..29c5c45
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs
@@ -0,0 +1,24 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SignalBindingBindInfo
+    {
+        public SignalBindingBindInfo(Type signalType)
+        {
+            SignalType = signalType;
+        }
+
+        public object Identifier
+        {
+            get; set;
+        }
+
+        public Type SignalType
+        {
+            get; private set;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs.meta
new file mode 100644
index 0000000..aa2ef7b
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalBindingBindInfo.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 054ec2c1e404fd04f99dcab4d9012db2
+timeCreated: 1538401117
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
new file mode 100644
index 0000000..017a77f
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs
@@ -0,0 +1,38 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SignalDeclarationBindInfo
+    {
+        public SignalDeclarationBindInfo(Type signalType)
+        {
+            SignalType = signalType;
+        }
+
+        public object Identifier
+        {
+            get; set;
+        }
+
+        public Type SignalType
+        {
+            get; private set;
+        }
+
+        public bool RunAsync
+        {
+            get; set;
+        }
+
+        public int TickPriority
+        {
+            get; set;
+        }
+
+        public SignalMissingHandlerResponses MissingHandlerResponse
+        {
+            get; set;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs.meta
new file mode 100644
index 0000000..d96f3eb
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/DeclareSignal/SignalDeclarationBindInfo.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1e83db91ff836874fb4fcf3ae4e16f0b
+timeCreated: 1521277428
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs
new file mode 100644
index 0000000..4495b19
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs
@@ -0,0 +1,61 @@
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SignalCopyBinder
+    {
+        readonly List<BindInfo> _bindInfos;
+
+        public SignalCopyBinder()
+        {
+            _bindInfos = new List<BindInfo>();
+        }
+
+        public SignalCopyBinder(BindInfo bindInfo)
+        {
+            _bindInfos = new List<BindInfo>
+            {
+                bindInfo
+            };
+        }
+
+        // This is used in cases where you have multiple bindings that depend on each other so should
+        // be inherited together
+        public void AddCopyBindInfo(BindInfo bindInfo)
+        {
+            _bindInfos.Add(bindInfo);
+        }
+
+        public void CopyIntoAllSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.CopyIntoAll);
+        }
+
+        // Only copy the binding into children and not grandchildren
+        public void CopyIntoDirectSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.CopyDirectOnly);
+        }
+
+        // Do not apply the binding on the current container
+        public void MoveIntoAllSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.MoveIntoAll);
+        }
+
+        // Do not apply the binding on the current container
+        public void MoveIntoDirectSubContainers()
+        {
+            SetInheritanceMethod(BindingInheritanceMethods.MoveDirectOnly);
+        }
+
+        void SetInheritanceMethod(BindingInheritanceMethods method)
+        {
+            for (int i = 0; i < _bindInfos.Count; i++)
+            {
+                _bindInfos[i].BindingInheritanceMethod = method;
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs.meta
new file mode 100644
index 0000000..64e170d
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalCopyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 604fe2d23cc79c7498be851b6970af1b
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs b/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs
new file mode 100644
index 0000000..cd93bb3
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs
@@ -0,0 +1,57 @@
+using System;
+namespace Zenject
+{
+    public static class SignalExtensions
+    {
+        public static SignalDeclarationBindInfo CreateDefaultSignalDeclarationBindInfo(DiContainer container, Type signalType)
+        {
+            return new SignalDeclarationBindInfo(signalType)
+            {
+                RunAsync = container.Settings.Signals.DefaultSyncMode == SignalDefaultSyncModes.Asynchronous,
+                MissingHandlerResponse = container.Settings.Signals.MissingHandlerDefaultResponse,
+                TickPriority = container.Settings.Signals.DefaultAsyncTickPriority
+            };
+        }
+
+        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal(this DiContainer container, Type type)
+        {
+            var signalBindInfo = CreateDefaultSignalDeclarationBindInfo(container, type);
+
+            var bindInfo = container.Bind<SignalDeclaration>().AsCached()
+                .WithArguments(signalBindInfo).WhenInjectedInto(typeof(SignalBus), typeof(SignalDeclarationAsyncInitializer)).BindInfo;
+
+            var signalBinder = new DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder(signalBindInfo);
+            signalBinder.AddCopyBindInfo(bindInfo);
+            return signalBinder;
+        }
+
+        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignal<TSignal>(this DiContainer container)
+        {
+            return container.DeclareSignal(typeof(TSignal));
+        }
+
+        public static DeclareSignalIdRequireHandlerAsyncTickPriorityCopyBinder DeclareSignalWithInterfaces<TSignal>(this DiContainer container)
+        {
+            Type type = typeof(TSignal);
+
+            var declaration = container.DeclareSignal(type);
+
+            Type[] interfaces = type.GetInterfaces();
+            int numOfInterfaces = interfaces.Length;
+            for (int i = 0; i < numOfInterfaces; i++)
+            {
+                container.DeclareSignal(interfaces[i]);
+            }
+
+            return declaration;
+        }
+
+        public static BindSignalIdToBinder<TSignal> BindSignal<TSignal>(this DiContainer container)
+        {
+            var signalBindInfo = new SignalBindingBindInfo(typeof(TSignal));
+
+            return new BindSignalIdToBinder<TSignal>(container, signalBindInfo);
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs.meta
new file mode 100644
index 0000000..652cf5e
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalExtensions.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: ca6f0ad40fd1abc4a8fb5e8a50134aa4
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs b/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
new file mode 100644
index 0000000..f35e1ba
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs
@@ -0,0 +1,25 @@
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class SignalTickPriorityCopyBinder : SignalCopyBinder
+    {
+        public SignalTickPriorityCopyBinder(
+            SignalDeclarationBindInfo signalBindInfo)
+        {
+            SignalBindInfo = signalBindInfo;
+        }
+
+        protected SignalDeclarationBindInfo SignalBindInfo
+        {
+            get; private set;
+        }
+
+        public SignalCopyBinder WithTickPriority(int priority)
+        {
+            SignalBindInfo.TickPriority = priority;
+            SignalBindInfo.RunAsync = true;
+            return this;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs.meta b/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs.meta
new file mode 100644
index 0000000..4f9734e
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/Binders/SignalTickPriorityCopyBinder.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: fb1dbf2ad8637f340a532132f4555abd
+timeCreated: 1529046908
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs b/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs
new file mode 100644
index 0000000..fd2adb5
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs
@@ -0,0 +1,187 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+#if ZEN_SIGNALS_ADD_UNIRX
+using UniRx;
+#endif
+
+namespace Zenject
+{
+    public class SignalDeclaration : ITickable, IDisposable
+    {
+        readonly List<SignalSubscription> _subscriptions = new List<SignalSubscription>();
+        readonly List<object> _asyncQueue = new List<object>();
+        readonly BindingId _bindingId;
+        readonly SignalMissingHandlerResponses _missingHandlerResponses;
+        readonly bool _isAsync;
+        readonly ZenjectSettings.SignalSettings _settings;
+
+#if ZEN_SIGNALS_ADD_UNIRX
+        readonly Subject<object> _stream = new Subject<object>();
+#endif
+
+        [Inject]
+        public SignalDeclaration(
+            SignalDeclarationBindInfo bindInfo,
+            [InjectOptional]
+            ZenjectSettings zenjectSettings)
+        {
+            zenjectSettings = zenjectSettings ?? ZenjectSettings.Default;
+            _settings = zenjectSettings.Signals ?? ZenjectSettings.SignalSettings.Default;
+
+            _bindingId = new BindingId(bindInfo.SignalType, bindInfo.Identifier);
+            _missingHandlerResponses = bindInfo.MissingHandlerResponse;
+            _isAsync = bindInfo.RunAsync;
+            TickPriority = bindInfo.TickPriority;
+        }
+
+#if ZEN_SIGNALS_ADD_UNIRX
+        public IObservable<object> Stream
+        {
+            get { return _stream; }
+        }
+#endif
+
+		public List<SignalSubscription> Subscriptions => _subscriptions;
+
+        public int TickPriority
+        {
+            get; private set;
+        }
+
+        public bool IsAsync
+        {
+            get { return _isAsync; }
+        }
+
+        public BindingId BindingId
+        {
+            get { return _bindingId; }
+        }
+
+        public void Dispose()
+        {
+            if (_settings.RequireStrictUnsubscribe)
+            {
+                Assert.That(_subscriptions.IsEmpty(),
+                    "Found {0} signal handlers still added to declaration {1}", _subscriptions.Count, _bindingId);
+            }
+            else
+            {
+                // We can't rely entirely on the destruction order in Unity because of
+                // the fact that OnDestroy is completely unpredictable.
+                // So if you have a GameObjectContext at the root level in your scene, then it
+                // might be destroyed AFTER the SceneContext.  So if you have some signal declarations
+                // in the scene context, they might get disposed before some of the subscriptions
+                // so in this case you need to disconnect from the subscription so that it doesn't
+                // try to remove itself after the declaration has been destroyed
+                for (int i = 0; i < _subscriptions.Count; i++)
+                {
+                    _subscriptions[i].OnDeclarationDespawned();
+                }
+            }
+        }
+
+        public void Fire(object signal)
+        {
+            Assert.That(signal.GetType().DerivesFromOrEqual(_bindingId.Type));
+
+            if (_isAsync)
+            {
+                _asyncQueue.Add(signal);
+            }
+            else
+            {
+                // Cache the callback list to allow handlers to be added from within callbacks
+                using (var block = DisposeBlock.Spawn())
+                {
+                    var subscriptions = block.SpawnList<SignalSubscription>();
+                    subscriptions.AddRange(_subscriptions);
+                    FireInternal(subscriptions, signal);
+                }
+            }
+        }
+
+        void FireInternal(List<SignalSubscription> subscriptions, object signal)
+        {
+            if (subscriptions.IsEmpty()
+#if ZEN_SIGNALS_ADD_UNIRX
+                && !_stream.HasObservers
+#endif
+                )
+            {
+                if (_missingHandlerResponses == SignalMissingHandlerResponses.Warn)
+                {
+                    Log.Warn("Fired signal '{0}' but no subscriptions found!  If this is intentional then either add OptionalSubscriber() to the binding or change the default in ZenjectSettings", signal.GetType());
+                }
+                else if (_missingHandlerResponses == SignalMissingHandlerResponses.Throw)
+                {
+                    throw Assert.CreateException(
+                        "Fired signal '{0}' but no subscriptions found!  If this is intentional then either add OptionalSubscriber() to the binding or change the default in ZenjectSettings", signal.GetType());
+                }
+            }
+
+            for (int i = 0; i < subscriptions.Count; i++)
+            {
+                var subscription = subscriptions[i];
+
+                // This is a weird check for the very rare case where an Unsubscribe is called
+                // from within the same callback (see TestSignalsAdvanced.TestSubscribeUnsubscribeInsideHandler)
+                if (_subscriptions.Contains(subscription))
+                {
+                    subscription.Invoke(signal);
+                }
+            }
+
+#if ZEN_SIGNALS_ADD_UNIRX
+            _stream.OnNext(signal);
+#endif
+        }
+
+        public void Tick()
+        {
+            Assert.That(_isAsync);
+
+            if (!_asyncQueue.IsEmpty())
+            {
+                // Cache the callback list to allow handlers to be added from within callbacks
+                using (var block = DisposeBlock.Spawn())
+                {
+                    var subscriptions = block.SpawnList<SignalSubscription>();
+                    subscriptions.AddRange(_subscriptions);
+
+                    // Cache the signals so that if the signal is fired again inside the handler that it
+                    // is not executed until next frame
+                    var signals = block.SpawnList<object>();
+                    signals.AddRange(_asyncQueue);
+
+                    _asyncQueue.Clear();
+
+                    for (int i = 0; i < signals.Count; i++)
+                    {
+                        FireInternal(subscriptions, signals[i]);
+                    }
+                }
+            }
+        }
+
+        public void Add(SignalSubscription subscription)
+        {
+            Assert.That(!_subscriptions.Contains(subscription));
+            _subscriptions.Add(subscription);
+        }
+
+        public void Remove(SignalSubscription subscription)
+        {
+            _subscriptions.RemoveWithConfirm(subscription);
+        }
+
+        public class Factory : PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>
+        {
+            [Inject]
+            public Factory()
+            {
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs.meta b/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs.meta
new file mode 100644
index 0000000..61f0304
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalDeclaration.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1246007cc9cfbc04cb83b9bde4c34995
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs b/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs
new file mode 100644
index 0000000..cd13582
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs
@@ -0,0 +1,87 @@
+using System;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    public class SignalSubscription : IDisposable, IPoolable<Action<object>, SignalDeclaration>
+    {
+        readonly Pool _pool;
+
+        Action<object> _callback;
+        SignalDeclaration _declaration;
+        BindingId _signalId;
+
+        [Inject]
+        public SignalSubscription(Pool pool)
+        {
+            _pool = pool;
+
+            SetDefaults();
+        }
+
+        public BindingId SignalId
+        {
+            get { return _signalId; }
+        }
+
+        public void OnSpawned(
+            Action<object> callback, SignalDeclaration declaration)
+        {
+            Assert.IsNull(_callback);
+            _callback = callback;
+            _declaration = declaration;
+            // Cache this in case OnDeclarationDespawned is called
+            _signalId = declaration.BindingId;
+
+            declaration.Add(this);
+        }
+
+        public void OnDespawned()
+        {
+            if (_declaration != null)
+            {
+                _declaration.Remove(this);
+            }
+
+            SetDefaults();
+        }
+
+        void SetDefaults()
+        {
+            _callback = null;
+            _declaration = null;
+            _signalId = new BindingId();
+        }
+
+        public void Dispose()
+        {
+            // Allow calling this twice since signals automatically unsubscribe in SignalBus.LateDispose
+            // and so this causes issues if users also unsubscribe in a MonoBehaviour OnDestroy on a
+            // root game object
+            if (!_pool.InactiveItems.Contains(this))
+            {
+                _pool.Despawn(this);
+            }
+        }
+
+        // See comment in SignalDeclaration for why this exists
+        public void OnDeclarationDespawned()
+        {
+            _declaration = null;
+        }
+
+        public void Invoke(object signal)
+        {
+            _callback(signal);
+        }
+
+        public class Pool : PoolableMemoryPool<Action<object>, SignalDeclaration, SignalSubscription>
+        {
+            [Inject]
+            public Pool()
+            {
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs.meta b/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs.meta
new file mode 100644
index 0000000..467a096
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalSubscription.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 26affab6a482d904580cce7f9f1a94f4
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs b/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs
new file mode 100644
index 0000000..89ed401
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs
@@ -0,0 +1,65 @@
+using System;
+using System.Diagnostics;
+
+namespace Zenject
+{
+    [DebuggerStepThrough]
+    public struct SignalSubscriptionId : IEquatable<SignalSubscriptionId>
+    {
+        BindingId _signalId;
+        object _callback;
+
+        public SignalSubscriptionId(BindingId signalId, object callback)
+        {
+            _signalId = signalId;
+            _callback = callback;
+        }
+
+        public BindingId SignalId
+        {
+            get { return _signalId; }
+        }
+
+        public object Callback
+        {
+            get { return _callback; }
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + _signalId.GetHashCode();
+                hash = hash * 29 + _callback.GetHashCode();
+                return hash;
+            }
+        }
+
+        public override bool Equals(object that)
+        {
+            if (that is SignalSubscriptionId)
+            {
+                return Equals((SignalSubscriptionId)that);
+            }
+
+            return false;
+        }
+
+        public bool Equals(SignalSubscriptionId that)
+        {
+            return Equals(_signalId, that._signalId)
+                && Equals(Callback, that.Callback);
+        }
+
+        public static bool operator == (SignalSubscriptionId left, SignalSubscriptionId right)
+        {
+            return left.Equals(right);
+        }
+
+        public static bool operator != (SignalSubscriptionId left, SignalSubscriptionId right)
+        {
+            return !left.Equals(right);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs.meta b/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs.meta
new file mode 100644
index 0000000..5b260b7
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Internal/SignalSubscriptionId.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 2ebf6df7998e59b4393ef46553665ba2
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Main.meta b/Assets/Source/Runtime/Signals/Main.meta
new file mode 100644
index 0000000..ebf169b
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main.meta
@@ -0,0 +1,10 @@
+fileFormatVersion: 2
+guid: ebb190b1462cf04478644ba25fb51df0
+folderAsset: yes
+timeCreated: 1521266917
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Main/SignalBus.cs b/Assets/Source/Runtime/Signals/Main/SignalBus.cs
new file mode 100644
index 0000000..58f3334
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalBus.cs
@@ -0,0 +1,451 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+#if ZEN_SIGNALS_ADD_UNIRX
+using UniRx;
+#endif
+
+namespace Zenject
+{
+    public class SignalBus : ILateDisposable
+    {
+        readonly SignalSubscription.Pool _subscriptionPool;
+        readonly Dictionary<BindingId, SignalDeclaration> _localDeclarationMap = new Dictionary<BindingId, SignalDeclaration>();
+        readonly SignalBus _parentBus;
+        readonly Dictionary<SignalSubscriptionId, SignalSubscription> _subscriptionMap = new Dictionary<SignalSubscriptionId, SignalSubscription>();
+        readonly ZenjectSettings.SignalSettings _settings;
+        readonly SignalDeclaration.Factory _signalDeclarationFactory;
+        readonly DiContainer _container;
+
+        [Inject]
+        public SignalBus(
+            [Inject(Source = InjectSources.Local)]
+            List<SignalDeclaration> signalDeclarations,
+            [Inject(Source = InjectSources.Parent, Optional = true)]
+            SignalBus parentBus,
+            [InjectOptional]
+            ZenjectSettings zenjectSettings,
+            SignalSubscription.Pool subscriptionPool,
+            SignalDeclaration.Factory signalDeclarationFactory,
+            DiContainer container)
+        {
+            _subscriptionPool = subscriptionPool;
+            zenjectSettings = zenjectSettings ?? ZenjectSettings.Default;
+            _settings = zenjectSettings.Signals ?? ZenjectSettings.SignalSettings.Default;
+            _signalDeclarationFactory = signalDeclarationFactory;
+            _container = container;
+
+           signalDeclarations.ForEach(x =>
+			{
+				if (!_localDeclarationMap.ContainsKey(x.BindingId))
+				{
+					_localDeclarationMap.Add(x.BindingId, x);
+				}
+				else _localDeclarationMap[x.BindingId].Subscriptions.AllocFreeAddRange(x.Subscriptions);
+			});
+            _parentBus = parentBus;
+        }
+
+        public SignalBus ParentBus
+        {
+            get { return _parentBus; }
+        }
+
+        public int NumSubscribers
+        {
+            get { return _subscriptionMap.Count; }
+        }
+
+
+        //Fires Signals with their interfaces
+        public void AbstractFire<TSignal>() where TSignal : new() => AbstractFire(new TSignal());
+		public void AbstractFire<TSignal>(TSignal signal) => AbstractFireId(null, signal);
+		public void AbstractFireId<TSignal>(object identifier, TSignal signal)
+		{
+			// Do this before creating the signal so that it throws if the signal was not declared
+			Type signalType = typeof(TSignal);
+            InternalFire(signalType, signal, identifier, true);
+
+            Type[] interfaces = signalType.GetInterfaces();
+            int numOfInterfaces = interfaces.Length;
+            for (int i = 0; i < numOfInterfaces; i++)
+            {
+                InternalFire(interfaces[i], signal, identifier, true);
+            }
+		}
+
+        public void LateDispose()
+        {
+            if (_settings.RequireStrictUnsubscribe)
+            {
+                if (!_subscriptionMap.IsEmpty())
+                {
+                    throw Assert.CreateException(
+                        "Found subscriptions for signals '{0}' in SignalBus.LateDispose!  Either add the explicit Unsubscribe or set SignalSettings.AutoUnsubscribeInDispose to true",
+                        _subscriptionMap.Values.Select(x => x.SignalId.ToString()).Join(", "));
+                }
+            }
+            else
+            {
+                foreach (var subscription in _subscriptionMap.Values)
+                {
+                    subscription.Dispose();
+                }
+            }
+
+            foreach (var declaration in _localDeclarationMap.Values)
+            {
+                declaration.Dispose();
+            }
+        }
+
+        public void FireId<TSignal>(object identifier, TSignal signal)
+        {
+            InternalFire(typeof(TSignal), signal, identifier, true);
+        }
+
+        public void Fire<TSignal>(TSignal signal)
+        {
+            FireId<TSignal>(null, signal);
+        }
+
+        public void FireId<TSignal>(object identifier)
+        {
+            InternalFire(typeof(TSignal), null, identifier, true);
+        }
+
+        public void Fire<TSignal>()
+        {
+            FireId<TSignal>(null);
+        }
+
+        public void FireId(object identifier, object signal)
+        {
+            InternalFire(signal.GetType(), signal, identifier, true);
+        }
+
+        public void Fire(object signal)
+        {
+            FireId(null, signal);
+        }
+
+        public bool IsSignalDeclared<TSignal>()
+        {
+            return IsSignalDeclared(typeof(TSignal), null);
+        }
+
+        public bool IsSignalDeclared<TSignal>(object identifier)
+        {
+            return IsSignalDeclared(typeof(TSignal), identifier);
+        }
+
+        public bool IsSignalDeclared(Type signalType)  
+        {
+            return IsSignalDeclared(signalType, null);
+        }
+
+        public bool IsSignalDeclared(Type signalType, object identifier) 
+        {
+            var signalId = new BindingId(signalType, identifier);
+            return GetDeclaration(signalId) != null;
+        }
+
+        public void TryFireId<TSignal>(object identifier, TSignal signal)
+        {
+            InternalFire(typeof(TSignal), signal, identifier, false);
+        }
+
+        public void TryFire<TSignal>(TSignal signal)
+        {
+            TryFireId<TSignal>(null, signal);
+        }
+
+        public void TryFireId<TSignal>(object identifier)
+        {
+            InternalFire(typeof(TSignal), null, identifier, false);
+        }
+
+        public void TryFire<TSignal>()
+        {
+            TryFireId<TSignal>(null);
+        }
+
+        public void TryFireId(object identifier, object signal)
+        {
+            InternalFire(signal.GetType(), signal, identifier, false);
+        }
+
+        public void TryFire(object signal)
+        {
+            TryFireId(null, signal);
+        }
+
+        private void InternalFire(Type signalType, object signal, object identifier, bool requireDeclaration)
+        {
+            var signalId = new BindingId(signalType, identifier);
+
+            // Do this before creating the signal so that it throws if the signal was not declared
+            var declaration = GetDeclaration(signalId);
+
+            if (declaration == null)
+            {
+                if (requireDeclaration)
+                {
+                    throw Assert.CreateException("Fired undeclared signal '{0}'!", signalId);
+                }
+            }
+            else
+            {
+                if (signal == null)
+                {
+                    signal = Activator.CreateInstance(signalType);
+                }
+
+                declaration.Fire(signal);
+            }
+        }
+
+#if ZEN_SIGNALS_ADD_UNIRX
+        public IObservable<TSignal> GetStreamId<TSignal>(object identifier)
+        {
+            return GetStreamId(typeof(TSignal), identifier).Select(x => (TSignal)x);
+        }
+
+        public IObservable<TSignal> GetStream<TSignal>()
+        {
+            return GetStreamId<TSignal>(null);
+        }
+
+        public IObservable<object> GetStreamId(Type signalType, object identifier)
+        {
+            return GetDeclaration(new BindingId(signalType, identifier)).Stream;
+        }
+
+        public IObservable<object> GetStream(Type signalType)
+        {
+            return GetStreamId(signalType, null);
+        }
+#endif
+
+        public void SubscribeId<TSignal>(object identifier, Action callback)
+        {
+            Action<object> wrapperCallback = args => callback();
+            SubscribeInternal(typeof(TSignal), identifier, callback, wrapperCallback);
+        }
+
+        public void Subscribe<TSignal>(Action callback)
+        {
+            SubscribeId<TSignal>(null, callback);
+        }
+
+        public void SubscribeId<TSignal>(object identifier, Action<TSignal> callback)
+        {
+            Action<object> wrapperCallback = args => callback((TSignal)args);
+            SubscribeInternal(typeof(TSignal), identifier, callback, wrapperCallback);
+        }
+
+        public void Subscribe<TSignal>(Action<TSignal> callback)
+        {
+            SubscribeId<TSignal>(null, callback);
+        }
+
+        public void SubscribeId(Type signalType, object identifier, Action<object> callback)
+        {
+            SubscribeInternal(signalType, identifier, callback, callback);
+        }
+
+        public void Subscribe(Type signalType, Action<object> callback)
+        {
+            SubscribeId(signalType, null, callback);
+        }
+
+        public void UnsubscribeId<TSignal>(object identifier, Action callback)
+        {
+            UnsubscribeId(typeof(TSignal), identifier, callback);
+        }
+
+        public void Unsubscribe<TSignal>(Action callback)
+        {
+            UnsubscribeId<TSignal>(null, callback);
+        }
+
+        public void UnsubscribeId(Type signalType, object identifier, Action callback)
+        {
+            UnsubscribeInternal(signalType, identifier, callback, true);
+        }
+
+        public void Unsubscribe(Type signalType, Action callback)
+        {
+            UnsubscribeId(signalType, null, callback);
+        }
+
+        public void UnsubscribeId(Type signalType, object identifier, Action<object> callback)
+        {
+            UnsubscribeInternal(signalType, identifier, callback, true);
+        }
+
+        public void Unsubscribe(Type signalType, Action<object> callback)
+        {
+            UnsubscribeId(signalType, null, callback);
+        }
+
+        public void UnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)
+        {
+            UnsubscribeInternal(typeof(TSignal), identifier, callback, true);
+        }
+
+        public void Unsubscribe<TSignal>(Action<TSignal> callback)
+        {
+            UnsubscribeId<TSignal>(null, callback);
+        }
+
+        public void TryUnsubscribeId<TSignal>(object identifier, Action callback)
+        {
+            UnsubscribeInternal(typeof(TSignal), identifier, callback, false);
+        }
+
+        public void TryUnsubscribe<TSignal>(Action callback)
+        {
+            TryUnsubscribeId<TSignal>(null, callback);
+        }
+
+        public void TryUnsubscribeId(Type signalType, object identifier, Action callback)
+        {
+            UnsubscribeInternal(signalType, identifier, callback, false);
+        }
+
+        public void TryUnsubscribe(Type signalType, Action callback)
+        {
+            TryUnsubscribeId(signalType, null, callback);
+        }
+
+        public void TryUnsubscribeId(Type signalType, object identifier, Action<object> callback)
+        {
+            UnsubscribeInternal(signalType, identifier, callback, false);
+        }
+
+        public void TryUnsubscribe(Type signalType, Action<object> callback)
+        {
+            TryUnsubscribeId(signalType, null, callback);
+        }
+
+        public void TryUnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)
+        {
+            UnsubscribeInternal(typeof(TSignal), identifier, callback, false);
+        }
+
+        public void TryUnsubscribe<TSignal>(Action<TSignal> callback)
+        {
+            TryUnsubscribeId<TSignal>(null, callback);
+        }
+
+        void UnsubscribeInternal(Type signalType, object identifier, object token, bool throwIfMissing)
+        {
+            UnsubscribeInternal(new BindingId(signalType, identifier), token, throwIfMissing);
+        }
+
+        void UnsubscribeInternal(BindingId signalId, object token, bool throwIfMissing)
+        {
+            UnsubscribeInternal(
+                new SignalSubscriptionId(signalId, token), throwIfMissing);
+        }
+
+        void UnsubscribeInternal(SignalSubscriptionId id, bool throwIfMissing)
+        {
+            SignalSubscription subscription;
+
+            if (_subscriptionMap.TryGetValue(id, out subscription))
+            {
+                _subscriptionMap.RemoveWithConfirm(id);
+                subscription.Dispose();
+            }
+            else
+            {
+                if (throwIfMissing)
+                {
+                    throw Assert.CreateException(
+                        "Called unsubscribe for signal '{0}' but could not find corresponding subscribe.  If this is intentional, call TryUnsubscribe instead.", id.SignalId);
+                }
+            }
+        }
+
+        void SubscribeInternal(Type signalType, object identifier, object token, Action<object> callback)
+        {
+            SubscribeInternal(new BindingId(signalType, identifier), token, callback);
+        }
+
+        void SubscribeInternal(BindingId signalId, object token, Action<object> callback)
+        {
+            SubscribeInternal(
+                new SignalSubscriptionId(signalId, token), callback);
+        }
+
+        void SubscribeInternal(SignalSubscriptionId id, Action<object> callback)
+        {
+            Assert.That(!_subscriptionMap.ContainsKey(id),
+                "Tried subscribing to the same signal with the same callback on Zenject.SignalBus");
+
+            var declaration = GetDeclaration(id.SignalId);
+
+            if (declaration == null)
+            {
+                throw Assert.CreateException("Tried subscribing to undeclared signal '{0}'!", id.SignalId);
+            }
+
+            var subscription = _subscriptionPool.Spawn(callback, declaration);
+
+            _subscriptionMap.Add(id, subscription);
+        }
+
+        public void DeclareSignal<T>(
+            object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)
+        {
+            DeclareSignal(typeof(T), identifier, missingHandlerResponse, forceAsync, asyncTickPriority);
+        }
+
+        public void DeclareSignal(
+            Type signalType, object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)
+        {
+            var bindInfo = SignalExtensions.CreateDefaultSignalDeclarationBindInfo(_container, signalType);
+
+            bindInfo.Identifier = identifier;
+
+            if (missingHandlerResponse.HasValue)
+            {
+                bindInfo.MissingHandlerResponse = missingHandlerResponse.Value;
+            }
+
+            if (forceAsync.HasValue)
+            {
+                bindInfo.RunAsync = forceAsync.Value;
+            }
+
+            if (asyncTickPriority.HasValue)
+            {
+                bindInfo.TickPriority = asyncTickPriority.Value;
+            }
+
+            var declaration = _signalDeclarationFactory.Create(bindInfo);
+
+            _localDeclarationMap.Add(declaration.BindingId, declaration);
+        }
+
+        SignalDeclaration GetDeclaration(BindingId signalId)
+        {
+            SignalDeclaration handler;
+
+            if (_localDeclarationMap.TryGetValue(signalId, out handler))
+            {
+                return handler;
+            }
+
+            if (_parentBus != null)
+            {
+                return _parentBus.GetDeclaration(signalId);
+            }
+
+            return null;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Main/SignalBus.cs.meta b/Assets/Source/Runtime/Signals/Main/SignalBus.cs.meta
new file mode 100644
index 0000000..8612fae
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalBus.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: d457d0e45e1d3c54f9bc2bc3aece1760
+timeCreated: 1521266917
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs b/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs
new file mode 100644
index 0000000..574eecc
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs
@@ -0,0 +1,29 @@
+using ModestTree;
+
+namespace Zenject
+{
+    // Note that you only need to install this once
+    public class SignalBusInstaller : Installer<SignalBusInstaller>
+    {
+        [Inject]
+        public SignalBusInstaller()
+        {
+        }
+
+        public override void InstallBindings()
+        {
+            Assert.That(!Container.HasBinding<SignalBus>(), "Detected multiple SignalBus bindings.  SignalBusInstaller should only be installed once");
+
+            Container.BindInterfacesAndSelfTo<SignalBus>().AsSingle().CopyIntoAllSubContainers();
+
+            Container.BindInterfacesTo<SignalDeclarationAsyncInitializer>().AsSingle().CopyIntoAllSubContainers();
+
+            Container.BindMemoryPool<SignalSubscription, SignalSubscription.Pool>();
+
+            // Dispose last to ensure that we don't remove SignalSubscription before the user does
+            Container.BindLateDisposableExecutionOrder<SignalBus>(-999);
+
+            Container.BindFactory<SignalDeclarationBindInfo, SignalDeclaration, SignalDeclaration.Factory>();
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs.meta b/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs.meta
new file mode 100644
index 0000000..7208b44
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalBusInstaller.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 2afd112e630107f458140fbe19d4e31c
+timeCreated: 1528988907
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs b/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs
new file mode 100644
index 0000000..b7d06e7
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs
@@ -0,0 +1,41 @@
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    // This class just exists to solve a circular dependency that would otherwise happen if we
+    // attempted to inject TickableManager into either SignalDeclaration or SignalBus
+    // And we need to directly depend on TickableManager because we need each SignalDeclaration
+    // to have a unique tick priority
+    public class SignalDeclarationAsyncInitializer : IInitializable
+    {
+        readonly LazyInject<TickableManager> _tickManager;
+        readonly List<SignalDeclaration> _declarations;
+
+        [Inject]
+        public SignalDeclarationAsyncInitializer(
+            [Inject(Source = InjectSources.Local)]
+            List<SignalDeclaration> declarations,
+            [Inject(Optional = true, Source = InjectSources.Local)]
+            LazyInject<TickableManager> tickManager)
+        {
+            _declarations = declarations;
+            _tickManager = tickManager;
+        }
+
+        public void Initialize()
+        {
+            for (int i = 0; i < _declarations.Count; i++)
+            {
+                var declaration = _declarations[i];
+
+                if (declaration.IsAsync)
+                {
+                    Assert.IsNotNull(_tickManager.Value, "TickableManager is required when using asynchronous signals");
+                    _tickManager.Value.Add(declaration, declaration.TickPriority);
+                }
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs.meta b/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs.meta
new file mode 100644
index 0000000..3c85bfd
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Main/SignalDeclarationAsyncInitializer.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: e8d0040c0a3734b49b26f7cdaa86c5e8
+timeCreated: 1529153251
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Signals/Zenject-Signals.csproj.meta b/Assets/Source/Runtime/Signals/Zenject-Signals.csproj.meta
new file mode 100644
index 0000000..29d5140
--- /dev/null
+++ b/Assets/Source/Runtime/Signals/Zenject-Signals.csproj.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: aebd7ef925dd4fe4690c3238e879f914
+timeCreated: 1537606270
+licenseType: Free
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util.meta b/Assets/Source/Runtime/Util.meta
new file mode 100644
index 0000000..0054272
--- /dev/null
+++ b/Assets/Source/Runtime/Util.meta
@@ -0,0 +1,5 @@
+fileFormatVersion: 2
+guid: 3f550a9d7385fce4e9bc4a0e5fa52daf
+folderAsset: yes
+DefaultImporter:
+  userData: 
diff --git a/Assets/Source/Runtime/Util/ActionInstaller.cs b/Assets/Source/Runtime/Util/ActionInstaller.cs
new file mode 100644
index 0000000..4386b7e
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ActionInstaller.cs
@@ -0,0 +1,19 @@
+using System;
+
+namespace Zenject
+{
+    public class ActionInstaller : Installer<ActionInstaller>
+    {
+        readonly Action<DiContainer> _installMethod;
+
+        public ActionInstaller(Action<DiContainer> installMethod)
+        {
+            _installMethod = installMethod;
+        }
+
+        public override void InstallBindings()
+        {
+            _installMethod(Container);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ActionInstaller.cs.meta b/Assets/Source/Runtime/Util/ActionInstaller.cs.meta
new file mode 100644
index 0000000..c2a8c92
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ActionInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: e182a0b67fa936e40bebc0dc2f28743a
+timeCreated: 1476911606
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/CheatSheet.cs b/Assets/Source/Runtime/Util/CheatSheet.cs
new file mode 100644
index 0000000..3af1cd4
--- /dev/null
+++ b/Assets/Source/Runtime/Util/CheatSheet.cs
@@ -0,0 +1,438 @@
+using System.Linq;
+using ModestTree;
+using UnityEngine;
+
+#pragma warning disable 219
+
+namespace Zenject
+{
+    public class CheatSheet : Installer<CheatSheet>
+    {
+        public override void InstallBindings()
+        {
+            // Create a new instance of Foo for every class that asks for it
+            Container.Bind<Foo>().AsTransient();
+
+            // Create a new instance of Foo for every class that asks for an IFoo
+            Container.Bind<IFoo>().To<Foo>().AsTransient();
+
+            // Non generic version of the above
+            Container.Bind(typeof(IFoo)).To(typeof(Foo)).AsTransient();
+
+            ///////////// AsSingle
+
+            // Create one definitive instance of Foo and re-use that for every class that asks for it
+            Container.Bind<Foo>().AsSingle();
+
+            // Create one definitive instance of Foo and re-use that for every class that asks for IFoo
+            Container.Bind<IFoo>().To<Foo>().AsSingle();
+
+            // Bind the same instance to multiple types
+            // In this example, the same instance of Foo will be used for all three types
+            // (we have to use the non-generic version of Bind when mapping to multiple types)
+            Container.Bind(typeof(Foo), typeof(IFoo), typeof(IFoo2)).To<Foo>().AsSingle();
+
+            ///////////// BindInterfaces
+
+            // This will have the exact same effect as the above line
+            // Bind all interfaces that Foo implements and Foo itself to a new singleton of type Foo
+            Container.BindInterfacesAndSelfTo<Foo>().AsSingle();
+
+            // Bind only the interfaces that Foo implements to an instance of Foo
+            // This can be useful if you don't want any classes to directly reference the concrete
+            // derived type
+            Container.BindInterfacesTo<Foo>().AsSingle();
+
+            ///////////// FromInstance
+
+            // Use the given instance everywhere that Foo is used
+            // Note that in this case there's no good reason to use FromInstance
+            Container.Bind<Foo>().FromInstance(new Foo());
+
+            // This is simply a shortcut for the above binding
+            // This can be a bit nicer since the type argument can be deduced from the parameter
+            Container.BindInstance(new Foo());
+
+            // Bind multiple instances at once
+            Container.BindInstances(new Foo(), new Bar());
+
+            ///////////// Binding primitive types
+
+            // BindInstance is more commonly used with primitive types
+            // Use the number 10 every time an int is requested
+            Container.Bind<int>().FromInstance(10);
+            Container.Bind<bool>().FromInstance(false);
+
+            // Or equivalently:
+            Container.BindInstance(10);
+            Container.BindInstance(false);
+
+            // You'd never really want to do the above though - you should almost always use a When condition for primitive values
+            Container.BindInstance(10).WhenInjectedInto<Foo>();
+
+            ///////////// FromMethod
+
+            // Create instance of Foo when requested, using the given method
+            // Note that for more complex construction scenarios, you might consider using a factory
+            // instead with FromFactory
+            Container.Bind<Foo>().FromMethod(GetFoo);
+
+            // Randomly return one of several different implementations of IFoo
+            // We use Instantiate here instead of just new so that Foo1 gets its members injected
+            Container.Bind<IFoo>().FromMethod(GetRandomFoo);
+
+            // You an also use an anonymouse delegate directly
+            Container.Bind<Foo>().FromMethod(ctx => new Foo());
+
+            // This is equivalent to AsTransient
+            Container.Bind<Foo>().FromMethod(ctx => ctx.Container.Instantiate<Foo>());
+
+            InstallMore();
+        }
+
+        Foo GetFoo(InjectContext ctx)
+        {
+            return new Foo();
+        }
+
+        IFoo GetRandomFoo(InjectContext ctx)
+        {
+            switch (Random.Range(0, 3))
+            {
+                case 0:
+                {
+                    return ctx.Container.Instantiate<Foo1>();
+                }
+                case 1:
+                {
+                    return ctx.Container.Instantiate<Foo2>();
+                }
+            }
+
+            return ctx.Container.Instantiate<Foo3>();
+        }
+
+        void InstallMore()
+        {
+            ///////////// FromResolveGetter
+
+            // Bind to a property on another dependency
+            // This can be helpful to reduce coupling between classes
+            Container.Bind<Foo>().AsSingle();
+
+            Container.Bind<Bar>().FromResolveGetter<Foo>(foo => foo.GetBar());
+
+            // Another example using values
+            Container.Bind<string>().FromResolveGetter<Foo>(foo => foo.GetTitle());
+
+            ///////////// FromNewComponentOnNewGameObject
+
+            // Create a new game object at the root of the scene and add the Foo MonoBehaviour to it
+            Container.Bind<Foo>().FromNewComponentOnNewGameObject().AsSingle();
+
+            // You can also specify the game object name to use using WithGameObjectName
+            Container.Bind<Foo>().FromNewComponentOnNewGameObject().WithGameObjectName("Foo1").AsSingle();
+
+            // Bind to an interface instead
+            Container.Bind<IFoo>().To<Foo>().FromNewComponentOnNewGameObject().AsSingle();
+
+            ///////////// FromComponentInNewPrefab (singleton)
+
+            // Create a new game object at the root of the scene using the given prefab
+            // After zenject creates a new GameObject from the given prefab, it will
+            // search the prefab for a component of type 'Foo' and return that
+            GameObject prefab = null;
+            Container.Bind<Foo>().FromComponentInNewPrefab(prefab).AsSingle();
+
+            // Bind to interface instead
+            Container.Bind<IFoo>().To<Foo>().FromComponentInNewPrefab(prefab).AsSingle();
+
+            // You can also add multiple components
+            // Note here that only one instance of the given prefab will be
+            // created
+            // For this to work, there must be both a Foo MonoBehaviour and
+            // a Bar MonoBehaviour somewhere on the prefab
+            Container.Bind(typeof(Foo), typeof(Bar)).FromComponentInNewPrefab(prefab).AsSingle();
+
+            ///////////// FromComponentInNewPrefab (Transient)
+
+            // Instantiate a new copy of 'prefab' every time an instance of Foo is
+            // requested by a constructor parameter, injected field, etc.
+            Container.Bind<Foo>().FromComponentInNewPrefab(prefab).AsTransient();
+
+            // Bind to interface instead
+            Container.Bind<IFoo>().To<Foo>().FromComponentInNewPrefab(prefab);
+
+            ///////////// Identifiers
+
+            // Bind a globally accessible string with the name 'PlayerName'
+            // Note however that a better option might be to create a Settings object and bind
+            // that instead
+            Container.Bind<string>().WithId("PlayerName").FromInstance("name of the player");
+
+            // This is the equivalent of the line above, and is a bit more readable
+            Container.BindInstance("name of the player").WithId("PlayerName");
+
+            // We can also use IDs to bind multiple instances of the same type:
+            Container.BindInstance("foo").WithId("FooA");
+            Container.BindInstance("asdf").WithId("FooB");
+
+            InstallMore2();
+        }
+
+        // Then when we inject these dependencies we have to use the same ID:
+        public class Norf
+        {
+            [Inject(Id = "FooA")]
+            public string Foo;
+        }
+
+        public class Qux
+        {
+            [Inject(Id = "FooB")]
+            public string Foo;
+        }
+
+        public void InstallMore2()
+        {
+            ///////////// AsCached
+
+            // In this example, we bind three instances of Foo, including one without an ID
+            // We have to use AsCached here because Foo is not a singleton, but we also
+            // do not want a new Foo created every time like AsTransient
+            // This will result in a maximum of 3 instances of Foo
+            Container.Bind<Foo>().AsCached();
+            Container.Bind<Foo>().WithId("FooA").AsCached();
+            Container.Bind<Foo>().WithId("FooA").AsCached();
+
+            InstallMore3();
+        }
+
+        // When an ID is unspecified in an [Inject] field, it will use the first
+        // instance
+        // Bindings without IDs can therefore be used as a default and we can
+        // specify IDs for specific versions of the same type
+        public class Norf2
+        {
+            [Inject]
+            public Foo Foo;
+        }
+
+        // Qux2._foo will be the same instance as Norf2._foo
+        // This is because we are using AsCached rather than AsTransient
+        public class Qux2
+        {
+            [Inject]
+            public Foo Foo;
+
+            [Inject(Id = "FooA")]
+            public Foo Foo2;
+        }
+
+        public void InstallMore3()
+        {
+            ///////////// Conditions
+
+            // This will make Foo only visible to Bar
+            // If we add Foo to the constructor of any other class it won't find it
+            Container.Bind<Foo>().AsSingle().WhenInjectedInto<Bar>();
+
+            // Use different implementations of IFoo dependending on which
+            // class is being injected
+            Container.Bind<IFoo>().To<Foo1>().AsSingle().WhenInjectedInto<Bar>();
+            Container.Bind<IFoo>().To<Foo2>().AsSingle().WhenInjectedInto<Qux>();
+
+            // Use "Foo1" as the default implementation except when injecting into
+            // class Qux, in which case use Foo2
+            // This works because if there is a condition match, that takes precedence
+            Container.Bind<IFoo>().To<Foo1>().AsSingle();
+            Container.Bind<IFoo>().To<Foo2>().AsSingle().WhenInjectedInto<Qux>();
+
+            // Allow depending on Foo in only a few select classes
+            Container.Bind<Foo>().AsSingle().WhenInjectedInto(typeof(Bar), typeof(Qux), typeof(Baz));
+
+            // Supply "my game" for any strings that are injected into the Gui class with the identifier "Title"
+            Container.BindInstance("my game").WithId("Title").WhenInjectedInto<Gui>();
+
+            // Supply 5 for all ints that are injected into the Gui class
+            Container.BindInstance(5).WhenInjectedInto<Gui>();
+
+            // Supply 5 for all ints that are injected into a parameter or field
+            // inside type Gui that is named 'width'
+            // Note that this is usually not a good idea since the name of a field can change
+            // easily and break the binding but shown here as an example of a more complex
+            // condition
+            Container.BindInstance(5.0f).When(ctx =>
+                ctx.ObjectType == typeof(Gui) && ctx.MemberName == "width");
+
+            // Create a new 'Foo' for every class that is created as part of the
+            // construction of the 'Bar' class
+            // So if Bar has a constructor parameter of type Qux, and Qux has
+            // a constructor parameter of type IFoo, a new Foo will be created
+            // for that case
+            Container.Bind<IFoo>().To<Foo>().AsTransient().When(
+                ctx => ctx.AllObjectTypes.Contains(typeof(Bar)));
+
+            ///////////// Complex conditions example
+
+            var foo1 = new Foo();
+            var foo2 = new Foo();
+
+            Container.Bind<Bar>().WithId("Bar1").AsCached();
+            Container.Bind<Bar>().WithId("Bar2").AsCached();
+
+            // Here we use the 'ParentContexts' property of inject context to sync multiple corresponding identifiers
+            Container.BindInstance(foo1).When(c => c.ParentContexts.Where(x => x.MemberType == typeof(Bar) && Equals(x.Identifier, "Bar1")).Any());
+            Container.BindInstance(foo2).When(c => c.ParentContexts.Where(x => x.MemberType == typeof(Bar) && Equals(x.Identifier, "Bar2")).Any());
+
+            // This results in:
+            Assert.That(Container.ResolveId<Bar>("Bar1").Foo == foo1);
+            Assert.That(Container.ResolveId<Bar>("Bar2").Foo == foo2);
+
+            ///////////// FromResolve
+
+            // FromResolve does another lookup on the container
+            // This will result in IBar, IFoo, and Foo, all being bound to the same instance of
+            // Foo which is assume to exist somewhere on the given prefab
+            GameObject fooPrefab = null;
+            Container.Bind<Foo>().FromComponentInNewPrefab(fooPrefab).AsSingle();
+            Container.Bind<IBar>().To<Foo>().FromResolve();
+            Container.Bind<IFoo>().To<IBar>().FromResolve();
+
+            // This will result in the same behaviour as the above
+            Container.Bind(typeof(Foo), typeof(IBar), typeof(IFoo)).To<Foo>().FromComponentInNewPrefab(fooPrefab).AsSingle();
+
+            InstallMore4();
+        }
+
+        public class FooInstaller : Installer<FooInstaller>
+        {
+            public FooInstaller(string foo)
+            {
+            }
+
+            public override void InstallBindings()
+            {
+            }
+        }
+
+        public class FooInstallerWithArgs : Installer<string, FooInstallerWithArgs>
+        {
+            public FooInstallerWithArgs(string foo)
+            {
+            }
+
+            public override void InstallBindings()
+            {
+            }
+        }
+
+        void InstallMore4()
+        {
+            ///////////// Installing Other Installers
+
+            // Immediately call InstallBindings() on FooInstaller
+            FooInstaller.Install(Container);
+
+            // Before calling FooInstaller, configure a property of it
+            Container.BindInstance("foo").WhenInjectedInto<FooInstaller>();
+            FooInstaller.Install(Container);
+
+            // The arguments can also be added to the Installer<> generic arguments to make them
+            // strongly typed
+            FooInstallerWithArgs.Install(Container, "foo");
+
+            ///////////// Manual Use of Container
+
+            // This will fill in any parameters marked as [Inject] and also call any [Inject] methods
+            var foo = new Foo();
+            Container.Inject(foo);
+
+            // Return an instance for IFoo, using the bindings that have been added previously
+            // Internally it is what is triggered when you fill in a constructor parameter of type IFoo
+            // Note: It will throw an exception if it cannot find a match
+            Container.Resolve<IFoo>();
+
+            // Same as the above except returns null when it can't find the given type
+            Container.TryResolve<IFoo>();
+
+            // Return a list of 2 instances of type Foo
+            // Note that in this case simply calling Resolve<IFoo> will trigger an exception
+            Container.BindInstance(new Foo());
+            Container.BindInstance(new Foo());
+            var foos = Container.ResolveAll<IFoo>();
+
+            // Create a new instance of Foo and inject on any of its members
+            // And fill in any constructor parameters Foo might have
+            Container.Instantiate<Foo>();
+
+            GameObject prefab1 = null;
+            GameObject prefab2 = null;
+
+            // Instantiate a new prefab and have any injectables filled in on the prefab
+            GameObject go = Container.InstantiatePrefab(prefab1);
+
+            // Instantiate a new prefab and return a specific monobehaviour
+            Foo foo2 = Container.InstantiatePrefabForComponent<Foo>(prefab2);
+
+            // Add a new component to an existing game object
+            Foo foo3 = Container.InstantiateComponent<Foo>(go);
+        }
+
+        public interface IFoo2
+        {
+        }
+
+        public interface IFoo
+        {
+        }
+
+        public interface IBar : IFoo
+        {
+        }
+
+        public class Foo : MonoBehaviour, IFoo, IFoo2, IBar
+        {
+            public Bar GetBar()
+            {
+                return new Bar();
+            }
+
+            public string GetTitle()
+            {
+                return "title";
+            }
+        }
+
+        public class Foo1 : IFoo
+        {
+        }
+
+        public class Foo2 : IFoo
+        {
+        }
+
+        public class Foo3 : IFoo
+        {
+        }
+
+        public class Baz
+        {
+        }
+
+        public class Gui
+        {
+        }
+
+        public class Bar : IBar
+        {
+            public Foo Foo
+            {
+                get
+                {
+                    return null;
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/CheatSheet.cs.meta b/Assets/Source/Runtime/Util/CheatSheet.cs.meta
new file mode 100644
index 0000000..45147a8
--- /dev/null
+++ b/Assets/Source/Runtime/Util/CheatSheet.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 1d2fc6db101e75248ab98ad463a99ffa
+timeCreated: 1528895686
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs b/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs
new file mode 100644
index 0000000..762b004
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs
@@ -0,0 +1,9 @@
+ 
+namespace Zenject
+{
+    public enum ConstructorChoiceStrategy
+    {
+        InjectAttributeThenLeastArguments,
+        InjectAttribute,
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs.meta b/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs.meta
new file mode 100644
index 0000000..5d1692b
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ConstructorChoiceStrategy.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 2264804260bc54d16875307d2dd4d442
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs b/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs
new file mode 100644
index 0000000..3be76fa
--- /dev/null
+++ b/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs
@@ -0,0 +1,53 @@
+#if !NOT_UNITY3D
+
+using System;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class DefaultGameObjectParentInstaller : Installer<string, DefaultGameObjectParentInstaller>
+    {
+        readonly string _name;
+
+        public DefaultGameObjectParentInstaller(string name)
+        {
+            _name = name;
+        }
+
+        public override void InstallBindings()
+        {
+#if !ZEN_TESTS_OUTSIDE_UNITY
+            var defaultParent = new GameObject(_name);
+
+            defaultParent.transform.SetParent(
+                Container.InheritedDefaultParent, false);
+
+            Container.DefaultParent = defaultParent.transform;
+
+            Container.Bind<IDisposable>()
+                .To<DefaultParentObjectDestroyer>().AsCached().WithArguments(defaultParent);
+
+            // Always destroy the default parent last so that the non-monobehaviours get a chance
+            // to clean it up if they want to first
+            Container.BindDisposableExecutionOrder<DefaultParentObjectDestroyer>(int.MinValue);
+#endif
+        }
+
+        class DefaultParentObjectDestroyer : IDisposable
+        {
+            readonly GameObject _gameObject;
+
+            public DefaultParentObjectDestroyer(GameObject gameObject)
+            {
+                _gameObject = gameObject;
+            }
+
+            public void Dispose()
+            {
+                GameObject.Destroy(_gameObject);
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs.meta b/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs.meta
new file mode 100644
index 0000000..57a404e
--- /dev/null
+++ b/Assets/Source/Runtime/Util/DefaultGameObjectParentInstaller.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: dd79d0a4f0b28314cbd6701ff5ab9062
+timeCreated: 1538629352
+licenseType: Pro
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/DisposeBlock.cs b/Assets/Source/Runtime/Util/DisposeBlock.cs
new file mode 100644
index 0000000..2d589bf
--- /dev/null
+++ b/Assets/Source/Runtime/Util/DisposeBlock.cs
@@ -0,0 +1,200 @@
+using System;
+using System.Collections.Generic;
+using ModestTree;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class DisposeBlock : IDisposable
+    {
+        static readonly StaticMemoryPool<DisposeBlock> _pool =
+            new StaticMemoryPool<DisposeBlock>(OnSpawned, OnDespawned);
+
+        List<IDisposable> _disposables;
+        List<SpawnedObjectPoolPair> _objectPoolPairs;
+        
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!UnityEditor.EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            _pool.Clear();
+        }
+#endif
+
+        static void OnSpawned(DisposeBlock that)
+        {
+            Assert.IsNull(that._disposables);
+            Assert.IsNull(that._objectPoolPairs);
+        }
+
+        static void OnDespawned(DisposeBlock that)
+        {
+            if (that._disposables != null)
+            {
+                // Dispose in reverse order since usually that makes the most sense
+                for (int i = that._disposables.Count - 1; i >= 0; i--)
+                {
+                    that._disposables[i].Dispose();
+                }
+                ListPool<IDisposable>.Instance.Despawn(that._disposables);
+                that._disposables = null;
+            }
+
+            if (that._objectPoolPairs != null)
+            {
+                // Dispose in reverse order since usually that makes the most sense
+                for (int i = that._objectPoolPairs.Count - 1; i >= 0; i--)
+                {
+                    var pair = that._objectPoolPairs[i];
+                    pair.Pool.Despawn(pair.Object);
+                }
+                ListPool<SpawnedObjectPoolPair>.Instance.Despawn(that._objectPoolPairs);
+                that._objectPoolPairs = null;
+            }
+        }
+
+        void LazyInitializeDisposableList()
+        {
+            if (_disposables == null)
+            {
+                _disposables = ListPool<IDisposable>.Instance.Spawn();
+            }
+        }
+
+        public void AddRange<T>(IList<T> disposables)
+            where T : IDisposable
+        {
+            LazyInitializeDisposableList();
+            for (int i = 0; i < disposables.Count; i++)
+            {
+                _disposables.Add(disposables[i]);
+            }
+        }
+
+        public void Add(IDisposable disposable)
+        {
+            LazyInitializeDisposableList();
+            Assert.That(!_disposables.Contains(disposable));
+            _disposables.Add(disposable);
+        }
+
+        public void Remove(IDisposable disposable)
+        {
+            Assert.IsNotNull(_disposables);
+            _disposables.RemoveWithConfirm(disposable);
+        }
+
+        void StoreSpawnedObject<T>(T obj, IDespawnableMemoryPool<T> pool)
+        {
+            if (typeof(T).DerivesFrom<IDisposable>())
+            {
+                Add((IDisposable)obj);
+            }
+            else
+            {
+                // This allocation is ok because it's a struct
+                var pair = new SpawnedObjectPoolPair
+                {
+                    Pool = pool,
+                    Object = obj
+                };
+
+                if (_objectPoolPairs == null)
+                {
+                    _objectPoolPairs = ListPool<SpawnedObjectPoolPair>.Instance.Spawn();
+                }
+                _objectPoolPairs.Add(pair);
+            }
+        }
+
+        public T Spawn<T>(IMemoryPool<T> pool)
+        {
+            var obj = pool.Spawn();
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1>(IMemoryPool<TParam1, TValue> pool, TParam1 p1)
+        {
+            var obj = pool.Spawn(p1);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2>(IMemoryPool<TParam1, TParam2, TValue> pool, TParam1 p1, TParam2 p2)
+        {
+            var obj = pool.Spawn(p1, p2);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2, TParam3>(IMemoryPool<TParam1, TParam2, TParam3, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3)
+        {
+            var obj = pool.Spawn(p1, p2, p3);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4>(IMemoryPool<TParam1, TParam2, TParam3, TParam4, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4)
+        {
+            var obj = pool.Spawn(p1, p2, p3, p4);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5>(IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5)
+        {
+            var obj = pool.Spawn(p1, p2, p3, p4, p5);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6)
+        {
+            var obj = pool.Spawn(p1, p2, p3, p4, p5, p6);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public TValue Spawn<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7>(IMemoryPool<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TValue> pool, TParam1 p1, TParam2 p2, TParam3 p3, TParam4 p4, TParam5 p5, TParam6 p6, TParam7 p7)
+        {
+            var obj = pool.Spawn(p1, p2, p3, p4, p5, p6, p7);
+            StoreSpawnedObject(obj, pool);
+            return obj;
+        }
+
+        public List<T> SpawnList<T>(IEnumerable<T> elements)
+        {
+            var list = SpawnList<T>();
+            list.AddRange(elements);
+            return list;
+        }
+
+        public List<T> SpawnList<T>()
+        {
+            return Spawn(ListPool<T>.Instance);
+        }
+
+        public static DisposeBlock Spawn()
+        {
+            return _pool.Spawn();
+        }
+
+        public void Dispose()
+        {
+            _pool.Despawn(this);
+        }
+
+        struct SpawnedObjectPoolPair
+        {
+            public IMemoryPool Pool;
+            public object Object;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/DisposeBlock.cs.meta b/Assets/Source/Runtime/Util/DisposeBlock.cs.meta
new file mode 100644
index 0000000..087d8d3
--- /dev/null
+++ b/Assets/Source/Runtime/Util/DisposeBlock.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 031fb76cf466ade4baf3269c39c146bd
+timeCreated: 1519832826
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs b/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs
new file mode 100644
index 0000000..c298dc5
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs
@@ -0,0 +1,29 @@
+using System;
+using System.Collections.Generic;
+
+namespace Zenject
+{
+    public class ExecutionOrderInstaller : Installer<List<Type>, ExecutionOrderInstaller>
+    {
+        List<Type> _typeOrder;
+
+        public ExecutionOrderInstaller(List<Type> typeOrder)
+        {
+            _typeOrder = typeOrder;
+        }
+
+        public override void InstallBindings()
+        {
+            // All tickables without explicit priorities assigned are given order of zero,
+            // so put all of these before that (ie. negative)
+            int order = -1 * _typeOrder.Count;
+
+            foreach (var type in _typeOrder)
+            {
+                Container.BindExecutionOrder(type, order);
+                order++;
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs.meta b/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs.meta
new file mode 100644
index 0000000..157ef3e
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ExecutionOrderInstaller.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: cad41a65c3c0b0f46a659557b2d716e0
+timeCreated: 1461708053
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ProfileBlock.cs b/Assets/Source/Runtime/Util/ProfileBlock.cs
new file mode 100644
index 0000000..928f5c4
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ProfileBlock.cs
@@ -0,0 +1,224 @@
+using System;
+using System.Collections.Generic;
+using System.Text.RegularExpressions;
+using ModestTree;
+#if UNITY_EDITOR
+using UnityEngine.Profiling;
+using System.Threading;
+#endif
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ProfileBlock : IDisposable
+    {
+#if UNITY_EDITOR
+        static int _blockCount;
+        static ProfileBlock _instance = new ProfileBlock();
+        static Dictionary<int, string> _nameCache = new Dictionary<int, string>();
+
+        ProfileBlock()
+        {
+        }
+        
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!UnityEditor.EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            _instance = new ProfileBlock();
+            _nameCache.Clear();
+            _blockCount = 0;
+        }
+
+        public static Thread UnityMainThread
+        {
+            get; set;
+        }
+
+        public static Regex ProfilePattern
+        {
+            get;
+            set;
+        }
+
+        static int GetHashCode(object p1, object p2)
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + p1.GetHashCode();
+                hash = hash * 29 + p2.GetHashCode();
+                return hash;
+            }
+        }
+
+        static int GetHashCode(object p1, object p2, object p3)
+        {
+            unchecked // Overflow is fine, just wrap
+            {
+                int hash = 17;
+                hash = hash * 29 + p1.GetHashCode();
+                hash = hash * 29 + p2.GetHashCode();
+                hash = hash * 29 + p3.GetHashCode();
+                return hash;
+            }
+        }
+
+        public static ProfileBlock Start(string sampleNameFormat, object obj1, object obj2)
+        {
+#if ZEN_TESTS_OUTSIDE_UNITY
+            return null;
+#else
+            if (UnityMainThread == null
+                || !UnityMainThread.Equals(Thread.CurrentThread))
+            {
+                return null;
+            }
+
+            if (!Profiler.enabled)
+            {
+                return null;
+            }
+
+            // We need to ensure that we do not have per-frame allocations in ProfileBlock
+            // to avoid infecting the test too much, so use a cache of formatted strings given
+            // the input values
+            // This only works if the input values do not change per frame
+            var hash = GetHashCode(sampleNameFormat, obj1, obj2);
+
+            string formatString;
+
+            if (!_nameCache.TryGetValue(hash, out formatString))
+            {
+                formatString = string.Format(sampleNameFormat, obj1, obj2);
+                _nameCache.Add(hash, formatString);
+            }
+
+            return StartInternal(formatString);
+#endif
+        }
+
+        public static ProfileBlock Start(string sampleNameFormat, object obj)
+        {
+#if ZEN_TESTS_OUTSIDE_UNITY
+            return null;
+#else
+            if (UnityMainThread == null
+                || !UnityMainThread.Equals(Thread.CurrentThread))
+            {
+                return null;
+            }
+
+            if (!Profiler.enabled)
+            {
+                return null;
+            }
+
+            // We need to ensure that we do not have per-frame allocations in ProfileBlock
+            // to avoid infecting the test too much, so use a cache of formatted strings given
+            // the input values
+            // This only works if the input values do not change per frame
+            var hash = GetHashCode(sampleNameFormat, obj);
+
+            string formatString;
+
+            if (!_nameCache.TryGetValue(hash, out formatString))
+            {
+                formatString = string.Format(sampleNameFormat, obj);
+                _nameCache.Add(hash, formatString);
+            }
+
+            return StartInternal(formatString);
+#endif
+        }
+
+        public static ProfileBlock Start(string sampleName)
+        {
+#if ZEN_TESTS_OUTSIDE_UNITY
+            return null;
+#else
+            if (UnityMainThread == null
+                || !UnityMainThread.Equals(Thread.CurrentThread))
+            {
+                return null;
+            }
+
+            if (!Profiler.enabled)
+            {
+                return null;
+            }
+
+            return StartInternal(sampleName);
+#endif
+        }
+
+        static ProfileBlock StartInternal(string sampleName)
+        {
+            Assert.That(Profiler.enabled);
+
+            if (ProfilePattern == null || ProfilePattern.Match(sampleName).Success)
+            {
+                Profiler.BeginSample(sampleName);
+                _blockCount++;
+                return _instance;
+            }
+
+            return null;
+        }
+
+        public void Dispose()
+        {
+            _blockCount--;
+            Assert.That(_blockCount >= 0);
+            Profiler.EndSample();
+        }
+
+#else
+        ProfileBlock(string sampleName, bool rootBlock)
+        {
+        }
+
+        ProfileBlock(string sampleName)
+            : this(sampleName, false)
+        {
+        }
+
+        public static Regex ProfilePattern
+        {
+            get;
+            set;
+        }
+
+        public static ProfileBlock Start()
+        {
+            return null;
+        }
+
+        public static ProfileBlock Start(string sampleNameFormat, object obj1, object obj2)
+        {
+            return null;
+        }
+
+        // Remove the call completely for builds
+        public static ProfileBlock Start(string sampleNameFormat, object obj)
+        {
+            return null;
+        }
+
+        // Remove the call completely for builds
+        public static ProfileBlock Start(string sampleName)
+        {
+            return null;
+        }
+
+        public void Dispose()
+        {
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ProfileBlock.cs.meta b/Assets/Source/Runtime/Util/ProfileBlock.cs.meta
new file mode 100644
index 0000000..7f32e19
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ProfileBlock.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 952433523e6a6e445adc4ac7e2086e7d
+timeCreated: 1485104137
+licenseType: Free
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ProfileTimers.cs b/Assets/Source/Runtime/Util/ProfileTimers.cs
new file mode 100644
index 0000000..bf62374
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ProfileTimers.cs
@@ -0,0 +1,172 @@
+#if ZEN_INTERNAL_PROFILING
+
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using System.Text;
+using ModestTree;
+
+namespace Zenject
+{
+    // Similar to ProfileBlock except used for measuring speed of zenject specifically
+    // And does not use unity's profiler
+    public static class ProfileTimers
+    {
+        static Dictionary<string, TimerInfo> _timers = new Dictionary<string, TimerInfo>();
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration)]
+#endif
+        public static void ResetAll()
+        {
+            foreach (var timer in _timers.Values)
+            {
+                timer.Reset();
+            }
+        }
+
+        public static string FormatResults()
+        {
+            var result = new StringBuilder();
+
+            // Uncomment if you only want to see zenject related info
+            //var timers = _timers.Where(x => x.Key != "User Code");
+            var timers = _timers;
+
+            var total = timers.Select(x => x.Value.TotalMilliseconds).Sum();
+
+            result.Append("Total time tracked: {0:0.00} ms.  Details:".Fmt(total));
+
+            foreach (var pair in timers.OrderByDescending(x => x.Value.TotalMilliseconds))
+            {
+                var time = pair.Value.TotalMilliseconds;
+                var percent = 100.0 * (time / total);
+                var name = pair.Key;
+
+                result.Append("\n  {0:00.0}% ({1:00000}x) ({2:0000} ms) {3}".Fmt(percent, pair.Value.CallCount, time, name));
+            }
+
+            return result.ToString();
+        }
+
+        public static double GetTimerElapsedMilliseconds(string name)
+        {
+            return _timers[name].TotalMilliseconds;
+        }
+
+        public static IDisposable CreateTimedBlock(string name)
+        {
+            TimerInfo timer;
+
+            if (!_timers.TryGetValue(name, out timer))
+            {
+                timer = new TimerInfo();
+                _timers.Add(name, timer);
+            }
+
+            timer.CallCount++;
+
+            if (timer.IsRunning)
+            {
+                return null;
+            }
+
+            return TimedBlock.Pool.Spawn(timer);
+        }
+
+        class TimedBlock : IDisposable
+        {
+            public static StaticMemoryPool<TimerInfo, TimedBlock> Pool =
+                new StaticMemoryPool<TimerInfo, TimedBlock>(OnSpawned, OnDespawned);
+
+            readonly List<TimerInfo> _pausedTimers = new List<TimerInfo>();
+
+            TimerInfo _exclusiveTimer;
+
+            static void OnSpawned(
+                TimerInfo exclusiveTimer, TimedBlock instance)
+            {
+                Assert.That(instance._pausedTimers.Count == 0);
+
+                instance._exclusiveTimer = exclusiveTimer;
+
+                foreach (var timer in _timers.Values)
+                {
+                    if (exclusiveTimer == timer)
+                    {
+                        Assert.That(!timer.IsRunning);
+                        timer.Resume();
+                    }
+                    else if (timer.IsRunning)
+                    {
+                        timer.Pause();
+                        instance._pausedTimers.Add(timer);
+                    }
+                }
+            }
+
+            static void OnDespawned(TimedBlock instance)
+            {
+                Assert.That(instance._exclusiveTimer.IsRunning);
+                instance._exclusiveTimer.Pause();
+
+                foreach (var timer in instance._pausedTimers)
+                {
+                    Assert.That(!timer.IsRunning);
+                    timer.Resume();
+                }
+
+                instance._pausedTimers.Clear();
+            }
+
+            public void Dispose()
+            {
+                Pool.Despawn(this);
+            }
+        }
+
+        public class TimerInfo
+        {
+            readonly Stopwatch _timer;
+
+            public TimerInfo()
+            {
+                _timer = new Stopwatch();
+            }
+
+            public int CallCount
+            {
+                get; set;
+            }
+
+            public double TotalMilliseconds
+            {
+                get { return _timer.Elapsed.TotalMilliseconds; }
+            }
+
+            public bool IsRunning
+            {
+                get { return _timer.IsRunning; }
+            }
+
+            public void Reset()
+            {
+                _timer.Reset();
+            }
+
+            public void Resume()
+            {
+                _timer.Start();
+            }
+
+            public void Pause()
+            {
+                _timer.Stop();
+            }
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Util/ProfileTimers.cs.meta b/Assets/Source/Runtime/Util/ProfileTimers.cs.meta
new file mode 100644
index 0000000..3c27727
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ProfileTimers.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 81cad1ee2d8c20942a68a4228e09ff1d
+timeCreated: 1537522729
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs b/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs
new file mode 100644
index 0000000..21bec7b
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs
@@ -0,0 +1,277 @@
+//#define ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Linq.Expressions;
+using System.Reflection;
+using ModestTree;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject.Internal
+{
+    public static class ReflectionInfoTypeInfoConverter
+    {
+        public static InjectTypeInfo.InjectMethodInfo ConvertMethod(
+            ReflectionTypeInfo.InjectMethodInfo injectMethod)
+        {
+            var methodInfo = injectMethod.MethodInfo;
+            var action = TryCreateActionForMethod(methodInfo);
+
+            if (action == null)
+            {
+                action = (obj, args) => methodInfo.Invoke(obj, args);
+            }
+
+            return new InjectTypeInfo.InjectMethodInfo(
+                action,
+                injectMethod.Parameters.Select(x => x.InjectableInfo).ToArray(),
+                methodInfo.Name);
+        }
+
+        public static InjectTypeInfo.InjectConstructorInfo ConvertConstructor(
+            ReflectionTypeInfo.InjectConstructorInfo injectConstructor, Type type)
+        {
+            return new InjectTypeInfo.InjectConstructorInfo(
+                TryCreateFactoryMethod(type, injectConstructor),
+                injectConstructor.Parameters.Select(x => x.InjectableInfo).ToArray());
+        }
+
+        public static InjectTypeInfo.InjectMemberInfo ConvertField(
+            Type parentType, ReflectionTypeInfo.InjectFieldInfo injectField)
+        {
+            return new InjectTypeInfo.InjectMemberInfo(
+                GetSetter(parentType, injectField.FieldInfo), injectField.InjectableInfo);
+        }
+
+        public static InjectTypeInfo.InjectMemberInfo ConvertProperty(
+            Type parentType, ReflectionTypeInfo.InjectPropertyInfo injectProperty)
+        {
+            return new InjectTypeInfo.InjectMemberInfo(
+                GetSetter(parentType, injectProperty.PropertyInfo), injectProperty.InjectableInfo);
+        }
+
+        static ZenFactoryMethod TryCreateFactoryMethod(
+            Type type, ReflectionTypeInfo.InjectConstructorInfo reflectionInfo)
+        {
+#if !NOT_UNITY3D
+            if (type.DerivesFromOrEqual<Component>())
+            {
+                return null;
+            }
+#endif
+
+            if (type.IsAbstract())
+            {
+                Assert.That(reflectionInfo.Parameters.IsEmpty());
+                return null;
+            }
+
+            var constructor = reflectionInfo.ConstructorInfo;
+
+            var factoryMethod = TryCreateFactoryMethodCompiledLambdaExpression(type, constructor);
+
+            if (factoryMethod == null)
+            {
+                if (constructor == null)
+                {
+                    if (ReflectionTypeAnalyzer.ConstructorChoiceStrategy == ConstructorChoiceStrategy.InjectAttribute)
+                    {
+                        return null;
+                    }
+                    
+                    // No choice in this case except to use the slow Activator.CreateInstance
+                    // as far as I know
+                    // This should be rare though and only seems to occur when instantiating
+                    // structs on platforms that don't support lambda expressions
+                    // Non-structs should always have a default constructor
+                    factoryMethod = args =>
+                    {
+                        Assert.That(args.Length == 0);
+                        return Activator.CreateInstance(type, new object[0]);
+                    };
+                }
+                else
+                {
+                    factoryMethod = constructor.Invoke;
+                }
+            }
+
+            return factoryMethod;
+        }
+
+        static ZenFactoryMethod TryCreateFactoryMethodCompiledLambdaExpression(
+            Type type, ConstructorInfo constructor)
+        {
+#if (NET_4_6 || NET_STANDARD_2_0) && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS
+
+            if (type.ContainsGenericParameters)
+            {
+                return null;
+            }
+
+            ParameterExpression param = Expression.Parameter(typeof(object[]));
+
+            if (constructor == null)
+            {
+                return Expression.Lambda<ZenFactoryMethod>(
+                    Expression.Convert(
+                        Expression.New(type), typeof(object)), param).Compile();
+            }
+
+            ParameterInfo[] par = constructor.GetParameters();
+            Expression[] args = new Expression[par.Length];
+
+            for (int i = 0; i != par.Length; ++i)
+            {
+                args[i] = Expression.Convert(
+                    Expression.ArrayIndex(
+                        param, Expression.Constant(i)), par[i].ParameterType);
+            }
+
+            return Expression.Lambda<ZenFactoryMethod>(
+                Expression.Convert(
+                    Expression.New(constructor, args), typeof(object)), param).Compile();
+#else
+            return null;
+#endif
+        }
+
+        static ZenInjectMethod TryCreateActionForMethod(MethodInfo methodInfo)
+        {
+#if (NET_4_6 || NET_STANDARD_2_0) && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS
+
+            if (methodInfo.DeclaringType.ContainsGenericParameters)
+            {
+                return null;
+            }
+
+            ParameterInfo[] par = methodInfo.GetParameters();
+
+            if (par.Any(x => x.ParameterType.ContainsGenericParameters))
+            {
+                return null;
+            }
+
+            Expression[] args = new Expression[par.Length];
+            ParameterExpression argsParam = Expression.Parameter(typeof(object[]));
+            ParameterExpression instanceParam = Expression.Parameter(typeof(object));
+
+            for (int i = 0; i != par.Length; ++i)
+            {
+                args[i] = Expression.Convert(
+                    Expression.ArrayIndex(
+                        argsParam, Expression.Constant(i)), par[i].ParameterType);
+            }
+
+            return Expression.Lambda<ZenInjectMethod>(
+                Expression.Call(
+                    Expression.Convert(instanceParam, methodInfo.DeclaringType), methodInfo, args),
+                instanceParam, argsParam).Compile();
+#else
+            return null;
+#endif
+        }
+
+#if !(UNITY_WSA && ENABLE_DOTNET) || UNITY_EDITOR
+        static IEnumerable<FieldInfo> GetAllFields(Type t, BindingFlags flags)
+        {
+            if (t == null)
+            {
+                return Enumerable.Empty<FieldInfo>();
+            }
+
+            return t.GetFields(flags).Concat(GetAllFields(t.BaseType, flags)).Distinct();
+        }
+
+        static ZenMemberSetterMethod GetOnlyPropertySetter(
+            Type parentType,
+            string propertyName)
+        {
+            Assert.That(parentType != null);
+            Assert.That(!string.IsNullOrEmpty(propertyName));
+
+            var allFields = GetAllFields(
+                parentType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy).ToList();
+
+            var writeableFields = allFields.Where(f => f.Name == string.Format("<" + propertyName + ">k__BackingField", propertyName)).ToList();
+
+            if (!writeableFields.Any())
+            {
+                throw new ZenjectException(string.Format(
+                    "Can't find backing field for get only property {0} on {1}.\r\n{2}",
+                    propertyName, parentType.FullName, string.Join(";", allFields.Select(f => f.Name).ToArray())));
+            }
+
+            return (injectable, value) => writeableFields.ForEach(f => f.SetValue(injectable, value));
+        }
+#endif
+
+        static ZenMemberSetterMethod GetSetter(Type parentType, MemberInfo memInfo)
+        {
+            var setterMethod = TryGetSetterAsCompiledExpression(parentType, memInfo);
+
+            if (setterMethod != null)
+            {
+                return setterMethod;
+            }
+
+            var fieldInfo = memInfo as FieldInfo;
+            var propInfo = memInfo as PropertyInfo;
+
+            if (fieldInfo != null)
+            {
+                return ((injectable, value) => fieldInfo.SetValue(injectable, value));
+            }
+
+            Assert.IsNotNull(propInfo);
+
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return ((object injectable, object value) => propInfo.SetValue(injectable, value, null));
+#else
+            if (propInfo.CanWrite)
+            {
+                return ((injectable, value) => propInfo.SetValue(injectable, value, null));
+            }
+
+            return GetOnlyPropertySetter(parentType, propInfo.Name);
+#endif
+        }
+
+        static ZenMemberSetterMethod TryGetSetterAsCompiledExpression(Type parentType, MemberInfo memInfo)
+        {
+#if (NET_4_6 || NET_STANDARD_2_0) && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS
+
+            if (parentType.ContainsGenericParameters)
+            {
+                return null;
+            }
+
+            var fieldInfo = memInfo as FieldInfo;
+            var propInfo = memInfo as PropertyInfo;
+
+            // It seems that for readonly fields, we have to use the slower approach below
+            // As discussed here: https://www.productiverage.com/trying-to-set-a-readonly-autoproperty-value-externally-plus-a-little-benchmarkdotnet
+            // We have to skip value types because those can only be set by reference using an lambda expression
+            if (!parentType.IsValueType() && (fieldInfo == null || !fieldInfo.IsInitOnly) && (propInfo == null || propInfo.CanWrite))
+            {
+                Type memberType = fieldInfo != null
+                    ? fieldInfo.FieldType : propInfo.PropertyType;
+
+                var typeParam = Expression.Parameter(typeof(object));
+                var valueParam = Expression.Parameter(typeof(object));
+
+                return Expression.Lambda<ZenMemberSetterMethod>(
+                    Expression.Assign(
+                        Expression.MakeMemberAccess(Expression.Convert(typeParam, parentType), memInfo),
+                        Expression.Convert(valueParam, memberType)),
+                        typeParam, valueParam).Compile();
+            }
+#endif
+
+            return null;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs.meta b/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs.meta
new file mode 100644
index 0000000..9f80460
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionInfoTypeInfoConverter.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: e36c348f078bc444fa1e5b22aca27bad
+timeCreated: 1536916212
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs b/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs
new file mode 100644
index 0000000..98ccac4
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs
@@ -0,0 +1,109 @@
+using System;
+using System.Collections.Generic;
+using System.Reflection;
+
+namespace Zenject.Internal
+{
+    [NoReflectionBaking]
+    public class ReflectionTypeInfo
+    {
+        public readonly Type Type;
+        public readonly Type BaseType;
+        public readonly List<InjectPropertyInfo> InjectProperties;
+        public readonly List<InjectFieldInfo> InjectFields;
+        public readonly InjectConstructorInfo InjectConstructor;
+        public readonly List<InjectMethodInfo> InjectMethods;
+
+        public ReflectionTypeInfo(
+            Type type,
+            Type baseType,
+            InjectConstructorInfo injectConstructor,
+            List<InjectMethodInfo> injectMethods,
+            List<InjectFieldInfo> injectFields,
+            List<InjectPropertyInfo> injectProperties)
+        {
+            Type = type;
+            BaseType = baseType;
+            InjectFields = injectFields;
+            InjectConstructor = injectConstructor;
+            InjectMethods = injectMethods;
+            InjectProperties = injectProperties;
+        }
+
+        [NoReflectionBaking]
+        public class InjectFieldInfo
+        {
+            public readonly FieldInfo FieldInfo;
+            public readonly InjectableInfo InjectableInfo;
+
+            public InjectFieldInfo(
+                FieldInfo fieldInfo,
+                InjectableInfo injectableInfo)
+            {
+                InjectableInfo = injectableInfo;
+                FieldInfo = fieldInfo;
+            }
+        }
+
+        [NoReflectionBaking]
+        public class InjectParameterInfo
+        {
+            public readonly ParameterInfo ParameterInfo;
+            public readonly InjectableInfo InjectableInfo;
+
+            public InjectParameterInfo(
+                ParameterInfo parameterInfo,
+                InjectableInfo injectableInfo)
+            {
+                InjectableInfo = injectableInfo;
+                ParameterInfo = parameterInfo;
+            }
+        }
+
+        [NoReflectionBaking]
+        public class InjectPropertyInfo
+        {
+            public readonly PropertyInfo PropertyInfo;
+            public readonly InjectableInfo InjectableInfo;
+
+            public InjectPropertyInfo(
+                PropertyInfo propertyInfo,
+                InjectableInfo injectableInfo)
+            {
+                InjectableInfo = injectableInfo;
+                PropertyInfo = propertyInfo;
+            }
+        }
+
+        [NoReflectionBaking]
+        public class InjectMethodInfo
+        {
+            public readonly MethodInfo MethodInfo;
+            public readonly List<InjectParameterInfo> Parameters;
+
+            public InjectMethodInfo(
+                MethodInfo methodInfo,
+                List<InjectParameterInfo> parameters)
+            {
+                MethodInfo = methodInfo;
+                Parameters = parameters;
+            }
+        }
+
+        [NoReflectionBaking]
+        public class InjectConstructorInfo
+        {
+            public readonly ConstructorInfo ConstructorInfo;
+            public readonly List<InjectParameterInfo> Parameters;
+
+            public InjectConstructorInfo(
+                ConstructorInfo constructorInfo,
+                List<InjectParameterInfo> parameters)
+            {
+                ConstructorInfo = constructorInfo;
+                Parameters = parameters;
+            }
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs.meta b/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs.meta
new file mode 100644
index 0000000..34d38fb
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionTypeInfo.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 5490313f008f146458b6228165838735
+timeCreated: 1536916212
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ReflectionUtil.cs b/Assets/Source/Runtime/Util/ReflectionUtil.cs
new file mode 100644
index 0000000..dc5e995
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionUtil.cs
@@ -0,0 +1,166 @@
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Reflection;
+
+namespace ModestTree
+{
+    public static class ReflectionUtil
+    {
+        public static Array CreateArray(Type elementType, List<object> instances)
+        {
+            var array = Array.CreateInstance(elementType, instances.Count);
+
+            for (int i = 0; i < instances.Count; i++)
+            {
+                var instance = instances[i];
+
+                if (instance != null)
+                {
+                    Assert.That(instance.GetType().DerivesFromOrEqual(elementType),
+                        "Wrong type when creating array, expected something assignable from '"+ elementType +"', but found '" + instance.GetType() + "'");
+                }
+
+                array.SetValue(instance, i);
+            }
+
+            return array;
+        }
+
+        public static IList CreateGenericList(Type elementType, List<object> instances)
+        {
+            var genericType = typeof(List<>).MakeGenericType(elementType);
+
+            var list = (IList)Activator.CreateInstance(genericType);
+
+            for (int i = 0; i < instances.Count; i++)
+            {
+                var instance = instances[i];
+
+                if (instance != null)
+                {
+                    Assert.That(instance.GetType().DerivesFromOrEqual(elementType),
+                        "Wrong type when creating generic list, expected something assignable from '"+ elementType +"', but found '" + instance.GetType() + "'");
+                }
+
+                list.Add(instance);
+            }
+
+            return list;
+        }
+
+        public static string ToDebugString(this MethodInfo method)
+        {
+            return "{0}.{1}".Fmt(method.DeclaringType.PrettyName(), method.Name);
+        }
+
+        public static string ToDebugString(this Action action)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1>(this Action<TParam1> action)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2>(this Action<TParam1, TParam2> action)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3>(this Action<TParam1, TParam2, TParam3> action)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(this Action<TParam1, TParam2, TParam3, TParam4> action)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5>(this
+#if NET_4_6 || NET_STANDARD_2_0
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5> action)
+#else
+            ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5> action)
+#endif
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>(this
+#if NET_4_6 || NET_STANDARD_2_0
+            Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> action)
+#else
+            ModestTree.Util.Action<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> action)
+#endif
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return action.ToString();
+#else
+            return action.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1>(this Func<TParam1> func)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return func.ToString();
+#else
+            return func.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2>(this Func<TParam1, TParam2> func)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return func.ToString();
+#else
+            return func.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3>(this Func<TParam1, TParam2, TParam3> func)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return func.ToString();
+#else
+            return func.Method.ToDebugString();
+#endif
+        }
+
+        public static string ToDebugString<TParam1, TParam2, TParam3, TParam4>(this Func<TParam1, TParam2, TParam3, TParam4> func)
+        {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return func.ToString();
+#else
+            return func.Method.ToDebugString();
+#endif
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ReflectionUtil.cs.meta b/Assets/Source/Runtime/Util/ReflectionUtil.cs.meta
new file mode 100644
index 0000000..df35b14
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ReflectionUtil.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 7c74b10dac7e87e4095f8e3157eb040d
+timeCreated: 1520399530
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/TypeAnalyzer.cs b/Assets/Source/Runtime/Util/TypeAnalyzer.cs
new file mode 100644
index 0000000..d4f8ea7
--- /dev/null
+++ b/Assets/Source/Runtime/Util/TypeAnalyzer.cs
@@ -0,0 +1,268 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using System.Runtime.CompilerServices;
+using ModestTree;
+using Zenject.Internal;
+
+namespace Zenject
+{
+    public delegate InjectTypeInfo ZenTypeInfoGetter();
+
+    public enum ReflectionBakingCoverageModes
+    {
+        FallbackToDirectReflection,
+        NoCheckAssumeFullCoverage,
+        FallbackToDirectReflectionWithWarning
+    }
+
+    public static class TypeAnalyzer
+    {
+        static Dictionary<Type, InjectTypeInfo> _typeInfo = new Dictionary<Type, InjectTypeInfo>();
+
+        // We store this separately from InjectTypeInfo because this flag is needed for contract
+        // types whereas InjectTypeInfo is only needed for types that are instantiated, and
+        // we want to minimize the types that generate InjectTypeInfo for
+        static Dictionary<Type, bool> _allowDuringValidation = new Dictionary<Type, bool>();
+
+        // Use double underscores for generated methods since this is also what the C# compiler does
+        // for things like anonymous methods
+        public const string ReflectionBakingGetInjectInfoMethodName = "__zenCreateInjectTypeInfo";
+        public const string ReflectionBakingFactoryMethodName = "__zenCreate";
+        public const string ReflectionBakingInjectMethodPrefix = "__zenInjectMethod";
+        public const string ReflectionBakingFieldSetterPrefix = "__zenFieldSetter";
+        public const string ReflectionBakingPropertySetterPrefix = "__zenPropertySetter";
+
+        public static ReflectionBakingCoverageModes ReflectionBakingCoverageMode
+        {
+            get; set;
+        }
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!UnityEditor.EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            _typeInfo.Clear();
+            _allowDuringValidation.Clear();
+        }
+#endif
+
+        public static bool ShouldAllowDuringValidation<T>()
+        {
+            return ShouldAllowDuringValidation(typeof(T));
+        }
+
+        public static bool ShouldAllowDuringValidation(Type type)
+        {
+            bool shouldAllow;
+
+            if (!_allowDuringValidation.TryGetValue(type, out shouldAllow))
+            {
+                shouldAllow = ShouldAllowDuringValidationInternal(type);
+                _allowDuringValidation.Add(type, shouldAllow);
+            }
+
+            return shouldAllow;
+        }
+
+        static bool ShouldAllowDuringValidationInternal(Type type)
+        {
+            // During validation, do not instantiate or inject anything except for
+            // Installers, IValidatable's, or types marked with attribute ZenjectAllowDuringValidation
+            // You would typically use ZenjectAllowDuringValidation attribute for data that you
+            // inject into factories
+
+            if (type.DerivesFrom<IInstaller>() || type.DerivesFrom<IValidatable>())
+            {
+                return true;
+            }
+
+#if !NOT_UNITY3D
+            if (type.DerivesFrom<Context>())
+            {
+                return true;
+            }
+#endif
+
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            return type.GetTypeInfo().GetCustomAttribute<ZenjectAllowDuringValidationAttribute>() != null;
+#else
+            return type.HasAttribute<ZenjectAllowDuringValidationAttribute>();
+#endif
+        }
+
+        public static bool HasInfo<T>()
+        {
+            return HasInfo(typeof(T));
+        }
+
+        public static bool HasInfo(Type type)
+        {
+            return TryGetInfo(type) != null;
+        }
+
+        public static InjectTypeInfo GetInfo<T>()
+        {
+            return GetInfo(typeof(T));
+        }
+
+        public static InjectTypeInfo GetInfo(Type type)
+        {
+            var info = TryGetInfo(type);
+            Assert.IsNotNull(info, "Unable to get type info for type '{0}'", type);
+            return info;
+        }
+
+        public static InjectTypeInfo TryGetInfo<T>()
+        {
+            return TryGetInfo(typeof(T));
+        }
+
+        public static InjectTypeInfo TryGetInfo(Type type)
+        {
+            InjectTypeInfo info;
+
+#if ZEN_MULTITHREADING
+            lock (_typeInfo)
+#endif
+            {
+                if (_typeInfo.TryGetValue(type, out info))
+                {
+                    return info;
+                }
+            }
+
+#if UNITY_EDITOR
+            using (ProfileBlock.Start("Zenject Reflection"))
+#endif
+            {
+                info = GetInfoInternal(type);
+            }
+
+            if (info != null)
+            {
+                Assert.IsEqual(info.Type, type);
+                Assert.IsNull(info.BaseTypeInfo);
+
+                var baseType = type.BaseType();
+
+                if (baseType != null && !ShouldSkipTypeAnalysis(baseType))
+                {
+                    info.BaseTypeInfo = TryGetInfo(baseType);
+                }
+            }
+
+#if ZEN_MULTITHREADING
+            lock (_typeInfo)
+#endif
+            {
+                _typeInfo[type] = info;
+            }
+
+            return info;
+        }
+
+        static InjectTypeInfo GetInfoInternal(Type type)
+        {
+            if (ShouldSkipTypeAnalysis(type))
+            {
+                return null;
+            }
+
+#if ZEN_INTERNAL_PROFILING
+            // Make sure that the static constructor logic doesn't inflate our profile measurements
+            using (ProfileTimers.CreateTimedBlock("User Code"))
+            {
+                RuntimeHelpers.RunClassConstructor(type.TypeHandle);
+            }
+#endif
+
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Type Analysis - Calling Baked Reflection Getter"))
+#endif
+            {
+                var getInfoMethod = type.GetMethod(
+                    ReflectionBakingGetInjectInfoMethodName,
+                    BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
+
+                if (getInfoMethod != null)
+                {
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+                    var infoGetter = (ZenTypeInfoGetter)getInfoMethod.CreateDelegate(
+                        typeof(ZenTypeInfoGetter), null);
+#else
+                    var infoGetter = ((ZenTypeInfoGetter)Delegate.CreateDelegate(
+                        typeof(ZenTypeInfoGetter), getInfoMethod));
+#endif
+
+                    return infoGetter();
+                }
+            }
+
+            if (ReflectionBakingCoverageMode == ReflectionBakingCoverageModes.NoCheckAssumeFullCoverage)
+            {
+                // If we are confident that the reflection baking supplies all the injection information,
+                // then we can avoid the costs of doing reflection on types that were not covered
+                // by the baking
+                return null;
+            }
+
+#if !(UNITY_WSA && ENABLE_DOTNET) || UNITY_EDITOR
+            if (ReflectionBakingCoverageMode == ReflectionBakingCoverageModes.FallbackToDirectReflectionWithWarning)
+            {
+                Log.Warn("No reflection baking information found for type '{0}' - using more costly direct reflection instead", type);
+            }
+#endif
+
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Type Analysis - Direct Reflection"))
+#endif
+            {
+                return CreateTypeInfoFromReflection(type);
+            }
+        }
+
+        public static bool ShouldSkipTypeAnalysis(Type type)
+        {
+            return type == null || type.IsEnum() || type.IsArray || type.IsInterface()
+                   || type.ContainsGenericParameters() || IsStaticType(type)
+                   || type == typeof(object)
+#if !NOT_UNITY3D
+                   || (type.Namespace != null && type.Namespace.Contains("UnityEngine"))
+#endif
+                ;
+        }
+
+        static bool IsStaticType(Type type)
+        {
+            // Apparently this is unique to static classes
+            return type.IsAbstract() && type.IsSealed();
+        }
+
+        static InjectTypeInfo CreateTypeInfoFromReflection(Type type)
+        {
+            var reflectionInfo = ReflectionTypeAnalyzer.GetReflectionInfo(type);
+
+            var injectConstructor = ReflectionInfoTypeInfoConverter.ConvertConstructor(
+                reflectionInfo.InjectConstructor, type);
+
+            var injectMethods = reflectionInfo.InjectMethods.Select(
+                ReflectionInfoTypeInfoConverter.ConvertMethod).ToArray();
+
+            var memberInfos = reflectionInfo.InjectFields.Select(
+                x => ReflectionInfoTypeInfoConverter.ConvertField(type, x)).Concat(
+                    reflectionInfo.InjectProperties.Select(
+                        x => ReflectionInfoTypeInfoConverter.ConvertProperty(type, x))).ToArray();
+
+            return new InjectTypeInfo(
+                type, injectConstructor, injectMethods, memberInfos);
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/TypeAnalyzer.cs.meta b/Assets/Source/Runtime/Util/TypeAnalyzer.cs.meta
new file mode 100644
index 0000000..6f97ea6
--- /dev/null
+++ b/Assets/Source/Runtime/Util/TypeAnalyzer.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 7359cd850f5a96d47ad4606d14dac326
+timeCreated: 1461708051
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/UnityUtil.cs b/Assets/Source/Runtime/Util/UnityUtil.cs
new file mode 100644
index 0000000..e262b21
--- /dev/null
+++ b/Assets/Source/Runtime/Util/UnityUtil.cs
@@ -0,0 +1,139 @@
+#if !NOT_UNITY3D
+
+using System.Collections.Generic;
+using System.Linq;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace ModestTree.Util
+{
+    public static class UnityUtil
+    {
+        public static IEnumerable<Scene> AllScenes
+        {
+            get
+            {
+                for (int i = 0; i < SceneManager.sceneCount; i++)
+                {
+                    yield return SceneManager.GetSceneAt(i);
+                }
+            }
+        }
+
+        public static IEnumerable<Scene> AllLoadedScenes
+        {
+            get { return AllScenes.Where(scene => scene.isLoaded); }
+        }
+
+        public static bool IsAltKeyDown
+        {
+            get { return Input.GetKey(KeyCode.LeftAlt) || Input.GetKey(KeyCode.RightAlt); }
+        }
+
+        public static bool IsControlKeyDown
+        {
+            get { return Input.GetKey(KeyCode.LeftControl) || Input.GetKey(KeyCode.RightControl); }
+        }
+
+        public static bool IsShiftKeyDown
+        {
+            get { return Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift); }
+        }
+
+        public static bool WasShiftKeyJustPressed
+        {
+            get { return Input.GetKeyDown(KeyCode.LeftShift) || Input.GetKeyDown(KeyCode.RightShift); }
+        }
+
+        public static bool WasAltKeyJustPressed
+        {
+            get { return Input.GetKeyDown(KeyCode.LeftAlt) || Input.GetKeyDown(KeyCode.RightAlt); }
+        }
+
+        public static int GetDepthLevel(Transform transform)
+        {
+            if (transform == null)
+            {
+                return 0;
+            }
+
+            return 1 + GetDepthLevel(transform.parent);
+        }
+
+        public static GameObject GetRootParentOrSelf(GameObject gameObject)
+        {
+            return GetParentsAndSelf(gameObject.transform).Select(x => x.gameObject).LastOrDefault();
+        }
+
+        public static IEnumerable<Transform> GetParents(Transform transform)
+        {
+            if (transform == null)
+            {
+                yield break;
+            }
+
+            foreach (var ancestor in GetParentsAndSelf(transform.parent))
+            {
+                yield return ancestor;
+            }
+        }
+
+        public static IEnumerable<Transform> GetParentsAndSelf(Transform transform)
+        {
+            if (transform == null)
+            {
+                yield break;
+            }
+
+            yield return transform;
+
+            foreach (var ancestor in GetParentsAndSelf(transform.parent))
+            {
+                yield return ancestor;
+            }
+        }
+
+        public static IEnumerable<Component> GetComponentsInChildrenTopDown(GameObject gameObject, bool includeInactive)
+        {
+            return gameObject.GetComponentsInChildren<Component>(includeInactive)
+                .OrderBy(x =>
+                    x == null ? int.MinValue : GetDepthLevel(x.transform));
+        }
+
+        public static IEnumerable<Component> GetComponentsInChildrenBottomUp(GameObject gameObject, bool includeInactive)
+        {
+            return gameObject.GetComponentsInChildren<Component>(includeInactive)
+                .OrderByDescending(x =>
+                    x == null ? int.MinValue : GetDepthLevel(x.transform));
+        }
+
+        public static IEnumerable<GameObject> GetDirectChildrenAndSelf(GameObject obj)
+        {
+            yield return obj;
+
+            foreach (Transform child in obj.transform)
+            {
+                yield return child.gameObject;
+            }
+        }
+
+        public static IEnumerable<GameObject> GetDirectChildren(GameObject obj)
+        {
+            foreach (Transform child in obj.transform)
+            {
+                yield return child.gameObject;
+            }
+        }
+
+        public static IEnumerable<GameObject> GetAllGameObjects()
+        {
+            return GameObject.FindObjectsOfType<Transform>().Select(x => x.gameObject);
+        }
+
+        public static List<GameObject> GetAllRootGameObjects()
+        {
+            return GetAllGameObjects().Where(x => x.transform.parent == null).ToList();
+        }
+    }
+}
+#endif
diff --git a/Assets/Source/Runtime/Util/UnityUtil.cs.meta b/Assets/Source/Runtime/Util/UnityUtil.cs.meta
new file mode 100644
index 0000000..0700a73
--- /dev/null
+++ b/Assets/Source/Runtime/Util/UnityUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 136cacfad8fe5404aad05dda29a777e4
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ValidationUtil.cs b/Assets/Source/Runtime/Util/ValidationUtil.cs
new file mode 100644
index 0000000..9cbe5df
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ValidationUtil.cs
@@ -0,0 +1,17 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+
+namespace Zenject
+{
+    public static class ValidationUtil
+    {
+        // This method can be used during validation for cases where we need to pass arguments
+        public static List<TypeValuePair> CreateDefaultArgs(params Type[] argTypes)
+        {
+            return argTypes.Select(x => new TypeValuePair(x, x.GetDefaultValue())).ToList();
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Util/ValidationUtil.cs.meta b/Assets/Source/Runtime/Util/ValidationUtil.cs.meta
new file mode 100644
index 0000000..5f154a8
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ValidationUtil.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 018820e0bcd9a4049a305127c0cf1407
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenAutoInjecter.cs b/Assets/Source/Runtime/Util/ZenAutoInjecter.cs
new file mode 100644
index 0000000..7756c5d
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenAutoInjecter.cs
@@ -0,0 +1,73 @@
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class ZenAutoInjecter : MonoBehaviour
+    {
+        [SerializeField]
+        ContainerSources _containerSource = ContainerSources.SearchHierarchy;
+
+        bool _hasInjected;
+
+        public ContainerSources ContainerSource
+        {
+            get { return _containerSource; }
+            set { _containerSource = value; }
+        }
+
+        // Make sure they don't cause injection to happen twice
+        [Inject]
+        public void Construct()
+        {
+            if (!_hasInjected)
+            {
+                throw Assert.CreateException(
+                    "ZenAutoInjecter was injected!  Do not use ZenAutoInjecter for objects that are instantiated through zenject or which exist in the initial scene hierarchy");
+            }
+        }
+
+        public void Awake()
+        {
+            _hasInjected = true;
+            LookupContainer().InjectGameObject(gameObject);
+        }
+
+        DiContainer LookupContainer()
+        {
+            if (_containerSource == ContainerSources.ProjectContext)
+            {
+                return ProjectContext.Instance.Container;
+            }
+
+            if (_containerSource == ContainerSources.SceneContext)
+            {
+                return GetContainerForCurrentScene();
+            }
+
+            Assert.IsEqual(_containerSource, ContainerSources.SearchHierarchy);
+
+            var parentContext = transform.GetComponentInParent<Context>();
+
+            if (parentContext != null)
+            {
+                return parentContext.Container;
+            }
+
+            return GetContainerForCurrentScene();
+        }
+
+        DiContainer GetContainerForCurrentScene()
+        {
+            return ProjectContext.Instance.Container.Resolve<SceneContextRegistry>()
+                .GetContainerForScene(gameObject.scene);
+        }
+
+        public enum ContainerSources
+        {
+            SceneContext,
+            ProjectContext,
+            SearchHierarchy
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenAutoInjecter.cs.meta b/Assets/Source/Runtime/Util/ZenAutoInjecter.cs.meta
new file mode 100644
index 0000000..bcb1bf1
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenAutoInjecter.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 717a02054ef2699498e6bd4234fd7995
+timeCreated: 1510660712
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenPools.cs b/Assets/Source/Runtime/Util/ZenPools.cs
new file mode 100644
index 0000000..a162e1d
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenPools.cs
@@ -0,0 +1,200 @@
+using System;
+using System.Collections.Generic;
+
+namespace Zenject.Internal
+{
+    public static class ZenPools
+    {
+#if ZEN_INTERNAL_NO_POOLS
+        public static InjectContext SpawnInjectContext(DiContainer container, Type memberType)
+        {
+            return new InjectContext(container, memberType);
+        }
+
+        public static void DespawnInjectContext(InjectContext context)
+        {
+        }
+
+        public static List<T> SpawnList<T>()
+        {
+            return new List<T>();
+        }
+
+        public static void DespawnList<T>(List<T> list)
+        {
+        }
+
+        public static void DespawnArray<T>(T[] arr)
+        {
+        }
+
+        public static T[] SpawnArray<T>(int length)
+        {
+            return new T[length];
+        }
+
+        public static HashSet<T> SpawnHashSet<T>()
+        {
+            return new HashSet<T>();
+        }
+
+        public static Dictionary<TKey, TValue> SpawnDictionary<TKey, TValue>()
+        {
+            return new Dictionary<TKey, TValue>();
+        }
+
+        public static void DespawnDictionary<TKey, TValue>(Dictionary<TKey, TValue> dictionary)
+        {
+        }
+
+        public static void DespawnHashSet<T>(HashSet<T> set)
+        {
+        }
+
+        public static LookupId SpawnLookupId(IProvider provider, BindingId bindingId)
+        {
+            return new LookupId(provider, bindingId);
+        }
+
+        public static void DespawnLookupId(LookupId lookupId)
+        {
+        }
+
+        public static BindInfo SpawnBindInfo()
+        {
+            return new BindInfo();
+        }
+
+        public static void DespawnBindInfo(BindInfo bindInfo)
+        {
+        }
+
+        public static BindStatement SpawnStatement()
+        {
+            return new BindStatement();
+        }
+
+        public static void DespawnStatement(BindStatement statement)
+        {
+        }
+#else
+        static readonly StaticMemoryPool<InjectContext> _contextPool = new StaticMemoryPool<InjectContext>();
+        static readonly StaticMemoryPool<LookupId> _lookupIdPool = new StaticMemoryPool<LookupId>();
+        static readonly StaticMemoryPool<BindInfo> _bindInfoPool = new StaticMemoryPool<BindInfo>();
+        static readonly StaticMemoryPool<BindStatement> _bindStatementPool = new StaticMemoryPool<BindStatement>();
+
+        public static HashSet<T> SpawnHashSet<T>()
+        {
+            return HashSetPool<T>.Instance.Spawn();
+        }
+
+        public static Dictionary<TKey, TValue> SpawnDictionary<TKey, TValue>()
+        {
+            return DictionaryPool<TKey, TValue>.Instance.Spawn();
+        }
+
+        public static BindStatement SpawnStatement()
+        {
+            return _bindStatementPool.Spawn();
+        }
+
+        public static void DespawnStatement(BindStatement statement)
+        {
+            statement.Reset();
+            _bindStatementPool.Despawn(statement);
+        }
+
+        public static BindInfo SpawnBindInfo()
+        {
+            return _bindInfoPool.Spawn();
+        }
+
+        public static void DespawnBindInfo(BindInfo bindInfo)
+        {
+            bindInfo.Reset();
+            _bindInfoPool.Despawn(bindInfo);
+        }
+
+        public static void DespawnDictionary<TKey, TValue>(Dictionary<TKey, TValue> dictionary)
+        {
+            DictionaryPool<TKey, TValue>.Instance.Despawn(dictionary);
+        }
+
+        public static void DespawnHashSet<T>(HashSet<T> set)
+        {
+            HashSetPool<T>.Instance.Despawn(set);
+        }
+
+        public static LookupId SpawnLookupId(IProvider provider, BindingId bindingId)
+        {
+            var lookupId = _lookupIdPool.Spawn();
+
+            lookupId.Provider = provider;
+            lookupId.BindingId = bindingId;
+
+            return lookupId;
+        }
+
+        public static void DespawnLookupId(LookupId lookupId)
+        {
+            lookupId.Reset();
+            _lookupIdPool.Despawn(lookupId);
+        }
+
+        public static List<T> SpawnList<T>()
+        {
+            return ListPool<T>.Instance.Spawn();
+        }
+
+        public static void DespawnList<T>(List<T> list)
+        {
+            ListPool<T>.Instance.Despawn(list);
+        }
+
+        public static void DespawnArray<T>(T[] arr)
+        {
+            ArrayPool<T>.GetPool(arr.Length).Despawn(arr);
+        }
+
+        public static T[] SpawnArray<T>(int length)
+        {
+            return ArrayPool<T>.GetPool(length).Spawn();
+        }
+
+        public static InjectContext SpawnInjectContext(DiContainer container, Type memberType)
+        {
+            var context = _contextPool.Spawn();
+
+            context.Container = container;
+            context.MemberType = memberType;
+
+            return context;
+        }
+
+        public static void DespawnInjectContext(InjectContext context)
+        {
+            context.Reset();
+            _contextPool.Despawn(context);
+        }
+#endif
+
+        public static InjectContext SpawnInjectContext(
+            DiContainer container, InjectableInfo injectableInfo, InjectContext currentContext,
+            object targetInstance, Type targetType, object concreteIdentifier)
+        {
+            var context = SpawnInjectContext(container, injectableInfo.MemberType);
+
+            context.ObjectType = targetType;
+            context.ParentContext = currentContext;
+            context.ObjectInstance = targetInstance;
+            context.Identifier = injectableInfo.Identifier;
+            context.MemberName = injectableInfo.MemberName;
+            context.Optional = injectableInfo.Optional;
+            context.SourceType = injectableInfo.SourceType;
+            context.FallBackValue = injectableInfo.DefaultValue;
+            context.ConcreteIdentifier = concreteIdentifier;
+
+            return context;
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenPools.cs.meta b/Assets/Source/Runtime/Util/ZenPools.cs.meta
new file mode 100644
index 0000000..aebfb16
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenPools.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 14ff296505fe79448b0c79ec09977477
+timeCreated: 1535860932
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs b/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs
new file mode 100644
index 0000000..23a5bc3
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs
@@ -0,0 +1,292 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Reflection;
+using ModestTree;
+#if !NOT_UNITY3D
+using UnityEngine;
+#endif
+
+namespace Zenject.Internal
+{
+    public static class ReflectionTypeAnalyzer
+    {
+        static readonly HashSet<Type> _injectAttributeTypes;
+
+        static ReflectionTypeAnalyzer()
+        {
+            _injectAttributeTypes = new HashSet<Type>();
+            ResetStaticValues();
+        }
+
+        public static ConstructorChoiceStrategy ConstructorChoiceStrategy 
+        {
+            get; set;
+        }
+
+        // Only keep the attribute in define to avoid code duplication in static constructor and ResetStaticValues method
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
+#endif
+        static void ResetStaticValues()
+        {
+            // This gets called from static constructor so we won't check if enter the playmode option is enabled or not
+            _injectAttributeTypes.Clear();
+            _injectAttributeTypes.Add(typeof(InjectAttributeBase));
+            ConstructorChoiceStrategy = ConstructorChoiceStrategy.InjectAttributeThenLeastArguments;
+        }
+
+        public static void AddCustomInjectAttribute<T>()
+            where T : Attribute
+        {
+            AddCustomInjectAttribute(typeof(T));
+        }
+
+        public static void AddCustomInjectAttribute(Type type)
+        {
+            Assert.That(type.DerivesFrom<Attribute>());
+            _injectAttributeTypes.Add(type);
+        }
+
+        public static ReflectionTypeInfo GetReflectionInfo(Type type)
+        {
+            Assert.That(!type.IsEnum(), "Tried to analyze enum type '{0}'.  This is not supported", type);
+            Assert.That(!type.IsArray, "Tried to analyze array type '{0}'.  This is not supported", type);
+
+            var baseType = type.BaseType();
+
+            if (baseType == typeof(object))
+            {
+                baseType = null;
+            }
+
+            return new ReflectionTypeInfo(
+                type, baseType, GetConstructorInfo(type), GetMethodInfos(type),
+                GetFieldInfos(type), GetPropertyInfos(type));
+        }
+
+        static List<ReflectionTypeInfo.InjectPropertyInfo> GetPropertyInfos(Type type)
+        {
+            return type.DeclaredInstanceProperties()
+                .Where(x => _injectAttributeTypes.Any(a => x.HasAttribute(a)))
+                .Select(x => new ReflectionTypeInfo.InjectPropertyInfo(
+                    x, GetInjectableInfoForMember(type, x))).ToList();
+        }
+
+        static List<ReflectionTypeInfo.InjectFieldInfo> GetFieldInfos(Type type)
+        {
+            return type.DeclaredInstanceFields()
+                .Where(x => _injectAttributeTypes.Any(a => x.HasAttribute(a)))
+                .Select(x => new ReflectionTypeInfo.InjectFieldInfo(
+                    x, GetInjectableInfoForMember(type, x)))
+                .ToList();
+        }
+
+        static List<ReflectionTypeInfo.InjectMethodInfo> GetMethodInfos(Type type)
+        {
+            var injectMethodInfos = new List<ReflectionTypeInfo.InjectMethodInfo>();
+
+            // Note that unlike with fields and properties we use GetCustomAttributes
+            // This is so that we can ignore inherited attributes, which is necessary
+            // otherwise a base class method marked with [Inject] would cause all overridden
+            // derived methods to be added as well
+            var methodInfos = type.DeclaredInstanceMethods()
+                .Where(x => _injectAttributeTypes.Any(a => x.GetCustomAttributes(a, false).Any())).ToList();
+
+            for (int i = 0; i < methodInfos.Count; i++)
+            {
+                var methodInfo = methodInfos[i];
+                var injectAttr = methodInfo.AllAttributes<InjectAttributeBase>().SingleOrDefault();
+
+                if (injectAttr != null)
+                {
+                    Assert.That(!injectAttr.Optional && injectAttr.Id == null && injectAttr.Source == InjectSources.Any,
+                        "Parameters of InjectAttribute do not apply to constructors and methodInfos");
+                }
+
+                var injectParamInfos = methodInfo.GetParameters()
+                    .Select(x => CreateInjectableInfoForParam(type, x)).ToList();
+
+                injectMethodInfos.Add(
+                    new ReflectionTypeInfo.InjectMethodInfo(methodInfo, injectParamInfos));
+            }
+
+            return injectMethodInfos;
+        }
+
+        static ReflectionTypeInfo.InjectConstructorInfo GetConstructorInfo(Type type)
+        {
+            var args = new List<ReflectionTypeInfo.InjectParameterInfo>();
+
+            var constructor = TryGetInjectConstructor(type);
+
+            if (constructor != null)
+            {
+                args.AddRange(constructor.GetParameters().Select(
+                    x => CreateInjectableInfoForParam(type, x)));
+            }
+
+            return new ReflectionTypeInfo.InjectConstructorInfo(constructor, args);
+        }
+
+        static ReflectionTypeInfo.InjectParameterInfo CreateInjectableInfoForParam(
+            Type parentType, ParameterInfo paramInfo)
+        {
+            var injectAttributes = paramInfo.AllAttributes<InjectAttributeBase>().ToList();
+
+            Assert.That(injectAttributes.Count <= 1,
+                "Found multiple 'Inject' attributes on type parameter '{0}' of type '{1}'.  Parameter should only have one", paramInfo.Name, parentType);
+
+            var injectAttr = injectAttributes.SingleOrDefault();
+
+            object identifier = null;
+            bool isOptional = false;
+            InjectSources sourceType = InjectSources.Any;
+
+            if (injectAttr != null)
+            {
+                identifier = injectAttr.Id;
+                isOptional = injectAttr.Optional;
+                sourceType = injectAttr.Source;
+            }
+
+            bool isOptionalWithADefaultValue = (paramInfo.Attributes & ParameterAttributes.HasDefault) == ParameterAttributes.HasDefault;
+
+            return new ReflectionTypeInfo.InjectParameterInfo(
+                paramInfo,
+                new InjectableInfo(
+                    isOptionalWithADefaultValue || isOptional,
+                    identifier,
+                    paramInfo.Name,
+                    paramInfo.ParameterType,
+                    isOptionalWithADefaultValue ? paramInfo.DefaultValue : null,
+                    sourceType));
+        }
+
+        static InjectableInfo GetInjectableInfoForMember(Type parentType, MemberInfo memInfo)
+        {
+            var injectAttributes = memInfo.AllAttributes<InjectAttributeBase>().ToList();
+
+            Assert.That(injectAttributes.Count <= 1,
+            "Found multiple 'Inject' attributes on type field '{0}' of type '{1}'.  Field should only container one Inject attribute", memInfo.Name, parentType);
+
+            var injectAttr = injectAttributes.SingleOrDefault();
+
+            object identifier = null;
+            bool isOptional = false;
+            InjectSources sourceType = InjectSources.Any;
+
+            if (injectAttr != null)
+            {
+                identifier = injectAttr.Id;
+                isOptional = injectAttr.Optional;
+                sourceType = injectAttr.Source;
+            }
+
+            Type memberType = memInfo is FieldInfo
+                ? ((FieldInfo)memInfo).FieldType : ((PropertyInfo)memInfo).PropertyType;
+
+            return new InjectableInfo(
+                isOptional,
+                identifier,
+                memInfo.Name,
+                memberType,
+                null,
+                sourceType);
+        }
+
+        static ConstructorInfo TryGetInjectConstructor(Type type)
+        {
+#if !NOT_UNITY3D
+            if (type.DerivesFromOrEqual<Component>())
+            {
+                return null;
+            }
+#endif
+
+            if (type.IsAbstract())
+            {
+                return null;
+            }
+
+            var constructors = type.Constructors();
+
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+            // WP8 generates a dummy constructor with signature (internal Classname(UIntPtr dummy))
+            // So just ignore that
+            constructors = constructors.Where(c => !IsWp8GeneratedConstructor(c)).ToArray();
+#endif
+
+            if (constructors.IsEmpty())
+            {
+                return null;
+            }
+
+            if (constructors.HasMoreThan(1))
+            {
+                var explicitConstructor = (from c in constructors where _injectAttributeTypes.Any(a => c.HasAttribute(a)) select c).SingleOrDefault();
+
+                if (explicitConstructor != null)
+                {
+                    return explicitConstructor;
+                }
+
+                if (ConstructorChoiceStrategy == ConstructorChoiceStrategy.InjectAttribute)
+                {
+                    return null;
+                }
+
+                // If there is only one public constructor then use that
+                // This makes decent sense but is also necessary on WSA sometimes since the WSA generated
+                // constructor can sometimes be private with zero parameters
+                var singlePublicConstructor = constructors.Where(x => x.IsPublic).OnlyOrDefault();
+
+                if (singlePublicConstructor != null)
+                {
+                    return singlePublicConstructor;
+                }
+
+                // Choose the one with the least amount of arguments
+                // This might result in some non obvious errors like null reference exceptions
+                // but is probably the best trade-off since it allows zenject to be more compatible
+                // with libraries that don't depend on zenject at all
+                // Discussion here - https://github.com/svermeulen/Zenject/issues/416
+                return constructors.OrderBy(x => x.GetParameters().Count()).First();
+            }
+
+            var onlyConstructor = constructors[0];
+
+            if (ConstructorChoiceStrategy == ConstructorChoiceStrategy.InjectAttribute 
+                && !_injectAttributeTypes.Any(a => onlyConstructor.HasAttribute(a)))
+            {
+                return null;
+            }
+
+            return onlyConstructor;
+        }
+
+#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR
+        static bool IsWp8GeneratedConstructor(ConstructorInfo c)
+        {
+            ParameterInfo[] args = c.GetParameters();
+
+            if (args.Length == 1)
+            {
+                return args[0].ParameterType == typeof(UIntPtr)
+                    && (string.IsNullOrEmpty(args[0].Name) || args[0].Name == "dummy");
+            }
+
+            if (args.Length == 2)
+            {
+                return args[0].ParameterType == typeof(UIntPtr)
+                    && args[1].ParameterType == typeof(Int64*)
+                    && (string.IsNullOrEmpty(args[0].Name) || args[0].Name == "dummy")
+                    && (string.IsNullOrEmpty(args[1].Name) || args[1].Name == "dummy");
+            }
+
+            return false;
+        }
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs.meta b/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs.meta
new file mode 100644
index 0000000..146cf9f
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenReflectionTypeAnalyzer.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 046b222c5a2e0994cb5c424ed912f808
+timeCreated: 1536916211
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenUtilInternal.cs b/Assets/Source/Runtime/Util/ZenUtilInternal.cs
new file mode 100644
index 0000000..14c0fa7
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenUtilInternal.cs
@@ -0,0 +1,298 @@
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using ModestTree;
+using ModestTree.Util;
+#if !NOT_UNITY3D
+using UnityEngine.SceneManagement;
+using UnityEngine;
+#endif
+
+namespace Zenject.Internal
+{
+    public static class ZenUtilInternal
+    {
+#if UNITY_EDITOR
+        static GameObject _disabledIndestructibleGameObject;
+#endif
+
+#if UNITY_EDITOR
+        // Required for disabling domain reload in enter the play mode feature. See: https://docs.unity3d.com/Manual/DomainReloading.html
+        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
+        static void ResetStaticValues()
+        {
+            if (!UnityEditor.EditorSettings.enterPlayModeOptionsEnabled)
+            {
+                return;
+            }
+            
+            _disabledIndestructibleGameObject = null;
+        }
+#endif
+        // Due to the way that Unity overrides the Equals operator,
+        // normal null checks such as (x == null) do not always work as
+        // expected
+        // In those cases you can use this function which will also
+        // work with non-unity objects
+        public static bool IsNull(object obj)
+        {
+            if (obj == null || obj.Equals(null))
+                return true;
+            
+#if !NOT_UNITY3D
+            // This is very weird but sometimes when you check a component's value to see if it's null or not,
+            // the component's null check shows the component is valid but the object is actually destroyed/invalid.
+            // So as an additional measure we check for the gameObject as well.
+            if (obj is Component c)
+                return c.gameObject == null;
+#endif
+
+            return false;
+        }
+
+#if UNITY_EDITOR
+        // This can be useful if you are running code outside unity
+        // since in that case you have to make sure to avoid calling anything
+        // inside Unity DLLs
+        public static bool IsOutsideUnity()
+        {
+            return AppDomain.CurrentDomain.FriendlyName != "Unity Child Domain";
+        }
+#endif
+
+        public static bool AreFunctionsEqual(Delegate left, Delegate right)
+        {
+            return left.Target == right.Target && left.Method() == right.Method();
+        }
+
+        // Taken from here:
+        // http://stackoverflow.com/questions/28937324/in-c-how-could-i-get-a-classs-inheritance-distance-to-base-class/28937542#28937542
+        public static int GetInheritanceDelta(Type derived, Type parent)
+        {
+            Assert.That(derived.DerivesFromOrEqual(parent));
+
+            if (parent.IsInterface())
+            {
+                // Not sure if we can calculate this so just return 1
+                return 1;
+            }
+
+            if (derived == parent)
+            {
+                return 0;
+            }
+
+            int distance = 1;
+
+            Type child = derived;
+
+            while ((child = child.BaseType()) != parent)
+            {
+                distance++;
+            }
+
+            return distance;
+        }
+
+#if !NOT_UNITY3D
+        public static IEnumerable<SceneContext> GetAllSceneContexts()
+        {
+            foreach (var scene in UnityUtil.AllLoadedScenes)
+            {
+                var contexts = scene.GetRootGameObjects()
+                    .SelectMany(root => root.GetComponentsInChildren<SceneContext>()).ToList();
+
+                if (contexts.IsEmpty())
+                {
+                    continue;
+                }
+
+                Assert.That(contexts.Count == 1,
+                    "Found multiple scene contexts in scene '{0}'", scene.name);
+
+                yield return contexts[0];
+            }
+        }
+
+        public static void AddStateMachineBehaviourAutoInjectersInScene(Scene scene)
+        {
+            foreach (var rootObj in GetRootGameObjects(scene))
+            {
+                if (rootObj != null)
+                {
+                    AddStateMachineBehaviourAutoInjectersUnderGameObject(rootObj);
+                }
+            }
+        }
+
+        // Call this before calling GetInjectableMonoBehavioursUnderGameObject to ensure that the StateMachineBehaviour's
+        // also get injected properly
+        // The StateMachineBehaviour's cannot be retrieved until after the Start() method so we
+        // need to use ZenjectStateMachineBehaviourAutoInjecter to do the injection at that
+        // time for us
+        public static void AddStateMachineBehaviourAutoInjectersUnderGameObject(GameObject root)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Searching Hierarchy"))
+#endif
+            {
+                var animators = root.GetComponentsInChildren<Animator>(true);
+
+                foreach (var animator in animators)
+                {
+                    if (animator.gameObject.GetComponent<ZenjectStateMachineBehaviourAutoInjecter>() == null)
+                    {
+                        animator.gameObject.AddComponent<ZenjectStateMachineBehaviourAutoInjecter>();
+                    }
+                }
+            }
+        }
+
+        public static void GetInjectableMonoBehavioursInScene(
+            Scene scene, List<MonoBehaviour> monoBehaviours)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Searching Hierarchy"))
+#endif
+            {
+                foreach (var rootObj in GetRootGameObjects(scene))
+                {
+                    if (rootObj != null)
+                    {
+                        GetInjectableMonoBehavioursUnderGameObjectInternal(rootObj, monoBehaviours);
+                    }
+                }
+            }
+        }
+
+        // NOTE: This method will not return components that are within a GameObjectContext
+        // It returns monobehaviours in a bottom-up order
+        public static void GetInjectableMonoBehavioursUnderGameObject(
+            GameObject gameObject, List<MonoBehaviour> injectableComponents)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Searching Hierarchy"))
+#endif
+            {
+                GetInjectableMonoBehavioursUnderGameObjectInternal(gameObject, injectableComponents);
+            }
+        }
+
+        static void GetInjectableMonoBehavioursUnderGameObjectInternal(
+            GameObject gameObject, List<MonoBehaviour> injectableComponents)
+        {
+            if (gameObject == null)
+            {
+                return;
+            }
+
+            var monoBehaviours = gameObject.GetComponents<MonoBehaviour>();
+
+            for (int i = 0; i < monoBehaviours.Length; i++)
+            {
+                var monoBehaviour = monoBehaviours[i];
+
+                // Can be null for broken component references
+                if (monoBehaviour != null
+                        && monoBehaviour.GetType().DerivesFromOrEqual<GameObjectContext>())
+                {
+                    // Need to make sure we don't inject on any MonoBehaviour's that are below a GameObjectContext
+                    // Since that is the responsibility of the GameObjectContext
+                    // BUT we do want to inject on the GameObjectContext itself
+                    injectableComponents.Add(monoBehaviour);
+                    return;
+                }
+            }
+
+            // Recurse first so it adds components bottom up though it shouldn't really matter much
+            // because it should always inject in the dependency order
+            for (int i = 0; i < gameObject.transform.childCount; i++)
+            {
+                var child = gameObject.transform.GetChild(i);
+
+                if (child != null)
+                {
+                    GetInjectableMonoBehavioursUnderGameObjectInternal(child.gameObject, injectableComponents);
+                }
+            }
+
+            for (int i = 0; i < monoBehaviours.Length; i++)
+            {
+                var monoBehaviour = monoBehaviours[i];
+
+                // Can be null for broken component references
+                if (monoBehaviour != null
+                    && IsInjectableMonoBehaviourType(monoBehaviour.GetType()))
+                {
+                    injectableComponents.Add(monoBehaviour);
+                }
+            }
+        }
+
+        public static bool IsInjectableMonoBehaviourType(Type type)
+        {
+            // Do not inject on installers since these are always injected before they are installed
+            return type != null && !type.DerivesFrom<MonoInstaller>() && TypeAnalyzer.HasInfo(type);
+        }
+
+        public static IEnumerable<GameObject> GetRootGameObjects(Scene scene)
+        {
+#if ZEN_INTERNAL_PROFILING
+            using (ProfileTimers.CreateTimedBlock("Searching Hierarchy"))
+#endif
+            {
+                if (scene.isLoaded)
+                {
+                    return scene.GetRootGameObjects()
+                        .Where(x => x.GetComponent<ProjectContext>() == null);
+                }
+
+                // Note: We can't use scene.GetRootObjects() here because that apparently fails with an exception
+                // about the scene not being loaded yet when executed in Awake
+                // We also can't use GameObject.FindObjectsOfType<Transform>() because that does not include inactive game objects
+                // So we use Resources.FindObjectsOfTypeAll, even though that may include prefabs.  However, our assumption here
+                // is that prefabs do not have their "scene" property set correctly so this should work
+                //
+                // It's important here that we only inject into root objects that are part of our scene, to properly support
+                // multi-scene editing features of Unity 5.x
+                //
+                // Also, even with older Unity versions, if there is an object that is marked with DontDestroyOnLoad, then it will
+                // be injected multiple times when another scene is loaded
+                //
+                // We also make sure not to inject into the project root objects which are injected by ProjectContext.
+                return Resources.FindObjectsOfTypeAll<GameObject>()
+                    .Where(x => x.transform.parent == null
+                            && x.GetComponent<ProjectContext>() == null
+                            && x.scene == scene);
+            }
+        }
+
+#if UNITY_EDITOR
+        // Returns a Transform in the DontDestroyOnLoad scene (or, if we're not in play mode, within the current active scene)
+        // whose GameObject is inactive, and whose hide flags are set to HideAndDontSave. We can instantiate prefabs in here
+        // without any of their Awake() methods firing.
+        public static Transform GetOrCreateInactivePrefabParent()
+        {
+            if(_disabledIndestructibleGameObject == null ||
+                (!Application.isPlaying && _disabledIndestructibleGameObject.scene != SceneManager.GetActiveScene()) ||
+                !_disabledIndestructibleGameObject.scene.isLoaded)
+            {
+                var go = new GameObject("ZenUtilInternal_PrefabParent");
+                go.hideFlags = HideFlags.HideAndDontSave;
+                go.SetActive(false);
+
+                if(Application.isPlaying)
+                {
+                    UnityEngine.Object.DontDestroyOnLoad(go);
+                }
+
+                _disabledIndestructibleGameObject = go;
+            }
+
+            return _disabledIndestructibleGameObject.transform;
+        }
+#endif
+
+#endif
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenUtilInternal.cs.meta b/Assets/Source/Runtime/Util/ZenUtilInternal.cs.meta
new file mode 100644
index 0000000..d5c9268
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenUtilInternal.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 401238e59d733ab48aaea1a582241b29
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenjectException.cs b/Assets/Source/Runtime/Util/ZenjectException.cs
new file mode 100644
index 0000000..f0ee200
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectException.cs
@@ -0,0 +1,21 @@
+using System;
+using System.Diagnostics;
+
+namespace Zenject
+{
+    [DebuggerStepThrough]
+    [NoReflectionBaking]
+    public class ZenjectException : Exception
+    {
+        public ZenjectException(string message)
+            : base(message)
+        {
+        }
+
+        public ZenjectException(
+            string message, Exception innerException)
+            : base(message, innerException)
+        {
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenjectException.cs.meta b/Assets/Source/Runtime/Util/ZenjectException.cs.meta
new file mode 100644
index 0000000..52f9b06
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectException.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 60bbf1e064ae9674185f3f301957c914
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs b/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs
new file mode 100644
index 0000000..b1153e2
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs
@@ -0,0 +1,152 @@
+#if !NOT_UNITY3D
+
+using System;
+using ModestTree;
+using UnityEngine;
+using UnityEngine.SceneManagement;
+
+namespace Zenject
+{
+    public enum LoadSceneRelationship
+    {
+        // This will use the ProjectContext container as parent for the new scene
+        // This is similar to just running the new scene normally
+        None,
+        // This will use current scene as parent for the new scene
+        // This will allow the new scene to refer to dependencies in the current scene
+        Child,
+        // This will use the parent of the current scene as the parent for the next scene
+        // In most cases this will be the same as None
+        Sibling
+    }
+
+    public class ZenjectSceneLoader
+    {
+        readonly ProjectKernel _projectKernel;
+        readonly DiContainer _sceneContainer;
+
+        [Inject]
+        public ZenjectSceneLoader(
+            [InjectOptional]
+            SceneContext sceneRoot,
+            ProjectKernel projectKernel)
+        {
+            _projectKernel = projectKernel;
+            _sceneContainer = sceneRoot == null ? null : sceneRoot.Container;
+        }
+
+        public void LoadScene(
+            string sceneName,
+            LoadSceneMode loadMode = LoadSceneMode.Single,
+            Action<DiContainer> extraBindings = null,
+            LoadSceneRelationship containerMode = LoadSceneRelationship.None,
+            Action<DiContainer> extraBindingsLate = null)
+        {
+            PrepareForLoadScene(loadMode, extraBindings, extraBindingsLate, containerMode);
+
+            Assert.That(Application.CanStreamedLevelBeLoaded(sceneName),
+                "Unable to load scene '{0}'", sceneName);
+
+            SceneManager.LoadScene(sceneName, loadMode);
+
+            // It would be nice here to actually verify that the new scene has a SceneContext
+            // if we have extra binding hooks, or LoadSceneRelationship != None, but
+            // we can't do that in this case since the scene isn't loaded until the next frame
+        }
+
+            public AsyncOperation LoadSceneAsync(
+            string sceneName,
+            LoadSceneMode loadMode = LoadSceneMode.Single,
+            Action<DiContainer> extraBindings = null,
+            LoadSceneRelationship containerMode = LoadSceneRelationship.None,
+            Action<DiContainer> extraBindingsLate = null)
+        {
+            PrepareForLoadScene(loadMode, extraBindings, extraBindingsLate, containerMode);
+
+            Assert.That(Application.CanStreamedLevelBeLoaded(sceneName),
+                "Unable to load scene '{0}'", sceneName);
+
+            return SceneManager.LoadSceneAsync(sceneName, loadMode);
+        }
+
+        void PrepareForLoadScene(
+            LoadSceneMode loadMode,
+            Action<DiContainer> extraBindings,
+            Action<DiContainer> extraBindingsLate,
+            LoadSceneRelationship containerMode)
+        {
+            if (loadMode == LoadSceneMode.Single)
+            {
+                Assert.IsEqual(containerMode, LoadSceneRelationship.None);
+
+                // Here we explicitly unload all existing scenes rather than relying on Unity to
+                // do this for us.  The reason we do this is to ensure a deterministic destruction
+                // order for everything in the scene and in the container.
+                // See comment at ProjectKernel.OnApplicationQuit for more details
+                _projectKernel.ForceUnloadAllScenes();
+            }
+
+            if (containerMode == LoadSceneRelationship.None)
+            {
+                SceneContext.ParentContainers = null;
+            }
+            else if (containerMode == LoadSceneRelationship.Child)
+            {
+                if (_sceneContainer == null)
+                {
+                    SceneContext.ParentContainers = null;
+                }
+                else
+                {
+                    SceneContext.ParentContainers = new[] { _sceneContainer };
+                }
+            }
+            else
+            {
+                Assert.IsNotNull(_sceneContainer,
+                    "Cannot use LoadSceneRelationship.Sibling when loading scenes from ProjectContext");
+                Assert.IsEqual(containerMode, LoadSceneRelationship.Sibling);
+                SceneContext.ParentContainers = _sceneContainer.ParentContainers;
+            }
+
+            SceneContext.ExtraBindingsInstallMethod = extraBindings;
+            SceneContext.ExtraBindingsLateInstallMethod = extraBindingsLate;
+        }
+
+        public void LoadScene(
+            int sceneIndex,
+            LoadSceneMode loadMode = LoadSceneMode.Single,
+            Action<DiContainer> extraBindings = null,
+            LoadSceneRelationship containerMode = LoadSceneRelationship.None,
+            Action<DiContainer> extraBindingsLate = null)
+        {
+            PrepareForLoadScene(loadMode, extraBindings, extraBindingsLate, containerMode);
+
+            Assert.That(Application.CanStreamedLevelBeLoaded(sceneIndex),
+                "Unable to load scene '{0}'", sceneIndex);
+
+            SceneManager.LoadScene(sceneIndex, loadMode);
+
+            // It would be nice here to actually verify that the new scene has a SceneContext
+            // if we have extra binding hooks, or LoadSceneRelationship != None, but
+            // we can't do that in this case since the scene isn't loaded until the next frame
+        }
+
+        public AsyncOperation LoadSceneAsync(
+            int sceneIndex,
+            LoadSceneMode loadMode = LoadSceneMode.Single,
+            Action<DiContainer> extraBindings = null,
+            LoadSceneRelationship containerMode = LoadSceneRelationship.None,
+            Action<DiContainer> extraBindingsLate = null)
+        {
+            PrepareForLoadScene(loadMode, extraBindings, extraBindingsLate, containerMode);
+
+            Assert.That(Application.CanStreamedLevelBeLoaded(sceneIndex),
+                "Unable to load scene '{0}'", sceneIndex);
+
+            return SceneManager.LoadSceneAsync(sceneIndex, loadMode);
+        }
+    }
+}
+
+#endif
diff --git a/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs.meta b/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs.meta
new file mode 100644
index 0000000..67de6a7
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectSceneLoader.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 097ddf2608210fe44a9d215a1721d857
+timeCreated: 1461708048
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs b/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs
new file mode 100644
index 0000000..05f8a65
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs
@@ -0,0 +1,40 @@
+using ModestTree;
+using UnityEngine;
+
+namespace Zenject
+{
+    public class ZenjectStateMachineBehaviourAutoInjecter : MonoBehaviour
+    {
+        DiContainer _container;
+        Animator _animator;
+
+        [Inject]
+        public void Construct(DiContainer container)
+        {
+            _container = container;
+            _animator = GetComponent<Animator>();
+            Assert.IsNotNull(_animator);
+        }
+
+        // The unity docs (https://unity3d.com/learn/tutorials/modules/beginner/5-pre-order-beta/state-machine-behaviours)
+        // mention that StateMachineBehaviour's should only be retrieved in the Start method
+        // which is why we do it here
+        public void Start()
+        {
+            // Animator can be null when users create GameObjects directly so in that case
+            // Just don't bother attempting to inject the behaviour classes
+            if (_animator != null)
+            {
+                var behaviours = _animator.GetBehaviours<StateMachineBehaviour>();
+
+                if (behaviours != null)
+                {
+                    foreach (var behaviour in behaviours)
+                    {
+                        _container.Inject(behaviour);
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs.meta b/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs.meta
new file mode 100644
index 0000000..a6bd5ba
--- /dev/null
+++ b/Assets/Source/Runtime/Util/ZenjectStateMachineBehaviourAutoInjecter.cs.meta
@@ -0,0 +1,13 @@
+fileFormatVersion: 2
+guid: 486c69818dffcd14f96ce64502516bbb
+timeCreated: 1527941118
+licenseType: Free
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: -9991
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Validation.meta b/Assets/Source/Runtime/Validation.meta
new file mode 100644
index 0000000..437ff8e
--- /dev/null
+++ b/Assets/Source/Runtime/Validation.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 577ec212adf31e04bbd46b24f633f1e3
+folderAsset: yes
+timeCreated: 1459463884
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Validation/IValidatable.cs b/Assets/Source/Runtime/Validation/IValidatable.cs
new file mode 100644
index 0000000..ba8f4a6
--- /dev/null
+++ b/Assets/Source/Runtime/Validation/IValidatable.cs
@@ -0,0 +1,7 @@
+namespace Zenject
+{
+    public interface IValidatable
+    {
+        void Validate();
+    }
+}
diff --git a/Assets/Source/Runtime/Validation/IValidatable.cs.meta b/Assets/Source/Runtime/Validation/IValidatable.cs.meta
new file mode 100644
index 0000000..1c5ec39
--- /dev/null
+++ b/Assets/Source/Runtime/Validation/IValidatable.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 5d2a7156fffca9b439f7734d94ccf336
+timeCreated: 1461708050
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Validation/ValidationMarker.cs b/Assets/Source/Runtime/Validation/ValidationMarker.cs
new file mode 100644
index 0000000..e199a65
--- /dev/null
+++ b/Assets/Source/Runtime/Validation/ValidationMarker.cs
@@ -0,0 +1,33 @@
+using System;
+
+namespace Zenject
+{
+    [NoReflectionBaking]
+    public class ValidationMarker
+    {
+        public ValidationMarker(
+            Type markedType, bool instantiateFailed)
+        {
+            MarkedType = markedType;
+            InstantiateFailed = instantiateFailed;
+        }
+
+        public ValidationMarker(Type markedType)
+            : this(markedType, false)
+        {
+        }
+
+        public bool InstantiateFailed
+        {
+            get;
+            private set;
+        }
+
+        public Type MarkedType
+        {
+            get;
+            private set;
+        }
+    }
+}
+
diff --git a/Assets/Source/Runtime/Validation/ValidationMarker.cs.meta b/Assets/Source/Runtime/Validation/ValidationMarker.cs.meta
new file mode 100644
index 0000000..1ec019f
--- /dev/null
+++ b/Assets/Source/Runtime/Validation/ValidationMarker.cs.meta
@@ -0,0 +1,12 @@
+fileFormatVersion: 2
+guid: 27e4cef6504bc0243b1893240d22b72d
+timeCreated: 1461708049
+licenseType: Pro
+MonoImporter:
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/Zenject.asmdef b/Assets/Source/Runtime/Zenject.asmdef
new file mode 100644
index 0000000..ab42e78
--- /dev/null
+++ b/Assets/Source/Runtime/Zenject.asmdef
@@ -0,0 +1,24 @@
+{
+    "name": "Zenject",
+    "references": [],
+    "includePlatforms": [],
+    "excludePlatforms": [],
+    "allowUnsafeCode": false,
+    "overrideReferences": false,
+    "precompiledReferences": [],
+    "autoReferenced": true,
+    "defineConstraints": [],
+    "versionDefines": [
+        {
+            "name": "com.unity.modules.uielements",
+            "expression": "1.0.0",
+            "define": "USE_UI_ELEMENTS_MODULE"
+        },
+        {
+            "name": "com.unity.ui",
+            "expression": "1.0.0",
+            "define": "USE_UI_ELEMENTS_PACKAGE"
+        }
+    ],
+    "noEngineReferences": false
+}
\ No newline at end of file
diff --git a/Assets/Source/Runtime/Zenject.asmdef.meta b/Assets/Source/Runtime/Zenject.asmdef.meta
new file mode 100644
index 0000000..de86f85
--- /dev/null
+++ b/Assets/Source/Runtime/Zenject.asmdef.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: 0d8beb7f090555447a6cf5ce9e54dbb4
+timeCreated: 1531030458
+licenseType: Free
+AssemblyDefinitionImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Runtime/link.xml b/Assets/Source/Runtime/link.xml
new file mode 100644
index 0000000..d2814ad
--- /dev/null
+++ b/Assets/Source/Runtime/link.xml
@@ -0,0 +1,15 @@
+<linker>
+    <assembly fullname="zenject">
+        <type fullname="Zenject.ZenjectManagersInstaller" preserve="all"/>
+        <type fullname="Zenject.SceneContextRegistry" preserve="all"/>
+        <type fullname="Zenject.PlaceholderFactory*" preserve="all"/>
+        <type fullname="Zenject.SceneContextRegistryAdderAndRemover" preserve="all"/>
+        <type fullname="Zenject.SignalBusInstaller" preserve="all" />
+        <type fullname="Zenject.SignalDeclarationAsyncInitializer" preserve="all" />
+        <type fullname="Zenject.SignalDeclaration" preserve="all" />
+        <type fullname="Zenject.SignalSubscription" preserve="all" />
+        <type fullname="Zenject.SignalSubscription/Pool" preserve="all" />
+        <type fullname="Zenject.SignalBus" preserve="all" />
+        <type fullname="*/Factory*" preserve="all" />
+    </assembly>
+</linker>
diff --git a/Assets/Source/Runtime/link.xml.meta b/Assets/Source/Runtime/link.xml.meta
new file mode 100644
index 0000000..34e362a
--- /dev/null
+++ b/Assets/Source/Runtime/link.xml.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 9fd6295dc2d5c464c99755a86603cb10
+TextScriptImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Usage.meta b/Assets/Source/Usage.meta
new file mode 100644
index 0000000..0e709a8
--- /dev/null
+++ b/Assets/Source/Usage.meta
@@ -0,0 +1,9 @@
+fileFormatVersion: 2
+guid: a5896143fdd47624ebc6ddd933f1ed1b
+folderAsset: yes
+timeCreated: 1427464099
+licenseType: Free
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Usage/.gitignore b/Assets/Source/Usage/.gitignore
new file mode 100644
index 0000000..3f80077
--- /dev/null
+++ b/Assets/Source/Usage/.gitignore
@@ -0,0 +1,4 @@
+/Zenject-usage.pdb
+/Zenject-usage.pdb.meta
+/Zenject-usage.dll.mdb
+/Zenject-usage.dll.mdb.meta
diff --git a/Assets/Source/Usage/Zenject-usage.dll b/Assets/Source/Usage/Zenject-usage.dll
new file mode 100644
index 0000000000000000000000000000000000000000..e974d3fc8a2fcfa78be244934defb40eda9a72a6
GIT binary patch
literal 23040
zcmeHv3w%`7x$n34Ou}UHPKYE5I6TDgFa(GYV!%9+C@)EP)M{Ze*@V%_Oq`h@QPHIM
z!m1VR1HIM;u?kj?Vr%i;Ac%TewMLKB+x8kRYSrFbkG-c4+y3hLf8SpFF`1zDoO^%2
z^E>wp%(wsl@3q!mYwfkyeq@$ka4UI;$cyi%pAtQeEr04nezxd?Iq%db^XP|JFHd@0
zTlVs#w$0&0pgSJxj0d{{p<px`O9tAFK)fd!2uA}=D_a9yu@0jmH`hN^rC!xcv`q7m
z7JBAFtF&R#CuM8dM6036G__y36x#s4efSa;2-eMdvx4g{pFv3I`QxFwYuT0mJ6lCr
zg^v$;TN(6W-&Gt_`!hh41M;&N(Rf?=1wa6~U2Z<`r7m8PG`1$eJI;rIP4;y}`A~1H
zh$rG9n5Axg0KB7Z__{uI=&p*m5sAT(>q-Ooa<29Gx;}M84K6CMj@uO<uA5F7w6z>z
z=MZV4{rkm`UXB|2b<Z|r@alQqZ5h1H*aodv_ijVApv~BZZpAip8^)e@#zegwUVdz^
z7{h!r!UaHqMl=-ypvbZm0uYMKnVbRxCUZuOxz)#&`%@_j%$#wXUAuf_L9H+{q>_ca
z^=>QT+$f`%w_FPWP>fRs3<2*9Po<YOsix7d;Fv4QAoMFZ%T;3`&L|xFx6D&fVgj}H
z_pwU!<!F?d<!FPM`W0OCRV9{lfSs`i{ytWTz8r01I?q^Z*ZU+`QBkRnrS)!;;yv3+
zVVn_HzTRzIS?t3pyvf*hG8>(iwpu)Oi{|5=&^_f#xV^CF6F7{ULV#m$QTB<JUBJlv
zj{gefk5)1B37DpPPAXr;ChUwV8ApAl?k&e4mkOX|%m4wX(IiWuz_{|Y?CKPSVK0%B
zEk^-X)f_)eIN~?O@)IykpD?a`Bb!h;8%^+-I;WcLa6vUYRFbJy5&@{@X_i8OWZi6M
zRR~!HIax0@vqn_bX;u;e$a=b^5Rkr4-70XN<tM=M8@YAbVvCBavf>1s*#8RUf2QRx
z!12FgzGV=AnlG>v0-&h26auVJr%KnUA{JVH0v!7eWv{X90v!8I%6^t*7vR{xuI#mz
zU4Uc1P1zS&b^(t4o65e}vI|Jxk2{p#*_NMxbieN?zdFlLK)T;<<yUX{39$VBUu~WJ
zengeuV3jYxvHw8X8!fv4t6q-Z0p-_Z`3Xq(drJA8YxxPV{QlmpbErL!yf}bgQ0XxX
zne&VQj8B}IO@)9HmE-Ks%PJA(FEdU6617?i0ZzcH9N^H`RXip>GhTpG-#1}LeSfap
z)>v)=P|R9OA;8J|3l*@=vI}tRZ?oMghAE0UrlK&Jnza#tV!mW41e~Z@K2P7!dTxWJ
zRvElz*)q4Hvf|9j1#>Yw5Y{1>0O^;Q<EC7NwMjYFh-JX7$#^*0nP87^V9@)powBBt
z?gB1ge9oE{j3Igu{6U;drZhxin5E^TV@b1a!a!D59_XJ>n@1;^Yn)=xE_|^w^gg~A
z6vQqi_@1f}O~&>NeA$j1Qe)nF@NH0AoG{g%WKy+%jz5#m7TF?lg~(4tzLCw=V<NkA
z*5qW;t>d<hJDu(wht{Uo$NgYjCjB3gr<O9VDP{lFkbb&Rq_^x(rI}P-#`*=2sDdh+
zTXQ$qc$z6Xlg(31hqVATo{6^AP<v+QQ;4!?43?DrU`g1<g0a1TZU8IAe&q<;rC6@8
zhZM^r4K4IMSS~#Cg}n||2yC+BiWQ6PUlbcBS^OH;C7(_~yB1IxGG(AsCJCD%tQ4)!
zwmM-a(-hgi^ASfhfu;)kvSQPObt+aaETPy8VOJ|QOW4;Gs}S~W#VUpEQEaZThZU<5
z_LO4tg}tCywXio7s}Xigv07ojQEZX0KP$Fam`^wN2<HW@fJ*h5dKUJtPFTHS^}<#w
zhLH!)PQ@_4f?cH;jsUPbg-xV$gzXo0Dq-e??N!Cj6ZS`80a_`n*u$kyCQK^uoFi-s
zkAASVid`VATi8^(NZ1X+rjY?gbPrfAmGhAWc0gE#umXBTJm)EPOjs3NDp~%dSX@}9
zm+MkRIN(wGWMOC0Wx~!<Y^$)<!sgSJ!Y)>9o3LJC3+WnRyM@)z^}=2eb{5?z>|cb{
z(#^t3Gr06cbgQs>VT<W@VIg5>)3=263ag_#h21Qyp6(WQzpw_nN7yrp?Gg5-V)qLB
zSh4R3E6U{38|Xe^a}>K@*h<Cr3hPvCpRg+wdqCJO#lA1>3B?{1c2u#4g#AHSBkdPf
zG=@uWq8|z?SL`t`%z9wC)XaAZ&@1c2cCKRGiajBoH;LzY^t5>H5!))oo>lA_u?;Eq
ztgsIh`?0W36&n;*<l~yHqJzR_DfXPOR>ckp>lU_}UKDnnVlN5%j$;2P>~Y0@BJ53J
zt@MhpkA$_+Yr=A~xb!vjhOpCwt)sVuEfTh#ekp9dunXva3QH(<T-XhYy(4U&V($t&
zq}Y3C>H>N%YbIvs3+UIvbic{or)l)6KM(Tf{zAy({;`n1^_N2a&3_7HR(2sGF383V
zO-aEwWRIoH%m=d9(AvI7f!Fr^NaWKZ4?#|&Pb4-Y=MmuIoW~$1<vfWDJ9CCHr|&HN
zm0n1%mHtkjMnB2<9jrq+e}FuiqifUX?VL==4|BK<ALWcy8jUvQmLkLVMZPPtEsr(P
zJg(bwB0tSL1-K)>OxNhE`4b@>Y}NU3Sl9LqihM!jD<b~{>G({9PoRM1=^|%CYSdc5
zCGHaWw#Ze5tcet^fxJ%et6xB#T*OgsY3`RP`-|4wHMt*nZQp|;_ltZ1Qlmc?_1HeA
z7x%ztw#aIcb&wieQ_Q7&r<mL1L&42sxvk7no*v8AA(6!;j6aq3Tn%h~j$}NE)dCJw
z`5ehOENoSP>2;+iWuFS$wKntPjDNGqeB-lcf_+o5>DjZv?pADmb`{oJ_bIk0yBh3a
z#hS7gVU!+FY-M%>*r2d$P@W%agBMMkVn0h^Z>KQA$0PNOAkJh*w3oBv=AA9rj%Xic
z_sSZLJ&$OA$-ah)lqc_Bgm_J7+Fs7SQC4y$`zZTXUiK;5U$XC{GR4felWp6}*#qis
zpIP30G|{$kd6Vh40akF_vsjlDPZH*vm-ACPola4#Dd#n?D#fnKIf^slRAD<QRQje~
zPO}tyy!6-lbh^*<M9x3c40_sT+1e}`vRSEC!G+;-B;yY`ewt$vFg@4JM%pH8jwjpZ
zy5h<;hq0~7WvkR2#x_}?OX+%Ujpi`6;R;(mT$d%9!`N2mvbAXrW7`s!twVDd+m^d*
zTQrBU4XYISaCtXs4rAL_T($wtVQky%vOTUjEC(%!)rNeIWE7^bQ&QMeVISGO!f}60
zVV|b3F_Sqdj~DjLx7m=Epou2)RpuVmk~B?Nzi(;o5ZG*&XAdn_o_D}=3oTKe_rP-t
zt+YM;SR<`VVH<2Vq+Lc)llcxJ%U0SVtl#%KvTUWRU7o$P!)9-5m(zDuTv6Up?Mk{|
z#hscr1onus&B~ie+vss+tIL}WcF?rRzF$TEXtUXL6}_e6_9E_TI;P?tL)_K$q3!9X
zKKh-_-qrd@n<DM$dpGYlT0dn8>-YUG?_IDW(<bG8mB!ob_u5x!n$7;IZKq0`dGu>&
ziOGDE^K<p<XoawT-@N?aYuC{_WoybW)~}}x%GQ?uSM7S*Y}%x}8z^qG-)lF}l{WjU
zwu7#-nMc2o?lPH_cN5(!%q;IFdPv#0yqoDUW#jU0re{r?ly?gqvDuJz3;mOdJFDQR
z_I3J|iaV!Z2<$!E(~ni{Z&TPGQrO>YHl*E3xl_%yP9o<{DiPN2yAC;b(nQlHb-9hE
zrLYQ{4QaR0B9r-^N0!^ESy;bs2w85Y6}G3JzCml1r(Sqe`v!eQvBJV3uujDSg^TrX
zQcSTk3LC(-DprHIZ&9CO&4~LJ?J$|t^V_u3W<%PyX+U{Cfw*0?S6ILAFyeO6ewXJR
zH0biYlU{Ur-bt^yJpUUFyFBlr_g$WM(Z?=N-1IxmY+Ww>Zt@8;OTU{6O&e-Gq<xnH
zF3$lfcX<xb9GB;As&jeXLrYzr_t5#ar=RxFmuxnq?V-&o?zgDRz0|GZyhTG`y|$;H
zzDNBw8`8c<x4Po)qg}4J`)IfA>8JZ?pUsA}`{{94++G@V#qFh+Y)?P!qt{Z{TPf^V
z3i}|1eVoERNnu!|;$zOq`zR}g6{fJV6gDY^O}E*QwvVb!=HnUq0jd+$@8cQz0cvr1
zexKI6JRhWuF3$%kY<v3YA-dFN=jjhopNd;qv|9fMx<SQlE;<ivr|s#dhv^QRZPp*A
zy(;d_qL}^&J)+{?FWL<Dgzf3a72v@X_EHLaErq?6!j7e|4^r62HtW;()0orEF~6+%
zsP+TO7uN4vUpxd>s%#y_ztMh30cA@TzY8|qw8>HY7|lsx3sYFV&4#qcXqCx)ub{ji
z(RyM1zF(reA5l=*GRDrN0~A)a)5gvQi<>r-Hyc;D{WcrYo}gP*9QX8-v`fWtPd`b!
zZO`lVr|5w4yk+cB?HT&9^8EJLA+Q&fZ2-1s>1WFJ53oH;Z<#hZ`hQICE6+c|bCCX7
zd1jOhfqi1y#PcBe%B^vIz5X0cG#Sp6N43K=O&FgkhrnhlTXo4%?Ri?DY|Y5|Jk^;t
zY3n0$57s(Xj?k(U+xir?F@<eTVcjVV7rfL{!uM7Ad8dbVKzivLkQww{$V_?=QlkTD
z@)>A!IxPC12!3@0_Rt&9c!@nV`jtp`l<Ch>7f;U#J<a@P9UMGb{&ytX2aq263#6B_
z<Sw%rdnGQ=G&1El=yjSX)+vH#3Z8Fc4=oZ+gDrJx9)UfybX1L(&if2~2Cev9YbKrl
z1%1X)+u!BsqjmoVf7}E4H%IyDqJL*>HU%YvA=2zkvv*9~>(XB@n59m)y7Z>!fJ?K_
zg&!6CW08z?GO-zD$}i&c6IagHUHF&_yK|cOLzng6gFklVIT3cZn;U!Z1jIVhOI>&x
zuuc^&jalcKG)<Fe+&RtTabue2#V(E63oLa?y7UK1TIi(goAob2Ht0b}KkjO<EEE|Q
zc`4*wdJbfSc2Is<mS+c@R95a8t27hJR(W=c=N*tknvZ7Tr5qns;;y+5SJ~~5)zk@j
zFU{6{v{&>GivAI*g64;`5b|l!4~jf2))ytJRO4*pHO>~$INMY$1pi9WSBbt_^tD<i
zRp436*D@+7n<Cx{+$H&H#&)V1a}f>DJY*ged5GqEZr5MJD<BuquxO5nJdSJod-M-P
zPa6AcB0adue_GGdbod8EGfCtW(NEVnPn~FX2tK57iN{5LpnV9dM`ulz&UlL8={jd?
z5gF9EtgzsI!8-)+7W|Un4|Fai%foWI$QF@dk$oP{utV^G;N2qkdAO8=f?pCmEclqn
z4@5&=*;A2OUiP0Pc)FL%su$eoJ&O{apx}_;e!<&;uk`E?&)uTgBbt4pIVhS#&|K?z
zNi@eqa~zsmJf4iRXs;(LgG-qLyx%ija3k=Oo)*C&;5R&B!P|j<<=G*4PsWf=-aXK~
z=h>IRbv`7X$00*rPv#|PjVU4<Giy8%Z!nYhF_g(A_6yz)yx+51@E*Yj1s?+L@g5U=
zT>P~$9P1gw{*wex0lvyxFSrqSmp3RlB)DJjcEP&^?-6`Z@FBs+1Rocy`6R#ZEPB*C
zN$?cly`Fl(jiL_<4vD^B@OHrig7=8epx{HmPkE1vm9ivr7H10xo+7wja3k=e-jHav
z3my>t9^k{?LBWTBU-ljssre<FpQ8eTCyAT_&70mj!Sx~={oMW=1qVfj;IrS;C%9ka
zc4+o`b_+fz@{m74Z+j1k=dfswi99YE%I4BFk)CXhog{dQ;6})TjE$lR0heX;3EmDo
zIb#pxd!9p(Gc%5h^yIKUki$8r0Key{6Wl2Jje<kKRT+JPw+r4Q@{q{mko!HJT*;Fw
zd4TtO>I63m-Y7T(yw}qwcsuZlj6IN>GloS&c^uo3$49|{;ClrR3VuiM)O@zq<+Ep#
z;EjR@L=K7^7D)x{<1JwSfZ#fj10n}SQX%^UL~az>Cvs5a;X;lb7VIsOJVoqZC$dR2
zO-0XnE}}ls42XP3^i(XFMNTc|*bb3>q8Si*uV~&8Nn^!d<kYd^FY;cI?}(gQB6^X-
zCG1Zpv7CAm>+1wJ3En99UcrNchfU9M;yI3^Hj3;J%{3z55jnM#eVRn}m9po6$U%|A
zBKyijFLF@iu*kZTC9}u@k%J<KMbas3trNLX<e<o5ku;vI0g;(l8{}a<Jq_0cr_&gk
zjx*g1oR4SXTy_SY3{>C^gxPqPU@p$iXX0tV0xG73c$=Yy#^JnGO0~Gtzlctz#W(|=
zjXV2wG=b`IPrrdqr4_`_z9->rh{<@db_&XzN<oy=j*>#SW8Z<&43xA9=WfDtx22E+
z*~=jJWaCvKdN}7D$ft8YfV?*M7aHLy7)x&+%dd;vmB&%P6j_%4&(ME2e~ON`RPv`o
zx^bj{qYjAtMC9Fttl3w14m=+f{Od0u7Zq`oTbi{pWy6?@kgcrva>yr(+4H$#uGQIo
z#__RSThsFs(fseRtgk3xS(eW-0?h9V^P41@kUDyW-yHEl>gbs<!2E1UM{8#RPk_V~
z5Bf{P-TqwQW=M@%&}%v^6}cR}r=dRzp*bHtsNtn(mTh>3qf@KMb?8wIYp8M1d>Or}
z(S?vYdW@f!wTtXPX*&9D0yGz+hjj{zyac_Br+y;4(bGD`AT`>8TW~t{h`b!VuF(~c
zI__Lg2fj*VA4Y(Vd(tfXG3M~3Qsi|QcRF1w@&-JM(Xb9=c@tJmI(-dNqpxF3>U4|9
zofw-M-6ryz7^6DwcP@nH4vbTsc8R<TV--&TA$6?H&IaBs@)3+#9rtxuK1z+y|3Ksc
zw53izg4F0Kyz!yalOhkJbv3-7(*n&AIuG~-kuT$!icUWj`3lCqMz2EZG=x^y=yj2A
zqP=zcCy__-oJFIbL+bS3X&vw{M81vpLUj5cB8Sl%8XbcqPou}%hXIuG!Q)l<Iv<Vr
z1#P}k&ajneYk7#7k7K<6-$H!(GY#iU-j-vFp@;2e;WHGU0nWK+P`Bu3Dg7*^p9Q@K
z_F1%5>=nvhq3jjPUIDuoeihUwewE6vQu$RXze?p-2|uoVCEXzYbCv&G<v&;X&sF|&
zmH%A$XCiJc-70ZaDy~Y!RjIft6<4L=s#IJR;>IApigro-d=)=m#m`sq^HuzO6+d6a
z&sXvD5${8u`7|JTs#Tt9m8V+esaAQaRi0{<r&{HyR(YzCCky$iX|Lp~QTb|Az8aOU
zM&+wf`D#?Y8kMg`<*QNoYLJf;*3f=`F-`K6&|*&+MYv0eYL~}4dLqVRy1<BDY=n|$
z^dy3vMny*?LM`X?gjXBU4kI3Hj~JE%wX{UT$#5_dzFgET62`D4x+zAh;zq)VZ!zkV
zc-gSMCuzr3v_z9eJQ_q^iLf0Sf(c`!PVr^2P%vUUD&@-VWH^RABlWGZo_NSea6Qcu
zmK({<u@2@-f}vzA-s>oq8(r;2ywymeN=j?SwDoqI`(dSEKiM%;(HM&+lJOo+=hB)f
zOvS2LEMhi{g*MKi78}oX;dw4x<-%vW@O&3u;KJ1|ywHW`RJsXDZVQJlG3&D=yw&J%
z=(1qaNM%joM0YG9&W*ungR!C~;%en{jbuYS7>*_?>iG|og4_!US`ka8y0s*Yu2Gev
zq%>bhT@s6T1(RkQI-R;U80j%q#baB-7=VttCAuYci4k8F#GgnR=)D!#I93!K-qeez
zZX=%TZQLA;b{ZWV5(=Wn96xkpGLAvv?1^KOL5IQ3`?uP-v?m-lIvgwZ0y|&d-5u#|
zzO)BNL9%xx3QJATLz+iYdia_I>eJO735UYTNUxK2xe<&eECZYzi%WT4INGr!66{Qn
zOW78TcN$4ky{e}jnd?`zxWX}BgVE&DV6-FR%DSp2?qbV(5=j)g+DP`qqtftB0@Vcx
zZZiDMmCF!JZeDF{GU7%w<jQ3phHVCR5(CU}Umgs_V-BrPbT8i$s*fAN<-r8{kz1Wx
z+#C#}`Ju~s+F2VmF8h4v&-eNw#eU%;Kfk#85bxb+`!!N0V>1?sxJSL&T4t3;`eOn&
zB0Sng8eFv>X=?51?#4u&;CeU5<L*PlEQ+UsNU%4(8%=X_M;OP`iL58mb7>=M!n(#-
zS9dIGL|uc+EGES`TC~}!twscAF859>O?E|^BSx1yXTm9(%{Ch`-d6`NkKxQPqPrTo
zLrh%=CmC0+krwU=s!!k~$Q?d%R<jN0WwhalA)$h7o8)RU;$7h=j-><+MgGfByXLek
z9KE!yCmJ=Jy}^Xs9PR1i87U?CYNONGx+=&gJl7~(5nFA<;wcmC`e0Xt=WsdT<1tre
z%hG^p2!BVga?|K;=(@(u;Yf!X$7v(8DVPi{2^$gDq>2z*>uOpa1ac0yCUj@dVM?1^
zQ><KUdYE)BCeK(r$tR9PchEg`nO0eyq_!Ooi6)!}FaX>u8}VO-<&rhuJ2eo~QX_&>
z14eh3`^Xp5vS4ql$2HzXxh@_~8q4sF2O}c~j^pro7W>rb)P}oxlN!Gb!AsD2j!mum
z>LZcZWlcT&2O>Bi!W|=qPgf!oi$}uk)Y^;Lx{Fq}^J0;lG(6~Nc~2x64q-lT!V%et
zAxmvin>lJbS8eC1ZI#-dskZagc7fVftL;Ly#o|UKoJ02F6w5-j9yQ2X8&XRL4*l?^
zun{M9LgK^HT=sF#lN?$m7uaNM3ZnKh8Bhh!CWO=K20LNGP1w@XL9D}unOTTv6s)yE
z7hkerLqjmctuDi!YFj$eb!JqW9_dxSExaDuuz~8My(CK%LepX=S)q`*HlmjLL~k^-
z+DKr3FcSec1|yMnRDl|d&M;QTyo93WsH}{DthFvLm$9~x1Hfz=i{V(dmc6pO)_|8K
zFE>Mq!W<(N&divoILC+@@o<P*)Z~QA1uToX<uLHf5_#R3pjvmPwB~RdX+)&Cnn(3<
z6`~gW+(hVX98g%Oa<7}`3tAa%;$#1^sL=u3st_-R$zCLrwLTVLE{zSTvAIOCQ%hoQ
zgVFT0qbSq%Y7`$S$j&UFmStKjH(`2JQZ=<HG%ZDnRSK4=8_Q!E&o<$rP}PvJ1lI+v
zxBx(Rsr^pT)mjm0C2?!GUDF(_NE+cNwX!CBDbyyl7D`KI86?;mITCCWd$gqm+b+D<
zSQ|TQZ{Fn;1$($x;q2h%wQldUf@)o^X-0P>xg1GNR~XQ|8sYUuxHF2eFN^&!x~5}Y
zIJsE{GuqTTc3a^T#2TLudB<}_>@)n52_v$Jtl5B*T9|j6&uu&h@h)2!-7m_tov|D^
z@LXJRV0t#!{1Tq3sZF72sZy+V|6+Nw+3sH<(!Y$-GI0Nj3)iN3tE`4`(wA@-6)P5M
za#75C$tzzWY%zO8Vic@(V$+JOwPMpPW^|g~Nk&$z8U?b?=DZ=rE2yTMv_#6xb*_)b
zqP<<Q9$rn#RkFmVYirX~X<5@eq*l(fZw^j5y_y3gbqy^BjFxn5T1hK#c|fa;U<cu9
z2UqybTf-PX(N3N(c>JyD#)8F=B_~tfPngUFwyS)%hG!|qA+5v|E48$4Xj{FenYT;o
zm$eF5v1ZvaR;*arwn4BtB0B9^yDey9RhuLh)9$+195aA8rq#imNX@7;qm`YTz{)KB
zYu|X|Hg^_iwKhykB^AV#c+x;JYp$>_?afKP@iXkTpJ7ZZ>@$3&-|Qw5z*Un~lijKg
zt7VV0{I#}2n#s0ELH2@P4giPM+AuAFZIJ}L^0%vH6P#>Kby~D#pqRRYNw~FTtx~(>
zj-;eBq3nK#dsUi{8=Rt-#URDZMK~5Xe4i7Ha4#r9xMymv_Hc#IOTZ*AeZ#V<bM>#%
zm{$`CoALcl>2WNYpu}2g6BYuvc}m^RS_&GTE2F%m>YhX0xKlrmx^dtAOzOtn^99t6
zd*2IT!Y%(fb7+&?;7eU**x6*4Lp+Fi!2wtI0)gV{1{}4kTWZwfJ{KolH@`yaTy$~D
zsfFWYo;NE&!L;cwG|B`-sE{)`P*NSqQcZOf2kql5^cjc7Cce;>UF@)~AJLF%+^BVO
zQ#jZejbT0uC2(GE@9FI16O4VhDjjA!zSEOXS6~&ZdoXmm46L%dy2H3x)QY?AVZQ%u
zD%9=ENN}ql*HyI&WH*@F!+Z<VDJ<nNfXZdWW%<rCtm9~-HT=N9X3iy{c}~NMUS_3~
zRsQ1k4IA(j$l8_07*-@pdZM9?bE&a)YVG2M8#XisLz_{Y)m!E;wJs~?o+#;@FBU(~
zDw%Jf;6h05m!Qqbypx38j$&n^*zzE*xa9t-vy&^^6R`-cD;y0!OYsC)(hIjg`umo;
zE1SRn+%*fHzdv*v`3_uu;o7pQ;T>?$^h{mP9Pi02EY~yhJefr$*?~+=AD>rLGQO}J
z4!Sp>X*$4o1`t$Oo&f}7IpK$epf86?&-C%LHuCZlJ+ID!ALwKRbZvZTCd&!q{Q+-L
z8MZ|e#&d?EGDy&@fTyU;(vD{>yrE@h_Vs2?C~9I+i|W<o2E1BPNl_hi(4aa+)sn2*
z7od`&Nm@|>ysA;BqH4T2ZELEaEf|B$MOETa$q5U5tf&Nlbr$NO70m+4<AlY;-o;d`
zv7WcZdN#^7QL!gCkYVFuZ$28$vJ`uZGYSJ^Qh0G@alkiHGo~bvm8L89jSKik(H3Ww
z1+qug7yG$q^3X+j=nhm~*Yb2}lM-&85^jr<OzyJ2L349B3qD|leTOs9pM8TO4|_8K
zSsczlmqN?(u$P}rdbxAG{B#k;__#bD%JNCN{-qq=zZ8*xh+zm%)7U1)Ha512v5iLq
zhL_Y+n!0ehPg75mx!Q$`@aqx7c=Cu>1@v58RmU!q8#&!LAYkbm-GX;YiVBKqvocGH
z>h+@9q5}NUtl9fTO}VDB$>cuEV_bo*vudI^PQ+lT*C*0MEz>UvN(wa7ETf3ca3!xF
z<>W{TmG6{M)0l}lRTIXUMu#_`NeEz2{z?^Kn1AHt#CxQ{1@B*&L3O-kUk2&z!oHtg
z%`N~r+*j<&+fjVmHM&Sm_4a%*D`4GGn-y4#GcHc2i})v8@NZV25oc{&q%DdXJvb{y
zW(CaWI_DX^ZMbn0UDUo{LGaAbne*o?oL6O3RxgxVc<Z<psE+wu7vQJz$DX_o*sD?M
z1xr76c@ztRIY!bo@s{)USsES?q8a8bUY4bqxK0gx8MEeyhic`gFIpVf9E>DSpMFsQ
zPY#p3g6CZ0rO5zfE7>I%G=l<AH=fu=soM$LS$Y8Z(qlNkR32kZ%qOjj2fJ}i(Y!Te
z$Xcvzb3Argf=lE=)o&^Cq&gnD{}sdceEh^<Yg6l;?O*%ZJ#SYwe{1KfZw4Rua)jSs
z=%~4npLkq|1=xkFapMy!jtf&xqp7T-yQ7_p`A_w!ywus96^sK8cO&cf5*-~b)Z$H%
z$nsz~N^(pX=GzDC@#$&EBS)>{{~sCgZ%z>2m!rPaTAG8oauhxLEyZ_zAJK(8;MC_r
zo&RclE#4p60NIQ;xmxia(n`GDwE^1|cn1u>H-pbJ-jDvqLw@AvY^C7i%avBNO^_P0
z1}Tm_VZ70W`#}`N8+sV%_)L|fvJKWCv<cXQ_;sT&tWmKOJ>q>DMQW&15?*2GJ4ea1
zOMEKvevkQ&-`7VQ;5{P#H6^R$CX|kA7Rl3{QceKAl{j!6-?i|K!`rD#CEhl2zC=xU
zdy(IYiy{;IMp5?&+AE0P%Q2Ae0>~)dYBNw`5^tdOAX^Z%H;|_To)P$9nS~t7pzD<A
zM(lYv^-2vp@we|u_yq7>CS|QudTs?S%i1qyU%X8IbqEc=%MwRf9jF!8ZsguN`^o#v
r?+I~CJ@z1hx^|&;BdBHIbK?;DU!VV5EzoWLW-K0N{MYCI!xs2gEabJ_

literal 0
HcmV?d00001

diff --git a/Assets/Source/Usage/Zenject-usage.dll.meta b/Assets/Source/Usage/Zenject-usage.dll.meta
new file mode 100644
index 0000000..d696939
--- /dev/null
+++ b/Assets/Source/Usage/Zenject-usage.dll.meta
@@ -0,0 +1,32 @@
+fileFormatVersion: 2
+guid: 700aed094b237904eb96e963264dd6ff
+timeCreated: 1527419737
+licenseType: Free
+PluginImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  iconMap: {}
+  executionOrder: {}
+  isPreloaded: 0
+  isOverridable: 0
+  platformData:
+  - first:
+      Any: 
+    second:
+      enabled: 1
+      settings: {}
+  - first:
+      Editor: Editor
+    second:
+      enabled: 0
+      settings:
+        DefaultValueInitialized: true
+  - first:
+      Windows Store Apps: WindowsStoreApps
+    second:
+      enabled: 0
+      settings:
+        CPU: AnyCPU
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Usage/link.xml b/Assets/Source/Usage/link.xml
new file mode 100644
index 0000000..39175d1
--- /dev/null
+++ b/Assets/Source/Usage/link.xml
@@ -0,0 +1,3 @@
+<linker>
+    <assembly fullname="Zenject-usage" preserve="all"/>
+</linker>
diff --git a/Assets/Source/Usage/link.xml.meta b/Assets/Source/Usage/link.xml.meta
new file mode 100644
index 0000000..166058b
--- /dev/null
+++ b/Assets/Source/Usage/link.xml.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 78cde942f7000eb41900aa4d3c9249d7
+TextScriptImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/Zenject.csproj.meta b/Assets/Source/Zenject.csproj.meta
new file mode 100644
index 0000000..7e1c87a
--- /dev/null
+++ b/Assets/Source/Zenject.csproj.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 8645273165cb7f54290d6eaa1e10ab37
+timeCreated: 1461878212
+licenseType: Pro
+DefaultImporter:
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Source/package.json b/Assets/Source/package.json
new file mode 100644
index 0000000..9a27a3a
--- /dev/null
+++ b/Assets/Source/package.json
@@ -0,0 +1,12 @@
+{
+  "name": "com.svermeulen.extenject",
+  "version": "9.2.0",
+  "displayName": "Extenject",
+  "description": "Dependency Injection Framework for Unity3D",
+  "unity": "2019.3",
+  "keywords": [
+    "extenject"
+  ],
+  "license": "MIT",
+  "dependencies": {}
+}
\ No newline at end of file
diff --git a/Assets/Source/package.json.meta b/Assets/Source/package.json.meta
new file mode 100644
index 0000000..03bbd3c
--- /dev/null
+++ b/Assets/Source/package.json.meta
@@ -0,0 +1,7 @@
+fileFormatVersion: 2
+guid: 0efa85f616858344db13d805aaac1a7f
+TextScriptImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Terrain.meta b/Assets/Terrain.meta
new file mode 100644
index 0000000..541833b
--- /dev/null
+++ b/Assets/Terrain.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: bf8dd55408af2bd4a99f4ace3881f41b
+folderAsset: yes
+DefaultImporter:
+  externalObjects: {}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Terrain/New Terrain.asset b/Assets/Terrain/New Terrain.asset
new file mode 100644
index 0000000000000000000000000000000000000000..69e21b2e28dd10998ef70542584d2e6aef5ebce7
GIT binary patch
literal 557084
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%0A0f977PLm7yUaLh(38l
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
QEn2LxeTx>;|BvtfA34I_YXATM

literal 0
HcmV?d00001

diff --git a/Assets/Terrain/New Terrain.asset.meta b/Assets/Terrain/New Terrain.asset.meta
new file mode 100644
index 0000000..b5179b7
--- /dev/null
+++ b/Assets/Terrain/New Terrain.asset.meta	
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: 99387d82817c44d46998ab2f59237d16
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 15600000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset b/Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset
new file mode 100644
index 0000000000000000000000000000000000000000..d216991b7448a2cc584eb2f75182cbe08c850bbe
GIT binary patch
literal 557120
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%0DqT%di*)6
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%0AyXdEe$MC&+HLSY&->
z^MS2B-#)kb;q7aik8Ypc{LuE5&4;(-e|7W6N<KD$UXcAg(_bpGe|7o=v!kQkr#Js~
zi|kKLkMCZX-m!afdczL8czN@Gw&>!soBy_b+nvXD*7p|KU)lW17TL|#chvjn=09(-
z71~7?pPPR37F}4|TXeznpV|0u-iytf%*c)We2_iMkL)H-k^PCymrjuV`RVON#<y&K
z@7C%Rdw72HV<r5^=0~>5f5+zgiayW}V?-Co{^{wbx5)mU&A;0s`!_fLZ~KAi%{$Zg
z_6P3#n%%RTU$U}q*zx?!oBvzNA^V3m|7nZt)cwvoZ`?h;`RAn^m_!$5E2SUf%oB8B
z(x1s6^KQDqwu`N=$#0x>jO@laCocQvPm1i*TZ)Wdo!+%I{BFN7oowH``N8e0(`}pI
z?<?W$%@1r}n|4J%ltFfE1KHsYWHUS5B0KYI+`L1+H{W@~?yZ}DX*Tnk&EY>OGAn$`
z<`;|JcAI~@{ru*CZNE7E-R;k9{)g3nc8f0HD0E?UPte8P$dBxNklpOV=Kb?0FHE01
zdB$Y7IkS0u*Vb&d$oS&)PLt*7Eg>?ad+hHE({J6P2ja*MCXpSkK=v<9f3L{?{>^_h
z9DTEJB=e1ppbO+f7hjnEj_Lasw_ln5!PeHH?XOJ#cuSp+On=?<{_nT%+q}P&h4;_}
zSS`9ZpZ_Db|H6Iy&A-e33fMTYc`dR(H+|*=*$Wq%?C2O7&5n%Uen$zFwzX;diRo=c
zFC}iWV<X7U`he`uPoFJvJh}N7+fQ!(%l7NjKPq-?dM>*7`1CioUz`4+wfjPmowWqn
zKR^Ba_OZ=BE4GepJh6FC(FNl|7td|Jc7iT^{!Mn)fHU6P*Zxh<HutX_BfE{??CCRQ
zEu;^_VzDoDjEsg|v+Li;+Edbm!U=le8M4C*$c`-_`!mz0x5$o+%%iQ_W-tH7^!k~i
zi}z2T+J1KW8RNoFZIPWd6<a_b=nqVh#unihaE~tFX~x;ful0Tf|Ezz=ZaO<gcAMWK
z`%}{=PmtaGkz!wlS(Cx>fGuDfN<TY&=l1sW9R(viLw5L~$ZlMT?6;@CP-KU*!7p-s
zYx<|fUqBb{oc>(#F9?x+H~qy@hBX!avG!00yrB#1-Z|;ZC+MP*zsPPp2>+d}e=Yy9
z4j_B^nC!@p>?V`h{U=Xs9WSz%b<kwDwu+4As}}AdL}o%;-^)6T?AQsigALXR^HqxM
zj2YQk8^QJmroU4B1oJtHT#rq6iY{J1{mCLb{uZ`?&w>6vz4>5CgFjz~zgBo3u0|I_
z`Ok1rWG}jSx~v67_C|j5KaY{!WGS-a3%C#PGQMHqS!6}m*a9KGhr-u3-!i*-(#HFy
zB74D#$<7*q?BCe@@glqI+;m*lhi`8FM9~Gdf-dl{ke%|_0{VbQ@H5aw!Jp}Zv7w9C
zrZ1kr0Za1F@c?swYJLE+^Fel#&Fsnjpj(@lPiUVt#yGOrS<$uWgAkb&zPS0Hg@?c*
zvV#d^XN^FX&u#ulnLp&l2H*y;kH177wqoNcp~_<u=mVdUw$Mevo#}$Hp$i*#nWu}$
zkL;4)uyu^=rYn=l{h%VdwU6xR8yV4cS#vGSY08K%ksVARJDiB@_(jNx+}Hp<BYOqw
zzvO`vbU~={$j&-S+0s_g#p}=X`o*$7u}-6lL*)k(k{{XmAUhxVLFktDg#%=NYV+m7
z3xvq5kTT*+WCtV2j^BXn_y)+1Ea-u?n|%Xo1$oRbvf^{AJT}1^M_Jn9Ie0@C_$c7f
z#$9Z5U-`j8k^M}5xB%IGFLcD*+IrxA5VErt3J11Mn1A$A(Fb8pQwA*9-WCj*EgMEm
z_K!^8Rb;n4U6B)6&;$Di?3uNKJp3kPMK*Lrd29iFP`0eO_8gmYy?*WlT^Ki>po>-c
z7yKcY{qz{wZBA`1c=`liKz@L50N1`ceWB>1=s%??gY4J?vV#$1hZBqJ_>d+ivJ@LI
zKN<VRpC%8P&;_B&i$CzGSzFvTzIK8xn0Itxwp46%R({sP6@N(UAhOF3vbj6=1Hgf;
z!9{k?8<3R{T_{bNBD>iIvV#q+2dvZh%gBi==)rVcxQ=zQ<e9CY3uIGyYyp3gvb04S
zn?o0zRe(p<X>>7^Uw*(qesJKnf6H)xTDSn&@dJ?EFj91D&x-8W0<zK<vKIZPH2MJ(
z*hP`u_<*$#PDFOrD&#~K^uXQ{`^I-951EjaQ01`&^g&tLa$OkyOc%^Mx+v?k>7tka
z$owCh`*!{ZI5<692aw%lJ4SYV0c1B$Hhq7_{DS9;%;+6i+fX<ZUxF2_2guG^g`CKu
z`7YSDwSqkSCUill^2p9wg3m`=u8YqXy)riRZMNj|gaXdbe~^73|BM|VKephqzi^D~
ztcA#K&x-7v4Iv|XM<0Yajef+J;t8z>$j-WroNyvs2R9UZwzYyhI1^b3RUTVlEuk!!
z;yHbw3&w`6u~rpbtjWJ%2guIHY`T1q-Sp?O+ghM=F=VDMWF^dLa40(wFR*uDU2OM}
z*fsNvJ>x?npY>N{#iyb?Ya3<I2lfu8&;@-szdTd)ZR0NUg!r@b-{PRL1DE|)k=@sV
zBl<YjIw*e-8PWSFqzroD89c!_kzF`o%$iT^7`d=_)-dFR%h3fPvST}xK_6frtdph>
zbYa*jeV7i*Jk87B;9y_}hBuS_*0IZeTCIb$55}-FWG6({HhpS1kzQm6$c~NreEIw#
zBX*2jhBI3OzFy>F?JVoLg~*PK@~^QCuuhsj3h&waTy$Yvg)YwJCo;za*$$E(klpIo
z=k(a*u+OW<&V{C1xDbq)o!PU}*IbBRcqThQcDNE*SR0WY+1NKCH+GIJ$c6t@bYY>&
z<4<8j*aT}1Y388to~=<u7q(}?S2@Z*L-~^(w0bDA9~Ifbg3IpffMKr4jvb(9LU7Th
z8H4m9JJ33T>~I3Ivu49z$j!XsOCUG8B9D;r<Rd$>Qit`Hbg?_r1>-8ZV83Fz$l~|&
zkL;3P;i={6V{>0P0oh|6D6(7o$jX{fWHfu23#A{%g^pMw(FL-ji{h^sCYVq1m{0f|
zxseZ<6_O8rn0IWW*p#J<9pdkt?^9ke+}a%FA7tgHvjb%3gWL)&E<P-4z^!A}0kA+H
zU_t94STGJM`X*Fbq4b38=m^<Q4G+l9T7f)pBl40*h>p+&&yiUn`N%H6!p2k5%yq&2
znV-&@%{Ys^?XOw+kzMjzi2SA#lY_SGb6W90k=6QBh`!NFn?_HJ1=)!sJM)E1*hG=t
z_#1gyQ?Ye816}aE$b1$Sjx~P+9m1!y<-BTh?YcNV(}nX@D?4dqY{Q{WPK*3ScGJZv
z9EdK=A2eN;_R%wIVh+(kP9r;Yke#x~?(ye}9+)@Q6665K%q^Hf7nDV2h2$eU<%<7d
zIwhoC8{Y}z@_BfsjG@T6_G?xj$Zxu8?7(F|YacwAY}kfEx4lT4J=>U`Ki3nolZQ;$
z3bHe2Wu1UWOkQL_Mnc!cV<n_6`Ctoq-PWD~1IO5xwORUM&ggSZ^x^ZYk75^RdT<OB
zJ192cT;Q^w;bW9v^ksHa^kU;fb{qRKW9J#N7ke>2RS4G<8Os@j;mSf}S3c#aN4kV(
z?a_bf2QIU|hVt#3ne{*&+AQIbw~NdvU9geTMHiMn&p#W_sg0Flnx8UWGO(i*Djyli
zR;c{8yq=$)wXgoGaZ4{{zK#lR@H1I+xR)}%*;+g1Z+^)9v7ahu5!~BzHp#uLwOQ`z
zxu5=^-P3dDYUdI=?q<1<=Pa8LpT_+29pkof-ewF%57uuP-<h3)Tly|*n)S_D2lvQ?
zI{%_?&Wh=qJ42iA9rvS*hctb2SH^v?^;7PH@fpiKu=<C;%m&NH^urjOGhRKWZ`PP{
z=45*=&feHta^A!_1buVHMqk{ynBDHUpW~jAyBGTA?4J8b&Z_)A@*D86-@hRLpnrH0
zEYLR`Z*rBr4f`PWHnwhV&E`wrjE%mH8_PYJab>wD<II%1Bj$?xFwRK055p&7EQp`=
zFZscSbI?o2^bMzC2d3jK`w{jU_~XnYeWM5ZMi<=E80VII8qVtU{)eqsW;?fv{h(9E
zQu@c{()<@(f(5g8Y?;2{K>9YFz-h%E=^LMjz8MRBa|X<P7<S4%a=CN2v5?Pw0KPN#
z0oJZ@!>y`+Yu~uaKGrvSpl>ik-}ok_Z}X|lE{d;7h#u*iG0_J$fzGiJ&Z&)?%UH<A
zUa>pQ@2p*0-yiS$&vpQ=jYH)Z;m<K{`osqy#P_3b#!~t)opMgfnHah+wqo;)t~o!#
zmt@}YEf`DIf3btJ{#_TR$ESt^`K|QL8l3%2_d#3_^np%IUuBPq?y(idQgm(SIM#>N
z-<cjhQvBNJ|EOTVZPDj}zR%_Y8B5=+<@Cw;35_F*9`KFm1D$eCWb0zlJ-T7POg@+e
zOYEarBN>bLZ+)kA+-(3%x*gCrTtMH&7OYSFF8W3e`bIDG!91XIbPGPQPsYL?2Fy~2
zG(In5sro;|f$JdnkiISNxM1MS-(k(CZ$kP8BlOK42zxZ_p1=**3}YeR<g)QSSN4tg
z4UDDlA6=ZDeZT^Gc&XsP^g){^1q<e1D5P)V^ue64Pb;#4SF>}*LK@qn4eS<fVJzqU
z6DhvLk@~(JdU)aZ)NG-w@5YI~p1*2i!pC{F;Dcvwi#9LTU-6MFq!0QgUG|D5H+F2Y
zV_V*T8N^xt#Lw6DQya_C?NjWqtV^$2cxvOe`A8vs!xi);J4L_6Pc_@2Z^{%u)XEXk
z9%blm_UC*YHV^#ZPYpu)CY!zqv8^1^H)-^iL)9}qA`h}+L&xR4J>zuNdF~Rlj`IE;
zYaHu0HbqE#)aOH8=9Tq;wE_;bzRSAE+F;|e_t!pkwhn&fgmqB$i$1UklZCo)E!+Wq
zs0+8UuD~fa&xRlP`-L<9H2s*J7I{oZ)a5yNfUBqrH_<oPEcYnJAMh~!7dykw(XU~i
zy37%E!3cH1HoRssY^}@|{(#5M>!Ux`ESuLdzh+z11)t7IUoN}=9-Rlk-xFu!x4Lfo
zJ`Yw`c1;Mbuq~b6f+Oq~9F_jh?Zn!#AL<YmJ1wE(44xprj4y@EJM)G<nJ?y<wl%*z
zLpRI^I$<8p_*dgEa`Oy%(NnQ)_?{ouRQrJ=2$6%Z@PUQ&OMB{%c6d%Zgyg@@{;M$m
V8i4nH@6pkl-*a^I^6%u?{|9bzg(3g|

literal 0
HcmV?d00001

diff --git a/Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset.meta b/Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset.meta
new file mode 100644
index 0000000..6768d70
--- /dev/null
+++ b/Assets/Terrain/TerrainData_e973d155-262a-452c-8456-c35cc13e35e6.asset.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: d17e4e217c0bfd2499bc2814e08ee0a3
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 15600000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset b/Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset
new file mode 100644
index 0000000000000000000000000000000000000000..9bd00dfaac5c42632bb2d6afcfdc96f86ebc4bdd
GIT binary patch
literal 557120
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

literal 0
HcmV?d00001

diff --git a/Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset.meta b/Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset.meta
new file mode 100644
index 0000000..f33d213
--- /dev/null
+++ b/Assets/Terrain/TerrainData_fdf87fba-a870-483e-abd2-3e6d8bdcc5ad.asset.meta
@@ -0,0 +1,8 @@
+fileFormatVersion: 2
+guid: ea51625419019e54dbb29df5bdf4b398
+NativeFormatImporter:
+  externalObjects: {}
+  mainObjectFileID: 15600000
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Packages/manifest.json b/Packages/manifest.json
new file mode 100644
index 0000000..a3beea3
--- /dev/null
+++ b/Packages/manifest.json
@@ -0,0 +1,48 @@
+{
+  "dependencies": {
+    "com.unity.adaptiveperformance": "4.0.1",
+    "com.unity.adaptiveperformance.samsung.android": "4.0.1",
+    "com.unity.collab-proxy": "1.17.2",
+    "com.unity.feature.mobile": "1.0.0",
+    "com.unity.ide.rider": "3.0.16",
+    "com.unity.ide.visualstudio": "2.0.16",
+    "com.unity.ide.vscode": "1.2.5",
+    "com.unity.inputsystem": "1.4.4",
+    "com.unity.test-framework": "1.1.33",
+    "com.unity.textmeshpro": "3.0.6",
+    "com.unity.timeline": "1.6.4",
+    "com.unity.ugui": "1.0.0",
+    "com.unity.visualscripting": "1.7.8",
+    "com.unity.modules.ai": "1.0.0",
+    "com.unity.modules.androidjni": "1.0.0",
+    "com.unity.modules.animation": "1.0.0",
+    "com.unity.modules.assetbundle": "1.0.0",
+    "com.unity.modules.audio": "1.0.0",
+    "com.unity.modules.cloth": "1.0.0",
+    "com.unity.modules.director": "1.0.0",
+    "com.unity.modules.imageconversion": "1.0.0",
+    "com.unity.modules.imgui": "1.0.0",
+    "com.unity.modules.jsonserialize": "1.0.0",
+    "com.unity.modules.particlesystem": "1.0.0",
+    "com.unity.modules.physics": "1.0.0",
+    "com.unity.modules.physics2d": "1.0.0",
+    "com.unity.modules.screencapture": "1.0.0",
+    "com.unity.modules.terrain": "1.0.0",
+    "com.unity.modules.terrainphysics": "1.0.0",
+    "com.unity.modules.tilemap": "1.0.0",
+    "com.unity.modules.ui": "1.0.0",
+    "com.unity.modules.uielements": "1.0.0",
+    "com.unity.modules.umbra": "1.0.0",
+    "com.unity.modules.unityanalytics": "1.0.0",
+    "com.unity.modules.unitywebrequest": "1.0.0",
+    "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
+    "com.unity.modules.unitywebrequestaudio": "1.0.0",
+    "com.unity.modules.unitywebrequesttexture": "1.0.0",
+    "com.unity.modules.unitywebrequestwww": "1.0.0",
+    "com.unity.modules.vehicles": "1.0.0",
+    "com.unity.modules.video": "1.0.0",
+    "com.unity.modules.vr": "1.0.0",
+    "com.unity.modules.wind": "1.0.0",
+    "com.unity.modules.xr": "1.0.0"
+  }
+}
diff --git a/Packages/packages-lock.json b/Packages/packages-lock.json
new file mode 100644
index 0000000..0d1a139
--- /dev/null
+++ b/Packages/packages-lock.json
@@ -0,0 +1,438 @@
+{
+  "dependencies": {
+    "com.unity.adaptiveperformance": {
+      "version": "4.0.1",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.subsystemregistration": "1.1.0",
+        "com.unity.profiling.core": "1.0.2"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.adaptiveperformance.samsung.android": {
+      "version": "4.0.1",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.adaptiveperformance": "4.0.1"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.collab-proxy": {
+      "version": "1.17.2",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.services.core": "1.0.1"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.ext.nunit": {
+      "version": "1.0.6",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {},
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.feature.mobile": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.mobile.android-logcat": "1.3.2",
+        "com.unity.adaptiveperformance": "4.0.1",
+        "com.unity.mobile.notifications": "2.0.2"
+      }
+    },
+    "com.unity.ide.rider": {
+      "version": "3.0.16",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.ext.nunit": "1.0.6"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.ide.visualstudio": {
+      "version": "2.0.16",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.test-framework": "1.1.9"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.ide.vscode": {
+      "version": "1.2.5",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {},
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.inputsystem": {
+      "version": "1.4.4",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.modules.uielements": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.mobile.android-logcat": {
+      "version": "1.3.2",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {},
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.mobile.notifications": {
+      "version": "2.0.2",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.modules.androidjni": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.nuget.newtonsoft-json": {
+      "version": "3.0.2",
+      "depth": 2,
+      "source": "registry",
+      "dependencies": {},
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.profiling.core": {
+      "version": "1.0.2",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {},
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.services.core": {
+      "version": "1.4.3",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.modules.unitywebrequest": "1.0.0",
+        "com.unity.nuget.newtonsoft-json": "3.0.2",
+        "com.unity.modules.androidjni": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.subsystemregistration": {
+      "version": "1.1.0",
+      "depth": 1,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.modules.subsystems": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.test-framework": {
+      "version": "1.1.33",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.ext.nunit": "1.0.6",
+        "com.unity.modules.imgui": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.textmeshpro": {
+      "version": "3.0.6",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.ugui": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.timeline": {
+      "version": "1.6.4",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.modules.director": "1.0.0",
+        "com.unity.modules.animation": "1.0.0",
+        "com.unity.modules.audio": "1.0.0",
+        "com.unity.modules.particlesystem": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.ugui": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.ui": "1.0.0",
+        "com.unity.modules.imgui": "1.0.0"
+      }
+    },
+    "com.unity.visualscripting": {
+      "version": "1.7.8",
+      "depth": 0,
+      "source": "registry",
+      "dependencies": {
+        "com.unity.ugui": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0"
+      },
+      "url": "https://packages.unity.com"
+    },
+    "com.unity.modules.ai": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.androidjni": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.animation": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.assetbundle": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.audio": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.cloth": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.physics": "1.0.0"
+      }
+    },
+    "com.unity.modules.director": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.audio": "1.0.0",
+        "com.unity.modules.animation": "1.0.0"
+      }
+    },
+    "com.unity.modules.imageconversion": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.imgui": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.jsonserialize": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.particlesystem": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.physics": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.physics2d": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.screencapture": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.imageconversion": "1.0.0"
+      }
+    },
+    "com.unity.modules.subsystems": {
+      "version": "1.0.0",
+      "depth": 1,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.jsonserialize": "1.0.0"
+      }
+    },
+    "com.unity.modules.terrain": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.terrainphysics": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.physics": "1.0.0",
+        "com.unity.modules.terrain": "1.0.0"
+      }
+    },
+    "com.unity.modules.tilemap": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.physics2d": "1.0.0"
+      }
+    },
+    "com.unity.modules.ui": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.uielements": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.ui": "1.0.0",
+        "com.unity.modules.imgui": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0",
+        "com.unity.modules.uielementsnative": "1.0.0"
+      }
+    },
+    "com.unity.modules.uielementsnative": {
+      "version": "1.0.0",
+      "depth": 1,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.ui": "1.0.0",
+        "com.unity.modules.imgui": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0"
+      }
+    },
+    "com.unity.modules.umbra": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.unityanalytics": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.unitywebrequest": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0"
+      }
+    },
+    "com.unity.modules.unitywebrequest": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.unitywebrequestassetbundle": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.assetbundle": "1.0.0",
+        "com.unity.modules.unitywebrequest": "1.0.0"
+      }
+    },
+    "com.unity.modules.unitywebrequestaudio": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.unitywebrequest": "1.0.0",
+        "com.unity.modules.audio": "1.0.0"
+      }
+    },
+    "com.unity.modules.unitywebrequesttexture": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.unitywebrequest": "1.0.0",
+        "com.unity.modules.imageconversion": "1.0.0"
+      }
+    },
+    "com.unity.modules.unitywebrequestwww": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.unitywebrequest": "1.0.0",
+        "com.unity.modules.unitywebrequestassetbundle": "1.0.0",
+        "com.unity.modules.unitywebrequestaudio": "1.0.0",
+        "com.unity.modules.audio": "1.0.0",
+        "com.unity.modules.assetbundle": "1.0.0",
+        "com.unity.modules.imageconversion": "1.0.0"
+      }
+    },
+    "com.unity.modules.vehicles": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.physics": "1.0.0"
+      }
+    },
+    "com.unity.modules.video": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.audio": "1.0.0",
+        "com.unity.modules.ui": "1.0.0",
+        "com.unity.modules.unitywebrequest": "1.0.0"
+      }
+    },
+    "com.unity.modules.vr": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.jsonserialize": "1.0.0",
+        "com.unity.modules.physics": "1.0.0",
+        "com.unity.modules.xr": "1.0.0"
+      }
+    },
+    "com.unity.modules.wind": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {}
+    },
+    "com.unity.modules.xr": {
+      "version": "1.0.0",
+      "depth": 0,
+      "source": "builtin",
+      "dependencies": {
+        "com.unity.modules.physics": "1.0.0",
+        "com.unity.modules.jsonserialize": "1.0.0",
+        "com.unity.modules.subsystems": "1.0.0"
+      }
+    }
+  }
+}
diff --git a/ProjectSettings/AudioManager.asset b/ProjectSettings/AudioManager.asset
new file mode 100644
index 0000000..07ebfb0
--- /dev/null
+++ b/ProjectSettings/AudioManager.asset
@@ -0,0 +1,19 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!11 &1
+AudioManager:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_Volume: 1
+  Rolloff Scale: 1
+  Doppler Factor: 1
+  Default Speaker Mode: 2
+  m_SampleRate: 0
+  m_DSPBufferSize: 1024
+  m_VirtualVoiceCount: 512
+  m_RealVoiceCount: 32
+  m_SpatializerPlugin: 
+  m_AmbisonicDecoderPlugin: 
+  m_DisableAudio: 0
+  m_VirtualizeEffects: 1
+  m_RequestedDSPBufferSize: 1024
diff --git a/ProjectSettings/ClusterInputManager.asset b/ProjectSettings/ClusterInputManager.asset
new file mode 100644
index 0000000..e7886b2
--- /dev/null
+++ b/ProjectSettings/ClusterInputManager.asset
@@ -0,0 +1,6 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!236 &1
+ClusterInputManager:
+  m_ObjectHideFlags: 0
+  m_Inputs: []
diff --git a/ProjectSettings/DynamicsManager.asset b/ProjectSettings/DynamicsManager.asset
new file mode 100644
index 0000000..cdc1f3e
--- /dev/null
+++ b/ProjectSettings/DynamicsManager.asset
@@ -0,0 +1,34 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!55 &1
+PhysicsManager:
+  m_ObjectHideFlags: 0
+  serializedVersion: 11
+  m_Gravity: {x: 0, y: -9.81, z: 0}
+  m_DefaultMaterial: {fileID: 0}
+  m_BounceThreshold: 2
+  m_SleepThreshold: 0.005
+  m_DefaultContactOffset: 0.01
+  m_DefaultSolverIterations: 6
+  m_DefaultSolverVelocityIterations: 1
+  m_QueriesHitBackfaces: 0
+  m_QueriesHitTriggers: 1
+  m_EnableAdaptiveForce: 0
+  m_ClothInterCollisionDistance: 0
+  m_ClothInterCollisionStiffness: 0
+  m_ContactsGeneration: 1
+  m_LayerCollisionMatrix: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
+  m_AutoSimulation: 1
+  m_AutoSyncTransforms: 0
+  m_ReuseCollisionCallbacks: 1
+  m_ClothInterCollisionSettingsToggle: 0
+  m_ContactPairsMode: 0
+  m_BroadphaseType: 0
+  m_WorldBounds:
+    m_Center: {x: 0, y: 0, z: 0}
+    m_Extent: {x: 250, y: 250, z: 250}
+  m_WorldSubdivisions: 8
+  m_FrictionType: 0
+  m_EnableEnhancedDeterminism: 0
+  m_EnableUnifiedHeightmaps: 1
+  m_DefaultMaxAngluarSpeed: 7
diff --git a/ProjectSettings/EditorBuildSettings.asset b/ProjectSettings/EditorBuildSettings.asset
new file mode 100644
index 0000000..05ae64b
--- /dev/null
+++ b/ProjectSettings/EditorBuildSettings.asset
@@ -0,0 +1,16 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!1045 &1
+EditorBuildSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_Scenes: []
+  m_configObjects:
+    com.unity.adaptiveperformance.loader_settings: {fileID: 11400000, guid: 7ac6cc7195ebc0f4590396245b365d85,
+      type: 2}
+    com.unity.adaptiveperformance.samsung.android.provider_settings: {fileID: 11400000,
+      guid: 5a8561c7c459516459dc073c8eb7c35a, type: 2}
+    com.unity.adaptiveperformance.simulator.provider_settings: {fileID: 11400000,
+      guid: 6b19b9d1a6890394fbe243c39f41bc4e, type: 2}
+    com.unity.input.settings: {fileID: 11400000, guid: fcbe6bde26ad51146a2e3e8be5487c19,
+      type: 2}
diff --git a/ProjectSettings/EditorSettings.asset b/ProjectSettings/EditorSettings.asset
new file mode 100644
index 0000000..f920544
--- /dev/null
+++ b/ProjectSettings/EditorSettings.asset
@@ -0,0 +1,35 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!159 &1
+EditorSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 9
+  m_ExternalVersionControlSupport: Visible Meta Files
+  m_SerializationMode: 2
+  m_LineEndingsForNewScripts: 0
+  m_DefaultBehaviorMode: 0
+  m_PrefabRegularEnvironment: {fileID: 0}
+  m_PrefabUIEnvironment: {fileID: 0}
+  m_SpritePackerMode: 0
+  m_SpritePackerPaddingPower: 1
+  m_EtcTextureCompressorBehavior: 1
+  m_EtcTextureFastCompressor: 1
+  m_EtcTextureNormalCompressor: 2
+  m_EtcTextureBestCompressor: 4
+  m_ProjectGenerationIncludedExtensions: txt;xml;fnt;cd;asmdef;rsp;asmref
+  m_ProjectGenerationRootNamespace: 
+  m_CollabEditorSettings:
+    inProgressEnabled: 1
+  m_EnableTextureStreamingInEditMode: 1
+  m_EnableTextureStreamingInPlayMode: 1
+  m_AsyncShaderCompilation: 1
+  m_EnterPlayModeOptionsEnabled: 0
+  m_EnterPlayModeOptions: 3
+  m_ShowLightmapResolutionOverlay: 1
+  m_UseLegacyProbeSampleCount: 0
+  m_AssetPipelineMode: 1
+  m_CacheServerMode: 0
+  m_CacheServerEndpoint: 
+  m_CacheServerNamespacePrefix: default
+  m_CacheServerEnableDownload: 1
+  m_CacheServerEnableUpload: 1
diff --git a/ProjectSettings/GraphicsSettings.asset b/ProjectSettings/GraphicsSettings.asset
new file mode 100644
index 0000000..19a73f0
--- /dev/null
+++ b/ProjectSettings/GraphicsSettings.asset
@@ -0,0 +1,165 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!30 &1
+GraphicsSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 13
+  m_Deferred:
+    m_Mode: 1
+    m_Shader: {fileID: 69, guid: 0000000000000000f000000000000000, type: 0}
+  m_DeferredReflections:
+    m_Mode: 1
+    m_Shader: {fileID: 74, guid: 0000000000000000f000000000000000, type: 0}
+  m_ScreenSpaceShadows:
+    m_Mode: 1
+    m_Shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
+  m_LegacyDeferred:
+    m_Mode: 1
+    m_Shader: {fileID: 63, guid: 0000000000000000f000000000000000, type: 0}
+  m_DepthNormals:
+    m_Mode: 1
+    m_Shader: {fileID: 62, guid: 0000000000000000f000000000000000, type: 0}
+  m_MotionVectors:
+    m_Mode: 1
+    m_Shader: {fileID: 75, guid: 0000000000000000f000000000000000, type: 0}
+  m_LightHalo:
+    m_Mode: 1
+    m_Shader: {fileID: 105, guid: 0000000000000000f000000000000000, type: 0}
+  m_LensFlare:
+    m_Mode: 1
+    m_Shader: {fileID: 102, guid: 0000000000000000f000000000000000, type: 0}
+  m_AlwaysIncludedShaders:
+  - {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
+  - {fileID: 15104, guid: 0000000000000000f000000000000000, type: 0}
+  - {fileID: 15105, guid: 0000000000000000f000000000000000, type: 0}
+  - {fileID: 15106, guid: 0000000000000000f000000000000000, type: 0}
+  - {fileID: 10753, guid: 0000000000000000f000000000000000, type: 0}
+  - {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
+  m_PreloadedShaders: []
+  m_SpritesDefaultMaterial: {fileID: 10754, guid: 0000000000000000f000000000000000,
+    type: 0}
+  m_CustomRenderPipeline: {fileID: 0}
+  m_TransparencySortMode: 0
+  m_TransparencySortAxis: {x: 0, y: 0, z: 1}
+  m_DefaultRenderingPath: 1
+  m_DefaultMobileRenderingPath: 1
+  m_TierSettings:
+  - serializedVersion: 5
+    m_BuildTarget: 4
+    m_Tier: 0
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  - serializedVersion: 5
+    m_BuildTarget: 4
+    m_Tier: 1
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  - serializedVersion: 5
+    m_BuildTarget: 4
+    m_Tier: 2
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  - serializedVersion: 5
+    m_BuildTarget: 7
+    m_Tier: 0
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  - serializedVersion: 5
+    m_BuildTarget: 7
+    m_Tier: 1
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  - serializedVersion: 5
+    m_BuildTarget: 7
+    m_Tier: 2
+    m_Settings:
+      standardShaderQuality: 1
+      renderingPath: 1
+      hdrMode: 2
+      realtimeGICPUUsage: 25
+      useReflectionProbeBoxProjection: 0
+      useReflectionProbeBlending: 0
+      useHDR: 0
+      useDetailNormalMap: 0
+      useCascadedShadowMaps: 0
+      prefer32BitShadowMaps: 0
+      enableLPPV: 0
+      useDitherMaskForAlphaBlendedShadows: 0
+    m_Automatic: 0
+  m_LightmapStripping: 0
+  m_FogStripping: 0
+  m_InstancingStripping: 0
+  m_LightmapKeepPlain: 1
+  m_LightmapKeepDirCombined: 1
+  m_LightmapKeepDynamicPlain: 1
+  m_LightmapKeepDynamicDirCombined: 1
+  m_LightmapKeepShadowMask: 1
+  m_LightmapKeepSubtractive: 1
+  m_FogKeepLinear: 1
+  m_FogKeepExp: 1
+  m_FogKeepExp2: 1
+  m_AlbedoSwatchInfos: []
+  m_LightsUseLinearIntensity: 0
+  m_LightsUseColorTemperature: 0
+  m_LogWhenShaderIsCompiled: 0
+  m_AllowEnlightenSupportForUpgradedProject: 0
diff --git a/ProjectSettings/InputManager.asset b/ProjectSettings/InputManager.asset
new file mode 100644
index 0000000..b00cb79
--- /dev/null
+++ b/ProjectSettings/InputManager.asset
@@ -0,0 +1,296 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!13 &1
+InputManager:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_Axes:
+  - serializedVersion: 3
+    m_Name: Horizontal
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: left
+    positiveButton: right
+    altNegativeButton: a
+    altPositiveButton: d
+    gravity: 3
+    dead: 0.001
+    sensitivity: 3
+    snap: 1
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Vertical
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: down
+    positiveButton: up
+    altNegativeButton: s
+    altPositiveButton: w
+    gravity: 3
+    dead: 0.001
+    sensitivity: 3
+    snap: 1
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire1
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: left ctrl
+    altNegativeButton: 
+    altPositiveButton: mouse 0
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire2
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: left alt
+    altNegativeButton: 
+    altPositiveButton: mouse 1
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire3
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: left shift
+    altNegativeButton: 
+    altPositiveButton: mouse 2
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Jump
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: space
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Mouse X
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: 
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 0
+    dead: 0
+    sensitivity: 0.1
+    snap: 0
+    invert: 0
+    type: 1
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Mouse Y
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: 
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 0
+    dead: 0
+    sensitivity: 0.1
+    snap: 0
+    invert: 0
+    type: 1
+    axis: 1
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Mouse ScrollWheel
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: 
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 0
+    dead: 0
+    sensitivity: 0.1
+    snap: 0
+    invert: 0
+    type: 1
+    axis: 2
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Horizontal
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: 
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 0
+    dead: 0.19
+    sensitivity: 1
+    snap: 0
+    invert: 0
+    type: 2
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Vertical
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: 
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 0
+    dead: 0.19
+    sensitivity: 1
+    snap: 0
+    invert: 1
+    type: 2
+    axis: 1
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire1
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: joystick button 0
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire2
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: joystick button 1
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Fire3
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: joystick button 2
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Jump
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: joystick button 3
+    altNegativeButton: 
+    altPositiveButton: 
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Submit
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: return
+    altNegativeButton: 
+    altPositiveButton: joystick button 0
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Submit
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: enter
+    altNegativeButton: 
+    altPositiveButton: space
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  - serializedVersion: 3
+    m_Name: Cancel
+    descriptiveName: 
+    descriptiveNegativeName: 
+    negativeButton: 
+    positiveButton: escape
+    altNegativeButton: 
+    altPositiveButton: joystick button 1
+    gravity: 1000
+    dead: 0.001
+    sensitivity: 1000
+    snap: 0
+    invert: 0
+    type: 0
+    axis: 0
+    joyNum: 0
+  m_UsePhysicalKeys: 0
diff --git a/ProjectSettings/MemorySettings.asset b/ProjectSettings/MemorySettings.asset
new file mode 100644
index 0000000..5b5face
--- /dev/null
+++ b/ProjectSettings/MemorySettings.asset
@@ -0,0 +1,35 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!387306366 &1
+MemorySettings:
+  m_ObjectHideFlags: 0
+  m_EditorMemorySettings:
+    m_MainAllocatorBlockSize: -1
+    m_ThreadAllocatorBlockSize: -1
+    m_MainGfxBlockSize: -1
+    m_ThreadGfxBlockSize: -1
+    m_CacheBlockSize: -1
+    m_TypetreeBlockSize: -1
+    m_ProfilerBlockSize: -1
+    m_ProfilerEditorBlockSize: -1
+    m_BucketAllocatorGranularity: -1
+    m_BucketAllocatorBucketsCount: -1
+    m_BucketAllocatorBlockSize: -1
+    m_BucketAllocatorBlockCount: -1
+    m_ProfilerBucketAllocatorGranularity: -1
+    m_ProfilerBucketAllocatorBucketsCount: -1
+    m_ProfilerBucketAllocatorBlockSize: -1
+    m_ProfilerBucketAllocatorBlockCount: -1
+    m_TempAllocatorSizeMain: -1
+    m_JobTempAllocatorBlockSize: -1
+    m_BackgroundJobTempAllocatorBlockSize: -1
+    m_JobTempAllocatorReducedBlockSize: -1
+    m_TempAllocatorSizeGIBakingWorker: -1
+    m_TempAllocatorSizeNavMeshWorker: -1
+    m_TempAllocatorSizeAudioWorker: -1
+    m_TempAllocatorSizeCloudWorker: -1
+    m_TempAllocatorSizeGfx: -1
+    m_TempAllocatorSizeJobWorker: -1
+    m_TempAllocatorSizeBackgroundWorker: -1
+    m_TempAllocatorSizePreloadManager: -1
+  m_PlatformMemorySettings: {}
diff --git a/ProjectSettings/NavMeshAreas.asset b/ProjectSettings/NavMeshAreas.asset
new file mode 100644
index 0000000..3b0b7c3
--- /dev/null
+++ b/ProjectSettings/NavMeshAreas.asset
@@ -0,0 +1,91 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!126 &1
+NavMeshProjectSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  areas:
+  - name: Walkable
+    cost: 1
+  - name: Not Walkable
+    cost: 1
+  - name: Jump
+    cost: 2
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  - name: 
+    cost: 1
+  m_LastAgentTypeID: -887442657
+  m_Settings:
+  - serializedVersion: 2
+    agentTypeID: 0
+    agentRadius: 0.5
+    agentHeight: 2
+    agentSlope: 45
+    agentClimb: 0.75
+    ledgeDropHeight: 0
+    maxJumpAcrossDistance: 0
+    minRegionArea: 2
+    manualCellSize: 0
+    cellSize: 0.16666667
+    manualTileSize: 0
+    tileSize: 256
+    accuratePlacement: 0
+    debug:
+      m_Flags: 0
+  m_SettingNames:
+  - Humanoid
diff --git a/ProjectSettings/NotificationsSettings.asset b/ProjectSettings/NotificationsSettings.asset
new file mode 100644
index 0000000..43e12f9
--- /dev/null
+++ b/ProjectSettings/NotificationsSettings.asset
@@ -0,0 +1,42 @@
+{
+    "MonoBehaviour": {
+        "m_Enabled": true,
+        "m_EditorHideFlags": 0,
+        "m_Name": "",
+        "m_EditorClassIdentifier": "",
+        "ToolbarIndex": 0,
+        "m_iOSNotificationSettingsValues": {
+            "m_Keys": [
+                "UnityNotificationRequestAuthorizationOnAppLaunch",
+                "UnityNotificationDefaultAuthorizationOptions",
+                "UnityAddRemoteNotificationCapability",
+                "UnityNotificationRequestAuthorizationForRemoteNotificationsOnAppLaunch",
+                "UnityRemoteNotificationForegroundPresentationOptions",
+                "UnityUseAPSReleaseEnvironment",
+                "UnityUseLocationNotificationTrigger"
+            ],
+            "m_Values": [
+                "True",
+                "7",
+                "False",
+                "False",
+                "-1",
+                "False",
+                "False"
+            ]
+        },
+        "m_AndroidNotificationSettingsValues": {
+            "m_Keys": [
+                "UnityNotificationAndroidRescheduleOnDeviceRestart",
+                "UnityNotificationAndroidUseCustomActivity",
+                "UnityNotificationAndroidCustomActivityString"
+            ],
+            "m_Values": [
+                "False",
+                "False",
+                "com.unity3d.player.UnityPlayerActivity"
+            ]
+        },
+        "DrawableResources": []
+    }
+}
\ No newline at end of file
diff --git a/ProjectSettings/PackageManagerSettings.asset b/ProjectSettings/PackageManagerSettings.asset
new file mode 100644
index 0000000..0d8fee5
--- /dev/null
+++ b/ProjectSettings/PackageManagerSettings.asset
@@ -0,0 +1,35 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &1
+MonoBehaviour:
+  m_ObjectHideFlags: 61
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 13964, guid: 0000000000000000e000000000000000, type: 0}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  m_EnablePreReleasePackages: 0
+  m_EnablePackageDependencies: 0
+  m_AdvancedSettingsExpanded: 1
+  m_ScopedRegistriesSettingsExpanded: 1
+  m_SeeAllPackageVersions: 0
+  oneTimeWarningShown: 0
+  m_Registries:
+  - m_Id: main
+    m_Name: 
+    m_Url: https://packages.unity.com
+    m_Scopes: []
+    m_IsDefault: 1
+    m_Capabilities: 7
+  m_UserSelectedRegistryName: 
+  m_UserAddingNewScopedRegistry: 0
+  m_RegistryInfoDraft:
+    m_Modified: 0
+    m_ErrorMessage: 
+    m_UserModificationsInstanceId: -852
+    m_OriginalInstanceId: -854
+  m_LoadAssets: 0
diff --git a/ProjectSettings/Physics2DSettings.asset b/ProjectSettings/Physics2DSettings.asset
new file mode 100644
index 0000000..47880b1
--- /dev/null
+++ b/ProjectSettings/Physics2DSettings.asset
@@ -0,0 +1,56 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!19 &1
+Physics2DSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 4
+  m_Gravity: {x: 0, y: -9.81}
+  m_DefaultMaterial: {fileID: 0}
+  m_VelocityIterations: 8
+  m_PositionIterations: 3
+  m_VelocityThreshold: 1
+  m_MaxLinearCorrection: 0.2
+  m_MaxAngularCorrection: 8
+  m_MaxTranslationSpeed: 100
+  m_MaxRotationSpeed: 360
+  m_BaumgarteScale: 0.2
+  m_BaumgarteTimeOfImpactScale: 0.75
+  m_TimeToSleep: 0.5
+  m_LinearSleepTolerance: 0.01
+  m_AngularSleepTolerance: 2
+  m_DefaultContactOffset: 0.01
+  m_JobOptions:
+    serializedVersion: 2
+    useMultithreading: 0
+    useConsistencySorting: 0
+    m_InterpolationPosesPerJob: 100
+    m_NewContactsPerJob: 30
+    m_CollideContactsPerJob: 100
+    m_ClearFlagsPerJob: 200
+    m_ClearBodyForcesPerJob: 200
+    m_SyncDiscreteFixturesPerJob: 50
+    m_SyncContinuousFixturesPerJob: 50
+    m_FindNearestContactsPerJob: 100
+    m_UpdateTriggerContactsPerJob: 100
+    m_IslandSolverCostThreshold: 100
+    m_IslandSolverBodyCostScale: 1
+    m_IslandSolverContactCostScale: 10
+    m_IslandSolverJointCostScale: 10
+    m_IslandSolverBodiesPerJob: 50
+    m_IslandSolverContactsPerJob: 50
+  m_AutoSimulation: 1
+  m_QueriesHitTriggers: 1
+  m_QueriesStartInColliders: 1
+  m_CallbacksOnDisable: 1
+  m_ReuseCollisionCallbacks: 1
+  m_AutoSyncTransforms: 0
+  m_AlwaysShowColliders: 0
+  m_ShowColliderSleep: 1
+  m_ShowColliderContacts: 0
+  m_ShowColliderAABB: 0
+  m_ContactArrowScale: 0.2
+  m_ColliderAwakeColor: {r: 0.5686275, g: 0.95686275, b: 0.54509807, a: 0.7529412}
+  m_ColliderAsleepColor: {r: 0.5686275, g: 0.95686275, b: 0.54509807, a: 0.36078432}
+  m_ColliderContactColor: {r: 1, g: 0, b: 1, a: 0.6862745}
+  m_ColliderAABBColor: {r: 1, g: 1, b: 0, a: 0.2509804}
+  m_LayerCollisionMatrix: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
diff --git a/ProjectSettings/PresetManager.asset b/ProjectSettings/PresetManager.asset
new file mode 100644
index 0000000..67a94da
--- /dev/null
+++ b/ProjectSettings/PresetManager.asset
@@ -0,0 +1,7 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!1386491679 &1
+PresetManager:
+  m_ObjectHideFlags: 0
+  serializedVersion: 2
+  m_DefaultPresets: {}
diff --git a/ProjectSettings/ProjectSettings.asset b/ProjectSettings/ProjectSettings.asset
new file mode 100644
index 0000000..d97cc54
--- /dev/null
+++ b/ProjectSettings/ProjectSettings.asset
@@ -0,0 +1,802 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!129 &1
+PlayerSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 23
+  productGUID: a7f774c8b9893fa408ba91e1a9d08a71
+  AndroidProfiler: 0
+  AndroidFilterTouchesWhenObscured: 0
+  AndroidEnableSustainedPerformanceMode: 0
+  defaultScreenOrientation: 4
+  targetDevice: 2
+  useOnDemandResources: 0
+  accelerometerFrequency: 60
+  companyName: DefaultCompany
+  productName: First
+  defaultCursor: {fileID: 0}
+  cursorHotspot: {x: 0, y: 0}
+  m_SplashScreenBackgroundColor: {r: 0.13725491, g: 0.12156863, b: 0.1254902, a: 1}
+  m_ShowUnitySplashScreen: 1
+  m_ShowUnitySplashLogo: 1
+  m_SplashScreenOverlayOpacity: 1
+  m_SplashScreenAnimation: 1
+  m_SplashScreenLogoStyle: 1
+  m_SplashScreenDrawMode: 0
+  m_SplashScreenBackgroundAnimationZoom: 1
+  m_SplashScreenLogoAnimationZoom: 1
+  m_SplashScreenBackgroundLandscapeAspect: 1
+  m_SplashScreenBackgroundPortraitAspect: 1
+  m_SplashScreenBackgroundLandscapeUvs:
+    serializedVersion: 2
+    x: 0
+    y: 0
+    width: 1
+    height: 1
+  m_SplashScreenBackgroundPortraitUvs:
+    serializedVersion: 2
+    x: 0
+    y: 0
+    width: 1
+    height: 1
+  m_SplashScreenLogos: []
+  m_VirtualRealitySplashScreen: {fileID: 0}
+  m_HolographicTrackingLossScreen: {fileID: 0}
+  defaultScreenWidth: 1024
+  defaultScreenHeight: 768
+  defaultScreenWidthWeb: 960
+  defaultScreenHeightWeb: 600
+  m_StereoRenderingPath: 0
+  m_ActiveColorSpace: 1
+  m_MTRendering: 1
+  mipStripping: 0
+  numberOfMipsStripped: 0
+  m_StackTraceTypes: 010000000100000001000000000000000100000001000000
+  iosShowActivityIndicatorOnLoading: -1
+  androidShowActivityIndicatorOnLoading: -1
+  iosUseCustomAppBackgroundBehavior: 0
+  iosAllowHTTPDownload: 1
+  allowedAutorotateToPortrait: 1
+  allowedAutorotateToPortraitUpsideDown: 1
+  allowedAutorotateToLandscapeRight: 1
+  allowedAutorotateToLandscapeLeft: 1
+  useOSAutorotation: 1
+  use32BitDisplayBuffer: 1
+  preserveFramebufferAlpha: 0
+  disableDepthAndStencilBuffers: 0
+  androidStartInFullscreen: 1
+  androidRenderOutsideSafeArea: 1
+  androidUseSwappy: 1
+  androidBlitType: 2
+  androidResizableWindow: 0
+  androidDefaultWindowWidth: 1920
+  androidDefaultWindowHeight: 1080
+  androidMinimumWindowWidth: 400
+  androidMinimumWindowHeight: 300
+  androidFullscreenMode: 1
+  defaultIsNativeResolution: 1
+  macRetinaSupport: 1
+  runInBackground: 1
+  captureSingleScreen: 0
+  muteOtherAudioSources: 0
+  Prepare IOS For Recording: 0
+  Force IOS Speakers When Recording: 0
+  deferSystemGesturesMode: 0
+  hideHomeButton: 0
+  submitAnalytics: 1
+  usePlayerLog: 1
+  bakeCollisionMeshes: 0
+  forceSingleInstance: 0
+  useFlipModelSwapchain: 1
+  resizableWindow: 0
+  useMacAppStoreValidation: 0
+  macAppStoreCategory: public.app-category.games
+  gpuSkinning: 1
+  xboxPIXTextureCapture: 0
+  xboxEnableAvatar: 0
+  xboxEnableKinect: 0
+  xboxEnableKinectAutoTracking: 0
+  xboxEnableFitness: 0
+  visibleInBackground: 1
+  allowFullscreenSwitch: 1
+  fullscreenMode: 1
+  xboxSpeechDB: 0
+  xboxEnableHeadOrientation: 0
+  xboxEnableGuest: 0
+  xboxEnablePIXSampling: 0
+  metalFramebufferOnly: 0
+  xboxOneResolution: 0
+  xboxOneSResolution: 0
+  xboxOneXResolution: 3
+  xboxOneMonoLoggingLevel: 0
+  xboxOneLoggingLevel: 1
+  xboxOneDisableEsram: 0
+  xboxOneEnableTypeOptimization: 0
+  xboxOnePresentImmediateThreshold: 0
+  switchQueueCommandMemory: 0
+  switchQueueControlMemory: 16384
+  switchQueueComputeMemory: 262144
+  switchNVNShaderPoolsGranularity: 33554432
+  switchNVNDefaultPoolsGranularity: 16777216
+  switchNVNOtherPoolsGranularity: 16777216
+  switchNVNMaxPublicTextureIDCount: 0
+  switchNVNMaxPublicSamplerIDCount: 0
+  stadiaPresentMode: 0
+  stadiaTargetFramerate: 0
+  vulkanNumSwapchainBuffers: 3
+  vulkanEnableSetSRGBWrite: 0
+  vulkanEnablePreTransform: 0
+  vulkanEnableLateAcquireNextImage: 0
+  vulkanEnableCommandBufferRecycling: 1
+  m_SupportedAspectRatios:
+    4:3: 1
+    5:4: 1
+    16:10: 1
+    16:9: 1
+    Others: 1
+  bundleVersion: 1.0.2
+  preloadedAssets: []
+  metroInputSource: 0
+  wsaTransparentSwapchain: 0
+  m_HolographicPauseOnTrackingLoss: 1
+  xboxOneDisableKinectGpuReservation: 1
+  xboxOneEnable7thCore: 1
+  vrSettings:
+    enable360StereoCapture: 0
+  isWsaHolographicRemotingEnabled: 0
+  enableFrameTimingStats: 0
+  enableOpenGLProfilerGPURecorders: 1
+  useHDRDisplay: 0
+  D3DHDRBitDepth: 0
+  m_ColorGamuts: 00000000
+  targetPixelDensity: 30
+  resolutionScalingMode: 0
+  resetResolutionOnWindowResize: 0
+  androidSupportedAspectRatio: 1
+  androidMaxAspectRatio: 2.1
+  applicationIdentifier:
+    Android: com.DefaultCompany.First
+  buildNumber:
+    Standalone: 0
+    iPhone: 0
+    tvOS: 0
+  overrideDefaultApplicationIdentifier: 0
+  AndroidBundleVersionCode: 1
+  AndroidMinSdkVersion: 22
+  AndroidTargetSdkVersion: 0
+  AndroidPreferredInstallLocation: 1
+  aotOptions: 
+  stripEngineCode: 1
+  iPhoneStrippingLevel: 0
+  iPhoneScriptCallOptimization: 0
+  ForceInternetPermission: 0
+  ForceSDCardPermission: 0
+  CreateWallpaper: 0
+  APKExpansionFiles: 0
+  keepLoadedShadersAlive: 0
+  StripUnusedMeshComponents: 1
+  VertexChannelCompressionMask: 4054
+  iPhoneSdkVersion: 988
+  iOSTargetOSVersionString: 11.0
+  tvOSSdkVersion: 0
+  tvOSRequireExtendedGameController: 0
+  tvOSTargetOSVersionString: 11.0
+  uIPrerenderedIcon: 0
+  uIRequiresPersistentWiFi: 0
+  uIRequiresFullScreen: 1
+  uIStatusBarHidden: 1
+  uIExitOnSuspend: 0
+  uIStatusBarStyle: 0
+  appleTVSplashScreen: {fileID: 0}
+  appleTVSplashScreen2x: {fileID: 0}
+  tvOSSmallIconLayers: []
+  tvOSSmallIconLayers2x: []
+  tvOSLargeIconLayers: []
+  tvOSLargeIconLayers2x: []
+  tvOSTopShelfImageLayers: []
+  tvOSTopShelfImageLayers2x: []
+  tvOSTopShelfImageWideLayers: []
+  tvOSTopShelfImageWideLayers2x: []
+  iOSLaunchScreenType: 0
+  iOSLaunchScreenPortrait: {fileID: 0}
+  iOSLaunchScreenLandscape: {fileID: 0}
+  iOSLaunchScreenBackgroundColor:
+    serializedVersion: 2
+    rgba: 0
+  iOSLaunchScreenFillPct: 100
+  iOSLaunchScreenSize: 100
+  iOSLaunchScreenCustomXibPath: 
+  iOSLaunchScreeniPadType: 0
+  iOSLaunchScreeniPadImage: {fileID: 0}
+  iOSLaunchScreeniPadBackgroundColor:
+    serializedVersion: 2
+    rgba: 0
+  iOSLaunchScreeniPadFillPct: 100
+  iOSLaunchScreeniPadSize: 100
+  iOSLaunchScreeniPadCustomXibPath: 
+  iOSLaunchScreenCustomStoryboardPath: 
+  iOSLaunchScreeniPadCustomStoryboardPath: 
+  iOSDeviceRequirements: []
+  iOSURLSchemes: []
+  macOSURLSchemes: []
+  iOSBackgroundModes: 0
+  iOSMetalForceHardShadows: 0
+  metalEditorSupport: 1
+  metalAPIValidation: 1
+  iOSRenderExtraFrameOnPause: 0
+  iosCopyPluginsCodeInsteadOfSymlink: 0
+  appleDeveloperTeamID: 
+  iOSManualSigningProvisioningProfileID: 
+  tvOSManualSigningProvisioningProfileID: 
+  iOSManualSigningProvisioningProfileType: 0
+  tvOSManualSigningProvisioningProfileType: 0
+  appleEnableAutomaticSigning: 0
+  iOSRequireARKit: 0
+  iOSAutomaticallyDetectAndAddCapabilities: 1
+  appleEnableProMotion: 0
+  shaderPrecisionModel: 0
+  clonedFromGUID: 3df0038eaa8740a438c96d5b01ba661e
+  templatePackageId: com.unity.template.mobile3d@2.0.1
+  templateDefaultScene: Assets/Scenes/SampleScene.unity
+  useCustomMainManifest: 0
+  useCustomLauncherManifest: 0
+  useCustomMainGradleTemplate: 0
+  useCustomLauncherGradleManifest: 0
+  useCustomBaseGradleTemplate: 0
+  useCustomGradlePropertiesTemplate: 0
+  useCustomProguardFile: 0
+  AndroidTargetArchitectures: 1
+  AndroidTargetDevices: 0
+  AndroidSplashScreenScale: 0
+  androidSplashScreen: {fileID: 0}
+  AndroidKeystoreName: 
+  AndroidKeyaliasName: 
+  AndroidBuildApkPerCpuArchitecture: 0
+  AndroidTVCompatibility: 0
+  AndroidIsGame: 1
+  AndroidEnableTango: 0
+  androidEnableBanner: 1
+  androidUseLowAccuracyLocation: 0
+  androidUseCustomKeystore: 0
+  m_AndroidBanners:
+  - width: 320
+    height: 180
+    banner: {fileID: 0}
+  androidGamepadSupportLevel: 0
+  chromeosInputEmulation: 1
+  AndroidMinifyWithR8: 0
+  AndroidMinifyRelease: 0
+  AndroidMinifyDebug: 0
+  AndroidValidateAppBundleSize: 1
+  AndroidAppBundleSizeToValidate: 150
+  m_BuildTargetIcons: []
+  m_BuildTargetPlatformIcons:
+  - m_BuildTarget: Android
+    m_Icons:
+    - m_Textures: []
+      m_Width: 432
+      m_Height: 432
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 324
+      m_Height: 324
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 216
+      m_Height: 216
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 162
+      m_Height: 162
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 108
+      m_Height: 108
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 81
+      m_Height: 81
+      m_Kind: 2
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 192
+      m_Height: 192
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 144
+      m_Height: 144
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 96
+      m_Height: 96
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 72
+      m_Height: 72
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 48
+      m_Height: 48
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 36
+      m_Height: 36
+      m_Kind: 1
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 192
+      m_Height: 192
+      m_Kind: 0
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 144
+      m_Height: 144
+      m_Kind: 0
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 96
+      m_Height: 96
+      m_Kind: 0
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 72
+      m_Height: 72
+      m_Kind: 0
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 48
+      m_Height: 48
+      m_Kind: 0
+      m_SubKind: 
+    - m_Textures: []
+      m_Width: 36
+      m_Height: 36
+      m_Kind: 0
+      m_SubKind: 
+  m_BuildTargetBatching:
+  - m_BuildTarget: Standalone
+    m_StaticBatching: 1
+    m_DynamicBatching: 0
+  - m_BuildTarget: tvOS
+    m_StaticBatching: 1
+    m_DynamicBatching: 0
+  - m_BuildTarget: Android
+    m_StaticBatching: 1
+    m_DynamicBatching: 0
+  - m_BuildTarget: iPhone
+    m_StaticBatching: 1
+    m_DynamicBatching: 0
+  - m_BuildTarget: WebGL
+    m_StaticBatching: 0
+    m_DynamicBatching: 0
+  m_BuildTargetShaderSettings: []
+  m_BuildTargetGraphicsJobs:
+  - m_BuildTarget: MacStandaloneSupport
+    m_GraphicsJobs: 0
+  - m_BuildTarget: Switch
+    m_GraphicsJobs: 1
+  - m_BuildTarget: MetroSupport
+    m_GraphicsJobs: 1
+  - m_BuildTarget: AppleTVSupport
+    m_GraphicsJobs: 0
+  - m_BuildTarget: BJMSupport
+    m_GraphicsJobs: 1
+  - m_BuildTarget: LinuxStandaloneSupport
+    m_GraphicsJobs: 1
+  - m_BuildTarget: PS4Player
+    m_GraphicsJobs: 1
+  - m_BuildTarget: iOSSupport
+    m_GraphicsJobs: 0
+  - m_BuildTarget: WindowsStandaloneSupport
+    m_GraphicsJobs: 1
+  - m_BuildTarget: XboxOnePlayer
+    m_GraphicsJobs: 1
+  - m_BuildTarget: LuminSupport
+    m_GraphicsJobs: 0
+  - m_BuildTarget: AndroidPlayer
+    m_GraphicsJobs: 0
+  - m_BuildTarget: WebGLSupport
+    m_GraphicsJobs: 0
+  m_BuildTargetGraphicsJobMode:
+  - m_BuildTarget: PS4Player
+    m_GraphicsJobMode: 0
+  - m_BuildTarget: XboxOnePlayer
+    m_GraphicsJobMode: 0
+  m_BuildTargetGraphicsAPIs:
+  - m_BuildTarget: AndroidPlayer
+    m_APIs: 150000000b000000
+    m_Automatic: 1
+  - m_BuildTarget: iOSSupport
+    m_APIs: 10000000
+    m_Automatic: 1
+  - m_BuildTarget: AppleTVSupport
+    m_APIs: 10000000
+    m_Automatic: 1
+  - m_BuildTarget: WebGLSupport
+    m_APIs: 0b000000
+    m_Automatic: 1
+  m_BuildTargetVRSettings:
+  - m_BuildTarget: Standalone
+    m_Enabled: 0
+    m_Devices:
+    - Oculus
+    - OpenVR
+  m_DefaultShaderChunkSizeInMB: 16
+  m_DefaultShaderChunkCount: 0
+  openGLRequireES31: 0
+  openGLRequireES31AEP: 0
+  openGLRequireES32: 0
+  m_TemplateCustomTags: {}
+  mobileMTRendering:
+    Android: 1
+    iPhone: 1
+    tvOS: 1
+  m_BuildTargetGroupLightmapEncodingQuality:
+  - m_BuildTarget: Android
+    m_EncodingQuality: 1
+  - m_BuildTarget: iPhone
+    m_EncodingQuality: 1
+  - m_BuildTarget: tvOS
+    m_EncodingQuality: 1
+  m_BuildTargetGroupLightmapSettings: []
+  m_BuildTargetNormalMapEncoding: []
+  m_BuildTargetDefaultTextureCompressionFormat:
+  - m_BuildTarget: Android
+    m_Format: 3
+  playModeTestRunnerEnabled: 0
+  runPlayModeTestAsEditModeTest: 0
+  actionOnDotNetUnhandledException: 1
+  enableInternalProfiler: 0
+  logObjCUncaughtExceptions: 1
+  enableCrashReportAPI: 0
+  cameraUsageDescription: 
+  locationUsageDescription: 
+  microphoneUsageDescription: 
+  bluetoothUsageDescription: 
+  switchNMETAOverride: 
+  switchNetLibKey: 
+  switchSocketMemoryPoolSize: 6144
+  switchSocketAllocatorPoolSize: 128
+  switchSocketConcurrencyLimit: 14
+  switchScreenResolutionBehavior: 2
+  switchUseCPUProfiler: 0
+  switchUseGOLDLinker: 0
+  switchLTOSetting: 0
+  switchApplicationID: 0x01004b9000490000
+  switchNSODependencies: 
+  switchTitleNames_0: 
+  switchTitleNames_1: 
+  switchTitleNames_2: 
+  switchTitleNames_3: 
+  switchTitleNames_4: 
+  switchTitleNames_5: 
+  switchTitleNames_6: 
+  switchTitleNames_7: 
+  switchTitleNames_8: 
+  switchTitleNames_9: 
+  switchTitleNames_10: 
+  switchTitleNames_11: 
+  switchTitleNames_12: 
+  switchTitleNames_13: 
+  switchTitleNames_14: 
+  switchTitleNames_15: 
+  switchPublisherNames_0: 
+  switchPublisherNames_1: 
+  switchPublisherNames_2: 
+  switchPublisherNames_3: 
+  switchPublisherNames_4: 
+  switchPublisherNames_5: 
+  switchPublisherNames_6: 
+  switchPublisherNames_7: 
+  switchPublisherNames_8: 
+  switchPublisherNames_9: 
+  switchPublisherNames_10: 
+  switchPublisherNames_11: 
+  switchPublisherNames_12: 
+  switchPublisherNames_13: 
+  switchPublisherNames_14: 
+  switchPublisherNames_15: 
+  switchIcons_0: {fileID: 0}
+  switchIcons_1: {fileID: 0}
+  switchIcons_2: {fileID: 0}
+  switchIcons_3: {fileID: 0}
+  switchIcons_4: {fileID: 0}
+  switchIcons_5: {fileID: 0}
+  switchIcons_6: {fileID: 0}
+  switchIcons_7: {fileID: 0}
+  switchIcons_8: {fileID: 0}
+  switchIcons_9: {fileID: 0}
+  switchIcons_10: {fileID: 0}
+  switchIcons_11: {fileID: 0}
+  switchIcons_12: {fileID: 0}
+  switchIcons_13: {fileID: 0}
+  switchIcons_14: {fileID: 0}
+  switchIcons_15: {fileID: 0}
+  switchSmallIcons_0: {fileID: 0}
+  switchSmallIcons_1: {fileID: 0}
+  switchSmallIcons_2: {fileID: 0}
+  switchSmallIcons_3: {fileID: 0}
+  switchSmallIcons_4: {fileID: 0}
+  switchSmallIcons_5: {fileID: 0}
+  switchSmallIcons_6: {fileID: 0}
+  switchSmallIcons_7: {fileID: 0}
+  switchSmallIcons_8: {fileID: 0}
+  switchSmallIcons_9: {fileID: 0}
+  switchSmallIcons_10: {fileID: 0}
+  switchSmallIcons_11: {fileID: 0}
+  switchSmallIcons_12: {fileID: 0}
+  switchSmallIcons_13: {fileID: 0}
+  switchSmallIcons_14: {fileID: 0}
+  switchSmallIcons_15: {fileID: 0}
+  switchManualHTML: 
+  switchAccessibleURLs: 
+  switchLegalInformation: 
+  switchMainThreadStackSize: 1048576
+  switchPresenceGroupId: 
+  switchLogoHandling: 0
+  switchReleaseVersion: 0
+  switchDisplayVersion: 1.0.0
+  switchStartupUserAccount: 0
+  switchTouchScreenUsage: 0
+  switchSupportedLanguagesMask: 0
+  switchLogoType: 0
+  switchApplicationErrorCodeCategory: 
+  switchUserAccountSaveDataSize: 0
+  switchUserAccountSaveDataJournalSize: 0
+  switchApplicationAttribute: 0
+  switchCardSpecSize: -1
+  switchCardSpecClock: -1
+  switchRatingsMask: 0
+  switchRatingsInt_0: 0
+  switchRatingsInt_1: 0
+  switchRatingsInt_2: 0
+  switchRatingsInt_3: 0
+  switchRatingsInt_4: 0
+  switchRatingsInt_5: 0
+  switchRatingsInt_6: 0
+  switchRatingsInt_7: 0
+  switchRatingsInt_8: 0
+  switchRatingsInt_9: 0
+  switchRatingsInt_10: 0
+  switchRatingsInt_11: 0
+  switchRatingsInt_12: 0
+  switchLocalCommunicationIds_0: 
+  switchLocalCommunicationIds_1: 
+  switchLocalCommunicationIds_2: 
+  switchLocalCommunicationIds_3: 
+  switchLocalCommunicationIds_4: 
+  switchLocalCommunicationIds_5: 
+  switchLocalCommunicationIds_6: 
+  switchLocalCommunicationIds_7: 
+  switchParentalControl: 0
+  switchAllowsScreenshot: 1
+  switchAllowsVideoCapturing: 1
+  switchAllowsRuntimeAddOnContentInstall: 0
+  switchDataLossConfirmation: 0
+  switchUserAccountLockEnabled: 0
+  switchSystemResourceMemory: 16777216
+  switchSupportedNpadStyles: 22
+  switchNativeFsCacheSize: 32
+  switchIsHoldTypeHorizontal: 0
+  switchSupportedNpadCount: 8
+  switchSocketConfigEnabled: 0
+  switchTcpInitialSendBufferSize: 32
+  switchTcpInitialReceiveBufferSize: 64
+  switchTcpAutoSendBufferSizeMax: 256
+  switchTcpAutoReceiveBufferSizeMax: 256
+  switchUdpSendBufferSize: 9
+  switchUdpReceiveBufferSize: 42
+  switchSocketBufferEfficiency: 4
+  switchSocketInitializeEnabled: 1
+  switchNetworkInterfaceManagerInitializeEnabled: 1
+  switchPlayerConnectionEnabled: 1
+  switchUseNewStyleFilepaths: 0
+  switchUseMicroSleepForYield: 1
+  switchEnableRamDiskSupport: 0
+  switchMicroSleepForYieldTime: 25
+  switchRamDiskSpaceSize: 12
+  ps4NPAgeRating: 12
+  ps4NPTitleSecret: 
+  ps4NPTrophyPackPath: 
+  ps4ParentalLevel: 11
+  ps4ContentID: ED1633-NPXX51362_00-0000000000000000
+  ps4Category: 0
+  ps4MasterVersion: 01.00
+  ps4AppVersion: 01.00
+  ps4AppType: 0
+  ps4ParamSfxPath: 
+  ps4VideoOutPixelFormat: 0
+  ps4VideoOutInitialWidth: 1920
+  ps4VideoOutBaseModeInitialWidth: 1920
+  ps4VideoOutReprojectionRate: 60
+  ps4PronunciationXMLPath: 
+  ps4PronunciationSIGPath: 
+  ps4BackgroundImagePath: 
+  ps4StartupImagePath: 
+  ps4StartupImagesFolder: 
+  ps4IconImagesFolder: 
+  ps4SaveDataImagePath: 
+  ps4SdkOverride: 
+  ps4BGMPath: 
+  ps4ShareFilePath: 
+  ps4ShareOverlayImagePath: 
+  ps4PrivacyGuardImagePath: 
+  ps4ExtraSceSysFile: 
+  ps4NPtitleDatPath: 
+  ps4RemotePlayKeyAssignment: -1
+  ps4RemotePlayKeyMappingDir: 
+  ps4PlayTogetherPlayerCount: 0
+  ps4EnterButtonAssignment: 1
+  ps4ApplicationParam1: 0
+  ps4ApplicationParam2: 0
+  ps4ApplicationParam3: 0
+  ps4ApplicationParam4: 0
+  ps4DownloadDataSize: 0
+  ps4GarlicHeapSize: 2048
+  ps4ProGarlicHeapSize: 2560
+  playerPrefsMaxSize: 32768
+  ps4Passcode: frAQBc8Wsa1xVPfvJcrgRYwTiizs2trQ
+  ps4pnSessions: 1
+  ps4pnPresence: 1
+  ps4pnFriends: 1
+  ps4pnGameCustomData: 1
+  playerPrefsSupport: 0
+  enableApplicationExit: 0
+  resetTempFolder: 1
+  restrictedAudioUsageRights: 0
+  ps4UseResolutionFallback: 0
+  ps4ReprojectionSupport: 0
+  ps4UseAudio3dBackend: 0
+  ps4UseLowGarlicFragmentationMode: 1
+  ps4SocialScreenEnabled: 0
+  ps4ScriptOptimizationLevel: 0
+  ps4Audio3dVirtualSpeakerCount: 14
+  ps4attribCpuUsage: 0
+  ps4PatchPkgPath: 
+  ps4PatchLatestPkgPath: 
+  ps4PatchChangeinfoPath: 
+  ps4PatchDayOne: 0
+  ps4attribUserManagement: 0
+  ps4attribMoveSupport: 0
+  ps4attrib3DSupport: 0
+  ps4attribShareSupport: 0
+  ps4attribExclusiveVR: 0
+  ps4disableAutoHideSplash: 0
+  ps4videoRecordingFeaturesUsed: 0
+  ps4contentSearchFeaturesUsed: 0
+  ps4CompatibilityPS5: 0
+  ps4AllowPS5Detection: 0
+  ps4GPU800MHz: 1
+  ps4attribEyeToEyeDistanceSettingVR: 0
+  ps4IncludedModules: []
+  ps4attribVROutputEnabled: 0
+  monoEnv: 
+  splashScreenBackgroundSourceLandscape: {fileID: 0}
+  splashScreenBackgroundSourcePortrait: {fileID: 0}
+  blurSplashScreenBackground: 1
+  spritePackerPolicy: 
+  webGLMemorySize: 16
+  webGLExceptionSupport: 1
+  webGLNameFilesAsHashes: 0
+  webGLDataCaching: 1
+  webGLDebugSymbols: 0
+  webGLEmscriptenArgs: 
+  webGLModulesDirectory: 
+  webGLTemplate: APPLICATION:Default
+  webGLAnalyzeBuildSize: 0
+  webGLUseEmbeddedResources: 0
+  webGLCompressionFormat: 1
+  webGLWasmArithmeticExceptions: 0
+  webGLLinkerTarget: 1
+  webGLThreadsSupport: 0
+  webGLDecompressionFallback: 0
+  scriptingDefineSymbols: {}
+  additionalCompilerArguments: {}
+  platformArchitecture: {}
+  scriptingBackend: {}
+  il2cppCompilerConfiguration: {}
+  managedStrippingLevel: {}
+  incrementalIl2cppBuild: {}
+  suppressCommonWarnings: 1
+  allowUnsafeCode: 0
+  useDeterministicCompilation: 1
+  enableRoslynAnalyzers: 1
+  additionalIl2CppArgs: 
+  scriptingRuntimeVersion: 1
+  gcIncremental: 1
+  assemblyVersionValidation: 1
+  gcWBarrierValidation: 0
+  apiCompatibilityLevelPerPlatform: {}
+  m_RenderingPath: 1
+  m_MobileRenderingPath: 1
+  metroPackageName: Template_3D
+  metroPackageVersion: 
+  metroCertificatePath: 
+  metroCertificatePassword: 
+  metroCertificateSubject: 
+  metroCertificateIssuer: 
+  metroCertificateNotAfter: 0000000000000000
+  metroApplicationDescription: Template_3D
+  wsaImages: {}
+  metroTileShortName: 
+  metroTileShowName: 0
+  metroMediumTileShowName: 0
+  metroLargeTileShowName: 0
+  metroWideTileShowName: 0
+  metroSupportStreamingInstall: 0
+  metroLastRequiredScene: 0
+  metroDefaultTileSize: 1
+  metroTileForegroundText: 2
+  metroTileBackgroundColor: {r: 0.13333334, g: 0.17254902, b: 0.21568628, a: 0}
+  metroSplashScreenBackgroundColor: {r: 0.12941177, g: 0.17254902, b: 0.21568628,
+    a: 1}
+  metroSplashScreenUseBackgroundColor: 0
+  platformCapabilities: {}
+  metroTargetDeviceFamilies: {}
+  metroFTAName: 
+  metroFTAFileTypes: []
+  metroProtocolName: 
+  vcxProjDefaultLanguage: 
+  XboxOneProductId: 
+  XboxOneUpdateKey: 
+  XboxOneSandboxId: 
+  XboxOneContentId: 
+  XboxOneTitleId: 
+  XboxOneSCId: 
+  XboxOneGameOsOverridePath: 
+  XboxOnePackagingOverridePath: 
+  XboxOneAppManifestOverridePath: 
+  XboxOneVersion: 1.0.0.0
+  XboxOnePackageEncryption: 0
+  XboxOnePackageUpdateGranularity: 2
+  XboxOneDescription: 
+  XboxOneLanguage:
+  - enus
+  XboxOneCapability: []
+  XboxOneGameRating: {}
+  XboxOneIsContentPackage: 0
+  XboxOneEnhancedXboxCompatibilityMode: 0
+  XboxOneEnableGPUVariability: 1
+  XboxOneSockets: {}
+  XboxOneSplashScreen: {fileID: 0}
+  XboxOneAllowedProductIds: []
+  XboxOnePersistentLocalStorageSize: 0
+  XboxOneXTitleMemory: 8
+  XboxOneOverrideIdentityName: 
+  XboxOneOverrideIdentityPublisher: 
+  vrEditorSettings: {}
+  cloudServicesEnabled:
+    UNet: 1
+  luminIcon:
+    m_Name: 
+    m_ModelFolderPath: 
+    m_PortalFolderPath: 
+  luminCert:
+    m_CertPath: 
+    m_SignPackage: 1
+  luminIsChannelApp: 0
+  luminVersion:
+    m_VersionCode: 1
+    m_VersionName: 
+  apiCompatibilityLevel: 6
+  activeInputHandler: 2
+  cloudProjectId: 4639e188-566b-484e-9acc-e702f17b235f
+  framebufferDepthMemorylessMode: 0
+  qualitySettingsNames: []
+  projectName: 
+  organizationId: 
+  cloudEnabled: 0
+  legacyClampBlendShapeWeights: 0
+  playerDataPath: 
+  forceSRGBBlit: 1
+  virtualTexturingSupportEnabled: 0
diff --git a/ProjectSettings/ProjectVersion.txt b/ProjectSettings/ProjectVersion.txt
new file mode 100644
index 0000000..b868996
--- /dev/null
+++ b/ProjectSettings/ProjectVersion.txt
@@ -0,0 +1,2 @@
+m_EditorVersion: 2021.3.12f1
+m_EditorVersionWithRevision: 2021.3.12f1 (8af3c3e441b1)
diff --git a/ProjectSettings/QualitySettings.asset b/ProjectSettings/QualitySettings.asset
new file mode 100644
index 0000000..0ceadb8
--- /dev/null
+++ b/ProjectSettings/QualitySettings.asset
@@ -0,0 +1,239 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!47 &1
+QualitySettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 5
+  m_CurrentQuality: 2
+  m_QualitySettings:
+  - serializedVersion: 2
+    name: Very Low
+    pixelLightCount: 0
+    shadows: 0
+    shadowResolution: 0
+    shadowProjection: 1
+    shadowCascades: 1
+    shadowDistance: 15
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 0
+    skinWeights: 1
+    textureQuality: 1
+    anisotropicTextures: 0
+    antiAliasing: 0
+    softParticles: 0
+    softVegetation: 0
+    realtimeReflectionProbes: 0
+    billboardsFaceCameraPosition: 0
+    vSyncCount: 0
+    lodBias: 0.3
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 4
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  - serializedVersion: 2
+    name: Low
+    pixelLightCount: 0
+    shadows: 0
+    shadowResolution: 0
+    shadowProjection: 1
+    shadowCascades: 1
+    shadowDistance: 20
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 0
+    skinWeights: 2
+    textureQuality: 0
+    anisotropicTextures: 0
+    antiAliasing: 0
+    softParticles: 0
+    softVegetation: 0
+    realtimeReflectionProbes: 0
+    billboardsFaceCameraPosition: 0
+    vSyncCount: 0
+    lodBias: 0.4
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 16
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  - serializedVersion: 2
+    name: Medium
+    pixelLightCount: 1
+    shadows: 1
+    shadowResolution: 0
+    shadowProjection: 1
+    shadowCascades: 1
+    shadowDistance: 20
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 0
+    skinWeights: 2
+    textureQuality: 0
+    anisotropicTextures: 1
+    antiAliasing: 0
+    softParticles: 0
+    softVegetation: 0
+    realtimeReflectionProbes: 0
+    billboardsFaceCameraPosition: 0
+    vSyncCount: 0
+    lodBias: 0.7
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 64
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  - serializedVersion: 2
+    name: High
+    pixelLightCount: 2
+    shadows: 2
+    shadowResolution: 1
+    shadowProjection: 1
+    shadowCascades: 2
+    shadowDistance: 40
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 1
+    skinWeights: 2
+    textureQuality: 0
+    anisotropicTextures: 1
+    antiAliasing: 0
+    softParticles: 0
+    softVegetation: 1
+    realtimeReflectionProbes: 1
+    billboardsFaceCameraPosition: 1
+    vSyncCount: 0
+    lodBias: 1
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 256
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  - serializedVersion: 2
+    name: Very High
+    pixelLightCount: 3
+    shadows: 2
+    shadowResolution: 2
+    shadowProjection: 1
+    shadowCascades: 2
+    shadowDistance: 70
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 1
+    skinWeights: 4
+    textureQuality: 0
+    anisotropicTextures: 1
+    antiAliasing: 2
+    softParticles: 1
+    softVegetation: 1
+    realtimeReflectionProbes: 1
+    billboardsFaceCameraPosition: 1
+    vSyncCount: 0
+    lodBias: 1.5
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 1024
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  - serializedVersion: 2
+    name: Ultra
+    pixelLightCount: 4
+    shadows: 2
+    shadowResolution: 2
+    shadowProjection: 1
+    shadowCascades: 4
+    shadowDistance: 150
+    shadowNearPlaneOffset: 3
+    shadowCascade2Split: 0.33333334
+    shadowCascade4Split: {x: 0.06666667, y: 0.2, z: 0.46666667}
+    shadowmaskMode: 1
+    skinWeights: 4
+    textureQuality: 0
+    anisotropicTextures: 1
+    antiAliasing: 4
+    softParticles: 1
+    softVegetation: 1
+    realtimeReflectionProbes: 1
+    billboardsFaceCameraPosition: 1
+    vSyncCount: 0
+    lodBias: 2
+    maximumLODLevel: 0
+    streamingMipmapsActive: 0
+    streamingMipmapsAddAllCameras: 1
+    streamingMipmapsMemoryBudget: 512
+    streamingMipmapsRenderersPerFrame: 512
+    streamingMipmapsMaxLevelReduction: 2
+    streamingMipmapsMaxFileIORequests: 1024
+    particleRaycastBudget: 4096
+    asyncUploadTimeSlice: 2
+    asyncUploadBufferSize: 16
+    asyncUploadPersistentBuffer: 1
+    resolutionScalingFixedDPIFactor: 1
+    customRenderPipeline: {fileID: 0}
+    excludedTargetPlatforms: []
+  m_PerPlatformDefaultQuality:
+    Android: 2
+    Lumin: 5
+    Nintendo 3DS: 5
+    Nintendo Switch: 5
+    PS4: 5
+    PSP2: 2
+    Server: 0
+    Stadia: 5
+    Standalone: 5
+    WebGL: 3
+    Windows Store Apps: 5
+    XboxOne: 5
+    iPhone: 2
+    tvOS: 2
diff --git a/ProjectSettings/SceneTemplateSettings.json b/ProjectSettings/SceneTemplateSettings.json
new file mode 100644
index 0000000..6f3e60f
--- /dev/null
+++ b/ProjectSettings/SceneTemplateSettings.json
@@ -0,0 +1,167 @@
+{
+    "templatePinStates": [],
+    "dependencyTypeInfos": [
+        {
+            "userAdded": false,
+            "type": "UnityEngine.AnimationClip",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEditor.Animations.AnimatorController",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.AnimatorOverrideController",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEditor.Audio.AudioMixerController",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.ComputeShader",
+            "ignore": true,
+            "defaultInstantiationMode": 1,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Cubemap",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.GameObject",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEditor.LightingDataAsset",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": false
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.LightingSettings",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Material",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEditor.MonoScript",
+            "ignore": true,
+            "defaultInstantiationMode": 1,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.PhysicMaterial",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.PhysicsMaterial2D",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Rendering.PostProcessing.PostProcessProfile",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Rendering.PostProcessing.PostProcessResources",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Rendering.VolumeProfile",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEditor.SceneAsset",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": false
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Shader",
+            "ignore": true,
+            "defaultInstantiationMode": 1,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.ShaderVariantCollection",
+            "ignore": true,
+            "defaultInstantiationMode": 1,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Texture",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Texture2D",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        },
+        {
+            "userAdded": false,
+            "type": "UnityEngine.Timeline.TimelineAsset",
+            "ignore": false,
+            "defaultInstantiationMode": 0,
+            "supportsModification": true
+        }
+    ],
+    "defaultDependencyTypeInfo": {
+        "userAdded": false,
+        "type": "<default_scene_template_dependencies>",
+        "ignore": false,
+        "defaultInstantiationMode": 1,
+        "supportsModification": true
+    },
+    "newSceneOverride": 0
+}
\ No newline at end of file
diff --git a/ProjectSettings/TagManager.asset b/ProjectSettings/TagManager.asset
new file mode 100644
index 0000000..1c92a78
--- /dev/null
+++ b/ProjectSettings/TagManager.asset
@@ -0,0 +1,43 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!78 &1
+TagManager:
+  serializedVersion: 2
+  tags: []
+  layers:
+  - Default
+  - TransparentFX
+  - Ignore Raycast
+  - 
+  - Water
+  - UI
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  - 
+  m_SortingLayers:
+  - name: Default
+    uniqueID: 0
+    locked: 0
diff --git a/ProjectSettings/TimeManager.asset b/ProjectSettings/TimeManager.asset
new file mode 100644
index 0000000..558a017
--- /dev/null
+++ b/ProjectSettings/TimeManager.asset
@@ -0,0 +1,9 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!5 &1
+TimeManager:
+  m_ObjectHideFlags: 0
+  Fixed Timestep: 0.02
+  Maximum Allowed Timestep: 0.33333334
+  m_TimeScale: 1
+  Maximum Particle Timestep: 0.03
diff --git a/ProjectSettings/TimelineSettings.asset b/ProjectSettings/TimelineSettings.asset
new file mode 100644
index 0000000..cfaebd7
--- /dev/null
+++ b/ProjectSettings/TimelineSettings.asset
@@ -0,0 +1,16 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!114 &1
+MonoBehaviour:
+  m_ObjectHideFlags: 61
+  m_CorrespondingSourceObject: {fileID: 0}
+  m_PrefabInstance: {fileID: 0}
+  m_PrefabAsset: {fileID: 0}
+  m_GameObject: {fileID: 0}
+  m_Enabled: 1
+  m_EditorHideFlags: 0
+  m_Script: {fileID: 11500000, guid: a287be6c49135cd4f9b2b8666c39d999, type: 3}
+  m_Name: 
+  m_EditorClassIdentifier: 
+  assetDefaultFramerate: 60
+  m_DefaultFrameRate: 60
diff --git a/ProjectSettings/UnityConnectSettings.asset b/ProjectSettings/UnityConnectSettings.asset
new file mode 100644
index 0000000..a88bee0
--- /dev/null
+++ b/ProjectSettings/UnityConnectSettings.asset
@@ -0,0 +1,36 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!310 &1
+UnityConnectSettings:
+  m_ObjectHideFlags: 0
+  serializedVersion: 1
+  m_Enabled: 0
+  m_TestMode: 0
+  m_EventOldUrl: https://api.uca.cloud.unity3d.com/v1/events
+  m_EventUrl: https://cdp.cloud.unity3d.com/v1/events
+  m_ConfigUrl: https://config.uca.cloud.unity3d.com
+  m_DashboardUrl: https://dashboard.unity3d.com
+  m_TestInitMode: 0
+  CrashReportingSettings:
+    m_EventUrl: https://perf-events.cloud.unity3d.com
+    m_Enabled: 0
+    m_LogBufferSize: 10
+    m_CaptureEditorExceptions: 1
+  UnityPurchasingSettings:
+    m_Enabled: 0
+    m_TestMode: 0
+  UnityAnalyticsSettings:
+    m_Enabled: 0
+    m_TestMode: 0
+    m_InitializeOnStartup: 1
+    m_PackageRequiringCoreStatsPresent: 0
+  UnityAdsSettings:
+    m_Enabled: 0
+    m_InitializeOnStartup: 1
+    m_TestMode: 0
+    m_IosGameId: 
+    m_AndroidGameId: 
+    m_GameIds: {}
+    m_GameId: 
+  PerformanceReportingSettings:
+    m_Enabled: 0
diff --git a/ProjectSettings/VFXManager.asset b/ProjectSettings/VFXManager.asset
new file mode 100644
index 0000000..3a95c98
--- /dev/null
+++ b/ProjectSettings/VFXManager.asset
@@ -0,0 +1,12 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!937362698 &1
+VFXManager:
+  m_ObjectHideFlags: 0
+  m_IndirectShader: {fileID: 0}
+  m_CopyBufferShader: {fileID: 0}
+  m_SortShader: {fileID: 0}
+  m_StripUpdateShader: {fileID: 0}
+  m_RenderPipeSettingsPath: 
+  m_FixedTimeStep: 0.016666668
+  m_MaxDeltaTime: 0.05
diff --git a/ProjectSettings/VersionControlSettings.asset b/ProjectSettings/VersionControlSettings.asset
new file mode 100644
index 0000000..dca2881
--- /dev/null
+++ b/ProjectSettings/VersionControlSettings.asset
@@ -0,0 +1,8 @@
+%YAML 1.1
+%TAG !u! tag:unity3d.com,2011:
+--- !u!890905787 &1
+VersionControlSettings:
+  m_ObjectHideFlags: 0
+  m_Mode: Visible Meta Files
+  m_CollabEditorSettings:
+    inProgressEnabled: 1
diff --git a/ProjectSettings/XRSettings.asset b/ProjectSettings/XRSettings.asset
new file mode 100644
index 0000000..482590c
--- /dev/null
+++ b/ProjectSettings/XRSettings.asset
@@ -0,0 +1,10 @@
+{
+    "m_SettingKeys": [
+        "VR Device Disabled",
+        "VR Device User Alert"
+    ],
+    "m_SettingValues": [
+        "False",
+        "False"
+    ]
+}
\ No newline at end of file
diff --git a/ProjectSettings/boot.config b/ProjectSettings/boot.config
new file mode 100644
index 0000000..e69de29
diff --git a/ignore.conf b/ignore.conf
new file mode 100644
index 0000000..2172f6f
--- /dev/null
+++ b/ignore.conf
@@ -0,0 +1,58 @@
+Library
+library
+Temp
+temp
+Obj
+obj
+Build
+build
+Builds
+builds
+UserSettings
+usersettings
+MemoryCaptures
+memorycaptures
+Logs
+logs
+/ignore.conf
+*.private
+*.private.meta
+^*.private.[0-9]+$
+^*.private.[0-9]+.meta$
+**/Assets/AssetStoreTools
+**/assets/assetstoretools
+/Assets/Plugins/PlasticSCM*
+/assets/plugins/PlasticSCM*
+.vs
+.gradle
+ExportedObj
+.consulo
+*.csproj
+*.unityproj
+*.sln
+*.suo
+*.tmp
+*.user
+*.userprefs
+*.pidb
+*.booproj
+*.svd
+*.pdb
+*.mdb
+*.opendb
+*.VC.db
+*.pidb.meta
+*.pdb.meta
+*.mdb.meta
+sysinfo.txt
+*.apk
+*.unitypackage
+.collabignore
+crashlytics-build.properties
+**/Assets/AddressableAssetsData/*/*.bin*
+**/assets/addressableassetsdata/*/*.bin*
+**/Assets/StreamingAssets/aa.meta
+**/assets/streamingassets/*/aa/*
+.DS_Store*
+Thumbs.db
+Desktop.ini
-- 
2.38.1.windows.1

